
// Модули
Перем Классификаторы;

Процедура ПодключитьМодули()
	
	Классификаторы = Модуль("Модуль_Классификаторы");
	
КонецПроцедуры

Процедура Инициализировать() Экспорт
	
	ПодключитьМодули();
	
КонецПроцедуры

//========================================================================
// Перечисления
//========================================================================

Функция ТипыДокументов() Экспорт
	
	Типы = Новый Структура(
		"Неформализованный,
		|
		|СФ,
		|
		|УОУРегламентСФ,
		|УОУОбщийРегламент,
		|
		|ИСФ,
		|КСФ,
		|ИКСФ,
		|
		|ТитулПродавцаТОРГ12,
		|ТитулПокупателяТОРГ12,
		|ТитулИсполнителяАкт,
		|ТитулЗаказчикаАкт,
		|
		|СоглашениеОбАннулировании,
		|
		|ТитулИсполнителяДПРР,
		|ТитулЗаказчикаДПРР,
		|ТитулПродавцаДПТ,
		|ТитулПокупателяДПТ,
		|ИсправленныйТитулИсполнителяДПРР,
		|ИсправленныйТитулПродавцаДПТ,
		|ТитулПродавцаУПД,
		|ТитулПокупателяУПД,
		|ИсправленныйТитулПродавцаУПД,
		|ТитулПродавцаУКД,
		|ТитулПокупателяУКД,
		|ИсправленныйТитулПродавцаУКД"
	);
	
	Типы.Неформализованный					= 0; // Untyped
	
	Типы.СФ									= 1; // Invoice
	
	Типы.УОУРегламентСФ						= 5; // ServiceInvoiceAmendmentRequest
	Типы.УОУОбщийРегламент					= 6; // ServiceAmendmentRequest
	
	Типы.ИСФ								= 9;  // InvoiceRevision
	Типы.КСФ								= 10; // InvoiceCorrection
	Типы.ИКСФ								= 11; // InvoiceCorrectionRevision
	
	Типы.ТитулПродавцаТОРГ12				= 12; // WaybillSeller
	Типы.ТитулПокупателяТОРГ12				= 13; // WaybillBuyer
	Типы.ТитулИсполнителяАкт				= 14; // ActOfWorkSeller
	Типы.ТитулЗаказчикаАкт					= 15; // ActOfWorkBuyer
	
	Типы.СоглашениеОбАннулировании			= 17; // RevocationOffer
	
	Типы.ТитулИсполнителяДПРР				= 18; // WorksTransferSeller
	Типы.ТитулЗаказчикаДПРР					= 19; // WorksTransferBuyer
	Типы.ТитулПродавцаДПТ					= 20; // GoodsTransferSeller
	Типы.ТитулПокупателяДПТ					= 21; // GoodsTransferBuyer
	Типы.ИсправленныйТитулИсполнителяДПРР	= 22; // WorksTransferRevisionSeller
	Типы.ИсправленныйТитулПродавцаДПТ		= 23; // GoodsTransferRevisionSeller
	Типы.ТитулПродавцаУПД					= 24; // GeneralTransferSeller
	Типы.ТитулПокупателяУПД					= 25; // GeneralTransferBuyer
	Типы.ИсправленныйТитулПродавцаУПД		= 26; // GeneralTransferRevisionSeller
	Типы.ТитулПродавцаУКД					= 27; // GeneralTransferCorrectionSeller
	Типы.ТитулПокупателяУКД					= 28; // GeneralTransferCorrectionBuyer
	Типы.ИсправленныйТитулПродавцаУКД		= 29; // GeneralTransferCorrectionRevisionSeller
	
	// TODO: Добавить все представления
	Представление = Новый Соответствие;
	Представление[Типы.Неформализованный]					= НСтр("ru = 'Неформализованный'");
	
	Представление[Типы.УОУРегламентСФ]						= НСтр("ru = 'Служебный: уведомление об уточнении (регламент ЭСФ)'");
	Представление[Типы.УОУОбщийРегламент]					= НСтр("ru = 'Служебный: уведомление об уточнении, отказ от подписи (общий регламент)'");
	Представление[Типы.СоглашениеОбАннулировании]			= НСтр("ru = 'Соглашение об аннулировании'");
	
	Представление[Типы.СФ]									= НСтр("ru = 'Счет-фактура'");
	Представление[Типы.ИСФ]									= НСтр("ru = 'Исправленный счет-фактура'");
	Представление[Типы.КСФ]									= НСтр("ru = 'Корректировочный счет-фактура'");
	Представление[Типы.ИКСФ]								= НСтр("ru = 'Исправленный корректировочный счет-фактура'");
	
	Представление[Типы.ТитулПродавцаТОРГ12]					= НСтр("ru = 'Товарная накладная'");
	Представление[Типы.ТитулИсполнителяАкт]					= НСтр("ru = 'Акт выполненных работ'");
	
	Представление[Типы.ТитулПродавцаУПД]					= НСтр("ru = 'Универсальный передаточный документ'");
	Представление[Типы.ИсправленныйТитулПродавцаУПД]		= НСтр("ru = 'Исправленный универсальный передаточный документ'");
	Представление[Типы.ТитулПродавцаУКД]					= НСтр("ru = 'Универсальный корректировочный документ'");
	Представление[Типы.ИсправленныйТитулПродавцаУКД]		= НСтр("ru = 'Исправленный универсальный корректировочный документ'");
	
	Представление[Типы.ТитулПродавцаДПТ]					= НСтр("ru = 'Документ о передаче товаров'");
	Представление[Типы.ИсправленныйТитулПродавцаДПТ]		= НСтр("ru = 'Исправленный документ о передаче товаров'");
	Представление[Типы.ТитулИсполнителяДПРР]				= НСтр("ru = 'Документ о передаче результатов работ'");
	Представление[Типы.ИсправленныйТитулИсполнителяДПРР]	= НСтр("ru = 'Исправленный документ о передаче результатов работ'");
	
	Типы = Новый_Перечисление(Типы, Представление);
	
	Возврат Типы;
	
КонецФункции

Функция ВидыНеформализованныхДокументов() Экспорт
	
	ВидыДокументов = Новый Структура(
		"СчетНаОплату,
		|АктОбУстановленномРасхождении"
	);
	
	ВидыДокументов.СчетНаОплату						= "Счет на оплату";
	ВидыДокументов.АктОбУстановленномРасхождении	= "Акт об установленном расхождении";
	
	Представление = Новый Соответствие;
	Представление[ВидыДокументов.СчетНаОплату]					= НСтр("ru = 'Счет на оплату'");
	Представление[ВидыДокументов.АктОбУстановленномРасхождении]	= НСтр("ru = 'Акт об установленном расхождении'");
	
	ВидыДокументов = Новый_Перечисление(ВидыДокументов, Представление);
	
	Возврат ВидыДокументов;
	
КонецФункции

Функция ВидыСодержимогоДокумента() Экспорт
	
	Виды = Новый Структура(
		"Товары, Работы, Корректировка"
	);
	
	Виды.Товары = 0;
	Виды.Работы = 1;
	Виды.Корректировка = 2;
	
	Виды = Новый_Перечисление(Виды);
	
	Возврат Виды;
	
КонецФункции

Функция ВидыУПД() Экспорт
	
	ВидыДокумента = Новый Структура(
		"СЧФ,
		|СЧФДОП,
		|ДОП"
	);
	
	ВидыДокумента.СЧФ		= 0;
	ВидыДокумента.СЧФДОП	= 1;
	ВидыДокумента.ДОП		= 2;
	
	Представление = Новый Соответствие;
	Представление[ВидыДокумента.СЧФ]	= "СЧФ";
	Представление[ВидыДокумента.СЧФДОП]	= "СЧФДОП";
	Представление[ВидыДокумента.ДОП]	= "ДОП";
	
	ВидыДокумента = Новый_Перечисление(ВидыДокумента, Представление);
	
	Возврат ВидыДокумента;
	
КонецФункции

Функция ВидыУКД() Экспорт
	
	ВидыДокумента = Новый Структура(
		"КСЧФ,
		|КСЧФДИС,
		|ДИС"
	);
	
	ВидыДокумента.КСЧФ		= 3;
	ВидыДокумента.КСЧФДИС	= 4;
	ВидыДокумента.ДИС		= 5;
	
	Представление = Новый Соответствие;
	Представление[ВидыДокумента.КСЧФ]		= "КСЧФ";
	Представление[ВидыДокумента.КСЧФДИС]	= "КСЧФДИС";
	Представление[ВидыДокумента.ДИС]		= "ДИС";
	
	ВидыДокумента = Новый_Перечисление(ВидыДокумента, Представление);
	
	Возврат ВидыДокумента;
	
КонецФункции

Функция ВидыАдреса() Экспорт
	
	Виды = Новый Структура(
		"АдресРФ,
		|Неструктурированный,
		|КодГАР"
	);
	
	Виды.АдресРФ				= 0;
	Виды.Неструктурированный	= 1;
	Виды.КодГАР					= 2;
	
	Виды = Новый_Перечисление(Виды);
	
	Возврат Виды;
	
КонецФункции

Функция СтавкиНДС() Экспорт
	
	СтавкиНДС = Новый Структура(
		"НДС0,
		|НДС10,
		|НДС18,
		|НДС20,
		|НДС10_110,
		|НДС18_118,
		|БезНДС"
	);
	
	СтавкиНДС.НДС0		= "0";
	СтавкиНДС.НДС10		= "1";
	СтавкиНДС.НДС18		= "2";
	СтавкиНДС.НДС20		= "3";
	СтавкиНДС.НДС10_110	= "4";
	СтавкиНДС.НДС18_118	= "5";
	СтавкиНДС.БезНДС	= "6";
	
	Представление = Новый Соответствие;
	Представление[СтавкиНДС.НДС0]		= "0%";
	Представление[СтавкиНДС.НДС10]		= "10%";
	Представление[СтавкиНДС.НДС18]		= "18%";
	Представление[СтавкиНДС.НДС20]		= "20%";
	Представление[СтавкиНДС.НДС10_110]	= "10/110";
	Представление[СтавкиНДС.НДС18_118]	= "18/118";
	Представление[СтавкиНДС.БезНДС]		= "без НДС";
	
	СтавкиНДС = Новый_Перечисление(СтавкиНДС, Представление);
	
	Возврат СтавкиНДС;
	
КонецФункции

Функция ПризнакиТМЦ() Экспорт
	
	Признаки = Новый Структура(
		"Имущество,
		|Работа,
		|Услуга,
		|ИмущественныеПрава,
		|Иное"
	);
	
	Признаки.Имущество			= 1;
	Признаки.Работа				= 2;
	Признаки.Услуга				= 3;
	Признаки.ИмущественныеПрава	= 4;
	Признаки.Иное				= 5;
	
	Представление = Новый Соответствие;
	Представление[Признаки.Имущество]			= "Имущество";
	Представление[Признаки.Работа]				= "Работа";
	Представление[Признаки.Услуга]				= "Услуга";
	Представление[Признаки.ИмущественныеПрава]	= "Имущественные права";
	Представление[Признаки.Иное]				= "Иное";
	
	Признаки = Новый_Перечисление(Признаки, Представление);
	
	Возврат Признаки;
	
КонецФункции

Функция ТипыОрганизации() Экспорт
	
	Типы = Новый Структура(
		"ЮрЛицо,
		|ИП,
		|ФизЛицо,
		|ИнОрг"
	);
	
	Типы.ЮрЛицо		= 1;
	Типы.ИП			= 2;
	Типы.ФизЛицо	= 3;
	Типы.ИнОрг		= 9;
	
	Типы = Новый_Перечисление(Типы);
	
	Возврат Типы;
	
КонецФункции

Функция СтатусыПодписанта() Экспорт
	
	Статусы = Новый Структура(
		"РаботникОрганизации,
		|РаботникОрганизацииСоставителя,
		|РаботникИнойОрганизации,
		|УполномоченноеФизЛицо"
	);
	
	Статусы.РаботникОрганизации				= 1;
	Статусы.РаботникОрганизацииСоставителя	= 2;
	Статусы.РаботникИнойОрганизации			= 3;
	Статусы.УполномоченноеФизЛицо			= 4;
	
	Представление = Новый Соответствие;
	Представление[Статусы.РаботникОрганизации]				= "Работник организации";
	Представление[Статусы.РаботникОрганизацииСоставителя]	= "Работник организации - составителя информации";
	Представление[Статусы.РаботникИнойОрганизации]			= "Работник иной уполномоченной организации";
	Представление[Статусы.УполномоченноеФизЛицо]			= "Уполномоченное физ. лицо";
	
	Статусы = Новый_Перечисление(Статусы, Представление);
	
	Возврат Статусы;
	
КонецФункции

Функция ОбластиПолномочий() Экспорт
	
	Области = Новый Структура(
		"ПодписантСФ,
		|ИсполнительСделки,
		|ИсполнительСделкиИСоставитель,
		|СоставительДокумента,
		|ИсполнительСделкиИПодписантСФ,
		|ИсполнительСоставительИПодписантСФ,
		|СоставительИПодписантСФ"
	);
	
	Области.ПодписантСФ							= 0; // InvoiceSigner
	Области.ИсполнительСделки					= 1; // Dealer
	Области.ИсполнительСделкиИСоставитель		= 2; // DrafterAndDealer
	Области.СоставительДокумента				= 3; // Drafter
	Области.ИсполнительСделкиИПодписантСФ		= 4; // DealerAndInvoiceSigner
	Области.ИсполнительСоставительИПодписантСФ	= 5; // DrafterAndDealerAndInvoiceSigner
	Области.СоставительИПодписантСФ				= 6; // DrafterAndInvoiceSigner
	
	Представление = Новый Соответствие;
	Представление[Области.ПодписантСФ]							= "Лицо, ответственное за подписание счетов-фактур";
	Представление[Области.ИсполнительСделки]					= "Лицо, совершившее сделку";
	Представление[Области.ИсполнительСделкиИСоставитель]		= "Лицо, совершившее сделку и ответственное за ее оформление";
	Представление[Области.СоставительДокумента]					= "Лицо, ответственное за оформление свершившегося события";
	Представление[Области.ИсполнительСделкиИПодписантСФ]		= "Лицо, совершившее сделку, операцию и ответственное за подписание счетов-фактур";
	Представление[Области.ИсполнительСоставительИПодписантСФ]	= "Лицо, совершившее сделку, операцию и ответственное за ее оформление и за подписание счетов-фактур";
	Представление[Области.СоставительИПодписантСФ]				= "Лицо, ответственное за оформление свершившегося события и за подписание счетов-фактур";
	
	Области = Новый_Перечисление(Области, Представление);
	
	Возврат Области;
	
КонецФункции

Функция ВидыОтветственногоЛица() Экспорт
	
	Виды = Новый Структура(
		"СотрудникОрганизации,
		|ПредставительДовереннойОрганизации,
		|ФизЛицо"
	);
	
	Виды.СотрудникОрганизации				= 0;
	Виды.ПредставительДовереннойОрганизации	= 1;
	Виды.ФизЛицо							= 2;
	
	Виды = Новый_Перечисление(Виды);
	
	Возврат Виды;
	
КонецФункции


//========================================================================
// Списки
//========================================================================

// Входящие/исходящие

Функция Новый_СписокДокументов() Экспорт
	
	Список = Новый Структура(
		"ВсегоДокументов,
		|СписокДокументов",
	);
	
	Список.ВсегоДокументов = 0;
	Список.СписокДокументов = Новый_ТаблицаСпискаДокументов();
	
	Возврат Список;
	
КонецФункции

Функция Новый_ТаблицаСпискаДокументов() Экспорт
	
	ТипСтрока	= Новый ОписаниеТипов("Строка");
	ТипЧисло	= Новый ОписаниеТипов("Число");
	ТипБулево	= Новый ОписаниеТипов("Булево");
	ТипДата		= Новый ОписаниеТипов("Дата");
	ТипМассив	= Новый ОписаниеТипов("Массив, ФиксированныйМассив");
	
	ТипОписаниеОрганизации	= Новый ОписаниеТипов("Структура, ФиксированнаяСтруктура");
	ТипСумма				= ОписаниеТипаЧисло(15, 2);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИдентификаторСообщения",	ТипСтрока);
	Результат.Колонки.Добавить("ИдентификаторДокумента",	ТипСтрока);
	Результат.Колонки.Добавить("ИдентификаторЭкземпляра",	ТипСтрока);
	Результат.Колонки.Добавить("ЕстьСвязанныеДокументы",	ТипБулево);
	Результат.Колонки.Добавить("ТребуетсяПодтверждение",	ТипБулево);
	Результат.Колонки.Добавить("ТребуетсяПодпись",			ТипБулево);
	Результат.Колонки.Добавить("ТипДО",						ТипСтрока);
	Результат.Колонки.Добавить("ДатаОтправки",				ТипДата);
	Результат.Колонки.Добавить("Отправитель",				ТипОписаниеОрганизации);
	Результат.Колонки.Добавить("Получатели",				ТипМассив);
	Результат.Колонки.Добавить("ТипДокумента");
	Результат.Колонки.Добавить("ВидДокумента");
	Результат.Колонки.Добавить("ДоступныеОперации",			ТипЧисло);
	Результат.Колонки.Добавить("Статус",					ТипСтрока);
	Результат.Колонки.Добавить("ДопСтатус",					ТипСтрока);
	Результат.Колонки.Добавить("НаименованиеДокумента",		ТипСтрока);
	Результат.Колонки.Добавить("Номер",						ТипСтрока);
	Результат.Колонки.Добавить("Дата",						ТипДата);
	Результат.Колонки.Добавить("Сумма",						ТипСумма);
	Результат.Колонки.Добавить("НДС",						ТипСумма);
	Результат.Колонки.Добавить("Комментарий",				ТипСтрока);
	Результат.Колонки.Добавить("Переслан",					ТипБулево);
	
	// FIXME: Убрать после рефакторинга
	Результат.Колонки.Добавить("ТипДокументаБГУ",			ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция Новый_ОписаниеОрганизации(Наименование, Ящик, Подразделение) Экспорт
	
	ОписаниеОрганизации = Новый Структура(
		"Наименование,
		|Ящик,
		|Подразделение"
	);
	
	ОписаниеОрганизации.Наименование	= Наименование;
	ОписаниеОрганизации.Ящик			= Ящик;
	ОписаниеОрганизации.Подразделение	= Подразделение;
	
	ОписаниеОрганизации = Новый ФиксированнаяСтруктура(ОписаниеОрганизации);
	
	Возврат ОписаниеОрганизации;
	
КонецФункции

// Отправка

Функция Новый_СписокДокументовДляОтправки() Экспорт
	
	Список = Новый ТаблицаЗначений;
	
	ТипДокумент			= Документы.ТипВсеСсылки();
	ТипКонтрагент		= Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ТипДата				= ОписаниеТипаДата();
	ТипПредставление	= ОписаниеТипаСтрока();
	ТипСумма			= ОписаниеТипаЧисло(15, 2, Истина);
	
	Колонки = Список.Колонки;
	Колонки.Добавить("Ссылка",            ТипДокумент);
	Колонки.Добавить("Дата",              ТипДата);
	Колонки.Добавить("Контрагент",        ТипКонтрагент);
	Колонки.Добавить("ТипДокумента");
	Колонки.Добавить("ВидДокумента");
	Колонки.Добавить("ТипПредставление",  ТипПредставление);
	Колонки.Добавить("Сумма",             ТипСумма);
	
	Возврат Список;
	
КонецФункции

//========================================================================
// Объекты
//========================================================================

Функция Новый_КонтактнаяИнформацияКонтрагента() Экспорт
	
	КИ = Новый Структура(
		"Телефон,
		|Факс,
		|Email"
	);
	
	Возврат КИ;
	
КонецФункции

Функция Новый_Контрагент() Экспорт
	
	Контрагент = Новый Структура(
		"ТипОрганизации,
		|
		|Наименование,
		|ИНН,
		|КПП,
		|
		|ОКПО,
		|
		|ФИО,
		|СвидетельствоОРегистрацииИП,
		|
		|Адрес,
		|КонтактнаяИнформация,
		|
		|БанковскийСчет,
		|ДопИнфо,
		|
		|Подразделение,
		|ДопИнфоДляУчастников,
		|
		|Ящик"
	);
	
	Контрагент.ТипОрганизации = ТипыОрганизации().ЮрЛицо;
	
	Контрагент.ФИО = Новый_ФИО();
	
	Контрагент.БанковскийСчет = Новый_БанковскийСчет();
	
	Контрагент.Адрес				= Новый_Адрес();
	Контрагент.КонтактнаяИнформация	= Новый_КонтактнаяИнформацияКонтрагента();
	
	Возврат Контрагент;
	
КонецФункции

Функция Новый_Фактор() Экспорт
	
	Фактор = Новый Структура(
		"Наименование,
		|ИНН,
		|КПП,
		|
		|БанковскийСчет,
		|ДопИнфо,
		|
		|Адрес,
		|Телефон"
	);
	
	Фактор.БанковскийСчет = Новый_БанковскийСчет();
	
	Возврат Фактор;
	
КонецФункции


Функция Новый_БанковскийСчет() Экспорт
	
	Счет = Новый Структура(
		"РасчетныйСчет,
		|НаименованиеБанка,
		|БИК,
		|КоррСчет"
	);
	
	Возврат Счет;
	
КонецФункции

Функция Новый_Адрес() Экспорт
	
	Адрес = Новый Структура(
		"ВидАдреса,
		|
		|ПочтовыйИндекс,
		|КодРегиона,
		|Район,
		|Город,
		|НаселенныйПункт,
		|Улица,
		|Дом,
		|Квартира,
		|Строение,
		|
		|КодСтраны,
		|ИностранныйАдрес,
		|
		|КодГАР"
	);
	
	Адрес.ВидАдреса = ВидыАдреса().АдресРФ;
	
	Возврат Адрес;
	
КонецФункции

Функция Новый_Валюта() Экспорт
	
	Валюта = Новый Структура(
		"Курс,
		|Код,
		|Наименование"
	);
	
	Возврат Валюта;
	
КонецФункции

Функция Новый_ФИО() Экспорт
	
	ФИО = Новый Структура(
		"Фамилия,
		|Имя,
		|Отчество"
	);
	
	Возврат ФИО;
	
КонецФункции


Функция Новый_ИнфПоле() Экспорт
	
	ИнфПоле = Новый ТаблицаЗначений;
	
	Колонки = ИнфПоле.Колонки;
	Колонки.Добавить("Идентификатор", ОписаниеТипаСтрока(50));
	Колонки.Добавить("Значение",      ОписаниеТипаСтрока());
	
	Возврат ИнфПоле;
	
КонецФункции


Функция Новый_ИсходныйДокумент() Экспорт
	
	ИсходныйДокумент = Новый_ОписаниеДокумента();
	
	Возврат ИсходныйДокумент;
	
КонецФункции

Функция Новый_ОписаниеДокумента() Экспорт
	
	Описание = Новый Структура(
		"Наименование,
		|Номер, Дата,
		|ИсправлениеНомер, ИсправлениеДата"
	);
	
	Возврат Описание;
	
КонецФункции

Функция Новый_Основание() Экспорт
	
	Основание = Новый Структура(
		"Наименование,
		|Номер, Дата,
		|ДопИнфо"
	);
	
	Основание.Наименование	= "";
	Основание.Номер			= Неопределено; //: Число
	Основание.Дата			= Неопределено; //: Дата
	Основание.ДопИнфо		= Неопределено; //: Строка
	
	Возврат Основание;
	
КонецФункции

Функция Новый_Документ()
	
	Документ = Новый Структура(
		"Описание,
		|Валюта,
		|Основание,
		|ИдГосКонтракта,
		|ИнфПоле"
	);
	
	Документ.Описание	= Новый_ОписаниеДокумента();
	Документ.Валюта		= Новый_Валюта();
	Документ.Основание	= Новый Массив; //: Новый_Основание();
	Документ.ИнфПоле	= Новый_ИнфПоле();
	
	Возврат Документ;
	
КонецФункции


Функция Новый_Итого()
	
	Итого = Новый Структура(
		"СуммаБезНДС,
		|СуммаНДС,
		|СуммаСНДС"
	);
	
	Итого.СуммаБезНДС	= 0;
	Итого.СуммаНДС		= Неопределено; //: Число
	Итого.СуммаСНДС		= 0;
	
	Возврат Итого;
	
КонецФункции

Функция Новый_ТабЧастьТМЦ()
	
	Товары = Новый ТаблицаЗначений;
	
	ТипНаименование = ОписаниеТипаСтрока(1000,, Истина);
	
	ТипОКЕИ				= ОписаниеТипаСтрока(4,, Истина);
	ТипНаименованиеЕИ	= ОписаниеТипаСтрока(255,, Истина);
	
	ТипИнфПоле = ОписаниеТипаЗначения(Новый_ИнфПоле());
	
	ТипЦена			= ОписаниеТипаЧисло(26, 11,, Истина);
	ТипКоличество	= ОписаниеТипаЧисло(26, 11,, Истина);
	ТипСумма		= ОписаниеТипаЧисло(19, 2,, Истина);
	
	ТипСчет = ОписаниеТипаСтрока(9,, Истина);
	
	Колонки = Товары.Колонки;
	Колонки.Добавить("Наименование",      ТипНаименование);
	Колонки.Добавить("СтавкаНДС");        //: СтавкиНДС();
	Колонки.Добавить("Цена",              ТипЦена);
	Колонки.Добавить("Количество",        ТипКоличество);
	Колонки.Добавить("СуммаБезНДС",       ТипСумма);
	Колонки.Добавить("СуммаНДС",          ТипСумма);
	Колонки.Добавить("СуммаСНДС",         ТипСумма);
	Колонки.Добавить("ЕИКод",             ТипОКЕИ);
	Колонки.Добавить("ЕИНаименование",    ТипНаименованиеЕИ);
	Колонки.Добавить("ИнфПоле",           ТипИнфПоле);
	Колонки.Добавить("СчетДт",            ТипСчет);
	Колонки.Добавить("СчетКт",            ТипСчет);
	
	Возврат Товары;
	
КонецФункции

Функция Новый_ИтогоКорректировки()
	
	Итого = Новый Структура(
		"СуммаБезНДСУвеличение,
		|СуммаНДСУвеличение,
		|СуммаСНДСУвеличение,
		|
		|СуммаБезНДСУменьшение,
		|СуммаНДСУменьшение,
		|СуммаСНДСУменьшение"
	);
	
	Итого.СуммаБезНДСУвеличение	= 0;
	Итого.СуммаНДСУвеличение	= Неопределено; //: Число
	Итого.СуммаСНДСУвеличение	= 0;
	
	Итого.СуммаБезНДСУменьшение	= 0;
	Итого.СуммаНДСУменьшение	= Неопределено; //: Число
	Итого.СуммаСНДСУменьшение	= 0;
	
	Возврат Итого;
	
КонецФункции

Функция Новый_ТабЧастьКорректировки()
	
	Изменения = Новый ТаблицаЗначений;
	
	ТипНаименование = ОписаниеТипаСтрока(1000,, Истина);
	
	ТипОКЕИ				= ОписаниеТипаСтрока(4,, Истина);
	ТипНаименованиеЕИ	= ОписаниеТипаСтрока(255,, Истина);
	
	ТипИнфПоле = ОписаниеТипаЗначения(Новый_ИнфПоле());
	
	ТипЦена			= ОписаниеТипаЧисло(26, 11,, Истина);
	ТипКоличество	= ОписаниеТипаЧисло(26, 11,, Истина);
	ТипСумма		= ОписаниеТипаЧисло(19, 2,, Истина);
	
	ТипСчет = ОписаниеТипаСтрока(9,, Истина);
	
	Колонки = Изменения.Колонки;
	Колонки.Добавить("Наименование",  ТипНаименование);
	Колонки.Добавить("ИнфПоле",       ТипИнфПоле);
	
	Колонки.Добавить("СтавкаНДСДо");       //: СтавкиНДС();
	Колонки.Добавить("ЦенаДо",                ТипЦена);
	Колонки.Добавить("КоличествоДо",          ТипКоличество);
	Колонки.Добавить("СуммаБезНДСДо",         ТипСумма);
	Колонки.Добавить("СуммаНДСДо",            ТипСумма);
	Колонки.Добавить("СуммаСНДСДо",           ТипСумма);
	Колонки.Добавить("ЕИКодДо",               ТипОКЕИ);
	Колонки.Добавить("ЕИНаименованиеДо",      ТипНаименованиеЕИ);

	Колонки.Добавить("СтавкаНДСПосле");   //: СтавкиНДС();
	Колонки.Добавить("ЦенаПосле",             ТипЦена);
	Колонки.Добавить("КоличествоПосле",       ТипКоличество);
	Колонки.Добавить("СуммаБезНДСПосле",      ТипСумма);
	Колонки.Добавить("СуммаНДСПосле",         ТипСумма);
	Колонки.Добавить("СуммаСНДСПосле",        ТипСумма);
	Колонки.Добавить("ЕИКодПосле",            ТипОКЕИ);
	Колонки.Добавить("ЕИНаименованиеПосле",   ТипНаименованиеЕИ);
	
	Колонки.Добавить("СуммаБезНДСУвеличение", ТипСумма);
	Колонки.Добавить("СуммаНДСУвеличение",    ТипСумма);
	Колонки.Добавить("СуммаСНДСУвеличение",   ТипСумма);

	Колонки.Добавить("СуммаБезНДСУменьшение", ТипСумма);
	Колонки.Добавить("СуммаНДСУменьшение",    ТипСумма);
	Колонки.Добавить("СуммаСНДСУменьшение",   ТипСумма);
	
	Колонки.Добавить("СчетДт",                ТипСчет);
	Колонки.Добавить("СчетКт",                ТипСчет);
	
	Возврат Изменения;
	
КонецФункции


Функция Новый_ИнформацияУчастника()
	
	// TODO: ВидОперации не используется в корректировке
	Титул = Новый Структура(
		"ВидОперации,
		|СведенияОбОперации,
		|Подписанты,
		|Составитель,
		|ИнфПоле"
	);
	
	Титул.СведенияОбОперации	= Новый_ОписаниеОперации();
	Титул.Подписанты			= Новый Массив; // Новый_Подписант()
	Титул.Составитель			= Новый_СоставительДокумента();
	// TODO: Не используется в корректировке, стоит убрать?
	Титул.ИнфПоле				= Новый_ИнфПоле();
	
	Возврат Титул;
	
КонецФункции

Функция Новый_ОписаниеОперации() Экспорт
	
	ОписаниеОперации = Новый Структура(
		"Описание,
		|Дата"
	);
	
	Возврат ОписаниеОперации;
	
КонецФункции

Функция Новый_ОтветственноеЛицо() Экспорт
	
	Человек = Новый Структура(
		"Вид,
		|
		|ФИО,
		|ДопИнфо,
		|
		|ОснованиеПолномочий,
		|ОснованиеДоверия,
		|Должность,
		|
		|НаименованиеОрганизации"
	);
	
	Человек.Вид = ВидыОтветственногоЛица().СотрудникОрганизации;
	
	Человек.ФИО = Новый_ФИО();
	
	Возврат Человек;
	
КонецФункции

Функция Новый_СоставительДокумента() Экспорт
	
	Составитель = Новый Структура(
		"НаименованиеОрганизации,
		|ОснованиеПолномочий"
	);
	
	Возврат Составитель;
	
КонецФункции

Функция Новый_ПлатежноРасчетныеДокументы() Экспорт
	
	ПРД = Новый ТаблицаЗначений;
	
	ТипНомер = ОписаниеТипаСтрока(30);
	ТипДата = ОписаниеТипаДата(ЧастиДаты.Дата);
	
	Колонки = ПРД.Колонки;
	Колонки.Добавить("Номер", ТипНомер);
	Колонки.Добавить("Дата", ТипДата);
	
	Возврат ПРД;
	
КонецФункции

Функция Новый_ТранспортныеНакладные() Экспорт
	
	ТН = Новый ТаблицаЗначений;
	
	ТипНомер = ОписаниеТипаСтрока(255);
	ТипДата = ОписаниеТипаДата(ЧастиДаты.Дата);
	
	Колонки = ТН.Колонки;
	Колонки.Добавить("Номер", ТипНомер);
	Колонки.Добавить("Дата", ТипДата);
	
	Возврат ТН;
	
КонецФункции


Функция Новый_Подписант() Экспорт
	
	Подписант = Новый Структура(
		"Статус,
		|ОбластьПолномочий,
		|ОснованиеПолномочий,
		|ОснованиеПолномочийОрганизации,
		|
		|ТипОрганизации,
		|
		|ИНН,
		|ФИО,
		|ДопИнфо,
		|
		|НаименованиеОрганизации,
		|Должность,
		|
		|СвидетельствоОРегистрацииИП"
	);
	
	Подписант.Статус			= СтатусыПодписанта().РаботникОрганизации;
	Подписант.ОбластьПолномочий	= ОбластиПолномочий().ПодписантСФ;
	
	Подписант.ТипОрганизации = ТипыОрганизации().ЮрЛицо;
	
	Подписант.ФИО = Новый_ФИО();
	
	Возврат Подписант;
	
КонецФункции


Функция Новый_АктВыполненияРаботТитулИсполнителя()
	
	Акт = Новый_Документ();
	
	Расширение = Новый Структура(
		"Исполнитель,
		|Заказчик,
		|
		|Фактор,
		|
		|ЗаголовокОперации,
		|
		|ИнформацияПродавца"
	);
	РасширитьОбъект(Акт, Расширение);
	
	Акт.Исполнитель	= Новый_Контрагент();
	Акт.Заказчик	= Новый_Контрагент();
	
	Акт.Фактор = Неопределено; //: Новый_Фактор();
	
	Акт.ИнформацияПродавца = Новый_ИнформацияУчастника();
	
	Возврат Акт;
	
КонецФункции

Функция Новый_АктВыполненияРаботТитулЗаказчика()
	
	Акт = Новый Структура(
		"ИнформацияПокупателя"
	);
	
	Акт.ИнформацияПокупателя = Новый_ИнформацияУчастника();
	
	Возврат Акт;
	
КонецФункции

Функция Новый_КорректировкаПередачиТМЦТитулПродавца()
	
	Корректировка = Новый_Документ();
	
	Расширение = Новый Структура(
		"ИсходныеДокументы,
		|
		|Продавец,
		|Покупатель,
		|
		|Фактор,
		|
		|ИнформацияПродавца"
	);
	РасширитьОбъект(Корректировка, Расширение);
	
	Корректировка.ИсходныеДокументы = Новый Массив; // Новый_ИсходныйДокумент()
	
	Корректировка.Продавец		= Новый_Контрагент();
	Корректировка.Покупатель	= Новый_Контрагент();
	
	Корректировка.Фактор = Неопределено; //: Новый_Фактор();
	
	Корректировка.ИнформацияПродавца = Новый_ИнформацияУчастника();
	
	Возврат Корректировка;
	
КонецФункции

Функция Новый_КорректировкаПередачиТМЦТитулПокупателя()
	
	Корректировка = Новый Структура(
		"ИнформацияПокупателя"
	);
	
	Корректировка.ИнформацияПокупателя = Новый_ИнформацияУчастника();
	
	Возврат Корректировка;
	
КонецФункции

Функция Новый_ПередачаТМЦТитулПродавца()
	
	ПередачаТоваров = Новый_Документ();
	
	Расширение = Новый Структура(
		"Продавец,
		|Покупатель,
		|Грузоотправитель,
		|Грузополучатель,
		|
		|Фактор,
		|
		|Перевозчик,
		|
		|ТранспортныеНакладные,
		|
		|ИнформацияПродавца"
	);
	РасширитьОбъект(ПередачаТоваров, Расширение);
	
	ПередачаТоваров.Продавец			= Новый_Контрагент();
	ПередачаТоваров.Покупатель			= Новый_Контрагент();
	ПередачаТоваров.Грузоотправитель	= Неопределено; //: Новый_Контрагент();
	ПередачаТоваров.Грузополучатель		= Неопределено; //: Новый_Контрагент();
	
	ПередачаТоваров.Фактор = Неопределено; //: Новый_Фактор();
	
	ПередачаТоваров.Перевозчик = Неопределено; //: Новый_Контрагент();
	
	ПередачаТоваров.ТранспортныеНакладные = Новый_ТранспортныеНакладные();
	
	ПередачаТоваров.ИнформацияПродавца	= Новый_ИнформацияПродавца();
	
	Возврат ПередачаТоваров;
	
КонецФункции

Функция Новый_ИнформацияПродавца()
	
	ИнфПродавца = Новый_ИнформацияУчастника();
	
	Расширение = Новый Структура(
		"ЛицоПередавшееТовар"
	);
	РасширитьОбъект(ИнфПродавца, Расширение);
	
	ИнфПродавца.ЛицоПередавшееТовар = Неопределено; //: Новый_ОтветственноеЛицо();
	
	Возврат ИнфПродавца;
	
КонецФункции

Функция Новый_ПередачаТМЦТитулПокупателя()
	
	ПередачаТоваров = Новый Структура(
		"ИнформацияПокупателя"
	);
	
	ПередачаТоваров.ИнформацияПокупателя = Новый_ИнформацияПокупателя();
	
	Возврат ПередачаТоваров;
	
КонецФункции

Функция Новый_ИнформацияПокупателя()
	
	ИнфПокупателя = Новый_ИнформацияУчастника();
	
	Расширение = Новый Структура(
		"ЛицоПринявшееТовар"
	);
	РасширитьОбъект(ИнфПокупателя, Расширение);
	
	ИнфПокупателя.ЛицоПринявшееТовар = Неопределено; //: Новый_ОтветственноеЛицо();
	
	Возврат ИнфПокупателя;
	
КонецФункции


//========================================================================
// Документы
//========================================================================

// УПД

Функция Новый_ТитулПродавцаУПД() Экспорт
	
	УПД = Новый_ПередачаТМЦТитулПродавца();
	
	Расширение = Новый Структура(
		"ВидДокумента,
		|
		|ПлатежноРасчетныеДокументы,
		|
		|ТМЦ,
		|
		|СведенияОТранспортировке,
		|СведенияОПередачеВещи"
	);
	РасширитьОбъект(УПД, Расширение);
	
	УПД.ВидДокумента = ВидыУПД().СЧФДОП;
	
	УПД.ПлатежноРасчетныеДокументы = Новый_ПлатежноРасчетныеДокументы();
	
	УПД.ТМЦ = Новый_ТМЦУПД();
	
	УПД.СведенияОПередачеВещи = Новый_ОписаниеОперации();
	
	Возврат УПД;
	
КонецФункции

Функция Новый_ТМЦУПД() Экспорт
	
	Товары = Новый Структура(
		"ТабличнаяЧасть,
		|Итого"
	);
	
	Товары.ТабличнаяЧасть	= Новый_ТабЧастьУПД();
	Товары.Итого			= Новый_ИтогоУПД();
	
	Возврат Товары;
	
КонецФункции

Функция Новый_ИтогоУПД() Экспорт
	
	ИтогоУПД = Новый_Итого();
	
	Расширение = Новый Структура(
		"Количество"
	);
	РасширитьОбъект(ИтогоУПД, Расширение);
	
	ИтогоУПД.Количество = 0;
	
	Возврат ИтогоУПД;
	
КонецФункции

Функция Новый_ТабЧастьУПД() Экспорт
	
	ТабЧастьУПД = Новый_ТабЧастьТМЦ();
	
	Расширение = Новый ТаблицаЗначений;
	
	ТипКодТовара	= ОписаниеТипаСтрока(255);
	ТипСтрана		= ОписаниеТипаСтрока(255,, Истина);
	ТипПризнак		= ОписаниеТипаСтрока(4,, Истина);
	
	ТипКоличество	= ОписаниеТипаЧисло(26, 11,, Истина);
	ТипСумма		= ОписаниеТипаЧисло(19, 2,, Истина);
	
	Колонки = Расширение.Колонки;
	Колонки.Добавить("Признак");
	Колонки.Добавить("ПризнакДопИнфо",        ТипПризнак);
	Колонки.Добавить("Код",                   ТипКодТовара);
	Колонки.Добавить("КоличествоОтпустить",   ТипКоличество);
	Колонки.Добавить("Акциз",                 ТипСумма);
	Колонки.Добавить("КодСтраны");
	Колонки.Добавить("НомерГТД");
	Колонки.Добавить("СтранаПроисхождения",   ТипСтрана);
	
	РасширитьОбъект(ТабЧастьУПД, Расширение);
	
	Возврат ТабЧастьУПД;
	
КонецФункции

Функция Новый_ТитулПокупателяУПД() Экспорт
	
	УПД = Новый_ПередачаТМЦТитулПокупателя();
	
	Возврат УПД;
	
КонецФункции

// УКД

Функция Новый_ТитулПродавцаУКД() Экспорт
	
	УКД = Новый_КорректировкаПередачиТМЦТитулПродавца();
	
	Расширение = Новый Структура(
		"ВидДокумента,
		|
		|ИзмененияТМЦ,
		|
		|ПередаточныеДокументы,
		|ДопИнфо"
	);
	РасширитьОбъект(УКД, Расширение);
	
	УКД.ВидДокумента = ВидыУКД().КСЧФДИС;
	
	УКД.ПередаточныеДокументы = "";
	
	УКД.ИзмененияТМЦ = Новый_ИзмененияТМЦУКД();
	
	Возврат УКД;
	
КонецФункции

Функция Новый_ИзмененияТМЦУКД() Экспорт
	
	Изменения = Новый Структура(
		"ТабличнаяЧасть,
		|Итого"
	);
	
	Изменения.ТабличнаяЧасть = Новый_ТабЧастьУКД();
	Изменения.Итого = Новый_ИтогоУКД();
	
	Возврат Изменения;
	
КонецФункции

Функция Новый_ИтогоУКД() Экспорт
	
	Итого = Новый_ИтогоКорректировки();
	
	Возврат Итого;
	
КонецФункции

Функция Новый_ТабЧастьУКД() Экспорт
	
	ТабЧастьУКД = Новый_ТабЧастьКорректировки();
	
	Расширение = Новый ТаблицаЗначений;
	
	ТипСумма = ОписаниеТипаЧисло(19, 2,, Истина);
	
	Колонки = Расширение.Колонки;
	Колонки.Добавить("АкцизДо",           ТипСумма);
	Колонки.Добавить("АкцизПосле",        ТипСумма);
	Колонки.Добавить("АкцизУвеличение",   ТипСумма);
	Колонки.Добавить("АкцизУменьшение",   ТипСумма);

	РасширитьОбъект(ТабЧастьУКД, Расширение);
	
	Возврат ТабЧастьУКД;
	
КонецФункции

Функция Новый_ТитулПокупателяУКД() Экспорт
	
	УКД = Новый_КорректировкаПередачиТМЦТитулПокупателя();
	
	Возврат УКД;
	
КонецФункции

// ДПТ

Функция Новый_ТитулПродавцаДПТ() Экспорт
	
	ДПТ = Новый_ПередачаТМЦТитулПродавца();
	
	Расширение = Новый Структура(
		"ТМЦ,
		|
		|КоличествоПриложений"
	);
	РасширитьОбъект(ДПТ, Расширение);
	
	ДПТ.ТМЦ = Новый_ТМЦДПТ();
	
	Возврат ДПТ;
	
КонецФункции

Функция Новый_ТМЦДПТ()
	
	ТМЦ = Новый Структура(
		"ТабличнаяЧасть,
		|Итого"
	);
	
	ТМЦ.ТабличнаяЧасть = Новый_ТабЧастьДПТ();
	ТМЦ.Итого = Новый_ИтогоДПТ();
	
	Возврат ТМЦ;
	
КонецФункции

Функция Новый_ТабЧастьДПТ() Экспорт
	
	ТабЧастьДПТ = Новый_ТабЧастьТМЦ();
	
	Расширение = Новый ТаблицаЗначений;
	
	ТипНаименование		= ОписаниеТипаСтрока(1000,, Истина);
	
	ТипКодТовара		= ОписаниеТипаСтрока(100,, Истина);
	ТипСорт				= ОписаниеТипаСтрока(10,, Истина);
	ТипАртикул			= ОписаниеТипаСтрока(50,, Истина);
	
	ТипКоличество		= ОписаниеТипаЧисло(26, 11,, Истина);
	ТипКоличествоМест	= ОписаниеТипаЧисло(12, 0,, Истина);
	ТипКоэффициентМест	= ОписаниеТипаЧисло(12, 3,, Истина);
	ТипМасса			= ОписаниеТипаЧисло(12, 3,, Истина);
	
	Колонки = Расширение.Колонки;
	Колонки.Добавить("Характеристика",        ТипНаименование);
	Колонки.Добавить("Сорт",                  ТипСорт);
	Колонки.Добавить("Артикул",               ТипАртикул);
	Колонки.Добавить("Код",                   ТипКодТовара);
	Колонки.Добавить("ВидУпаковки",           ТипНаименование);
	Колонки.Добавить("КоличествоВУпаковке",   ТипКоэффициентМест);
	Колонки.Добавить("КоличествоУпаковок",    ТипКоличествоМест);
	Колонки.Добавить("МассаБрутто",           ТипМасса);
	Колонки.Добавить("КоличествоОтпустить",   ТипКоличество);
	
	РасширитьОбъект(ТабЧастьДПТ, Расширение);
	
	Возврат ТабЧастьДПТ;
	
КонецФункции

Функция Новый_ИтогоДПТ() Экспорт
	
	ИтогоДПТ = Новый_Итого();
	
	Расширение = Новый Структура(
		"КоличествоМест,
		|МассаБрутто,
		|Количество"
	);
	РасширитьОбъект(ИтогоДПТ, Расширение);
	
	ИтогоДПТ.КоличествоМест	= 0;
	ИтогоДПТ.МассаБрутто	= 0;
	ИтогоДПТ.Количество		= 0;
	
	Возврат ИтогоДПТ;
	
КонецФункции

Функция Новый_ТитулПокупателяДПТ() Экспорт
	
	ДПТ = Новый_ПередачаТМЦТитулПокупателя();
	
	Возврат ДПТ;
	
КонецФункции

// ДПРР

Функция Новый_ТитулИсполнителяДПРР() Экспорт
	
	ДПРР = Новый_АктВыполненияРаботТитулИсполнителя();
	
	Расширение = Новый Структура(
		"Работы,
		|
		|СведенияОПередачеВещи"
	);
	РасширитьОбъект(ДПРР, Расширение);
	
	ДПРР.Работы = Новый Массив; // Новый_РаботаДПРР()
	
	ДПРР.СведенияОПередачеВещи = Новый_ОписаниеОперации();
	
	Возврат ДПРР;
	
КонецФункции

Функция Новый_РаботаДПРР() Экспорт
	
	РаботаДПРР = Новый Структура(
		"ДатаНачала,
		|ДатаКонца,
		|
		|ТабличнаяЧасть,
		|Итого"
	);
	
	РаботаДПРР.ТабличнаяЧасть	= Новый_ТабЧастьДПРР();
	РаботаДПРР.Итого			= Новый_ИтогоДПРР();
	
	Возврат РаботаДПРР;
	
КонецФункции

Функция Новый_ТабЧастьДПРР()
	
	ТабЧастьДПРР = Новый_ТабЧастьТМЦ();
	
	Расширение = Новый ТаблицаЗначений;
	
	Колонки = Расширение.Колонки;
	Колонки.Добавить("Описание", ОписаниеТипаСтрока(10000,, Истина));
	
	РасширитьОбъект(ТабЧастьДПРР, Расширение);
	
	Возврат ТабЧастьДПРР;
	
КонецФункции

Функция Новый_ИтогоДПРР()
	
	ИтогоДПРР = Новый_Итого();
	
	Возврат ИтогоДПРР;
	
КонецФункции

Функция Новый_ТитулЗаказчикаДПРР() Экспорт
	
	ДПРР = Новый_АктВыполненияРаботТитулЗаказчика();
	
	Расширение = Новый Структура(
		"СведенияОПолученииВещи"
	);
	РасширитьОбъект(ДПРР, Расширение);
	
	ДПРР.СведенияОПолученииВещи = Новый_ОписаниеОперации();
	
	Возврат ДПРР;
	
КонецФункции


//========================================================================
// Методы
//========================================================================

//===================================
//{ Типы документов

Функция ЭтоТитулПродавцаУПД(ТипДокумента) Экспорт
	
	ТипыДокументов = ТипыДокументов();
	
	Результат = Ложь
		ИЛИ ТипДокумента = ТипыДокументов.ТитулПродавцаУПД
		ИЛИ ТипДокумента = ТипыДокументов.ИсправленныйТитулПродавцаУПД;
		
	Возврат Результат;
	
КонецФункции

Функция ЭтоТитулПокупателяУПД(ТипДокумента) Экспорт
	
	ТипыДокументов = ТипыДокументов();
	
	Результат = Ложь
		ИЛИ ТипДокумента = ТипыДокументов.ТитулПокупателяУПД;
		
	Возврат Результат;
	
КонецФункции

Функция ЭтоТитулПродавцаУКД(ТипДокумента) Экспорт
	
	ТипыДокументов = ТипыДокументов();
	
	Результат = Ложь
		ИЛИ ТипДокумента = ТипыДокументов.ТитулПродавцаУКД
		ИЛИ ТипДокумента = ТипыДокументов.ИсправленныйТитулПродавцаУКД;
		
	Возврат Результат;
	
КонецФункции

Функция ЭтоТитулПокупателяУКД(ТипДокумента) Экспорт
	
	ТипыДокументов = ТипыДокументов();
	
	Результат = Ложь
		ИЛИ ТипДокумента = ТипыДокументов.ТитулПокупателяУКД;
		
	Возврат Результат;
	
КонецФункции

Функция ЭтоТитулПродавцаДПТ(ТипДокумента) Экспорт
	
	ТипыДокументов = ТипыДокументов();
	
	Результат = Ложь
		ИЛИ ТипДокумента = ТипыДокументов.ТитулПродавцаДПТ
		ИЛИ ТипДокумента = ТипыДокументов.ИсправленныйТитулПродавцаДПТ;
		
	Возврат Результат;
	
КонецФункции

Функция ЭтоТитулПокупателяДПТ(ТипДокумента) Экспорт
	
	ТипыДокументов = ТипыДокументов();
	
	Результат = Ложь
		ИЛИ ТипДокумента = ТипыДокументов.ТитулПокупателяДПТ;
		
	Возврат Результат;
	
КонецФункции

Функция ЭтоТитулИсполнителяДПРР(ТипДокумента) Экспорт
	
	ТипыДокументов = ТипыДокументов();
	
	Результат = Ложь
		ИЛИ ТипДокумента = ТипыДокументов.ТитулИсполнителяДПРР
		ИЛИ ТипДокумента = ТипыДокументов.ИсправленныйТитулИсполнителяДПРР;
		
	Возврат Результат;
	
КонецФункции

Функция ЭтоТитулЗаказчикаДПРР(ТипДокумента) Экспорт
	
	ТипыДокументов = ТипыДокументов();
	
	Результат = Ложь
		ИЛИ ТипДокумента = ТипыДокументов.ТитулЗаказчикаДПРР;
		
	Возврат Результат;
	
КонецФункции

Функция ЭтоТитулПокупателя(ТипДокумента) Экспорт
	
	ТипыДокумента = ТипыДокументов();
	
	Результат = Ложь
		ИЛИ ЭтоТитулПокупателяУПД(ТипДокумента)
		ИЛИ ЭтоТитулПокупателяУКД(ТипДокумента)
		ИЛИ ЭтоТитулПокупателяДПТ(ТипДокумента)
		ИЛИ ЭтоТитулЗаказчикаДПРР(ТипДокумента)
		ИЛИ ТипДокумента = ТипыДокумента.ТитулПокупателяТОРГ12
		ИЛИ ТипДокумента = ТипыДокумента.ТитулЗаказчикаАкт;
		
	Возврат Результат;
	
КонецФункции

Функция ДопустимыеОбластиПолномочий(ТипДокумента) Экспорт
	
	ОбластиПолномочий = ОбластиПолномочий();
	ТипыДокументов = ТипыДокументов();
	
	ДопустимыеОбласти = Неопределено;
	
	Если ТипДокумента = ТипыДокументов.ТитулПродавцаУПД Тогда
		
		ДопустимыеОбласти = ВсеЗначенияПеречисления(ОбластиПолномочий);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ТитулПродавцаУКД Тогда
		
		ДопустимыеОбласти = ЗначенияВМассиве(
			ОбластиПолномочий.ПодписантСФ,
			ОбластиПолномочий.СоставительДокумента,
			ОбластиПолномочий.СоставительИПодписантСФ
		);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ТитулПокупателяУПД
			ИЛИ ТипДокумента = ТипыДокументов.ТитулПокупателяДПТ
			ИЛИ ТипДокумента = ТипыДокументов.ТитулЗаказчикаДПРР Тогда
			
		ДопустимыеОбласти = ЗначенияВМассиве(
			ОбластиПолномочий.ИсполнительСделки,
			ОбластиПолномочий.ИсполнительСделкиИСоставитель,
			ОбластиПолномочий.СоставительДокумента
		);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ТитулПокупателяУКД Тогда
		
		ДопустимыеОбласти = ЗначенияВМассиве(
			ОбластиПолномочий.СоставительДокумента
		);
		
	КонецЕсли;
	
	Если ДопустимыеОбласти = Неопределено Тогда
		ВызватьИсключение "Не реализовано";
	КонецЕсли;
	
	ДопустимыеОбласти = Новый ФиксированныйМассив(ДопустимыеОбласти);
	Возврат ДопустимыеОбласти;
	
КонецФункции

Функция ЕстьПриемщик(ТипДокумента) Экспорт
	
	ТипыДокументов = ТипыДокументов();
	
	ТипыСПриемщиком = ЗначенияВМассиве(
		ТипыДокументов.ТитулПокупателяУПД,
		ТипыДокументов.ТитулПокупателяДПТ
	);
	
	Результат = (ТипыСПриемщиком.Найти(ТипДокумента) <> Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ВидСодержимого(ТипДокумента) Экспорт
	
	ТипыДокументов = ТипыДокументов();
	ВидыСодержимого = ВидыСодержимогоДокумента();
	
	ВидСодержимого = Новый Соответствие;
	ВидСодержимого[ТипыДокументов.ТитулПокупателяУПД] = ВидыСодержимого.Товары;
	ВидСодержимого[ТипыДокументов.ТитулПокупателяУКД] = ВидыСодержимого.Корректировка;
	ВидСодержимого[ТипыДокументов.ТитулПокупателяДПТ] = ВидыСодержимого.Товары;
	ВидСодержимого[ТипыДокументов.ТитулЗаказчикаДПРР] = ВидыСодержимого.Работы;
	
	Результат = ВидСодержимого[ТипДокумента];
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение "Не реализовано";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипТитулаПокупателя(ТипТитулаПродавца) Экспорт
	
	ТипыДокументов = ТипыДокументов();
	
	Титулы = Новый Соответствие;
	
	Титулы[ТипыДокументов.ТитулПродавцаУПД]					= ТипыДокументов.ТитулПокупателяУПД;
	Титулы[ТипыДокументов.ИсправленныйТитулПродавцаУПД]		= ТипыДокументов.ТитулПокупателяУПД;
	
	Титулы[ТипыДокументов.ТитулПродавцаУКД]					= ТипыДокументов.ТитулПокупателяУКД;
	Титулы[ТипыДокументов.ИсправленныйТитулПродавцаУКД]		= ТипыДокументов.ТитулПокупателяУКД;
	
	Титулы[ТипыДокументов.ТитулИсполнителяДПРР]				= ТипыДокументов.ТитулЗаказчикаДПРР;
	Титулы[ТипыДокументов.ИсправленныйТитулИсполнителяДПРР]	= ТипыДокументов.ТитулЗаказчикаДПРР;
	
	Титулы[ТипыДокументов.ТитулПродавцаДПТ]					= ТипыДокументов.ТитулПокупателяДПТ;
	Титулы[ТипыДокументов.ИсправленныйТитулПродавцаДПТ]		= ТипыДокументов.ТитулПокупателяДПТ;
	
	Результат = Титулы[ТипТитулаПродавца];
	
	Возврат Результат;
	
КонецФункции

// FIXME: Пока новые форматы не будут сделаны полностью
Функция ЭтоНовыйФормат(ТипДокумента) Экспорт
	
	Результат = Ложь
		ИЛИ ЭтоТитулПродавцаУПД(ТипДокумента)
		ИЛИ ЭтоТитулПокупателяУПД(ТипДокумента)
		ИЛИ ЭтоТитулПродавцаУКД(ТипДокумента)
		ИЛИ ЭтоТитулПокупателяУКД(ТипДокумента)
		ИЛИ ЭтоТитулПродавцаДПТ(ТипДокумента)
		ИЛИ ЭтоТитулПокупателяДПТ(ТипДокумента)
		ИЛИ ЭтоТитулИсполнителяДПРР(ТипДокумента)
		ИЛИ ЭтоТитулЗаказчикаДПРР(ТипДокумента);
		
	Возврат Результат;
	
КонецФункции

Функция ФормализованныеДокументы() Экспорт
	
	ТипыДокумента = ТипыДокументов();
	
	СписокТиповДокументов = ЗначенияВМассиве(
		ТипыДокумента.ТитулПродавцаТОРГ12,
		ТипыДокумента.ТитулИсполнителяАкт,
		ТипыДокумента.ТитулИсполнителяДПРР,
		ТипыДокумента.ТитулПродавцаДПТ,
		ТипыДокумента.ИсправленныйТитулИсполнителяДПРР,
		ТипыДокумента.ИсправленныйТитулПродавцаДПТ,
		ТипыДокумента.ТитулПродавцаУПД,
		ТипыДокумента.ИсправленныйТитулПродавцаУПД,
		ТипыДокумента.ТитулПродавцаУКД,
		ТипыДокумента.ИсправленныйТитулПродавцаУКД
	);
	
	СписокТиповДокументов = Новый ФиксированныйМассив(СписокТиповДокументов);
	
	Возврат СписокТиповДокументов;
	
КонецФункции

Функция ЭтоФормализованныйДокумент(ТипДокумента) Экспорт
	
	ТипыФормализованныхДокументов = ФормализованныеДокументы(); //: ТипыФормализованныхДокументов = Новый ФиксированныйМассив;
	
	Результат = (ТипыФормализованныхДокументов.Найти(ТипДокумента) <> Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ТребуетсяПодписьПолучателя(ТипДокумента, ВидДокумента = Неопределено) Экспорт
	
	Результат = Ложь;
	
	Если ЭтоТитулПродавцаУПД(ТипДокумента) Тогда
		
		ВидыУПД = ВидыУПД();
		
		Результат = Истина
			И ВидДокумента <> Неопределено 
			И ВидДокумента <> ВидыУПД.СЧФ;
		
	ИначеЕсли ЭтоТитулПродавцаУКД(ТипДокумента) Тогда
		
		ВидыУКД = ВидыУКД();
		
		Результат = Истина
			И ВидДокумента <> Неопределено
			И ВидДокумента <> ВидыУКД.КСЧФ;
			
	Иначе
		
		ТипыДокумента = ТипыДокументов();
		
		Результат = Ложь
			ИЛИ ТипДокумента = ТипыДокумента.ТитулПродавцаТОРГ12
			ИЛИ ТипДокумента = ТипыДокумента.ТитулИсполнителяАкт
			ИЛИ ТипДокумента = ТипыДокумента.ТитулИсполнителяДПРР
			ИЛИ ТипДокумента = ТипыДокумента.ТитулПродавцаДПТ;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ЭтоЕдиныйДокумент(ТипДокумента, ВидДокумента) Экспорт
	
	Результат = Ложь;
	
	Если ЭтоТитулПродавцаУПД(ТипДокумента) Тогда
		
		Результат = (ВидДокумента = ВидыУПД().СЧФДОП);
		
	ИначеЕсли ЭтоТитулПродавцаУКД(ТипДокумента) Тогда
		
		Результат = (ВидДокумента = ВидыУКД().КСЧФДИС);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//}

//===================================
//{ Контрагент

Функция ЭтоЮрЛицо(Контрагент) Экспорт
	
	ЭтоЮрЛицо = (Контрагент.ТипОрганизации = ТипыОрганизации().ЮрЛицо);
	Возврат ЭтоЮрЛицо;
	
КонецФункции

//}

//===================================
//{ Формирование представления

Функция ИннКпп(ИНН, КПП = "", ВыводитьПрефикс = Ложь, ДляUI = Истина)
	
	ВывестиКПП = НЕ ПустаяСтрока(КПП);
	
	Представление = ИНН + ?(
		ВывестиКПП,
		"/" + КПП,
		""
	);
	
	Если ВыводитьПрефикс
			И НЕ ПустаяСтрока(Представление) Тогда
		
		Если ДляUI Тогда
			Префикс = ?(ВывестиКПП, 
				НСтр("ru = 'ИНН/КПП: %1'"),
				НСтр("ru = 'ИНН: %1'")
			);
		Иначе
			Префикс = ?(ВывестиКПП, 
				НСтр("ru = 'ИНН/КПП %1'"),
				НСтр("ru = 'ИНН %1'")
			);
		КонецЕсли;
		
		Представление = СтрШаблон2(Префикс, Представление);
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Контрагент

Функция ПоляКонтрагента() Экспорт
	
	Поля = Новый Структура(
		"Наименование,
		|СвидетельствоОРегистрацииИП,
		|КонтактнаяИнформация,
		|БанковскийСчет,
		|ДопИнфо,
		|ИннКпп,
		|ИннКппДляUI,
		|Адрес,
		|Подразделение,
		|ИнформацияДляУчастников,
		|ОКПО"
	);
	
	Для Каждого Поле Из Поля Цикл
		Поля[Поле.Ключ] = Поле.Ключ;
	КонецЦикла;
	
	Поля = Новый ФиксированнаяСтруктура(Поля);
	Возврат Поля;
	
КонецФункции

// Представление контрагента.
//
// Параметры:
//  Контрагент		 - Контаргент	 - контрагент, представление которого необходимо сформировать, см. Новый_Контрагент().
//  ВыводимыеПоля	 - Строка		 - список полей, выводимых в представлении, допустимые имена полей - см. ПоляКонтрагента().
// 
// Возвращаемое значение:
//  Строка - представление контрагента для печатной формы.
//
Функция КонтрагентПредставление(Контрагент, Знач ВыводимыеПоля) Экспорт
	
	Если Контрагент = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Разделитель = ", ";
	
	ДопустимыеПоля = ПоляКонтрагента(); //: ДопустимыеПоля = Новый ФиксированнаяСтруктура;
	
	Представление = Новый Массив;
	
	СписокПолей = СтрРазделить2(ВыводимыеПоля, ",", Ложь, Истина);
	Для Каждого Поле Из СписокПолей Цикл
		
		ЧастьПредставления = Неопределено;
		
		Если Поле = ДопустимыеПоля.КонтактнаяИнформация Тогда
			
			КИ = Контрагент.КонтактнаяИнформация;
			ЧастьПредставления = СтрПредставление(Разделитель, 
				КИ.Телефон,   НСтр("ru = 'тел. %1'"),
				КИ.Факс,      НСтр("ru = 'факс %1'"),
				КИ.Email,     НСтр("ru = 'email %1'")
			);
			
		ИначеЕсли Поле = ДопустимыеПоля.БанковскийСчет Тогда
			
			БанковскийСчет = БанковскийСчетПредставление(Контрагент.БанковскийСчет);
			ЧастьПредставления = БанковскийСчет;
			
		ИначеЕсли Поле = ДопустимыеПоля.Адрес Тогда
			
			Адрес = АдресПредставление(Контрагент.Адрес);
			ЧастьПредставления = Адрес;
			
		ИначеЕсли Поле = ДопустимыеПоля.ИннКпп Тогда
			
			ИннКпп = ИннКппКонтрагента(Контрагент, Истина);
			ЧастьПредставления = ИннКпп;
			
		ИначеЕсли Поле = ДопустимыеПоля.ИннКппДляUI Тогда
			
			ИннКпп = ИннКппКонтрагента(Контрагент, Истина, Истина);
			ЧастьПредставления = ИннКпп;
			
		ИначеЕсли Поле = ДопустимыеПоля.ИнформацияДляУчастников Тогда
			
			ЧастьПредставления = Контрагент.ДопИнфоДляУчастников;
			
		ИначеЕсли ДопустимыеПоля.Свойство(Поле) Тогда
			
			Значение = Контрагент[Поле];
			ЧастьПредставления = Значение;
			
		Иначе
			
			ТекстИсключения = СтрШаблон2("Не реализовано для '%1'", Поле);
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЧастьПредставления) Тогда
			Представление.Добавить(ЧастьПредставления);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = ?(
		Представление.Количество() > 0,
		СтрСоединить2(Представление, Разделитель),
		Неопределено
	);
	
	Возврат Результат;
	
КонецФункции

Функция ИннКппКонтрагента(Контрагент, ВыводитьПрефикс = Ложь, ДляUI = Ложь) Экспорт
	
	Если Контрагент = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ИНН = Строка(Контрагент.ИНН);
	КПП = Строка(Контрагент.КПП);
	
	ВывестиКПП = ЭтоЮрЛицо(Контрагент);
	Если НЕ ВывестиКПП Тогда
		КПП = "";
	КонецЕсли;
	
	Представление = ИннКпп(ИНН, КПП, ВыводитьПрефикс, ДляUI);
	
	Возврат Представление;
	
КонецФункции

Функция КонтрагентПредставлениеДляUI(Контрагент) Экспорт
	
	ПоляКонтрагента = "Наименование, ИннКппДляUI";
	
	Представление = КонтрагентПредставление(Контрагент, ПоляКонтрагента);
	
	Возврат Представление;
	
КонецФункции

// Фактор

Функция ФакторПредставлениеДляUI(Фактор) Экспорт
	
	Если Фактор = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Разделитель = ", ";
	
	ИннКпп = ИннКпп(Фактор.ИНН, Фактор.КПП, Истина);
	
	Представление = СтрПредставление(Разделитель,
		Фактор.Наименование,,
		ИннКпп
	);
	
	Возврат Представление;
	
КонецФункции

// Адрес

Функция АдресПредставление(Адрес) Экспорт
	
	Если Адрес = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Разделитель = ", ";
	
	ВидыАдреса = ВидыАдреса();
	
	Представление = "";
		
	Если Адрес.ВидАдреса = ВидыАдреса.АдресРФ Тогда
		
		Представление = СтрПредставление(Разделитель,
			Адрес.ПочтовыйИндекс,,
			ПредставлениеРегиона(Адрес.КодРегиона),,
			Адрес.Район,,
			Адрес.Город,,
			Адрес.НаселенныйПункт,,
			Адрес.Улица,,
			Адрес.Дом,,
			Адрес.Строение,,
			Адрес.Квартира
		);
		
	ИначеЕсли Адрес.ВидАдреса = ВидыАдреса.Неструктурированный Тогда
		
		Представление = СтрПредставление(Разделитель,
			ПредставлениеСтраны(Адрес.КодСтраны),,
			Адрес.ИностранныйАдрес
		);
		
	ИначеЕсли Адрес.ВидАдреса = ВидыАдреса.КодГАР Тогда
		
		Представление = СтрПредставление(Разделитель, 
			Адрес.КодГАР
		);
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеРегиона(КодРегиона)
	
	Представление = "";
	
	Если НЕ ПустаяСтрока(КодРегиона) Тогда
		
		Регион = Классификаторы.РегионРФ(КодРегиона);
		Если Регион <> Неопределено Тогда
			Представление = Регион.ПолноеНаименование;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеСтраны(КодСтраны)
	
	Представление = "";
	Если ЗначениеЗаполнено(КодСтраны) Тогда
		
		Страна = Классификаторы.Страна(КодСтраны);
		Если Страна <> Неопределено Тогда
			Представление = ЗаполненноеЗначение(Страна.ПолноеНаименование, Страна.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Банковский счет

Функция БанковскийСчетПредставление(БанковскийСчет) Экспорт
	
	Разделитель = ", ";
	
	ШаблонСчет		= НСтр("ru = 'р/с %1'");
	ШаблонКоррСчет	= НСтр("ru = 'к/с %1'");
	ШаблонБанк		= НСтр("ru = 'Банк %1'");
	ШаблонБИК		= НСтр("ru = 'БИК %1'");
	
	Представление = СтрПредставление(Разделитель,
		БанковскийСчет.РасчетныйСчет, ШаблонСчет,
		БанковскийСчет.КоррСчет, ШаблонКоррСчет,
		БанковскийСчет.НаименованиеБанка, ШаблонБанк,
		БанковскийСчет.БИК, ШаблонБИК
	);
	
	Возврат Представление;
	
КонецФункции

Функция БанковскийСчетПредставлениеДляUI(БанковскийСчет) Экспорт
	
	Разделитель = ", ";
	
	ШаблонСчет		= НСтр("ru = 'Р/с %1'");
	ШаблонБанк		= НСтр("ru = 'в банке %1'");
	ШаблонБИК		= НСтр("ru = 'БИК %1'");
	ШаблонКоррСчет	= НСтр("ru = 'к/с %1'");
	
	ПредставлениеБанк = СтрПредставление(Разделитель,
		БанковскийСчет.НаименованиеБанка, ШаблонБанк,
		БанковскийСчет.БИК, ШаблонБИК,
		БанковскийСчет.КоррСчет, ШаблонКоррСчет
	);
	
	Представление = СтрПредставление(" ",
		БанковскийСчет.РасчетныйСчет, ШаблонСчет,
		ПредставлениеБанк
	);
	
	Возврат Представление;
	
КонецФункции

// Валюта

Функция ПоляВалюты() Экспорт
	
	Поля = Новый Структура(
		"Наименование,
		|Код,
		|Курс"
	);
	
	Для Каждого Поле Из Поля Цикл
		Поля[Поле.Ключ] = Поле.Ключ;
	КонецЦикла;
	
	Поля = Новый ФиксированнаяСтруктура(Поля);
	Возврат Поля;
	
КонецФункции

Функция ВалютаПредставление(Валюта, Знач ВыводимыеПоля) Экспорт
	
	Разделитель = ", ";
	
	ДопустимыеПоля = ПоляВалюты(); //: ДопустимыеПоля = Новый ФиксированнаяСтруктура;
	
	Представление = Новый Массив;
	
	СписокПолей = СтрРазделить2(ВыводимыеПоля, ",", Ложь, Истина);
	Для Каждого Поле Из СписокПолей Цикл
		
		ЧастьПредставления = Неопределено;
		
		Если Поле = ДопустимыеПоля.Курс Тогда
			
			ЧастьПредставления = СтрПредставление("",
				Формат(Валюта.Курс, "ЧГ="), НСтр("ru = 'по курсу %1'")
			);
			
		ИначеЕсли ДопустимыеПоля.Свойство(Поле) Тогда
			
			ЧастьПредставления = Валюта[Поле];
			
		Иначе
			
			ТекстИсключения = СтрШаблон2("Не реализовано для '%1'", Поле);
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЧастьПредставления) Тогда
			Представление.Добавить(ЧастьПредставления);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = СтрСоединить2(Представление, Разделитель, Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ВалютаПредставлениеДляUI(Валюта) Экспорт
	
	ПоляВалюты = "Наименование, Код, Курс";
	
	Представление = ВалютаПредставление(Валюта, ПоляВалюты);
	
	Возврат Представление;
	
КонецФункции

// Реквизиты доп. документов

Функция ПлатежноРасчетныеДокументыПредставление(ПлатежноРасчетныеДокументы) Экспорт
	
	Разделитель = "; ";
	
	Представление = Новый Массив;
	Для Каждого Документ Из ПлатежноРасчетныеДокументы Цикл
		ТекстПРД = ПредставлениеДокумента(
			,
			Документ.Номер,
			Документ.Дата
		);
		Представление.Добавить(ТекстПРД);
	КонецЦикла;
	
	Результат = СтрСоединить2(Представление, Разделитель);
	
	Возврат Результат;
	
КонецФункции

Функция ТранспортныеНакладныеПредставление(ТранспортныеНакладные) Экспорт
	
	Разделитель = "; ";
	
	ТН = Новый Массив;
	Для Каждого Документ Из ТранспортныеНакладные Цикл
		ТекстТН = ПредставлениеДокумента(
			,
			Документ.Номер,
			Документ.Дата
		);
		ТН.Добавить(ТекстТН);
	КонецЦикла;
	
	Результат = СтрСоединить2(ТН, Разделитель);
	
	Возврат Результат;
	
КонецФункции

Функция ОснованиеПредставление(Основание) Экспорт
	
	Представление = ПредставлениеДокумента(
		Основание.Наименование,
		Основание.Номер,
		Основание.Дата
	);
	
	Возврат Представление;
	
КонецФункции

Функция ОснованиеПредставлениеДляUI(Основание) Экспорт
	
	Разделитель = " ";
	
	ТекстОснование = ОснованиеПредставление(Основание);
	
	Представление = СтрПредставление(Разделитель,
		ТекстОснование,,
		Основание.ДопИнфо, НСтр("ru = '(%1)'")
	);
	
	Возврат Представление;
	
КонецФункции

// Ответственное лицо

Функция ОтветственноеЛицоПредставление(ОтветственноеЛицо) Экспорт
	
	Если ОтветственноеЛицо = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Разделитель = ", ";
	
	ПредставлениеФИО = ФИОПредставление(ОтветственноеЛицо.ФИО);
	
	Представление = СтрПредставление(Разделитель,
		ОтветственноеЛицо.НаименованиеОрганизации,,
		ОтветственноеЛицо.Должность,,
		ПредставлениеФИО
	);
	
	Возврат Представление;
	
КонецФункции

// Подписант

Функция ПодписантПредставление(Подписант) Экспорт
	
	Разделитель = ", ";
	
	ПредставлениеФИО = ФИОПредставление(Подписант.ФИО);
	
	ОбластьПолномочий = ПредставлениеПеречисления(ОбластиПолномочий(), Подписант.ОбластьПолномочий);
	
	Представление = СтрПредставление(Разделитель,
		Подписант.НаименованиеОрганизации,,
		Подписант.ИНН, НСтр("ru = 'ИНН: %1'"),
		Подписант.Должность,,
		ПредставлениеФИО,,
		ОбластьПолномочий, НСтр("ru = '(%1)'")
	);
	
	Возврат Представление;
	
КонецФункции

// Составитель

Функция СоставительДокументаПредставление(Составитель) Экспорт
	
	Разделитель = " ";
	
	Представление = СтрПредставление(Разделитель,
		Составитель.НаименованиеОрганизации,,
		Составитель.ОснованиеПолномочий, НСтр("ru = '(%1)'")
	);
	
	Возврат Представление;
	
КонецФункции

// Прочее

Функция ФИОПредставление(ФИО) Экспорт
	
	Разделитель = " ";
	
	Представление = СтрПредставление(Разделитель,
		ФИО.Фамилия,,
		ФИО.Имя,,
		ФИО.Отчество
	);
	
	Возврат Представление;
	
КонецФункции

Функция ИнфПолеПредставление(ИнфПоле) Экспорт
	
	Разделитель = "; ";
	ШаблонПоле = "%1: %2";
	
	Представление = Новый Массив;
	Для Каждого Поле Из ИнфПоле Цикл
		ТекстПоле = СтрШаблон2(ШаблонПоле, Поле.Идентификатор, Поле.Значение);
		Представление.Добавить(ТекстПоле);
	КонецЦикла;
	
	Результат = СтрСоединить2(Представление, Разделитель);
	
	Возврат Результат;
	
КонецФункции

//}

//===================================
//{ Подписанты

Функция НайтиПодписантаПоТипуОрганизации(Подписанты, ТипОрганизации)
	
	Результат = Неопределено;
	
	Для Каждого Подписант Из Подписанты Цикл
		Если Подписант.ТипОрганизации = ТипОрганизации Тогда
			Результат = Подписант;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Руководитель(Подписанты) Экспорт
	
	Подписант = НайтиПодписантаПоТипуОрганизации(
		Подписанты, 
		ТипыОрганизации().ЮрЛицо
	);
	
	Возврат Подписант;
	
КонецФункции

Функция ИндивидуальныйПредприниматель(Подписанты) Экспорт
	
	Подписант = НайтиПодписантаПоТипуОрганизации(
		Подписанты, 
		ТипыОрганизации().ИП
	);
	
	Возврат Подписант;
	
КонецФункции

//}

Функция РазмерСтавкиНДС(СтавкаНДС) Экспорт
	
	СтавкиНДС = СтавкиНДС();
	
	РазмерСтавки = Новый Соответствие;
	РазмерСтавки[СтавкиНДС.БезНДС]		= Неопределено;
	РазмерСтавки[СтавкиНДС.НДС0]		= 0;
	РазмерСтавки[СтавкиНДС.НДС10]		= 10;
	РазмерСтавки[СтавкиНДС.НДС18]		= 18;
	РазмерСтавки[СтавкиНДС.НДС20]		= 20;
	РазмерСтавки[СтавкиНДС.НДС10_110]	= 10;
	РазмерСтавки[СтавкиНДС.НДС18_118]	= 18;
	
	Результат = РазмерСтавки[СтавкаНДС];
	
	Возврат Результат;
	
КонецФункции
