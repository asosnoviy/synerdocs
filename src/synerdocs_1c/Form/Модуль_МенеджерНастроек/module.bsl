
//========================================================================
// Модуль работы с настройками ИР. Отвечает за:
// 	- хранение и загрузку настроек;
// 	- хранение настроек по умолчанию.
//========================================================================

// Модули
Перем ОбъектнаяМодель;

//========================================================================
// ИНИЦИАЛИЗАЦИЯ
//========================================================================

Процедура ПодключитьМодули()
	
	ОбъектнаяМодель = Модуль("Модуль_ОбъектнаяМодель");
	
КонецПроцедуры

Процедура Инициализировать() Экспорт
	
	ПодключитьМодули();
	
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

// События, генерируемые модулем
Функция События() Экспорт
	
	События = Новый Структура(
		"НастройкиИзменились"
	);
	
	Для Каждого Событие Из События Цикл
		События[Событие.Ключ] = "Syn_" + Событие.Ключ;
	КонецЦикла;
	
	События = Новый_Перечисление(События);
	
	Возврат События;
	
КонецФункции

//{ Перечисления

Функция ВариантыОтправкиУниверсальногоДокумента() Экспорт
	
	Способы = Новый Структура(
		"ОднимДокументом,
		|РазнымиДокументами"
	);
	
	Способы.ОднимДокументом		= 1;
	Способы.РазнымиДокументами	= 2;
	
	Способы = Новый_Перечисление(Способы);
	
	Возврат Способы;
	
КонецФункции

Функция ВариантыПодбораКодаНоменклатуры() Экспорт
	
	Варианты = Новый Структура(
		"Код,
		|Штрихкод"
	);
	
	Варианты.Код = 0;
	Варианты.Штрихкод = 1;
	
	Варианты = Новый_Перечисление(Варианты);
	
	Возврат Варианты;
	
КонецФункции

//}

//{ Работа со значениями настроек

//Функция возвращает значение настройки модуля, которые задаются на форме настроек
//
// Параметры: 
//  ИмяНастройки: наименование настройки
//
// Возвращаемое значение:
//  Значение настройки: значение настройки, могут различаться для разных пользователей 1С
//
Функция ПолучитьЗначениеНастройкиМодуля(ИмяНастройки = "") Экспорт
	
	//Восстанавливаем настройки пользователя
	Попытка
		СтруктураНастроек = НастройкиИР();
		Если СтруктураНастроек <> НЕОПРЕДЕЛЕНО И
			СтруктураНастроек.Свойство(ИмяНастройки) Тогда
			Возврат СтруктураНастроек[ИмяНастройки];
		КонецЕсли;
	Исключение
		Если ИмяНастройки = "ВариантСинхронизацииНоменклатуры" Тогда
			Возврат 1;
		ИначеЕсли ИмяНастройки = "ВариантАвтоматическойСинхронизацииНоменклатуры" Тогда
			Возврат 3;
		ИначеЕсли ИмяНастройки = "ВидАкта" Тогда
			Возврат 3;
		Иначе
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

Функция ЭтоПродуктив(Настройки) Экспорт
	
	Продуктив = "https://service.synerdocs.ru";
	
	Результат = СтрНачинаетсяС2(СокрЛ(Настройки.ПутьПубликацииСервиса), Продуктив);
	
	Возврат Результат;
	
КонецФункции

Функция ПодписантЗаполнен(Настройки) Экспорт
	
	Подписант = Настройки.ПоддержкаНовыхФорматов.Подписант;
	
	Заполнен = Истина;
	
	ПроверяемыеПоля = СтрРазделить2("ОснованиеПолномочий, Статус", ",",, Истина);
	Для Каждого Поле Из ПроверяемыеПоля Цикл
		
		Значение = Подписант[Поле];
		Заполнен = ЗначениеЗаполнено(Значение);
		
		Если НЕ Заполнен Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Заполнен Тогда
		
		ОбластиПолномочий = ОбъектнаяМодель.ОбластиПолномочий();
		
		ПроверяемыеПоля = СтрРазделить2("ОбластьПолномочийУПД, ОбластьПолномочийУКД", ",",, Истина);
		Для Каждого Поле Из ПроверяемыеПоля Цикл
			
			Значение = Подписант[Поле];
			Заполнен = ЗначениеПринадлежитПеречислению(Значение, ОбластиПолномочий);
			
			Если НЕ Заполнен Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Заполнен;
	
КонецФункции

//}

//{ Сохранение/загрузка настроек

Функция НастройкиПоУмолчанию() Экспорт
	
	НастройкиПоУмолчанию = Новый_ОбщиеНастройкиИР();
	
	// Google analytics
	НастройкиПоУмолчанию.ОтправлятьДанныеАналитики = Истина;
	
	// Прокси
	НастройкиПрокси = НастройкиПоУмолчанию.Прокси;
	НастройкиПрокси.Использовать	= Ложь;
	НастройкиПрокси.Адрес	= "";
	НастройкиПрокси.Порт	= "";
	НастройкиПрокси.Логин	= "";
	НастройкиПрокси.Пароль	= "";
	НастройкиПрокси.ИспользоватьNTLM			= Ложь;
	НастройкиПрокси.ИспользоватьДляЛокальных	= Ложь;
	
	// Типы отправляемых документов
	НастройкиПоУмолчанию.ОтправлятьАкт		= Истина;
	НастройкиПоУмолчанию.ОтправлятьАктПУ	= ?(Метаданные.Имя = "УправлениеПроизводственнымПредприятием", Истина, Ложь);
	НастройкиПоУмолчанию.ОтправлятьТОРГ12	= Истина;
	НастройкиПоУмолчанию.ОтправлятьСФ		= Истина;
	НастройкиПоУмолчанию.ОтправлятьСчет		= Истина;
	
	НастройкиПоУмолчанию.ВидАкта = 1;
	
	ШаблонУступочнойНадписи = СтрЗаменить(ПолучитьМакет("ШаблонУступочнойНадписи").ПолучитьТекст(), Символы.ПС, " ");
	НастройкиПоУмолчанию.ШаблонУступочнойНадписи = ШаблонУступочнойНадписи;
	
	//Криптопровайдер
	НастройкиПоУмолчанию.ТипКриптопровайдера				= 1;
	НастройкиПоУмолчанию.ИспользоватьЛокальнуюКриптографию	= Ложь;
	
	НастройкиПоУмолчанию.ВариантСинхронизацииНоменклатуры				= 1;
	НастройкиПоУмолчанию.ВариантАвтоматическойСинхронизацииНоменклатуры	= 0;
	НастройкиПоУмолчанию.ЗначениеКодаНоменклаутрыТН						= ВариантыПодбораКодаНоменклатуры().Код;
	
	НастройкиПоУмолчанию.ИнтервалПолученияДокументовИзСервиса	= 5;
	НастройкиПоУмолчанию.АвтоматическиПолучатьВходящиеДокументы	= Ложь;
	
	НастройкиПоУмолчанию.ВариантСохраненияФайловСДлиннымиИменами	= 1;
	НастройкиПоУмолчанию.МаксимальноРазрешеннаяДлинаИмениФайла		= 260;
	
	НастройкиПоУмолчанию.АдресВебКлиента		= "https://client.synerdocs.ru";
	НастройкиПоУмолчанию.ПутьПубликацииСервиса	= "https://service.synerdocs.ru";
	
	НастройкиПоУмолчанию.МаксимальноеВремяОжиданияПриОткрытииФайлаСобытий = 10;
	
	НастройкиПоУмолчанию.МаксимальноеВремяОжиданияПолученияОчередногоСообщения = 600;
	
	НастройкиПоУмолчанию.ИспользоватьДоговорыФакторинг = Ложь;
	
	ПоддержкаНовыхФорматов = НастройкиПоУмолчанию.ПоддержкаНовыхФорматов;
	ПоддержкаНовыхФорматов.Включена									= Ложь;
	ПоддержкаНовыхФорматов.ВариантОтправкиУниверсальногоДокумента	= ВариантыОтправкиУниверсальногоДокумента().ОднимДокументом;
	
	Подписант = ПоддержкаНовыхФорматов.Подписант;
	Подписант.ОбластьПолномочийУПД				= Неопределено;
	Подписант.ОбластьПолномочийУКД				= Неопределено;
	Подписант.Статус							= Неопределено;
	Подписант.ОснованиеПолномочий				= "";
	Подписант.ОснованиеПолномочийОрганизации	= "";
	
	НастройкиПоУмолчанию = ФиксированныеДанные(НастройкиПоУмолчанию);
	Возврат НастройкиПоУмолчанию;
	
КонецФункции

Функция НастройкиИР() Экспорт
	
	Настройки = Новый_ОбщиеНастройкиИР();
	
	НастройкиПоУмолчанию = НеФиксированныеДанные(НастройкиПоУмолчанию());
	ЗаполнитьСтруктуру(Настройки, НастройкиПоУмолчанию);
	
	СохраненныеНастройки = ЗагрузитьОбщиеНастройкиИР();
	Если СохраненныеНастройки <> Неопределено Тогда
		СохраненныеНастройки = НеФиксированныеДанные(СохраненныеНастройки);
		ЗаполнитьСтруктуру(Настройки, СохраненныеНастройки);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Процедура СохранитьНастройкиИР(Настройки) Экспорт
	
	Если ТипЗнч(Настройки) <> Тип("ФиксированнаяСтруктура") Тогда
		СохраняемыеНастройки = ФиксированныеДанные(Настройки);
	Иначе
		СохраняемыеНастройки = Настройки;
	КонецЕсли;
	
	СохранитьЗначение(ИмяХранилищаНастроек(), СохраняемыеНастройки);
	
	Оповестить(События().НастройкиИзменились);
	
КонецПроцедуры

//}

//========================================================================
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================

//{ Объекты

Функция Новый_ОбщиеНастройкиИР()
	
	Настройки = Новый Структура(
		"ОтправлятьДанныеАналитики,
		|Прокси,
		|
		|ОтправлятьАкт, ОтправлятьАктПУ, ОтправлятьТОРГ12, ОтправлятьСФ, ОтправлятьСчет,
		|
		|ВидАкта,
		|
		|ШаблонУступочнойНадписи,
		|
		|ТипКриптопровайдера, ИспользоватьЛокальнуюКриптографию,
		|
		|ВариантСинхронизацииНоменклатуры, ВариантАвтоматическойСинхронизацииНоменклатуры, ЗначениеКодаНоменклаутрыТН,
		|
		|ИнтервалПолученияДокументовИзСервиса, АвтоматическиПолучатьВходящиеДокументы,
		|
		|ВариантСохраненияФайловСДлиннымиИменами, МаксимальноРазрешеннаяДлинаИмениФайла,
		|
		|АдресВебКлиента, ПутьПубликацииСервиса,
		|
		|МаксимальноеВремяОжиданияПриОткрытииФайлаСобытий,
		|
		|МаксимальноеВремяОжиданияПолученияОчередногоСообщения,
		|
		|ИспользоватьДоговорыФакторинг,
		|
		|ПоддержкаНовыхФорматов"
	);
	
	Настройки.Прокси					= Новый_НастройкиПрокси();
	Настройки.ПоддержкаНовыхФорматов	= Новый_ПоддержкаНовыхФорматов();
	
	Возврат Настройки;
	
КонецФункции

Функция Новый_НастройкиПрокси()
	
	НастройкиПрокси = Новый Структура(
		"Использовать,
		|Адрес, Порт,
		|Логин, Пароль,
		|ИспользоватьNTLM,
		|ИспользоватьДляЛокальных"
	);
	
	Возврат НастройкиПрокси;
	
КонецФункции

Функция Новый_ПоддержкаНовыхФорматов()
	
	Настройки = Новый Структура(
		"Включена,
		|ВариантОтправкиУниверсальногоДокумента,
		|
		|Подписант"
	);
	
	Настройки.ВариантОтправкиУниверсальногоДокумента = Неопределено; //: ВариантыОтправкиУниверсальногоДокумента();
	
	Настройки.Подписант = Новый_ПоляПодписанта();
	
	Возврат Настройки;
	
КонецФункции

Функция Новый_ПоляПодписанта()
	
	Подписант = Новый Структура(
		"ОбластьПолномочийУПД, ОбластьПолномочийУКД,
		|Статус,
		|ОснованиеПолномочий,
		|ОснованиеПолномочийОрганизации"
	);
	
	Подписант.ОбластьПолномочийУПД				= Неопределено; //: ОбъектнаяМодель.ОбластиПолномочий();
	Подписант.ОбластьПолномочийУКД				= Неопределено; //: ОбъектнаяМодель.ОбластиПолномочий();
	Подписант.Статус							= Неопределено; //: ОбъектнаяМодель.СтатусыПодписанта();
	Подписант.ОснованиеПолномочий				= "";
	Подписант.ОснованиеПолномочийОрганизации	= "";
	
	Возврат Подписант;
	
КонецФункции

//}

Функция ИмяХранилищаНастроек()
	
	Возврат "Syn_ОбщиеНастройкиМодуляИнтеграции21";
	
КонецФункции

Функция ЗагрузитьОбщиеНастройкиИР()
	
	Настройки = ВосстановитьЗначение(ИмяХранилищаНастроек());
	
	Если ТипЗнч(Настройки) <> Тип("ФиксированнаяСтруктура")
			И ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Настройки = Неопределено;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции


Процедура ЗаполнитьСтруктуру(Приемник, Источник)
	
	//: Приемник = Новый Структура; Источник = Приемник;
	
	Если НЕ ЭтоСтруктура(Источник) Тогда
		
		Если НЕ ЭтоСтруктура(Приемник) Тогда
			Приемник = Источник;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Элемент Из Источник Цикл
		Если Приемник.Свойство(Элемент.Ключ) Тогда
			ЗаполнитьСтруктуру(Приемник[Элемент.Ключ], Источник[Элемент.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоСтруктура(Значение)
	
	Результат = Ложь
		ИЛИ ТипЗнч(Значение) = Тип("Структура")
		ИЛИ ТипЗнч(Значение) = Тип("ФиксированнаяСтруктура");
		
	Возврат Результат;
	
КонецФункции

