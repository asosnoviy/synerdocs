
// Модули
Перем ОбъектнаяМодель, Криптография;

//========================================================================
// ИНИЦИАЛИЗАЦИЯ
//========================================================================

Процедура ПодключитьМодули()
	
	ОбъектнаяМодель	= Модуль("Модуль_ОбъектнаяМодель");
	Криптография	= Модуль("Модуль_Криптография");
	
КонецПроцедуры

Процедура Инициализировать() Экспорт
	
	ПодключитьМодули();
	
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

// Получает список документов.
//
// Параметры:
//  ЭтоВходящий		 - Булево - если Истина, будет получен список входящих документов, иначе исходящих.
//  ПервыйДокумент	 - Число - параметр паджинации, список будет получен начиная с этого документа.
//  ВсегоДокументов	 - Число - максимум документов в списке.
//  Фильтр			 - Структура - фильтрация документов (см. Новый_ФильтрСпискаДокументов()).
// 
// Возвращаемое значение:
//  Структура - полученный список документов с информацией для паджинации (см. Модуль_ОбъектнаяМодель.Новый_СписокДокументов()).
//
Функция ПолучитьСписокДокументов(ЭтоВходящий, ПервыйДокумент = 0, ВсегоДокументов = 1000, Фильтр = Неопределено) Экспорт
	
	Сервис = ExchangeService();
	Classes = КлассыСервиса();
	
	DocumentEntryOptions = ?(Фильтр <> Неопределено, 
		DocumentEntryOptions(Фильтр),
		Новый_ОбъектСервиса(Classes.DocumentEntryOptions)
	);
	
	Если ЭтоВходящий Тогда
		DocumentEntryOptions.BoxTo		= Syn_ЯщикОрганизации;
	Иначе
		DocumentEntryOptions.BoxFrom	= Syn_ЯщикОрганизации;
	КонецЕсли;
	
	DocumentEntryOptions.First	= ПервыйДокумент;
	DocumentEntryOptions.Max	= ВсегоДокументов;
	
	DocumentEntryList = Сервис.GetDocumentEntries(Токен, DocumentEntryOptions);
	
	Результат = СписокДокументов(DocumentEntryList);
	
	Возврат Результат;
	
КонецФункции

// Получить информацию об организации, зарегистрированной в сервисе.
//
// Параметры:
//  Ящик - Строка - абонетский ящик организации.
// 
// Возвращаемое значение:
//  Структура - информация об организации (см. Новый_ПолноеОписаниеОрганизации()).
//
Функция ПолучитьОрганизацию(Ящик) Экспорт
	
	Хранилище = "Организация/ПоЯщику";
	
	ОписаниеОрганизации = ПолучитьИзКеша(Хранилище, Ящик);
	Если ОписаниеОрганизации <> Неопределено Тогда
		Возврат ОписаниеОрганизации;
	КонецЕсли;
	
	Service = ExchangeService();
	
	Classes = КлассыСервиса();
	Критерии = КритерииОтбораОрганизации();
	
	Filter = Новый_ОбъектСервиса(Classes.OrganizationByCriteriaValues);
	Filter.BoxAddress = Ящик;
	
	Organization = Service.GetOrganizationBy(Токен, Syn_ЯщикОрганизации, Критерии.ПоЯщику, Filter);
	
	ОписаниеОрганизации = Новый_ПолноеОписаниеОрганизации();
	ОписаниеОрганизации.Наименование = Organization.Name;
	
	ОписаниеОрганизации = Новый ФиксированнаяСтруктура(ОписаниеОрганизации);
	
	ДобавитьВКеш(Хранилище, Ящик, ОписаниеОрганизации);
	
	Возврат ОписаниеОрганизации;
	
КонецФункции

//{ Парсеры/сериализаторы

// Провереят реализована ли сериализация указанного типа в модуле.
//
// Параметры:
//  ТипДокумента - Произвольный - тип документа (см. Модуль_ОбъектнаяМодель.ТипыДокументов()).
// 
// Возвращаемое значение:
//  Булево - сериализация поддерживается, можно использовать МодельВДокумент() для этого типа документа.
//
Функция МожноСериализовать(ТипДокумента) Экспорт
	
	ТипыДокументов = ОбъектнаяМодель.ТипыДокументов();
	
	Результат = Ложь
		ИЛИ ТипДокумента = ТипыДокументов.ТитулИсполнителяДПРР
		ИЛИ ТипДокумента = ТипыДокументов.ТитулЗаказчикаДПРР
		ИЛИ ТипДокумента = ТипыДокументов.ТитулПродавцаДПТ
		ИЛИ ТипДокумента = ТипыДокументов.ТитулПокупателяДПТ
		ИЛИ ТипДокумента = ТипыДокументов.ИсправленныйТитулИсполнителяДПРР
		ИЛИ ТипДокумента = ТипыДокументов.ИсправленныйТитулПродавцаДПТ
		ИЛИ ТипДокумента = ТипыДокументов.ТитулПродавцаУПД
		ИЛИ ТипДокумента = ТипыДокументов.ТитулПокупателяУПД
		ИЛИ ТипДокумента = ТипыДокументов.ИсправленныйТитулПродавцаУПД
		ИЛИ ТипДокумента = ТипыДокументов.ТитулПродавцаУКД
		ИЛИ ТипДокумента = ТипыДокументов.ТитулПокупателяУКД
		ИЛИ ТипДокумента = ТипыДокументов.ИсправленныйТитулПродавцаУКД;
	
	Возврат Результат;
	
КонецФункции

// Парсит документ в объектную модель ИР.
//
// Параметры:
//  ТипДокумента - Произвольный - тип документа (см. Модуль_ОбъектнаяМодель.ТипыДокументов()).
//  Содержимое	 - ДвоичныеДанные - содержимое документа.
// 
// Возвращаемое значение:
//  Структура - распарсенный документ (см. Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУПД(),
// 		Модуль_ОбъектнаяМодель.Новый_ТитулПокупателяУПД(), Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУКД(),
// 		Модуль_ОбъектнаяМодель.Новый_ТитулПокупателяУКД(), Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаДПТ(),
// 		Модуль_ОбъектнаяМодель.Новый_ТитулПокупателяДПТ(), Модуль_ОбъектнаяМодель.Новый_ТитулИсполнителяДПРР(),
// 		Модуль_ОбъектнаяМодель.Новый_ТитулЗаказчикаДПРР()).
//
Функция ДокументВМодель(ТипДокумента, Содержимое) Экспорт
	
	Если ОбъектнаяМодель.ЭтоТитулПродавцаУПД(ТипДокумента) Тогда
		Результат = ДокументВМодель_ТитулПродавцаУПД(Содержимое);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПокупателяУПД(ТипДокумента) Тогда
		Результат = ДокументВМодель_ТитулПокупателяУПД(Содержимое);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПродавцаУКД(ТипДокумента) Тогда
		Результат = ДокументВМодель_ТитулПродавцаУКД(Содержимое);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПокупателяУКД(ТипДокумента) Тогда
		Результат = ДокументВМодель_ТитулПокупателяУКД(Содержимое);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПродавцаДПТ(ТипДокумента) Тогда
		Результат = ДокументВМодель_ТитулПродавцаДПТ(Содержимое);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПокупателяДПТ(ТипДокумента) Тогда
		Результат = ДокументВМодель_ТитулПокупателяДПТ(Содержимое);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулИсполнителяДПРР(ТипДокумента) Тогда
		Результат = ДокументВМодель_ТитулИсполнителяДПРР(Содержимое);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулЗаказчикаДПРР(ТипДокумента) Тогда
		Результат = ДокументВМодель_ТитулЗаказчикаДПРР(Содержимое);
	Иначе
		ВызватьИсключение "Не реализовано";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует документ из объектной модели ИР.
//
// Параметры:
//  ТипДокумента	 - Произвольный - тип документа (см. Модуль_ОбъектнаяМодель.ТипыДокументов()).
//  Модель			 - Структура - представление документа в виде объектной модели ИР
// 								(см. Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУПД(),
// 								Модуль_ОбъектнаяМодель.Новый_ТитулПокупателяУПД(), Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУКД(),
// 								Модуль_ОбъектнаяМодель.Новый_ТитулПокупателяУКД(), Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаДПТ(),
// 								Модуль_ОбъектнаяМодель.Новый_ТитулПокупателяДПТ(), Модуль_ОбъектнаяМодель.Новый_ТитулИсполнителяДПРР(),
// 								Модуль_ОбъектнаяМодель.Новый_ТитулЗаказчикаДПРР()).
//  ИДТитулаПродавца - Строка - обязателен для титула покупателя, часть реквизитов документа заполняется
// 								из титула продавца с указанным идентификатором.
// 
// Возвращаемое значение:
//  Структура - сформированный документ и информация об ошибках (см. Новый_РезультатГенератораДокумента()).
//
Функция МодельВДокумент(ТипДокумента, Модель, ИДТитулаПродавца = Неопределено) Экспорт
	
	ТипыДокументов = ОбъектнаяМодель.ТипыДокументов();
	
	Результат = Неопределено;
	Если ОбъектнаяМодель.ЭтоТитулПродавцаУПД(ТипДокумента) Тогда
		Результат = МодельВДокумент_ТитулПродавцаУПД(Модель);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПродавцаУКД(ТипДокумента) Тогда
		Результат = МодельВДокумент_ТитулПродавцаУКД(Модель);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПокупателяУПД(ТипДокумента) Тогда
		Результат = МодельВДокумент_ТитулПокупателяУПД(Модель, ИДТитулаПродавца);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПокупателяУКД(ТипДокумента) Тогда
		Результат = МодельВДокумент_ТитулПокупателяУКД(Модель, ИДТитулаПродавца);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПокупателяДПТ(ТипДокумента) Тогда
		Результат = МодельВДокумент_ТитулПокупателяДПТ(Модель, ИДТитулаПродавца);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулЗаказчикаДПРР(ТипДокумента) Тогда
		Результат = МодельВДокумент_ТитулЗаказчикаДПРР(Модель, ИДТитулаПродавца);
	Иначе
		ВызватьИсключение "Не реализовано";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//}

Функция ОтправитьСообщение(Сообщение) Экспорт
	
	Service = ExchangeService();
	
	ЭтоПересылка = (Сообщение.ПересылаемыеДокументы.Количество() > 0);
	Если НЕ ЭтоПересылка Тогда
		Message = Message_Service(Сообщение);
		Попытка
			SentMessage = Service.SendMessage(Токен, Message);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ОписаниеПричиныОшибки(ИнформацияОбОшибке);
			
			Предупреждение(ТекстОшибки);
		КонецПопытки;
	Иначе
		Message = ForwardMessage(Сообщение);
		SentMessage = Service.SendForwardMessage(Токен, Message);
	КонецЕсли;
	
	Результат = ОтправленныеДокументы(SentMessage);
	
	Возврат Результат;
	
КонецФункции

//========================================================================
// ОБЪЕКТНАЯ МОДЕЛЬ
//========================================================================

//{ Перечисления

// Список документов

Функция СтатусыПодписанияДокумента() Экспорт
	
	Статусы = Новый Структура(
		"ПодписьНеТребуется,
		|ТребуетсяПодпись,
		|Подписан,
		|Отказано"
	);
	
	Статусы.ПодписьНеТребуется	= "NoSignNeeded";
	Статусы.ТребуетсяПодпись	= "WaitingForSign";
	Статусы.Подписан			= "Signed";
	Статусы.Отказано			= "SignRejected";
	
	Статусы = Новый_Перечисление(Статусы);
	
	Возврат Статусы;
	
КонецФункции

Функция СтатусыСФ() Экспорт
	
	Статусы = Новый Структура(
		"Отправлен,
		|Выставлен,
		|ЗапрошеноУточнение,
		|НарушенРегламент"
	);
	
	Статусы.Отправлен			= "InvoiceSent";
	Статусы.Выставлен			= "InvoiceCharged";
	Статусы.ЗапрошеноУточнение	= "InvoiceRejected";
	Статусы.НарушенРегламент	= "InvoiceNotValid";
	
	Статусы = Новый_Перечисление(Статусы);
	
	Возврат Статусы;
	
КонецФункции

Функция КритерииОтбораОрганизации()
	
	Критерии = Новый Структура(
		"ПоЯщику"
	);
	
	Критерии.ПоЯщику = "ByBoxAddress";
	
	Критерии = Новый_Перечисление(Критерии);
	
	Возврат Критерии;
	
КонецФункции

Функция ТипыДО() 
	
	Типы = Новый Структура(
		"СПодписью,
		|БезПодписи,
		|Пересылка"
	);
	
	Типы.СПодписью	= "SentSigned";
	Типы.БезПодписи	= "SentUnsigned";
	Типы.Пересылка	= "SentForward";
	
	Типы = Новый_Перечисление(Типы);
	
	Возврат Типы;
	
КонецФункции

// Валидация

Функция ТипыОшибок() Экспорт
	
	Типы = Новый Структура(
		"Предупреждение,
		|Ошибка"
	);
	
	Типы.Предупреждение	= 0;
	Типы.Ошибка			= 1;
	
	Типы = Новый_Перечисление(Типы);
	
	Возврат Типы;
	
КонецФункции

Функция СтатусыВалидации() Экспорт
	
	Статусы = Новый Структура(
		"Успех,
		|Ошибка,
		|Предупреждение"
	);
	
	Статусы.Успех			= 1;
	Статусы.Ошибка			= 2;
	Статусы.Предупреждение	= 3;
	
	Статусы = Новый_Перечисление(Статусы);
	
	Возврат Статусы;
	
КонецФункции

//}

//{ Объекты

// Список документов

Функция Новый_ФильтрСпискаДокументов() Экспорт
	
	Фильтр = Новый Структура(
		"Контрагенты,
		|
		|СтатусыПодписания,
		|СтатусыСФ,
		|ТипыДокументов,
		|
		|НачалоПериода,
		|КонецПериода"
	);
	
	Фильтр.Контрагенты			= Новый Массив; // Строка (Ящик)
	
	Фильтр.СтатусыПодписания	= Новый Массив; //: СтатусыПодписанияДокумента();
	Фильтр.СтатусыСФ			= Новый Массив; //: СтатусыСФ();
	Фильтр.ТипыДокументов		= Новый Массив; //: ТипыДокументов();
	
	Фильтр.НачалоПериода		= ПустаяДата();
	Фильтр.КонецПериода			= ПустаяДата();
	
	Возврат Фильтр;
	
КонецФункции

// Информация об организации

Функция Новый_ПолноеОписаниеОрганизации()
	
	ПолноеОписаниеОрганизации = Новый Структура(
		"Наименование"
	);
	
	Возврат ПолноеОписаниеОрганизации;
	
КонецФункции

// Документы и подписи

Функция Новый_Документ() Экспорт
	
	Документ = Новый Структура(
		"ИД,
		|Наименование,
		|РодительскийДокумент,
		|
		|ТипДокумента,
		|ВидДокумента,
		|
		|ТребуетсяПодписание,
		|
		|ИмяФайла,
		|Содержимое,
		|
		|Карточка"
	);
	
	Документ.ИД						= Новый УникальныйИдентификатор;
	Документ.Наименование			= Неопределено; //: Строка
	Документ.РодительскийДокумент	= Неопределено; //: УникальныйИдентификатор
	
	Документ.ТипДокумента = ОбъектнаяМодель.ТипыДокументов().Неформализованный;
	Документ.ВидДокумента = Неопределено; //: Строка
	
	Документ.ТребуетсяПодписание = Ложь;
	
	Документ.ИмяФайла	= Неопределено; //: Строка
	Документ.Содержимое	= Неопределено; //: ДвоичныеДанные
	
	Документ.Карточка	= Неопределено; //: ДвоичныеДанные
	
	Возврат Документ;
	
КонецФункции

Функция Новый_Подпись() Экспорт
	
	Подпись = Новый Структура(
		"ИД, ИДДокумента, 
		|Содержимое, Дата"
	);
	
	Подпись.ИД			= Новый УникальныйИдентификатор;
	Подпись.ИДДокумента	= Неопределено; //: УникальныйИдентификатор
	
	Подпись.Содержимое = Неопределено; //: ДвоичныеДанные
	
	Подпись.Дата = ПустаяДата();
	
	Возврат Подпись;
	
КонецФункции

Функция Новый_ПересылаемыйДокумент() Экспорт
	
	Документ = Новый Структура(
		"ИД,
		|ТребуетсяПодписание"
	);
	
	Документ.ИД = Неопределено; //: УникальныйИдентификатор
	
	Документ.ТребуетсяПодписание = Ложь;
	
	Возврат Документ;
	
КонецФункции

// Сообщения

Функция Новый_Сообщение() Экспорт
	
	Сообщение = Новый Структура(
		"ИД,
		|Отправитель, Получатели,
		|Документы, Подписи,
		|ПересылаемыеДокументы"
	);
	
	Сообщение.ИД = Новый УникальныйИдентификатор;
	
	Сообщение.Отправитель = Syn_ЯщикОрганизации; //: Строка
	Сообщение.Получатели = Новый Массив; //: Строка (Ящик)
	
	Сообщение.Документы	= Новый Массив; //: Новый_Документ()
	Сообщение.Подписи	= Новый Массив; //: Новый_Подпись()
	
	Сообщение.ПересылаемыеДокументы = Новый Массив; //: Новый_ПересылаемыйДокумент();
	
	Возврат Сообщение;
	
КонецФункции

Функция Новый_ОтправленныеДокументы()
	
	ОтправленныеДокументы = Новый Соответствие;
	
	Возврат ОтправленныеДокументы;
	
КонецФункции

// Результат работы генератора

Функция Новый_РезультатГенератораДокумента()
	
	Результат = Новый Структура(
		"Документ,
		|РезультатВалидации"
	);
	
	Результат.Документ				= Новый_СгенерированныйДокумент();
	Результат.РезультатВалидации	= Новый_РезультатВалидации();
	
	Возврат Результат;
	
КонецФункции

Функция Новый_СгенерированныйДокумент()
	
	Документ = Новый Структура(
		"Содержимое, Имя"
	);
	
	Документ.Содержимое	= Неопределено; //: ДвоичныеДанные
	Документ.Имя		= Неопределено; //: Строка
	
	Возврат Документ;
	
КонецФункции

// Валидация

Функция Новый_РезультатВалидации()
	
	РезультатВалидации = Новый Структура(
		"Результат,
		|ОшибкиXSD,
		|ОшибкиФЛК"
	);
	
	РезультатВалидации.Результат = СтатусыВалидации().Успех;
	РезультатВалидации.ОшибкиXSD = Новый Массив; // Новый_ОшибкаВалидации()
	РезультатВалидации.ОшибкиФЛК = Новый Массив; // Новый_ОшибкаВалидации()
	
	Возврат РезультатВалидации;
	
КонецФункции

Функция Новый_ОшибкаВалидации()
	
	Ошибка = Новый Структура(
		"Тип,
		|Поле,
		|Описание"
	);
	
	Ошибка.Тип		= ТипыОшибок().Ошибка;
	Ошибка.Поле		= Неопределено; //: Строка
	Ошибка.Описание	= Неопределено; //: Строка
	
	Возврат Ошибка;
	
КонецФункции

//}

//========================================================================
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================


//===================================
// TODO: Все методы в этой области НЕ должны быть экспортными.
//			Убрать Экспорт, когда будет готово получение информации о документе
//{ Работа с классами и объектами сервиса

Функция КлассыСервиса() Экспорт
	
	Классы = Новый Структура(
		"Document, ArrayOfDocument,
		|Sign, ArrayOfSign,
		|ForwardDocument, ArrayOfForwardDocument,
		|Message, ForwardMessage,
		|MessageRecipient, ArrayOfMessageRecipient,
		|
		|FullDocumentInfoRequestParams,
		|
		|GeneralTransferSeller, GeneralTransferBuyer,
		|TransferArea,
		|GeneralTransferArea, GeneralTransferItem, ArrayOfGeneralTransferItem, GeneralTransferTotal,
		|
		|GeneralTransferCorrectionSeller, GeneralTransferCorrectionBuyer,
		|ApprovalArea,
		|GeneralTransferCorrectionArea,
		|GeneralTransferCorrectionItem, ArrayOfGeneralTransferCorrectionItem,
		|GeneralTransferItemData, GeneralTransferItemChange, AmountChange,
		|GeneralTransferCorrectionTotal,
		|
		|GoodsTransferBuyer,
		|WorksTransferBuyer,
		|
		|DocumentGenerationOptions,
		|
		|DocumentShortInfo, ArrayOfDocumentShortInfo, NumberDate, ArrayOfNumberDate,
		|BasisDocument, ArrayOfBasisDocument,
		|CurrencyInfo,
		|Contragent, ContragentContactInfo,
		|Factor,
		|Address,
		|BankAccount, Bank,
		|Person,
		|Drafter,
		|FullName,
		|
		|Signer, ArrayOfSigner,
		|
		|OperationInfo, AcceptanceInfo, ApprovalInfo, TransferInfo,
		|
		|ProductAttribute,
		|CustomsDeclaration, ArrayOfCustomsDeclaration,
		|NameCodeObject, ArrayOfNameCodeObject,
		|InfoFieldFull,
		|EnumValue, ArrayOfEnumValue,
		|
		|DocumentEntryOptions, OrganizationByCriteriaValues,
		|
		|ArrayOfstring,
		|
		|ArrayOfDocumentSignStatus, ArrayOfInvoiceFlowStatus"
	);
	
	Для Каждого Класс Из Классы Цикл
		Классы[Класс.Ключ] = Класс.Ключ;
	КонецЦикла;
	
	Классы = Новый ФиксированнаяСтруктура(Классы);
	
	Возврат Классы;
	
КонецФункции

Функция ПространствоИмен_ОбъектнаяМодель()
	
	Возврат "http://schemas.datacontract.org/2004/07/Midway.ObjectModel";
	
КонецФункции

Функция ПространствоИмен_Массивы()
	
	Возврат "http://schemas.microsoft.com/2003/10/Serialization/Arrays";
	
КонецФункции

Функция ТипСервиса(ИмяТипа)
	
	Сервис = ExchangeService(); //: Сервис = Новый WSПрокси;
	
	ПространствоИмен = ПространствоИмен_ОбъектнаяМодель();
	Тип = Сервис.ФабрикаXDTO.Тип(ПространствоИмен, ИмяТипа);
	
	Если Тип = Неопределено Тогда
		ПространствоИмен = ПространствоИмен_Массивы();
		Тип = Сервис.ФабрикаXDTO.Тип(ПространствоИмен, ИмяТипа);
	КонецЕсли;
	
	Если Тип = Неопределено Тогда
		ТекстИсключения = СтрШаблон2("Тип не определен: {%1}%2", ПространствоИмен, ИмяТипа);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

// Создает экземпляр класса сервиса.
//
// Параметры:
//  ИмяТипа	 - Строка - см. КлассыСервиса().
// 
// Возвращаемое значение:
//  ОбъектXDTO - экземпляр класса, объект XDTO из ПространствоИмен_ОбъектнаяМодель().
//
Функция Новый_ОбъектСервиса(ИмяТипа) Экспорт
	
	Сервис = ExchangeService(); //: Сервис = Новый WSПрокси;
	
	ТипОбъекта = ТипСервиса(ИмяТипа);
	Объект = Сервис.ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат Объект;
	
КонецФункции

Функция ОписаниеПричиныОшибки(ПричинаОшибки)
	
	Если ПричинаОшибки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеПричины = "";
	
	Если ПричинаОшибки.Причина = Неопределено Тогда
		СоставПричиныОшибки = СтрРазделить2(ПричинаОшибки.Описание, ";", Ложь, Истина);
		Если СоставПричиныОшибки.Количество() > 0 Тогда
			ОписаниеПричины = СоставПричиныОшибки[0];
		КонецЕсли;
	Иначе
		ОписаниеПричины = ОписаниеПричиныОшибки(ПричинаОшибки.Причина);
	КонецЕсли;
	
	Возврат ОписаниеПричины;
	
КонецФункции

//}

//===================================
//{ Парсеры документов

// УПД

// Парсит титул продавца в объектную модель УПД.
//
// Параметры:
//  Содержимое	 - ДвоичныеДанные - XML в виде двоичных данных.
// 
// Возвращаемое значение:
//  Структура - см. Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУПД().
//
Функция ДокументВМодель_ТитулПродавцаУПД(Содержимое)
	
	Service = ExchangeService();
	
	Model = Service.ParseGeneralTransferSeller(Токен, Содержимое);
	
	УПД = ОбъектнаяМодель.Новый_ТитулПродавцаУПД();
	
	УПД.ВидДокумента = ЗначениеПеречисления(Model.ExecutedFunction, ОбъектнаяМодель.ВидыУПД());
	
	УПД.Описание		= ОписаниеДокумента(Model.ShortInfo);
	УПД.Валюта			= Валюта(Model.Currency);
	УПД.ИнфПоле			= ИнфПоле(Model.InfoField);
	УПД.ИдГосКонтракта	= Model.StateContractId;
	
	УПД.Фактор = Фактор(Model.Factor);
	
	УПД.Продавец			= Контрагент(Model.Seller);
	УПД.Покупатель			= Контрагент(Model.Buyer);
	УПД.Грузоотправитель	= Контрагент(Model.Consignor);
	УПД.Грузополучатель		= Контрагент(Model.Consignee);
	
	УПД.ПлатежноРасчетныеДокументы = ПлатежноРасчетныеДокументы(Model.PaymentBillingDocuments);

	УПД.ТМЦ.ТабличнаяЧасть	= ТМЦТабличнаяЧастьУПД(Model.GeneralTransferArea);
	УПД.ТМЦ.Итого			= ТМЦИтогоУПД(Model.GeneralTransferArea);
	
	УПД.ИнформацияПродавца.Подписанты	= Подписанты(Model.Signers);
	УПД.ИнформацияПродавца.Составитель	= СоставительДокумента(Model.Drafter);
	
	Если Model.TransferArea <> Неопределено Тогда
		
		УПД.Основание = ДокументыОснования(Model.TransferArea.BasisDocuments);
		
		УПД.Перевозчик = Контрагент(Model.TransferArea.Carrier);
		
		УПД.ТранспортныеНакладные		= ТранспортныеНакладные(Model.TransferArea.LadingBills);
		УПД.СведенияОТранспортировке	= Model.TransferArea.TransportationData;
		УПД.СведенияОПередачеВещи		= ОписаниеОперации(Model.TransferArea.ThingsTransferInfo);
		
		УПД.ИнформацияПродавца.ЛицоПередавшееТовар	= ОтветственноеЛицо(Model.TransferArea.Bailor);
		УПД.ИнформацияПродавца.ВидОперации			= Model.TransferArea.OperationType;
		УПД.ИнформацияПродавца.СведенияОбОперации	= ОписаниеОперации(Model.TransferArea.TransferData);
		УПД.ИнформацияПродавца.ИнфПоле				= ИнфПоле(Model.TransferArea.InfoField);
		
	КонецЕсли;
	
	Возврат УПД;
	
КонецФункции

Функция ТМЦТабличнаяЧастьУПД(GeneralTransferArea)
	
	ТабличнаяЧасть = ОбъектнаяМодель.Новый_ТабЧастьУПД(); //: ТМЦ = Новый ТаблицаЗначений;
	
	Если GeneralTransferArea <> Неопределено И GeneralTransferArea.Items <> Неопределено Тогда
	
		Для Каждого Item Из GeneralTransferArea.Items.GeneralTransferItem Цикл
			
			СтрокаТМЦ = ТабличнаяЧасть.Добавить();
			
			СтрокаТМЦ.Наименование			= Item.Name;
			СтрокаТМЦ.СтавкаНДС				= ЗначениеПеречисления(Item.VatRate, ОбъектнаяМодель.СтавкиНДС(), Истина);
			СтрокаТМЦ.Цена					= Item.Price;
			СтрокаТМЦ.Количество			= Item.Quantity;
			СтрокаТМЦ.СуммаБезНДС			= Item.NetAmount;
			СтрокаТМЦ.СуммаНДС				= Item.VatAmount;
			СтрокаТМЦ.СуммаСНДС				= Item.GrossAmount;
			
			Если Item.UnitOfMeasure <> Неопределено Тогда
				СтрокаТМЦ.ЕИКод				= Item.UnitOfMeasure.Code;
				СтрокаТМЦ.ЕИНаименование	= Item.UnitOfMeasure.Name;
			КонецЕсли;
			
			СтрокаТМЦ.ИнфПоле				= ИнфПоле(Item.InfoTexts);
			
			СтрокаТМЦ.СчетДт				= Item.DebitAccount;
			СтрокаТМЦ.СчетКт				= Item.CreditAccount;
			
			Если Item.Attribute <> Неопределено Тогда
				СтрокаТМЦ.Признак			= ЗначениеПеречисления(Item.Attribute.AttributeType, ОбъектнаяМодель.ПризнакиТМЦ());
				СтрокаТМЦ.ПризнакДопИнфо	= Item.Attribute.AdditionalInfo;
			КонецЕсли;
			СтрокаТМЦ.Код					= Item.Code;
			СтрокаТМЦ.КоличествоОтпустить	= Item.QuantityToRelease;
			СтрокаТМЦ.Акциз					= Item.Excise;
			СтрокаТМЦ.СтранаПроисхождения	= Item.OriginCountryShortName;
			СтрокаТМЦ.КодСтраны				= ПредставлениеКодСтраны(Item.CustomsDeclarations);
			СтрокаТМЦ.НомерГТД				= ПредставлениеНомерГТД(Item.CustomsDeclarations);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

Функция ТМЦИтогоУПД(GeneralTransferArea)
	
	Итого = ОбъектнаяМодель.Новый_ИтогоУПД();
	
	Если GeneralTransferArea <> Неопределено И GeneralTransferArea.Total <> Неопределено Тогда
		
		Total = GeneralTransferArea.Total;
		
		Итого.СуммаБезНДС	= Total.NetAmount;
		Итого.СуммаНДС		= Total.VatAmount;
		Итого.СуммаСНДС		= Total.GrossAmount;
		
		Итого.Количество	= Total.Quantity;
		
	КонецЕсли;
	
	Возврат Итого;
	
КонецФункции

Функция ДокументВМодель_ТитулПокупателяУПД(Содержимое)
	
	Service = ExchangeService();
	
	Model = Service.ParseGeneralTransferBuyer(Токен, Содержимое);
	
	УПД = ОбъектнаяМодель.Новый_ТитулПокупателяУПД();
	
	УПД.ИнформацияПокупателя.ЛицоПринявшееТовар	= ОтветственноеЛицо(Model.GoodsReceiver);
	
	УПД.ИнформацияПокупателя.ВидОперации		= Model.OperationType;
	УПД.ИнформацияПокупателя.СведенияОбОперации	= ОписаниеОперации(Model.GoodsAcceptanceInfo);
	УПД.ИнформацияПокупателя.Подписанты			= Подписанты(Model.Signers);
	УПД.ИнформацияПокупателя.Составитель		= СоставительДокумента(Model.Drafter);
	УПД.ИнформацияПокупателя.ИнфПоле			= ИнфПоле(Model.InfoField);
	
	Возврат УПД;
	
КонецФункции

// УКД

Функция ДокументВМодель_ТитулПродавцаУКД(Содержимое)
	
	Service = ExchangeService();
	
	Model = Service.ParseGeneralTransferCorrectionSeller(Токен, Содержимое);
	
	УКД = ОбъектнаяМодель.Новый_ТитулПродавцаУКД();
	
	УКД.ВидДокумента = ЗначениеПеречисления(Model.ExecutedFunction, ОбъектнаяМодель.ВидыУКД());
	
	УКД.Описание		= ОписаниеДокумента(Model.ShortInfo);
	УКД.Валюта			= Валюта(Model.Currency);
	УКД.ИнфПоле			= ИнфПоле(Model.InfoField);
	УКД.ИдГосКонтракта	= Model.StateContractId;
	
	УКД.Фактор = Фактор(Model.Factor);
	
	УКД.ИсходныеДокументы = ИсходныеДокументы(Model.OriginalDocuments);
	
	УКД.Продавец			= Контрагент(Model.Seller);
	УКД.Покупатель			= Контрагент(Model.Buyer);
	
	УКД.ИзмененияТМЦ.ТабличнаяЧасть	= ТМЦТабличнаяЧастьУКД(Model.GeneralTransferCorrectionArea);
	УКД.ИзмененияТМЦ.Итого			= ТМЦИтогоУКД(Model.GeneralTransferCorrectionArea);
	
	УКД.ИнформацияПродавца.Подписанты			= Подписанты(Model.Signers);
	УКД.ИнформацияПродавца.Составитель			= СоставительДокумента(Model.Drafter);
	
	Если Model.ApprovalArea <> Неопределено Тогда
		
		УКД.Основание = ДокументыОснования(Model.ApprovalArea.BasisDocuments);
	
		УКД.ПередаточныеДокументы	= Model.ApprovalArea.TransferDocumentsRequisites;
		УКД.ДопИнфо					= Model.ApprovalArea.CorrectionAdditionalInfo;
		
		УКД.ИнформацияПродавца.СведенияОбОперации = ОписаниеОперации(Model.ApprovalArea.ApprovalInfo);
		
	КонецЕсли;
	
	Возврат УКД;
	
КонецФункции

Функция ТМЦТабличнаяЧастьУКД(GeneralTransferCorrectionArea)
	
	ТабличнаяЧасть = ОбъектнаяМодель.Новый_ТабЧастьУКД();
	
	Если GeneralTransferCorrectionArea <> Неопределено И GeneralTransferCorrectionArea.Items <> Неопределено Тогда
		
		ДоПосле = ПоляССуффиксами(
			"СтавкаНДС, Цена, Количество, СуммаБезНДС, СуммаНДС, СуммаСНДС, ЕИКод, ЕИНаименование, Акциз",
			"До, После"
		);
		
		УвелУмен = ПоляССуффиксами(
			"СуммаБезНДС, СуммаНДС, СуммаСНДС, Акциз",
			"Увеличение, Уменьшение"
		);
		
		ИменаПолей = Новый Структура(
			"До,		После,		Увеличение,		Уменьшение",
			"Before",	"After",	"AmountInc",	"AmountDec"
		);
		
		Для Каждого Item Из GeneralTransferCorrectionArea.Items.GeneralTransferCorrectionItem Цикл
			
			СтрокаТЧ = ТабличнаяЧасть.Добавить();
			
			СтрокаТЧ.Наименование = Item.Name;
			СтрокаТЧ.ИнфПоле = ИнфПоле(Item.InfoTexts);
			
			Для Каждого Суффикс Из ДоПосле Цикл
				
				Поля = Суффикс.Значение;
				ИмяПоля = ИменаПолей[Суффикс.Ключ];
				
				AfterBefore = Item[ИмяПоля];
				Если AfterBefore = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТЧ[Поля.СтавкаНДС]			= ЗначениеПеречисления(AfterBefore.VatRate, ОбъектнаяМодель.СтавкиНДС(), Истина);
				СтрокаТЧ[Поля.Цена]					= AfterBefore.Price;
				СтрокаТЧ[Поля.Количество]			= AfterBefore.Quantity;
				СтрокаТЧ[Поля.СуммаБезНДС]			= AfterBefore.NetAmount;
				СтрокаТЧ[Поля.СуммаНДС]				= AfterBefore.VatAmount;
				СтрокаТЧ[Поля.СуммаСНДС]			= AfterBefore.GrossAmount;
				
				UnitOfMeasure						= AfterBefore.UnitOfMeasure;
				Если UnitOfMeasure <> Неопределено Тогда
					СтрокаТЧ[Поля.ЕИКод]			= UnitOfMeasure.Code;
					СтрокаТЧ[Поля.ЕИНаименование]	= UnitOfMeasure.Name;
				КонецЕсли;
				
				СтрокаТЧ[Поля.Акциз]				= AfterBefore.Excise;
				
			КонецЦикла;
			
			Для Каждого Суффикс Из УвелУмен Цикл
				
				Поля = Суффикс.Значение;
				ИмяПоля = ИменаПолей[Суффикс.Ключ];
				
				Если Item.Change = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТЧ[Поля.СуммаБезНДС]	= Item.Change.NetAmountChange[ИмяПоля];
				СтрокаТЧ[Поля.СуммаНДС]		= Item.Change.VatAmountChange[ИмяПоля];
				СтрокаТЧ[Поля.СуммаСНДС]	= Item.Change.GrossAmountChange[ИмяПоля];
				
				СтрокаТЧ[Поля.Акциз]		= Item.Change.ExciseChange[ИмяПоля];
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

Функция ТМЦИтогоУКД(GeneralTransferCorrectionArea)
	
	Итого = ОбъектнаяМодель.Новый_ИтогоУКД();
	
	Если GeneralTransferCorrectionArea <> Неопределено И GeneralTransferCorrectionArea.Total <> Неопределено Тогда
		
		Total = GeneralTransferCorrectionArea.Total;
		
		УвелУмен = ПоляССуффиксами(
			"СуммаБезНДС, СуммаНДС, СуммаСНДС",
			"Увеличение, Уменьшение"
		);
		
		ИменаПолей = Новый Структура(
			"Увеличение, Уменьшение",
			"AmountInc", "AmountDec"
		);
		
		Для Каждого Суффикс Из УвелУмен Цикл
			
			Поля = Суффикс.Значение;
			ИмяПоля = ИменаПолей[Суффикс.Ключ];
			
			Итого[Поля.СуммаБезНДС]	= Total.NetAmountChange[ИмяПоля];
			Итого[Поля.СуммаНДС]	= Total.VatAmountChange[ИмяПоля];
			Итого[Поля.СуммаСНДС]	= Total.GrossAmountChange[ИмяПоля];
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Итого;
	
КонецФункции

Функция ДокументВМодель_ТитулПокупателяУКД(Содержимое)
	
	Service = ExchangeService();
	
	Model = Service.ParseGeneralTransferCorrectionBuyer(Токен, Содержимое);
	
	УКД = ОбъектнаяМодель.Новый_ТитулПокупателяУКД();
	
	УКД.ИнформацияПокупателя.СведенияОбОперации	= ОписаниеОперации(Model.ApprovalInfo);
	УКД.ИнформацияПокупателя.Подписанты			= Подписанты(Model.Signers);
	УКД.ИнформацияПокупателя.Составитель		= СоставительДокумента(Model.Drafter);
	УКД.ИнформацияПокупателя.ИнфПоле			= ИнфПоле(Model.InfoField);
	
	Возврат УКД;
	
КонецФункции

// ДПТ

Функция ДокументВМодель_ТитулПродавцаДПТ(Содержимое)
	
	Service = ExchangeService();
	
	Model = Service.ParseGoodsTransferSeller(Токен, Содержимое);
	
	ДПТ = ОбъектнаяМодель.Новый_ТитулПродавцаДПТ();
	
	ДПТ.Описание	= ОписаниеДокумента(Model.ShortInfo);
	ДПТ.Валюта		= Валюта(Model.Currency);
	ДПТ.Основание	= ДокументыОснования(Model.BasisDocuments);
	ДПТ.ИнфПоле		= ИнфПоле(Model.InfoField);
	
	ДПТ.Фактор = Фактор(Model.Factor);
	
	ДПТ.Продавец			= Контрагент(Model.Seller);
	ДПТ.Покупатель			= Контрагент(Model.Buyer);
	ДПТ.Грузоотправитель	= Контрагент(Model.Consignor);
	ДПТ.Грузополучатель		= Контрагент(Model.Consignee);
	
	ДПТ.Перевозчик = Контрагент(Model.Carrier);

	ДПТ.ТМЦ.ТабличнаяЧасть	= ТМЦТабличнаяЧастьДПТ(Model.GoodsTransferArea);
	ДПТ.ТМЦ.Итого			= ТМЦИтогоДПТ(Model.GoodsTransferArea);
	
	ДПТ.ТранспортныеНакладные = ТранспортныеНакладные(Model.LadingBills);
	
	ДПТ.ИнформацияПродавца.ЛицоПередавшееТовар	= ОтветственноеЛицо(Model.Bailor);
	
	ДПТ.ИнформацияПродавца.ВидОперации			= Model.OperationType;
	ДПТ.ИнформацияПродавца.СведенияОбОперации	= ОписаниеОперации(Model.GoodsTransferInfo);
	ДПТ.ИнформацияПродавца.Подписанты			= Подписанты(Model.Signers);
	ДПТ.ИнформацияПродавца.Составитель			= СоставительДокумента(Model.Drafter);
	ДПТ.ИнформацияПродавца.ИнфПоле				= ИнфПоле(Model.InfoTexts);
	
	ДПТ.ИдГосКонтракта			= Model.StateContractId;
	ДПТ.КоличествоПриложений	= Model.AnnexCount;
	
	Возврат ДПТ;
	
КонецФункции

Функция ТМЦТабличнаяЧастьДПТ(GoodsTransferArea)
	
	ТМЦ = ОбъектнаяМодель.Новый_ТабЧастьДПТ(); //: ТМЦ = Новый ТаблицаЗначений;
	
	Если GoodsTransferArea <> Неопределено И GoodsTransferArea.Items <> Неопределено Тогда
	
		Для Каждого Item Из GoodsTransferArea.Items.GoodsTransferItem Цикл
			
			СтрокаТМЦ = ТМЦ.Добавить();
			
			СтрокаТМЦ.Наименование			= Item.Name;
			СтрокаТМЦ.СтавкаНДС				= ЗначениеПеречисления(Item.VatRate, ОбъектнаяМодель.СтавкиНДС(), Истина);
			СтрокаТМЦ.Цена					= Item.Price;
			СтрокаТМЦ.Количество			= Item.Quantity;
			СтрокаТМЦ.СуммаБезНДС			= Item.NetAmount;
			СтрокаТМЦ.СуммаНДС				= Item.VatAmount;
			СтрокаТМЦ.СуммаСНДС				= Item.GrossAmount;
			
			Если Item.UnitOfMeasure <> Неопределено Тогда
				СтрокаТМЦ.ЕИКод				= Item.UnitOfMeasure.Code;
				СтрокаТМЦ.ЕИНаименование	= Item.UnitOfMeasure.Name;
			КонецЕсли;
			
			СтрокаТМЦ.ИнфПоле				= ИнфПоле(Item.InfoTexts);
			
			СтрокаТМЦ.СчетДт				= Item.DebitAccount;
			СтрокаТМЦ.СчетКт				= Item.CreditAccount;
			
			СтрокаТМЦ.Характеристика		= Item.Characteristic;
			СтрокаТМЦ.Сорт					= Item.Sort;
			СтрокаТМЦ.Артикул				= Item.Article;
			СтрокаТМЦ.Код					= Item.Code;
			СтрокаТМЦ.ВидУпаковки			= Item.PackingType;
			СтрокаТМЦ.КоличествоВУпаковке	= Item.QuantityInPackage;
			СтрокаТМЦ.КоличествоУпаковок	= Item.NumberOfPackages;
			СтрокаТМЦ.МассаБрутто			= Item.GrossWeight;
			СтрокаТМЦ.КоличествоОтпустить	= Item.QuantityToRelease;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТМЦ;
	
КонецФункции

Функция ТМЦИтогоДПТ(GoodsTransferArea)
	
	Итого = ОбъектнаяМодель.Новый_ИтогоДПТ();
	
	Если GoodsTransferArea <> Неопределено И GoodsTransferArea.Total <> Неопределено Тогда
		
		Total = GoodsTransferArea.Total;
		
		Итого.СуммаБезНДС		= Total.NetAmount;
		Итого.СуммаНДС			= Total.VatAmount;
		Итого.СуммаСНДС			= Total.GrossAmount;
		
		Итого.Количество		= Total.Quantity;
		Итого.КоличествоМест	= Total.NumberOfPackages;
		Итого.МассаБрутто		= Total.GrossWeight;
		
	КонецЕсли;
	
	Возврат Итого;
	
КонецФункции

Функция ДокументВМодель_ТитулПокупателяДПТ(Содержимое)
	
	Service = ExchangeService();
	
	Model = Service.ParseGoodsTransferBuyer(Токен, Содержимое);
	
	ДПТ = ОбъектнаяМодель.Новый_ТитулПокупателяДПТ();
	
	ДПТ.ИнформацияПокупателя.ЛицоПринявшееТовар	= ОтветственноеЛицо(Model.GoodsReceiver);
	
	ДПТ.ИнформацияПокупателя.ВидОперации		= Model.OperationType;
	ДПТ.ИнформацияПокупателя.СведенияОбОперации	= ОписаниеОперации(Model.GoodsAcceptanceInfo);
	ДПТ.ИнформацияПокупателя.Подписанты			= Подписанты(Model.Signers);
	ДПТ.ИнформацияПокупателя.Составитель		= СоставительДокумента(Model.Drafter);
	ДПТ.ИнформацияПокупателя.ИнфПоле			= ИнфПоле(Model.InfoField);
	
	Возврат ДПТ;
	
КонецФункции

// ДПРР

Функция ДокументВМодель_ТитулИсполнителяДПРР(Содержимое)
	
	Service = ExchangeService();
	
	Model = Service.ParseWorksTransferSeller(Токен, Содержимое);
	
	ДПРР = ОбъектнаяМодель.Новый_ТитулИсполнителяДПРР();
	
	ДПРР.Описание		= ОписаниеДокумента(Model.ShortInfo);
	ДПРР.Валюта			= Валюта(Model.Currency);
	ДПРР.Основание		= ДокументыОснования(Model.BasisDocuments);
	ДПРР.ИнфПоле		= ИнфПоле(Model.InfoField);
	ДПРР.ИдГосКонтракта	= Model.StateContractId;
	
	ДПРР.Фактор = Фактор(Model.Factor);
	
	ДПРР.Исполнитель	= Контрагент(Model.Seller);
	ДПРР.Заказчик		= Контрагент(Model.Buyer);

	ДПРР.ЗаголовокОперации = Model.DocumentTitle;
	
	ДПРР.Работы = РаботыДПРР(Model.WorksTransferAreas);
	
	ДПРР.СведенияОПередачеВещи = ОписаниеОперации(Model.ThingsTransferInfo);
	
	ДПРР.ИнформацияПродавца.ВидОперации			= Model.OperationType;
	ДПРР.ИнформацияПродавца.СведенияОбОперации	= ОписаниеОперации(Model.WorksTransferInfo);
	ДПРР.ИнформацияПродавца.Подписанты			= Подписанты(Model.Signers);
	ДПРР.ИнформацияПродавца.Составитель			= СоставительДокумента(Model.Drafter);
	ДПРР.ИнформацияПродавца.ИнфПоле				= ИнфПоле(Model.InfoTexts);
	
	Возврат ДПРР;
	
КонецФункции

Функция РаботыДПРР(WorksTransferAreas)
	
	Работы = Новый Массив; // ОбъектнаяМодель.Новый_РаботаДПРР()
	
	Если WorksTransferAreas <> Неопределено Тогда
		
		Для Каждого WorksTransferArea Из WorksTransferAreas.WorksTransferArea Цикл
			
			Работа = ОбъектнаяМодель.Новый_РаботаДПРР();
			Работы.Добавить(Работа);
			
			Работа.ДатаНачала	= WorksTransferArea.StartDate;
			Работа.ДатаКонца	= WorksTransferArea.EndDate;
			
			Если WorksTransferArea.Items <> Неопределено Тогда
				
				ТМЦ = Работа.ТабличнаяЧасть;
			
				Для Каждого Item Из WorksTransferArea.Items.WorksTransferItem Цикл
					
					СтрокаТМЦ = ТМЦ.Добавить();
					
					СтрокаТМЦ.Наименование			= Item.Name;
					СтрокаТМЦ.СтавкаНДС				= ЗначениеПеречисления(Item.VatRate, ОбъектнаяМодель.СтавкиНДС(), Истина);
					СтрокаТМЦ.Цена					= Item.Price;
					СтрокаТМЦ.Количество			= Item.Quantity;
					СтрокаТМЦ.СуммаБезНДС			= Item.NetAmount;
					СтрокаТМЦ.СуммаНДС				= Item.VatAmount;
					СтрокаТМЦ.СуммаСНДС				= Item.GrossAmount;
					
					Если Item.UnitOfMeasure <> Неопределено Тогда
						СтрокаТМЦ.ЕИКод				= Item.UnitOfMeasure.Code;
						СтрокаТМЦ.ЕИНаименование	= Item.UnitOfMeasure.Name;
					КонецЕсли;
					
					СтрокаТМЦ.ИнфПоле				= ИнфПоле(Item.InfoTexts);
					
					СтрокаТМЦ.СчетДт				= Item.DebitAccount;
					СтрокаТМЦ.СчетКт				= Item.CreditAccount;
					
					СтрокаТМЦ.Описание				= Item.Description;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если WorksTransferArea.Total <> Неопределено Тогда
				
				Итого = Работа.Итого;
				Total = WorksTransferArea.Total;
				
				Итого.СуммаБезНДС	= Total.NetAmount;
				Итого.СуммаНДС		= Total.VatAmount;
				Итого.СуммаСНДС		= Total.GrossAmount;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Работы;
	
КонецФункции

Функция ДокументВМодель_ТитулЗаказчикаДПРР(Содержимое)
	
	Service = ExchangeService();
	
	Model = Service.ParseWorksTransferBuyer(Токен, Содержимое);
	
	ДПРР = ОбъектнаяМодель.Новый_ТитулЗаказчикаДПРР();
	
	ДПРР.СведенияОПолученииВещи = ОписаниеОперации(Model.ThingsAcceptanceInfo);
	
	ДПРР.ИнформацияПокупателя.ВидОперации		= Model.OperationType;
	ДПРР.ИнформацияПокупателя.СведенияОбОперации	= ОписаниеОперации(Model.WorksAcceptanceInfo);
	ДПРР.ИнформацияПокупателя.Подписанты			= Подписанты(Model.Signers);
	ДПРР.ИнформацияПокупателя.Составитель		= СоставительДокумента(Model.Drafter);
	ДПРР.ИнформацияПокупателя.ИнфПоле			= ИнфПоле(Model.InfoField);
	
	Возврат ДПРР;
	
КонецФункции

//}

//===================================
//{ Конвертация XDTO в объектную модель ИР

Функция ОписаниеДокумента(ShortInfo)
	
	Описание = ОбъектнаяМодель.Новый_ОписаниеДокумента();
	
	Если ShortInfo <> Неопределено Тогда
		
		Описание.Наименование	= ShortInfo.Name;
		Описание.Номер			= ShortInfo.Number;
		Описание.Дата			= ShortInfo.Date;
		
		Если ShortInfo.Revision <> Неопределено Тогда
			Описание.ИсправлениеНомер	= ShortInfo.Revision.Number;
			Описание.ИсправлениеДата	= ShortInfo.Revision.Date;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеОперации(OperationInfo)
	
	Операция = ОбъектнаяМодель.Новый_ОписаниеОперации();
	
	Если OperationInfo <> Неопределено Тогда
		Операция.Описание	= OperationInfo.Description;
		Операция.Дата		= OperationInfo.Date;
	КонецЕсли;
	
	Возврат Операция;
	
КонецФункции

Функция ОтветственноеЛицо(Person)
	
	Если Person = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Человек = ОбъектнаяМодель.Новый_ОтветственноеЛицо();
	
	Человек.Вид						= ЗначениеПеречисления(Person.PersonType, ОбъектнаяМодель.ВидыОтветственногоЛица());
	
	Человек.ФИО						= ФИО(Person.FullName);
	Человек.ДопИнфо					= Person.AdditionalInfo;
	
	Человек.ОснованиеПолномочий		= Person.AuthorityBase;
	Человек.ОснованиеДоверия		= Person.TrustBase;
	Человек.Должность				= Person.Position;
	
	Человек.НаименованиеОрганизации	= Person.OrganizationName;
	
	Возврат Человек;
	
КонецФункции

Функция СоставительДокумента(Drafter)
	
	Составитель = ОбъектнаяМодель.Новый_СоставительДокумента();
	
	Если Drafter <> Неопределено Тогда
		Составитель.НаименованиеОрганизации	= Drafter.OrganizationName;
		Составитель.ОснованиеПолномочий		= Drafter.AuthorityBase;
	КонецЕсли;
	
	Возврат Составитель;
	
КонецФункции

Функция Валюта(Currency)
	
	Валюта = ОбъектнаяМодель.Новый_Валюта();
	
	Если Currency <> Неопределено Тогда
		
		Если Currency.Currency <> Неопределено Тогда
			Валюта.Код			= Currency.Currency.Code;
			Валюта.Наименование	= Currency.Currency.Name;
		КонецЕсли;
		
		Валюта.Курс	= Currency.CurrencyRate;
		
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

Функция Контрагент(Contragent)
	
	Если Contragent = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Контрагент = ОбъектнаяМодель.Новый_Контрагент();
	
	ТипыОрганизации = ОбъектнаяМодель.ТипыОрганизации();
	Если Contragent.IsForeign Тогда
		Контрагент.ТипОрганизации = ТипыОрганизации.ИнОрг;
	Иначе
		Контрагент.ТипОрганизации = ЗначениеПеречисления(Contragent.OrganizationType, ТипыОрганизации);
	КонецЕсли;
	
	Контрагент.Наименование	= Contragent.OrganizationName;
	Контрагент.ИНН			= Contragent.Inn;
	Контрагент.КПП			= Contragent.Kpp;
	
	Контрагент.ОКПО = Contragent.Okpo;
	
	Контрагент.ФИО							= ФИО(Contragent.FullName);
	Контрагент.СвидетельствоОРегистрацииИП	= Contragent.StateRegistrationCert;
	
	Контрагент.Адрес = Адрес(Contragent.Address);
	
	Если Contragent.ContactInfo <> Неопределено Тогда
		КИ = Контрагент.КонтактнаяИнформация;
		КИ.Телефон	= Contragent.ContactInfo.Phone;
		КИ.Факс		= Contragent.ContactInfo.Fax;
		КИ.Email	= Contragent.ContactInfo.Email;
	КонецЕсли;
	
	Контрагент.БанковскийСчет = БанковскийСчет(Contragent.BankAccount);
	
	Контрагент.ДопИнфо = Contragent.AdditionalInfo;
	
	Контрагент.Подразделение		= Contragent.DepartmentName;
	Контрагент.ДопИнфоДляУчастников	= Contragent.AdditionalInfoForParticipants;
	
	Возврат Контрагент;
	
КонецФункции

Функция Фактор(Factor)
	
	Если Factor = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Фактор = ОбъектнаяМодель.Новый_Фактор();
	
	Фактор.Наименование	= Factor.OrganizationName;
	Фактор.ИНН			= Factor.Inn;
	Фактор.КПП			= Factor.Kpp;
	
	Фактор.БанковскийСчет = БанковскийСчет(Factor.BankAccount);
	
	Фактор.ДопИнфо = Factor.AdditionalInfo;
	
	Фактор.Адрес	= Factor.Address;
	Фактор.Телефон	= Factor.Phone;
	
	Возврат Фактор;
	
КонецФункции

Функция БанковскийСчет(BankAccount)
	
	БанковскийСчет = ОбъектнаяМодель.Новый_БанковскийСчет();
	
	Если BankAccount <> Неопределено Тогда
		
		Если BankAccount.Bank <> Неопределено Тогда
			БанковскийСчет.НаименованиеБанка	= BankAccount.Bank.Name;
			БанковскийСчет.БИК					= BankAccount.Bank.Bik;
		КонецЕсли;
		
		БанковскийСчет.РасчетныйСчет			= BankAccount.PaymentAccount;
		БанковскийСчет.КоррСчет					= BankAccount.CorrespondentAccount;
		
	КонецЕсли;
	
	Возврат БанковскийСчет;
	
КонецФункции

Функция ФИО(FullName)
	
	ФИО = ОбъектнаяМодель.Новый_ФИО();
	
	Если FullName <> Неопределено Тогда
		ФИО.Фамилия		= FullName.LastName;
		ФИО.Имя			= FullName.FirstName;
		ФИО.Отчество	= FullName.MiddleName;
	КонецЕсли;
	
	Возврат ФИО;
	
КонецФункции

Функция Адрес(Address)
	
	Если Address = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Адрес = ОбъектнаяМодель.Новый_Адрес();
		
	Адрес.ВидАдреса = ЗначениеПеречисления(Address.AddressLocationType, ОбъектнаяМодель.ВидыАдреса());
	
	Адрес.ПочтовыйИндекс	= Address.PostalCode;
	Адрес.КодРегиона		= Address.RegionCode;
	Адрес.Район				= Address.District;
	Адрес.Город				= Address.City;
	Адрес.Улица				= Address.Street;
	Адрес.Дом				= Address.House;
	Адрес.Квартира			= Address.Apartment;
	Адрес.Строение			= Address.Building;
	
	Адрес.КодСтраны			= Address.CountryCode;
	Адрес.ИностранныйАдрес	= Address.ForeignStreetAddress;
	
	Адрес.КодГАР			= Address.StateRegistryCode;
	
	Возврат Адрес;
	
КонецФункции

Функция ИнфПоле(InfoField)
	
	ИнфПоле = ОбъектнаяМодель.Новый_ИнфПоле();
	
	InfoTexts = Неопределено;
	
	Если InfoField <> Неопределено Тогда
		
		Classes = КлассыСервиса();
		Если InfoField.Тип() = ТипСервиса(Classes.InfoFieldFull) Тогда
			InfoTexts = InfoField.InfoText;
		Иначе
			InfoTexts = InfoField;
		КонецЕсли;
		
	КонецЕсли;
	
	Если InfoTexts <> Неопределено Тогда
		
		Для Каждого InfoText Из InfoTexts.NameCodeObject Цикл
			Поле = ИнфПоле.Добавить();
			Поле.Идентификатор	= InfoText.Code;
			Поле.Значение		= InfoText.Name;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИнфПоле;
	
КонецФункции

Функция Подписанты(Signers)
	
	Подписанты = Новый Массив; // ОбъектнаяМодель.Новый_Подписант()
	
	Если Signers <> Неопределено Тогда
	
		Для Каждого Signer Из Signers.Signer Цикл
			
			Подписант = ОбъектнаяМодель.Новый_Подписант();
			Подписанты.Добавить(Подписант);
			
			Подписант.Статус							= ЗначениеПеречисления(Signer.SignerType, ОбъектнаяМодель.СтатусыПодписанта());
			Подписант.ОбластьПолномочий					= ЗначениеПеречисления(Signer.AuthorityArea, ОбъектнаяМодель.ОбластиПолномочий());
			Подписант.ОснованиеПолномочий				= Signer.AuthorityBase;
			Подписант.ОснованиеПолномочийОрганизации	= Signer.OrganizationAuthorityBase;
			
			Подписант.ТипОрганизации					= ЗначениеПеречисления(Signer.OrganizationType, ОбъектнаяМодель.ТипыОрганизации());
			
			Подписант.ИНН								= Signer.Inn;
			Подписант.ФИО								= ФИО(Signer.FullName);
			Подписант.ДопИнфо							= Signer.AdditionalInfo;
			
			Подписант.НаименованиеОрганизации			= Signer.OrganizationName;
			Подписант.Должность							= Signer.Position;
			
			Подписант.СвидетельствоОРегистрацииИП		= Signer.StateRegistrationCert;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Подписанты;
	
КонецФункции

Функция ПлатежноРасчетныеДокументы(PaymentBillingDocuments)
	
	ПлатежноРасчетныеДокументы = ОбъектнаяМодель.Новый_ПлатежноРасчетныеДокументы(); //: ПлатежноРасчетныеДокументы = Новый ТаблицаЗначений;
	
	Если PaymentBillingDocuments <> Неопределено Тогда
		
		Для Каждого PaymentBillingDocument Из PaymentBillingDocuments.NumberDate Цикл
			
			ПРД = ПлатежноРасчетныеДокументы.Добавить();
			ПРД.Номер	= PaymentBillingDocument.Number;
			ПРД.Дата	= PaymentBillingDocument.Date;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПлатежноРасчетныеДокументы;
	
КонецФункции

Функция ИсходныеДокументы(OriginalDocuments)
	
	ИсходныеДокументы = Новый Массив; // ОбъектнаяМодель.Новый_ИсходныйДокумент()
	
	Если OriginalDocuments <> Неопределено Тогда
		
		ТаблицаИсходныеДокументы = Новый ТаблицаЗначений;
		
		Колонки = "Номер, Дата, ИсправлениеНомер, ИсправлениеДата";
		Колонки = СтрРазделить2(Колонки, ",",, Истина);
		Для Каждого ИмяКолонки Из Колонки Цикл
			ТаблицаИсходныеДокументы.Колонки.Добавить(ИмяКолонки);
		КонецЦикла;
	
		Для Каждого ShortInfo Из OriginalDocuments.DocumentShortInfo Цикл
			
			ИсходныйДокумент = ОписаниеДокумента(ShortInfo);
			
			НоваяСтрока = ТаблицаИсходныеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходныйДокумент);
			
			Если ИсходныйДокумент.ИсправлениеНомер <> Неопределено Тогда
				НоваяСтрока.ИсправлениеНомер = ПривестиКЧислу(ИсходныйДокумент.ИсправлениеНомер,, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		СписокСФ = ТаблицаИсходныеДокументы.Скопировать();
		СписокСФ.Свернуть("Номер, Дата");
		
		ТаблицаИсходныеДокументы.Сортировать("ИсправлениеДата Убыв, ИсправлениеНомер Убыв");
		
		Для Каждого ИсходнаяСФ Из СписокСФ Цикл
			
			ИсходныйДокумент = ОбъектнаяМодель.Новый_ИсходныйДокумент();
			ИсходныеДокументы.Добавить(ИсходныйДокумент);
			
			ЗаполнитьЗначенияСвойств(ИсходныйДокумент, ИсходнаяСФ, "Номер, Дата");
			
			Отбор = Новый Структура("Номер, Дата");
			ЗаполнитьЗначенияСвойств(Отбор, ИсходнаяСФ);
			
			Исправления = ТаблицаИсходныеДокументы.НайтиСтроки(Отбор);
			Если Исправления.Количество() > 0 Тогда
				Исправление = Исправления[0];
				ЗаполнитьЗначенияСвойств(ИсходныйДокумент, Исправление, "ИсправлениеНомер, ИсправлениеДата");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИсходныеДокументы;
	
КонецФункции

Функция Основание(BasisDocument)
	
	Основание = ОбъектнаяМодель.Новый_Основание();
	
	Основание.Наименование	= BasisDocument.Name;
	Основание.Номер			= BasisDocument.Number;
	Основание.Дата			= BasisDocument.Date;
	Основание.ДопИнфо		= BasisDocument.AdditionalInfo;
	
	Возврат Основание;
	
КонецФункции

Функция ДокументыОснования(BasisDocuments)
	
	Основания = Новый Массив;
	
	Если BasisDocuments <> Неопределено Тогда
		
		Для Каждого BasisDocument Из BasisDocuments.BasisDocument Цикл
			Основание = Основание(BasisDocument);
			Основания.Добавить(Основание);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Основания;
	
КонецФункции

Функция ТранспортныеНакладные(LadingBills)
	
	ТранспортныеНакладные = ОбъектнаяМодель.Новый_ТранспортныеНакладные(); //: ТранспортныеНакладные = Новый ТаблицаЗначений;
	
	Если LadingBills <> Неопределено Тогда
		
		Для Каждого LadingBill Из LadingBills.NumberDate Цикл
			
			ТН = ТранспортныеНакладные.Добавить();
			ТН.Номер	= LadingBill.Number;
			ТН.Дата		= LadingBill.Date;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТранспортныеНакладные;
	
КонецФункции

//}

//===================================
//{ Конвертация XDTO в строковое представление

Функция ПредставлениеКодСтраны(CustomsDeclarations)
	
	Разделитель = ", ";
	
	Результат = "";
	
	Если CustomsDeclarations <> Неопределено Тогда
		
		КодСтраны = Новый Массив;
		Для Каждого CustomsDeclaration Из CustomsDeclarations.CustomsDeclaration Цикл
			КодСтраны.Добавить(CustomsDeclaration.Country.Code);
		КонецЦикла;
		
		Результат = СтрСоединить2(КодСтраны, Разделитель);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) Тогда
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеНомерГТД(CustomsDeclarations)
	
	Разделитель = ", ";
	
	Результат = "";
	
	Если CustomsDeclarations <> Неопределено Тогда
		
		НомерГТД = Новый Массив;
		Для Каждого CustomsDeclaration Из CustomsDeclarations.CustomsDeclaration Цикл
			НомерГТД.Добавить(CustomsDeclaration.Number);
		КонецЦикла;
		
		Результат = СтрСоединить2(НомерГТД, Разделитель);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) Тогда
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//}

//===================================
//{ Сериализаторы документов

// УПД

Функция МодельВДокумент_ТитулПродавцаУПД(УПД)
	
	Classes = КлассыСервиса();
	
	Model = Новый_ОбъектСервиса(Classes.GeneralTransferSeller);
	
	Model.ExecutedFunction = EnumValue(УПД.ВидДокумента);
	
	Model.ShortInfo			= DocumentShortInfo(УПД.Описание);
	Model.Currency			= Currency(УПД.Валюта);
	Model.InfoField			= InfoFieldFull(УПД.ИнфПоле);
	Model.StateContractId	= УПД.ИдГосКонтракта;
	
	Model.Factor = Factor(УПД.Фактор);
	
	Model.Seller	= Contragent(УПД.Продавец);
	Model.Buyer		= Contragent(УПД.Покупатель);
	Model.Consignor	= Contragent(УПД.Грузоотправитель);
	Model.Consignee	= Contragent(УПД.Грузополучатель);
	
	Model.PaymentBillingDocuments = PaymentBillingDocuments(УПД.ПлатежноРасчетныеДокументы);
	
	Model.GeneralTransferArea = GeneralTransferArea(УПД.ТМЦ);
	
	Model.Signers = Signers(УПД.ИнформацияПродавца.Подписанты);
	Model.Drafter = Drafter(УПД.ИнформацияПродавца.Составитель);
	
	Model.TransferArea = Новый_ОбъектСервиса(Classes.TransferArea);
		
	Model.TransferArea.BasisDocuments = BasisDocuments(УПД.Основание);
	
	Model.TransferArea.Carrier = Contragent(УПД.Перевозчик);
	
	Model.TransferArea.LadingBills			= LadingBills(УПД.ТранспортныеНакладные);
	Model.TransferArea.TransportationData	= УПД.СведенияОТранспортировке;
	Model.TransferArea.ThingsTransferInfo	= TransferInfo(УПД.СведенияОПередачеВещи);
	
	Model.TransferArea.Bailor			= Person(УПД.ИнформацияПродавца.ЛицоПередавшееТовар);
	Model.TransferArea.OperationType	= УПД.ИнформацияПродавца.ВидОперации;
	Model.TransferArea.TransferData		= AcceptanceInfo(УПД.ИнформацияПродавца.СведенияОбОперации);
	Model.TransferArea.InfoField		= InfoFieldFull(УПД.ИнформацияПродавца.ИнфПоле);
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Model);
	
	Options = Новый_ОбъектСервиса(Classes.DocumentGenerationOptions);
	Options.ValidateContent	= Истина;
	Options.SenderBoxId		= УПД.Продавец.Ящик;
	Options.RecipientBoxId	= УПД.Покупатель.Ящик;
	
	Service = ExchangeService();
	GeneratedContent = Service.GenerateGeneralTransferSeller(Токен, Model, Options);
	
	Результат = РезультатГенератораДокумента(GeneratedContent);
	
	Возврат Результат;

КонецФункции

Функция GeneralTransferArea(ТМЦ)
	
	Classes = КлассыСервиса();
	
	GeneralTransferArea = Новый_ОбъектСервиса(Classes.GeneralTransferArea);
	
	Items = Новый_ОбъектСервиса(Classes.ArrayOfGeneralTransferItem);
	Для Каждого СтрокаТМЦ Из ТМЦ.ТабличнаяЧасть Цикл
		
		Item = Новый_ОбъектСервиса(Classes.GeneralTransferItem);
		Items.GeneralTransferItem.Add(Item);
		
		Item.Attribute = Новый_ОбъектСервиса(Classes.ProductAttribute);
		
		Item.Name			= СтрокаТМЦ.Наименование;
		Item.VatRate		= EnumValue(СтрокаТМЦ.СтавкаНДС);
		Item.Price			= СтрокаТМЦ.Цена;
		Item.Quantity		= СтрокаТМЦ.Количество;
		Item.NetAmount		= СтрокаТМЦ.СуммаБезНДС;
		Item.VatAmount		= СтрокаТМЦ.СуммаНДС;
		Item.GrossAmount	= СтрокаТМЦ.СуммаСНДС;
		
		Если ЗначениеЗаполнено(СтрокаТМЦ.ЕИКод) Тогда
			Item.UnitOfMeasure = Новый_ОбъектСервиса(Classes.NameCodeObject);
			Item.UnitOfMeasure.Code = СтрокаТМЦ.ЕИКод;
			Item.UnitOfMeasure.Name = НеопределеноЕслиНеЗаполнено(СтрокаТМЦ.ЕИНаименование);
		КонецЕсли;
		
		Item.InfoTexts = InfoTexts(СтрокаТМЦ.ИнфПоле);
		
		Item.DebitAccount	= СтрокаТМЦ.СчетДт;
		Item.CreditAccount	= СтрокаТМЦ.СчетКт;
		
		Item.Attribute.AttributeType	= EnumValue(СтрокаТМЦ.Признак);
		Item.Attribute.AdditionalInfo	= НеопределеноЕслиНеЗаполнено(СтрокаТМЦ.ПризнакДопИнфо);
		Item.Code						= СтрокаТМЦ.Код;
		Item.QuantityToRelease			= СтрокаТМЦ.КоличествоОтпустить;
		Item.Excise						= СтрокаТМЦ.Акциз;
		Item.OriginCountryShortName		= СтрокаТМЦ.СтранаПроисхождения;
		
		Item.CustomsDeclarations = CustomsDeclarations(СтрокаТМЦ.КодСтраны, СтрокаТМЦ.НомерГТД);
		
		ОчиститьНезаполненныеЗначенияОбъектаXDTO(Item);

	КонецЦикла;
	
	Total = Новый_ОбъектСервиса(Classes.GeneralTransferTotal);
	Итого = ТМЦ.Итого;
	
	Total.NetAmount		= Итого.СуммаБезНДС;
	Total.VatAmount		= Итого.СуммаНДС;
	Total.GrossAmount	= Итого.СуммаСНДС;
	
	Total.Quantity		= Итого.Количество;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Total);
	
	GeneralTransferArea.Items = Items;
	GeneralTransferArea.Total = Total;
	
	Возврат GeneralTransferArea;
	
КонецФункции

Функция МодельВДокумент_ТитулПокупателяУПД(УПД, ИДТитулаПродавца)
	
	Classes = КлассыСервиса();
	
	Model = Новый_ОбъектСервиса(Classes.GeneralTransferBuyer);
	
	Model.OperationType = УПД.ИнформацияПокупателя.ВидОперации;
	
	Model.GoodsReceiver = Person(УПД.ИнформацияПокупателя.ЛицоПринявшееТовар);
	
	Model.GoodsAcceptanceInfo	= AcceptanceInfo(УПД.ИнформацияПокупателя.СведенияОбОперации);
	Model.Signers				= Signers(УПД.ИнформацияПокупателя.Подписанты);
	Model.Drafter				= Drafter(УПД.ИнформацияПокупателя.Составитель);
	Model.InfoField				= InfoFieldFull(УПД.ИнформацияПокупателя.ИнфПоле);
	
	Options = Новый_ОбъектСервиса(Classes.DocumentGenerationOptions);
	Options.ValidateContent = Истина;
	
	Service = ExchangeService();
	GeneratedContent = Service.GenerateGeneralTransferBuyer(Токен, Syn_ЯщикОрганизации, ИДТитулаПродавца, Model, Options);
	
	Результат = РезультатГенератораДокумента(GeneratedContent);
	
	Возврат Результат;
	
КонецФункции

// УКД

Функция МодельВДокумент_ТитулПродавцаУКД(УКД)
	
	Classes = КлассыСервиса();
	
	Model = Новый_ОбъектСервиса(Classes.GeneralTransferCorrectionSeller);
	
	Model.ExecutedFunction = EnumValue(УКД.ВидДокумента);
	
	Model.ShortInfo			= DocumentShortInfo(УКД.Описание);
	Model.Currency			= Currency(УКД.Валюта);
	Model.InfoField			= InfoFieldFull(УКД.ИнфПоле);
	Model.StateContractId	= УКД.ИдГосКонтракта;
	
	Model.Factor = Factor(УКД.Фактор);
	
	Model.OriginalDocuments = OriginalDocuments(УКД.ИсходныеДокументы);
	
	Model.Seller	= Contragent(УКД.Продавец);
	Model.Buyer		= Contragent(УКД.Покупатель);
	
	Model.GeneralTransferCorrectionArea = GeneralTransferCorrectionArea(УКД.ИзмененияТМЦ);
	
	Model.Signers = Signers(УКД.ИнформацияПродавца.Подписанты);
	Model.Drafter = Drafter(УКД.ИнформацияПродавца.Составитель);
	
	Model.ApprovalArea = Новый_ОбъектСервиса(Classes.ApprovalArea);
		
	Model.ApprovalArea.BasisDocuments = BasisDocuments(УКД.Основание);

	Model.ApprovalArea.TransferDocumentsRequisites	= УКД.ПередаточныеДокументы;
	Model.ApprovalArea.CorrectionAdditionalInfo		= УКД.ДопИнфо;
	
	Model.ApprovalArea.ApprovalInfo = ApprovalInfo(УКД.ИнформацияПродавца.СведенияОбОперации);
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Model);
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Model.ApprovalArea);
	
	Если Model.ApprovalArea.TransferDocumentsRequisites = Неопределено Тогда
		Model.ApprovalArea.TransferDocumentsRequisites = "";
	КонецЕсли;
	
	Options = Новый_ОбъектСервиса(Classes.DocumentGenerationOptions);
	Options.ValidateContent	= Истина;
	Options.SenderBoxId		= УКД.Продавец.Ящик;
	Options.RecipientBoxId	= УКД.Покупатель.Ящик;
	
	Service = ExchangeService();
	GeneratedContent = Service.GenerateGeneralTransferCorrectionSeller(Токен, Model, Options);
	
	Результат = РезультатГенератораДокумента(GeneratedContent);
	
	Возврат Результат;
	
КонецФункции

Функция GeneralTransferCorrectionArea(ИзмененияТМЦ)
	
	Classes = КлассыСервиса();
	
	GeneralTransferCorrectionArea = Новый_ОбъектСервиса(Classes.GeneralTransferCorrectionArea);
	
	ДоПосле = ПоляССуффиксами(
		"СтавкаНДС, Цена, Количество, СуммаБезНДС, СуммаНДС, СуммаСНДС, ЕИКод, ЕИНаименование, Акциз",
		"До, После"
	);
	
	УвелУмен = ПоляССуффиксами(
		"СуммаБезНДС, СуммаНДС, СуммаСНДС, Акциз",
		"Увеличение, Уменьшение"
	);
	
	ИменаПолей = Новый Структура(
		"До,		После,		Увеличение,		Уменьшение",
		"Before",	"After",	"AmountInc",	"AmountDec"
	);
	
	Items = Новый_ОбъектСервиса(Classes.ArrayOfGeneralTransferCorrectionItem);
	Для Каждого СтрокаТЧ Из ИзмененияТМЦ.ТабличнаяЧасть Цикл
		
		Item = Новый_ОбъектСервиса(Classes.GeneralTransferCorrectionItem);
		Items.GeneralTransferCorrectionItem.Add(Item);
		
		Item.Name			= СтрокаТЧ.Наименование;
		Item.InfoTexts		= InfoTexts(СтрокаТЧ.ИнфПоле);
		Item.CreditAccount	= СтрокаТЧ.СчетКт;
		Item.DebitAccount	= СтрокаТЧ.СчетДт;
		
		Для Каждого Суффикс Из ДоПосле Цикл
			
			Поля = Суффикс.Значение;
			ИмяПоля = ИменаПолей[Суффикс.Ключ];
			
			AfterBefore = Новый_ОбъектСервиса(Classes.GeneralTransferItemData);
			
			AfterBefore.VatRate				= EnumValue(СтрокаТЧ[Поля.СтавкаНДС]);
			AfterBefore.Price				= СтрокаТЧ[Поля.Цена];
			AfterBefore.Quantity			= СтрокаТЧ[Поля.Количество];
			AfterBefore.NetAmount			= СтрокаТЧ[Поля.СуммаБезНДС];
			AfterBefore.VatAmount			= СтрокаТЧ[Поля.СуммаНДС];
			AfterBefore.GrossAmount			= СтрокаТЧ[Поля.СуммаСНДС];
			
			Если ЗначениеЗаполнено(СтрокаТЧ[Поля.ЕИКод]) Тогда
				AfterBefore.UnitOfMeasure = Новый_ОбъектСервиса(Classes.NameCodeObject);
				AfterBefore.UnitOfMeasure.Code = СтрокаТЧ[Поля.ЕИКод];
				AfterBefore.UnitOfMeasure.Name = НеопределеноЕслиНеЗаполнено(СтрокаТЧ[Поля.ЕИНаименование]);
			КонецЕсли;
			
			AfterBefore.Excise				= СтрокаТЧ[Поля.Акциз];
			
			ОчиститьНезаполненныеЗначенияОбъектаXDTO(AfterBefore);
			
			Item[ИмяПоля] = AfterBefore;
			
		КонецЦикла;
		
		Change = Новый_ОбъектСервиса(Classes.GeneralTransferItemChange);
		
		Change.NetAmountChange		= Новый_ОбъектСервиса(Classes.AmountChange);
		Change.VatAmountChange		= Новый_ОбъектСервиса(Classes.AmountChange);
		Change.GrossAmountChange	= Новый_ОбъектСервиса(Classes.AmountChange);
		Change.ExciseChange			= Новый_ОбъектСервиса(Classes.AmountChange);
		
		Для Каждого Суффикс Из УвелУмен Цикл
			
			Поля = Суффикс.Значение;
			ИмяПоля = ИменаПолей[Суффикс.Ключ];
			
			Change.NetAmountChange[ИмяПоля]	= СтрокаТЧ[Поля.СуммаБезНДС];
			Change.VatAmountChange[ИмяПоля]	= СтрокаТЧ[Поля.СуммаНДС];
			Change.GrossAmountChange[ИмяПоля]	= СтрокаТЧ[Поля.СуммаСНДС];
			
			Change.ExciseChange[ИмяПоля]		= СтрокаТЧ[Поля.Акциз];
			
		КонецЦикла;
		
		ОчиститьНезаполненныеЗначенияОбъектаXDTO(Change.NetAmountChange);
		ОчиститьНезаполненныеЗначенияОбъектаXDTO(Change.VatAmountChange);
		ОчиститьНезаполненныеЗначенияОбъектаXDTO(Change.GrossAmountChange);
		ОчиститьНезаполненныеЗначенияОбъектаXDTO(Change.ExciseChange);
		
		Item.Change = Change;
	
	КонецЦикла;
	
	Итого = ИзмененияТМЦ.Итого;
	Total = Новый_ОбъектСервиса(Classes.GeneralTransferCorrectionTotal);
	
	Total.NetAmountChange	= Новый_ОбъектСервиса(Classes.AmountChange);
	Total.VatAmountChange	= Новый_ОбъектСервиса(Classes.AmountChange);
	Total.GrossAmountChange	= Новый_ОбъектСервиса(Classes.AmountChange);
		
	УвелУмен = ПоляССуффиксами(
		"СуммаБезНДС, СуммаНДС, СуммаСНДС",
		"Увеличение, Уменьшение"
	);
	
	ИменаПолей = Новый Структура(
		"Увеличение, Уменьшение",
		"AmountInc", "AmountDec"
	);
	
	Для Каждого Суффикс Из УвелУмен Цикл
		
		Поля = Суффикс.Значение;
		ИмяПоля = ИменаПолей[Суффикс.Ключ];
		
		Total.NetAmountChange[ИмяПоля]		= Итого[Поля.СуммаБезНДС];
		Total.VatAmountChange[ИмяПоля]		= Итого[Поля.СуммаНДС];
		Total.GrossAmountChange[ИмяПоля]	= Итого[Поля.СуммаСНДС];
		
	КонецЦикла;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Total.NetAmountChange);
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Total.VatAmountChange);
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Total.GrossAmountChange);
	
	GeneralTransferCorrectionArea.Items = Items;
	GeneralTransferCorrectionArea.Total = Total;
	
	Возврат GeneralTransferCorrectionArea;
	
КонецФункции

Функция МодельВДокумент_ТитулПокупателяУКД(УКД, ИДТитулаПродавца)
	
	Classes = КлассыСервиса();
	
	Model = Новый_ОбъектСервиса(Classes.GeneralTransferCorrectionBuyer);
	
	Model.ApprovalInfo	= ApprovalInfo(УКД.ИнформацияПокупателя.СведенияОбОперации);
	Model.Signers		= Signers(УКД.ИнформацияПокупателя.Подписанты);
	Model.Drafter		= Drafter(УКД.ИнформацияПокупателя.Составитель);
	Model.InfoField		= InfoFieldFull(УКД.ИнформацияПокупателя.ИнфПоле);
	
	Options = Новый_ОбъектСервиса(Classes.DocumentGenerationOptions);
	Options.ValidateContent = Истина;
	
	Service = ExchangeService();
	GeneratedContent = Service.GenerateGeneralTransferCorrectionBuyer(Токен, Syn_ЯщикОрганизации, ИДТитулаПродавца, Model, Options);
	
	Результат = РезультатГенератораДокумента(GeneratedContent);
	
	Возврат Результат;
	
КонецФункции

// ДПТ

Функция МодельВДокумент_ТитулПокупателяДПТ(ДПТ, ИДТитулаПродавца)
	
	Classes = КлассыСервиса();
	
	Model = Новый_ОбъектСервиса(Classes.GoodsTransferBuyer);
	
	Model.OperationType = ДПТ.ИнформацияПокупателя.ВидОперации;
	
	Model.GoodsReceiver = Person(ДПТ.ИнформацияПокупателя.ЛицоПринявшееТовар);
	
	Model.GoodsAcceptanceInfo	= AcceptanceInfo(ДПТ.ИнформацияПокупателя.СведенияОбОперации);
	Model.Signers				= Signers(ДПТ.ИнформацияПокупателя.Подписанты);
	Model.Drafter				= Drafter(ДПТ.ИнформацияПокупателя.Составитель);
	Model.InfoField				= InfoFieldFull(ДПТ.ИнформацияПокупателя.ИнфПоле);
	
	Options = Новый_ОбъектСервиса(Classes.DocumentGenerationOptions);
	Options.ValidateContent = Истина;
	
	Service = ExchangeService();
	GeneratedContent = Service.GenerateGoodsTransferBuyer(Токен, Syn_ЯщикОрганизации, ИДТитулаПродавца, Model, Options);
	
	Результат = РезультатГенератораДокумента(GeneratedContent);
	
	Возврат Результат;
	
КонецФункции

// ДПРР

Функция МодельВДокумент_ТитулЗаказчикаДПРР(ДПРР, ИДТитулаИсполнителя)
	
	Classes = КлассыСервиса();
	
	Model = Новый_ОбъектСервиса(Classes.WorksTransferBuyer);
	
	Model.OperationType = ДПРР.ИнформацияПокупателя.ВидОперации;
	
	Model.WorksAcceptanceInfo	= AcceptanceInfo(ДПРР.ИнформацияПокупателя.СведенияОбОперации);
	Model.Signers				= Signers(ДПРР.ИнформацияПокупателя.Подписанты);
	Model.Drafter				= Drafter(ДПРР.ИнформацияПокупателя.Составитель);
	Model.InfoField				= InfoFieldFull(ДПРР.ИнформацияПокупателя.ИнфПоле);
	
	Model.ThingsAcceptanceInfo = AcceptanceInfo(ДПРР.СведенияОПолученииВещи);
	
	Options = Новый_ОбъектСервиса(Classes.DocumentGenerationOptions);
	Options.ValidateContent = Истина;
	
	Service = ExchangeService();
	GeneratedContent = Service.GenerateWorksTransferBuyer(Токен, Syn_ЯщикОрганизации, ИДТитулаИсполнителя, Model, Options);
	
	Результат = РезультатГенератораДокумента(GeneratedContent);
	
	Возврат Результат;
	
КонецФункции

//}

//===================================
//{ Конветрация объектной модели ИР в XDTO

Функция DocumentShortInfo(ОписаниеДокумента)
	
	Classes = КлассыСервиса();
	
	ShortInfo = Новый_ОбъектСервиса(Classes.DocumentShortInfo);
	
	ShortInfo.Name		= ОписаниеДокумента.Наименование;
	ShortInfo.Number	= ОписаниеДокумента.Номер;
	ShortInfo.Date		= ОписаниеДокумента.Дата;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(ShortInfo);
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ИсправлениеНомер) ИЛИ ЗначениеЗаполнено(ОписаниеДокумента.ИсправлениеДата) Тогда
		
		ShortInfo.Revision = Новый_ОбъектСервиса(Classes.NumberDate);
		ShortInfo.Revision.Number	= ОписаниеДокумента.ИсправлениеНомер;
		ShortInfo.Revision.Date		= ОписаниеДокумента.ИсправлениеДата;
		
		ОчиститьНезаполненныеЗначенияОбъектаXDTO(ShortInfo.Revision);
		
	КонецЕсли;
	
	Возврат ShortInfo;
	
КонецФункции

Функция OriginalDocuments(ИсходныеДокументы)
	
	Classes = КлассыСервиса();
	
	OriginalDocuments = Новый_ОбъектСервиса(Classes.ArrayOfDocumentShortInfo);
	
	Для Каждого ИсходныйДокумент Из ИсходныеДокументы Цикл
		
		ShortInfo = DocumentShortInfo(ИсходныйДокумент);
		OriginalDocuments.DocumentShortInfo.Add(ShortInfo);
		
	КонецЦикла;
	
	Возврат OriginalDocuments;
	
КонецФункции

Функция Contragent(Контрагент)
	
	Если Контрагент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Classes = КлассыСервиса();
	
	Contragent = Новый_ОбъектСервиса(Classes.Contragent);
	
	ТипыОрганизации = ОбъектнаяМодель.ТипыОрганизации();
	Если Контрагент.ТипОрганизации = ТипыОрганизации.ИнОрг Тогда
		Contragent.OrganizationType = EnumValue(ТипыОрганизации.ЮрЛицо);
		Contragent.IsForeign = Истина;
	Иначе
		Contragent.OrganizationType = EnumValue(Контрагент.ТипОрганизации);
	КонецЕсли;
	
	Contragent.OrganizationName	= Контрагент.Наименование;
	Contragent.Inn				= Контрагент.ИНН;
	Contragent.Kpp				= Контрагент.КПП;
	
	Contragent.Okpo = Контрагент.ОКПО;
	
	Contragent.FullName					= FullName(Контрагент.ФИО);
	Contragent.StateRegistrationCert	= Контрагент.СвидетельствоОРегистрацииИП;
	
	Contragent.Address = Address(Контрагент.Адрес);
	
	ContactInfo = Новый_ОбъектСервиса(Classes.ContragentContactInfo);
	Contragent.ContactInfo = ContactInfo;
	
	КИ = Контрагент.КонтактнаяИнформация;
	
	ContactInfo.Phone	= КИ.Телефон;
	ContactInfo.Fax		= КИ.Факс;
	ContactInfo.Email	= КИ.Email;
	
	Contragent.BankAccount = BankAccount(Контрагент.БанковскийСчет);
	
	Contragent.AdditionalInfo = Контрагент.ДопИнфо;
	
	Contragent.DepartmentName					= Контрагент.Подразделение;
	Contragent.AdditionalInfoForParticipants	= Контрагент.ДопИнфоДляУчастников;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Contragent);
	
	Возврат Contragent;
	
КонецФункции

Функция Factor(Фактор)
	
	Если Фактор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Classes = КлассыСервиса();
	
	Factor = Новый_ОбъектСервиса(Classes.Factor);
	
	Factor.OrganizationName	= Фактор.Наименование;
	Factor.Inn				= Фактор.ИНН;
	Factor.Kpp				= Фактор.КПП;
	
	Factor.BankAccount = BankAccount(Фактор.БанковскийСчет);
	
	Factor.AdditionalInfo = Фактор.ДопИнфо;
	
	Factor.Address	= Фактор.Адрес;
	Factor.Phone	= Фактор.Телефон;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Factor);
	
	Возврат Factor;
	
КонецФункции

Функция BankAccount(БанковскийСчет)
	
	Classes = КлассыСервиса();
	
	BankAccount = Новый_ОбъектСервиса(Classes.BankAccount);
	
	BankAccount.PaymentAccount			= БанковскийСчет.РасчетныйСчет;
	BankAccount.CorrespondentAccount	= БанковскийСчет.КоррСчет;
	
	BankAccount.Bank = Новый_ОбъектСервиса(Classes.Bank);
	BankAccount.Bank.Name	= БанковскийСчет.НаименованиеБанка;
	BankAccount.Bank.Bik	= БанковскийСчет.БИК;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(BankAccount);
	
	Возврат BankAccount;
	
КонецФункции

Функция Address(Адрес)
	
	Если Адрес = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Classes = КлассыСервиса();
	
	Address = Новый_ОбъектСервиса(Classes.Address);
		
	Address.AddressLocationType = EnumValue(Адрес.ВидАдреса);
	
	ВидыАдреса = ОбъектнаяМодель.ВидыАдреса();
	
	Если Адрес.ВидАдреса = ВидыАдреса.АдресРФ Тогда
		
		Address.PostalCode	= Адрес.ПочтовыйИндекс;
		Address.RegionCode	= Адрес.КодРегиона;
		Address.District	= Адрес.Район;
		Address.City		= Адрес.Город;
		Address.Street		= Адрес.Улица;
		Address.House		= Адрес.Дом;
		Address.Apartment	= Адрес.Квартира;
		Address.Building	= Адрес.Строение;
		
	ИначеЕсли Адрес.ВидАдреса = ВидыАдреса.Неструктурированный Тогда
		
		Address.CountryCode				= Адрес.КодСтраны;
		Address.ForeignStreetAddress	= Адрес.ИностранныйАдрес;
		
	ИначеЕсли Адрес.ВидАдреса = ВидыАдреса.КодГАР Тогда
		
		Address.StateRegistryCode = Адрес.КодГАР;
		
	КонецЕсли;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Address);
	
	Возврат Address;
	
КонецФункции

Функция Currency(Валюта)
	
	Classes = КлассыСервиса();
	
	Currency = Новый_ОбъектСервиса(Classes.CurrencyInfo);
	Currency.Currency = Новый_ОбъектСервиса(Classes.NameCodeObject);
	
	Currency.Currency.Code	= Валюта.Код;
	Currency.Currency.Name	= Валюта.Наименование;
	Currency.CurrencyRate	= Валюта.Курс;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Currency);
	
	Возврат Currency;
	
КонецФункции

Функция Person(ОтветственноеЛицо)
	
	Если ОтветственноеЛицо = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Classes = КлассыСервиса();
	
	Person = Новый_ОбъектСервиса(Classes.Person);
	Человек = ОтветственноеЛицо;
	
	Person.PersonType		= EnumValue(Человек.Вид);
	
	Person.FullName			= FullName(Человек.ФИО);
	Person.AdditionalInfo	= Человек.ДопИнфо;
	
	Person.AuthorityBase	= Человек.ОснованиеПолномочий;
	Person.TrustBase		= Человек.ОснованиеДоверия;
	Person.Position			= Человек.Должность;
	
	Person.OrganizationName	= Человек.НаименованиеОрганизации;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Person);
	
	Возврат Person;
	
КонецФункции

Функция FullName(ФИО)
	
	Classes = КлассыСервиса();
	
	FullName = Новый_ОбъектСервиса(Classes.FullName);
	
	FullName.LastName	= ФИО.Фамилия;
	FullName.FirstName	= ФИО.Имя;
	FullName.MiddleName	= ФИО.Отчество;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(FullName);
	
	Возврат FullName;
	
КонецФункции

Функция OperationInfo(ОписаниеОперации)
	
	Classes = КлассыСервиса();
	
	OperationInfo = Новый_ОбъектСервиса(Classes.OperationInfo);
	
	OperationInfo.Description	= ОписаниеОперации.Описание;
	OperationInfo.Date			= ОписаниеОперации.Дата;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(OperationInfo);
	
	Возврат OperationInfo;
	
КонецФункции

Функция AcceptanceInfo(ОписаниеОперации)
	
	Classes = КлассыСервиса();
	
	AcceptanceInfo = Новый_ОбъектСервиса(Classes.AcceptanceInfo);
	
	OperationInfo = OperationInfo(ОписаниеОперации);
	ЗаполнитьЗначенияСвойств(AcceptanceInfo, OperationInfo, "Description, Date");
	
	Возврат AcceptanceInfo;
	
КонецФункции

Функция ApprovalInfo(ОписаниеОперации)
	
	Classes = КлассыСервиса();
	
	ApprovalInfo = Новый_ОбъектСервиса(Classes.ApprovalInfo);
	
	OperationInfo = OperationInfo(ОписаниеОперации);
	ЗаполнитьЗначенияСвойств(ApprovalInfo, OperationInfo, "Description, Date");
	
	Возврат ApprovalInfo;
	
КонецФункции

Функция TransferInfo(ОписаниеОперации)
	
	Classes = КлассыСервиса();
	
	TransferInfo = Новый_ОбъектСервиса(Classes.TransferInfo);
	
	OperationInfo = OperationInfo(ОписаниеОперации);
	ЗаполнитьЗначенияСвойств(TransferInfo, OperationInfo, "Description, Date");
	
	Возврат TransferInfo;
	
КонецФункции

Функция Signers(Подписанты)
	
	Classes = КлассыСервиса();
	
	Signers = Новый_ОбъектСервиса(Classes.ArrayOfSigner);
	
	Для Каждого Подписант Из Подписанты Цикл
		
		Signer = Новый_ОбъектСервиса(Classes.Signer);
		Signers.Signer.Add(Signer);
		
		Signer.SignerType					= EnumValue(Подписант.Статус);
		Signer.AuthorityArea				= EnumValue(Подписант.ОбластьПолномочий);
		Signer.AuthorityBase				= Подписант.ОснованиеПолномочий;
		Signer.OrganizationAuthorityBase	= Подписант.ОснованиеПолномочийОрганизации;
		
		Signer.OrganizationType				= EnumValue(Подписант.ТипОрганизации);
		
		Signer.Inn							= Подписант.ИНН;
		Signer.FullName						= FullName(Подписант.ФИО);
		Signer.AdditionalInfo				= Подписант.ДопИнфо;
		
		Signer.OrganizationName				= Подписант.НаименованиеОрганизации;
		Signer.Position						= Подписант.Должность;
		
		Signer.StateRegistrationCert		= Подписант.СвидетельствоОРегистрацииИП;
		
		ОчиститьНезаполненныеЗначенияОбъектаXDTO(Signer);
		
	КонецЦикла;
	
	Возврат Signers;
	
КонецФункции

Функция Drafter(СоставительДокумента)
	
	Classes = КлассыСервиса();
	
	Drafter = Новый_ОбъектСервиса(Classes.Drafter);
	
	Drafter.OrganizationName	= СоставительДокумента.НаименованиеОрганизации;
	Drafter.AuthorityBase		= СоставительДокумента.ОснованиеПолномочий;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(Drafter);
	
	Возврат Drafter;
	
КонецФункции

Функция InfoFieldFull(ИнфПоле)
	
	Classes = КлассыСервиса();
	
	InfoTexts = InfoTexts(ИнфПоле);
	Если InfoTexts = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	InfoFieldFull = Новый_ОбъектСервиса(Classes.InfoFieldFull);
	
	InfoFieldFull.InfoText = InfoTexts;
	
	Возврат InfoFieldFull;
	
КонецФункции

Функция InfoTexts(ИнфПоле)

	Если ИнфПоле.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Classes = КлассыСервиса();
	
	InfoTexts = Новый_ОбъектСервиса(Classes.ArrayOfNameCodeObject);
	
	Для Каждого Поле Из ИнфПоле Цикл
		
		InfoText = Новый_ОбъектСервиса(Classes.NameCodeObject);
		InfoTexts.NameCodeObject.Add(InfoText);
		
		InfoText.Code = Поле.Идентификатор;
		InfoText.Name = Поле.Значение;
		
		ОчиститьНезаполненныеЗначенияОбъектаXDTO(InfoText);
		
	КонецЦикла;
	
	Возврат InfoTexts;
	
КонецФункции

Функция ArrayOfNumberDate(НомерДатаДокументов)
	
	Classes = КлассыСервиса();
	
	ArrayOfNumberDate = Новый_ОбъектСервиса(Classes.ArrayOfNumberDate);
	
	Для Каждого Документ Из НомерДатаДокументов Цикл
		
		Document = Новый_ОбъектСервиса(Classes.NumberDate);
		ArrayOfNumberDate.NumberDate.Добавить(Document);
		
		Document.Number	= Документ.Номер;
		Document.Date	= Документ.Дата;
		
		ОчиститьНезаполненныеЗначенияОбъектаXDTO(Document);
		
	КонецЦикла;
	
	Возврат ArrayOfNumberDate;
	
КонецФункции

Функция PaymentBillingDocuments(ПлатежноРасчетныеДокументы)
	
	PaymentBillingDocuments = ArrayOfNumberDate(ПлатежноРасчетныеДокументы);
	
	Возврат PaymentBillingDocuments;
	
КонецФункции

Функция LadingBills(ТранспортныеНакладные)
	
	LadingBills = ArrayOfNumberDate(ТранспортныеНакладные);
	
	Возврат LadingBills;
	
КонецФункции

Функция BasisDocuments(Основания)
	
	Classes = КлассыСервиса();
	
	BasisDocuments = Новый_ОбъектСервиса(Classes.ArrayOfBasisDocument);
	
	Для Каждого Основание Из Основания Цикл
		
		BasisDocument = Новый_ОбъектСервиса(Classes.BasisDocument);
		BasisDocuments.BasisDocument.Add(BasisDocument);
		
		BasisDocument.Name				= Основание.Наименование;
		BasisDocument.Number			= Основание.Номер;
		BasisDocument.Date				= Основание.Дата;
		BasisDocument.AdditionalInfo	= Основание.ДопИнфо;
		
		ОчиститьНезаполненныеЗначенияОбъектаXDTO(BasisDocument);
		
	КонецЦикла;
	
	Возврат BasisDocuments;
	
КонецФункции

Функция CustomsDeclarations(КодСтраны, НомерГТД)
	
	Если НЕ ЗначениеЗаполнено(КодСтраны) И НЕ ЗначениеЗаполнено(НомерГТД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Classes = КлассыСервиса();
	
	CustomsDeclarations	= Новый_ОбъектСервиса(Classes.ArrayOfCustomsDeclaration);
	
	CustomsDeclaration = Новый_ОбъектСервиса(Classes.CustomsDeclaration);
	CustomsDeclarations.CustomsDeclaration.Add(CustomsDeclaration);
	CustomsDeclaration.Country = Новый_ОбъектСервиса(Classes.NameCodeObject);
	
	CustomsDeclaration.Country.Code	= КодСтраны;
	CustomsDeclaration.Number		= НомерГТД;
	
	ОчиститьНезаполненныеЗначенияОбъектаXDTO(CustomsDeclaration);
	
	Возврат CustomsDeclarations;
	
КонецФункции

//}

//===================================
//{ Работа с EnumValue

Функция ЗначениеПеречисления(EnumValue, Перечисление, ЗначениеСтрокой = Ложь)
	
	Если EnumValue = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = EnumValue.Code;
	
	// TODO: Сделать строковые значения для всех перечислений
	Если ЗначениеСтрокой Тогда
		Значение = Формат(Значение, "ЧН=0; ЧГ=");
	КонецЕсли;
	
	Если НЕ ЗначениеПринадлежитПеречислению(Значение, Перечисление) Тогда
		Значение = Неопределено;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция EnumValue(ЗначениеПеречисления)
	
	Если ЗначениеПеречисления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Classes = КлассыСервиса();
	
	EnumValue = Новый_ОбъектСервиса(Classes.EnumValue);
	EnumValue.Code = ЗначениеПеречисления;
	
	Возврат EnumValue;
	
КонецФункции

//}

//===================================
//{ Работа со списком документов

// Заполнение

Функция СписокДокументов(DocumentEntryList)
	
	Результат = ОбъектнаяМодель.Новый_СписокДокументов();
	
	ТипыДО = ТипыДО();
	
	Если DocumentEntryList <> Неопределено Тогда
		
		ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
		
		Результат.ВсегоДокументов = DocumentEntryList.Total;
		
		СписокДокументов = Результат.СписокДокументов;
		Для Каждого Entry Из DocumentEntryList.Items.DocumentEntryItem Цикл
			
			Получатели = ?(
				Entry.FlowType = ТипыДО.СПодписью,
				Получатели(Entry.Recipients),
				ПолучателиИзДО(Entry.Flows)
			);
			
			// TODO: Переделать заполнение организации
			Отправитель = ОбъектнаяМодель.Новый_ОписаниеОрганизации(
				Entry.FromOrganizationName,
				Entry.MessageFrom,
				Entry.FromDepartmentId
			);
			
			ЭлементСписка = СписокДокументов.Добавить();
			
			ЭлементСписка.ИдентификаторСообщения	= Entry.MessageId;
			ЭлементСписка.ИдентификаторДокумента	= Entry.DocumentId;
			ЭлементСписка.ИдентификаторЭкземпляра	= Entry.Id;
			
			ЭлементСписка.ЕстьСвязанныеДокументы	= Entry.HasRelatedDocuments;
			ЭлементСписка.ТребуетсяПодтверждение	= Entry.NeedReceipt;
			ЭлементСписка.ТребуетсяПодпись			= Entry.NeedSign;
			ЭлементСписка.ТипДО						= Entry.FlowType;
			
			ЭлементСписка.Переслан					= (Entry.FlowType = ТипыДО.Пересылка);
			
			ЭлементСписка.ДатаОтправки				= МестноеВремя(Entry.SentDate);
			
			ЭлементСписка.Отправитель				= Отправитель;
			ЭлементСписка.Получатели				= Получатели;
			
			ЭлементСписка.ТипДокумента				= ЗначениеПеречисления(Entry.DocumentTypeEnum, ТипыДокумента);
			ЭлементСписка.ВидДокумента				= Entry.UntypedKind;
			ЭлементСписка.ДоступныеОперации			= Entry.AvailableOperations;
			ЭлементСписка.Статус					= Entry.DocumentFlowStatusDescription.Status;
			ЭлементСписка.ДопСтатус					= Entry.DocumentFlowStatusDescription.AdditionalStatus;

			ЭлементСписка.НаименованиеДокумента		= Entry.Name;
			ЭлементСписка.Номер						= Entry.Number;
			ЭлементСписка.Дата						= Entry.Date;
			ЭлементСписка.Сумма						= Entry.Sum;
			ЭлементСписка.НДС						= Entry.Nds;
			ЭлементСписка.Комментарий				= Entry.Comment;
			
			// FIXME: Убрать после рефакторинга
			ЭлементСписка.ТипДокументаБГУ			= Entry.DocumentTypeEnum.Name;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Получатели(Recipients)
	
	Результат = Новый Массив;
	
	Если Recipients <> Неопределено Тогда
		
		Для Каждого Recipient Из Recipients.MessageRecipientWithStatus Цикл
			
			ОписаниеОрганизации = ПолучитьОрганизацию(Recipient.OrganizationBoxId);
			
			Получатель = ОбъектнаяМодель.Новый_ОписаниеОрганизации(
				ОписаниеОрганизации.Наименование, 
				Recipient.OrganizationBoxId, 
				Recipient.DepartmentId
			);
			
			Результат.Добавить(Получатель);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Новый ФиксированныйМассив(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучателиИзДО(Flows)
	
	Результат = Новый Массив;
	
	Если Flows <> Неопределено Тогда
		
		Для Каждого Flow Из Flows.DocumentFlow Цикл
			
			Получатель = ОбъектнаяМодель.Новый_ОписаниеОрганизации(
				Flow.RecipientOrganization.Name,
				Flow.RecipientOrganization.BoxAddress,
				Flow.RecipientDepartment.Name
			);
			
			Результат.Добавить(Получатель);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Новый ФиксированныйМассив(Результат);
	
	Возврат Результат;
	
КонецФункции

// Фильтрация

Функция DocumentEntryOptions(ФильтрСпискаДокументов)
	
	Classes = КлассыСервиса();
	
	DocumentEntryOptions = Новый_ОбъектСервиса(Classes.DocumentEntryOptions);
	
	Контрагенты = ФильтрСпискаДокументов.Контрагенты;
	Если ЗначениеЗаполнено(Контрагенты) Тогда
		
		Contragents = Новый_ОбъектСервиса(Classes.ArrayOfstring);
		Для Каждого Ящик Из Контрагенты Цикл
			Contragents.string.Add(Ящик);
		КонецЦикла;
		
		DocumentEntryOptions.ContragentBoxIds = Contragents;
		
	КонецЕсли;
	
	СтатусыПодписания = ФильтрСпискаДокументов.СтатусыПодписания;
	Если ЗначениеЗаполнено(СтатусыПодписания) Тогда
		
		SignStatuses = Новый_ОбъектСервиса(Classes.ArrayOfDocumentSignStatus);
		Для Каждого СтатусПодписания Из СтатусыПодписания Цикл
			SignStatuses.DocumentSignStatus.Add(СтатусПодписания);
		КонецЦикла;
		
		DocumentEntryOptions.DocumentSignStatuses = SignStatuses;
		
	КонецЕсли;
	
	СтатусыСФ = ФильтрСпискаДокументов.СтатусыСФ;
	Если ЗначениеЗаполнено(СтатусыСФ) Тогда
		
		InvoiceStatuses = Новый_ОбъектСервиса(Classes.ArrayOfInvoiceFlowStatus);
		Для Каждого СтатусСФ Из СтатусыСФ Цикл
			InvoiceStatuses.InvoiceFlowStatus.Add(СтатусСФ);
		КонецЦикла;
		
		DocumentEntryOptions.InvoiceFlowStatuses = InvoiceStatuses;
		
	КонецЕсли;
	
	ТипыДокументов = ФильтрСпискаДокументов.ТипыДокументов;
	Если ЗначениеЗаполнено(ТипыДокументов) Тогда
		
		DocumentTypes = Новый_ОбъектСервиса(Classes.ArrayOfEnumValue);
		Для Каждого ТипДокумента Из ТипыДокументов Цикл
			DocumentType = EnumValue(ТипДокумента);
			DocumentTypes.EnumValue.Add(DocumentType);
		КонецЦикла;
		
		DocumentEntryOptions.DocumentTypeEnums = DocumentTypes;
		
	КонецЕсли;
	
	НачалоПериода	= ФильтрСпискаДокументов.НачалоПериода;
	КонецПериода	= ФильтрСпискаДокументов.КонецПериода;
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		DocumentEntryOptions.From = НачалоПериода;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		DocumentEntryOptions.To = КонецПериода;
	КонецЕсли;
	
	Возврат DocumentEntryOptions;
	
КонецФункции

//}

Функция GUID(ИД)
	
	Если ИД = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строка(ИД);
	КонецЕсли;
	
КонецФункции

//===================================
//{ Конвертация объектной модели сервиса в ИР в XDTO

Функция Document(Документ)
	
	Classes = КлассыСервиса();
	
	Document = Новый_ОбъектСервиса(Classes.Document);
	
	Document.Id		= GUID(Документ.ИД);
	Document.Name	= Документ.Наименование;
	
	Document.ParentDocumentId = GUID(Документ.РодительскийДокумент);
	
	Document.DocumentTypeEnum	= EnumValue(Документ.ТипДокумента);
	Document.UntypedKind		= Документ.ВидДокумента;
	
	Document.NeedSign = Документ.ТребуетсяПодписание;
	
	Document.FileName	= Документ.ИмяФайла;
	Document.Content	= Документ.Содержимое;
	
	Document.Card = Документ.Карточка;
	
	Возврат Document;
	
КонецФункции

Функция Sign(Подпись)
	
	Classes = КлассыСервиса();
	
	Sign = Новый_ОбъектСервиса(Classes.Sign);
	
	Sign.DocumentId	= GUID(Подпись.ИДДокумента);
	Sign.Id			= GUID(Подпись.ИД);
	
	Sign.Raw		= Подпись.Содержимое;
	Sign.SentDate	= Подпись.Дата;
	
	Возврат Sign;
	
КонецФункции

Функция ForwardDocument(Документ)
	
	Classes = КлассыСервиса();
	
	Document = Новый_ОбъектСервиса(Classes.ForwardDocument);
	
	Document.OriginalDocumentId	= Документ.ИД;
	Document.NeedSign			= Документ.ТребуетсяПодписание;
	
	Возврат Document;
	
КонецФункции

Функция Message_Service(Сообщение)
	
	Classes = КлассыСервиса();
	
	Message = Новый_ОбъектСервиса(Classes.Message);
	
	Message.Id = GUID(Сообщение.ИД);
	
	Message.From		= Сообщение.Отправитель;
	Message.Recipients	= Recipients(Сообщение.Получатели);
	
	Message.Documents	= Documents(Сообщение.Документы);
	Message.Signs		= Signs(Сообщение.Подписи);
	
	Возврат Message;
	
КонецФункции

Функция ForwardMessage(Сообщение)
	
	Classes = КлассыСервиса();
	
	Message = Новый_ОбъектСервиса(Classes.ForwardMessage);
	
	Message.From		= Сообщение.Отправитель;
	Message.Recipients	= Recipients(Сообщение.Получатели);
	
	Message.Documents	= Documents(Сообщение.Документы);
	Message.Signs		= Signs(Сообщение.Подписи);
	
	Message.ForwardDocuments = ForwardDocuments(Сообщение.ПересылаемыеДокументы);
	
	Возврат Message;
	
КонецФункции

Функция Recipients(Получатели)
	
	Classes = КлассыСервиса();
	
	Recipients = Новый_ОбъектСервиса(Classes.ArrayOfMessageRecipient);
	
	Для Каждого Получатель Из Получатели Цикл
		
		// TODO: Добавление объекта в коллекцию должно быть в конце
		Recipient = Новый_ОбъектСервиса(Classes.MessageRecipient);
		Recipients.MessageRecipient.Add(Recipient);
		
		Recipient.OrganizationBoxId = Получатель;
		
	КонецЦикла;
	
	Возврат Recipients;
	
КонецФункции

Функция Documents(Документы)
	
	Перем Documents;
	
	Classes = КлассыСервиса();
	
	Documents = Новый_ОбъектСервиса(Classes.ArrayOfDocument);
	
	Для Каждого Документ Из Документы Цикл
		Document = Document(Документ);
		Documents.Document.Add(Document);
	КонецЦикла;
	
	Возврат Documents;
	
КонецФункции

Функция Signs(Подписи)
	
	Classes = КлассыСервиса();
	
	Signs = Новый_ОбъектСервиса(Classes.ArrayOfSign);
	
	Для Каждого Подпись Из Подписи Цикл
		Sign = Sign(Подпись);
		Signs.Sign.Add(Sign);
	КонецЦикла;
	
	Возврат Signs;
	
КонецФункции

Функция ForwardDocuments(ПересылаемыеДокументы)
	
	Classes = КлассыСервиса();
	
	ForwardDocuments = Новый_ОбъектСервиса(Classes.ArrayOfForwardDocument);
	
	Для Каждого Документ Из ПересылаемыеДокументы Цикл
		ForwardDocument = ForwardDocument(Документ);
		ForwardDocuments.ForwardDocument.Add(ForwardDocument);
	КонецЦикла;
	
	Возврат ForwardDocuments;
	
КонецФункции

//}

//===================================
//{ Конветрация XDTO в объектную модель сервиса в ИР

Функция РезультатГенератораДокумента(GeneratedContent)
	
	Результат = Новый_РезультатГенератораДокумента();
	
	Документ = Результат.Документ;
	Документ.Содержимое	= GeneratedContent.NamedContent.Content;
	Документ.Имя		= GeneratedContent.NamedContent.Name;
	
	РезультатВалидации = Результат.РезультатВалидации;
	ValidationResult = GeneratedContent.ValidationResult;
	
	РезультатВалидации.Результат = ЗначениеПеречисления(ValidationResult.GeneralStatus, СтатусыВалидации());
	
	Если ValidationResult.XsdErrors <> Неопределено Тогда
		Для Каждого ValidationError Из ValidationResult.XsdErrors.ValidationError Цикл
			Ошибка = ОшибкаВалидации(ValidationError);
			РезультатВалидации.ОшибкиXSD.Добавить(Ошибка);
		КонецЦикла;
	КонецЕсли;
	
	Если ValidationResult.FormatControlErrors <> Неопределено Тогда
		Для Каждого ValidationError Из ValidationResult.FormatControlErrors.ValidationError Цикл
			Ошибка = ОшибкаВалидации(ValidationError);
			РезультатВалидации.ОшибкиФЛК.Добавить(Ошибка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОшибкаВалидации(ValidationError)
	
	Ошибка = Новый_ОшибкаВалидации();
	
	Ошибка.Тип		= ЗначениеПеречисления(ValidationError.ErrorType, ТипыОшибок());
	Ошибка.Поле		= ValidationError.Field;
	Ошибка.Описание	= ValidationError.Description;
	
	Возврат Ошибка;
	
КонецФункции

Функция ОтправленныеДокументы(SentMessage)
	
	ОтправленныеДокументы = Новый_ОтправленныеДокументы();
	
	Если SentMessage = Неопределено Тогда
		Возврат ОтправленныеДокументы;
	КонецЕсли;
	
	DocumentIds = SentMessage.DocumentIds;
	Если DocumentIds <> Неопределено Тогда
		
		Для Каждого LocalServerId Из DocumentIds.LocalServerId Цикл
			ЛокальныйИД = Новый УникальныйИдентификатор(LocalServerId.LocalId);
			ОтправленныеДокументы[ЛокальныйИД] = LocalServerId.ServiceId;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОтправленныеДокументы;
	
КонецФункции

//}

Процедура ОчиститьНезаполненныеЗначенияОбъектаXDTO(Объект)
	
	//: Объект = ФабрикаXDTO.Создать();
	
	Для Каждого Свойство Из Объект.Свойства() Цикл
		
		//: Свойство = Объект.Свойства().Получить();
		
		Если НЕ (Свойство.ВозможноПустое И ТипЗнч(Свойство.Тип) = Тип("ТипЗначенияXDTO")) Тогда
			Продолжить;
		КонецЕсли;
		
		Объект[Свойство.Имя] = НеопределеноЕслиНеЗаполнено(Объект[Свойство.Имя]);
		
	КонецЦикла;
	
КонецПроцедуры

