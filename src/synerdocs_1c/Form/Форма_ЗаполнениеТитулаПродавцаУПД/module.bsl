
//========================================================================
// Форма заполнения реквизитов УПД.
// Используется для заполнения объекта Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУПД().
//========================================================================

Перем _Параметры;

Перем Ссылка;

// Модули
Перем ОбъектнаяМодель, Классификаторы, РаботаСФормами, ФормированиеДокументов;

//========================================================================
// ИНИЦИАЛИЗАЦИЯ
//========================================================================

Процедура ПодключитьМодули()
	
	ОбъектнаяМодель			= Модуль("Модуль_ОбъектнаяМодель");
	Классификаторы			= Модуль("Модуль_Классификаторы");
	РаботаСФормами			= Модуль("Модуль_РаботаСФормами");
	ФормированиеДокументов	= Модуль("Модуль_ФормированиеДокументов");
	
КонецПроцедуры

Процедура Инициализировать()
	
	ПодключитьМодули();
	
КонецПроцедуры

Процедура ИнициализироватьФорму()
	
	Параметры = ПараметрыФормы();
	
	Ссылка = Параметры.Ссылка;
	
	ЭтаФорма.Заголовок = Строка(Ссылка);
	
	КолонкиТЧ = ЭлементыФормы.ТабличнаяЧасть.Колонки;
	КолонкиТЧ.Признак.ЭлементУправления.СписокВыбора				= СписокЗначенийИзПеречисления(ОбъектнаяМодель.ПризнакиТМЦ());
	КолонкиТЧ.НаименованиеЕИ.ЭлементУправления.СписокВыбора			= СписокВыбораЕдиницыИзмерения();
	КолонкиТЧ.СтавкаНДС.ЭлементУправления.СписокВыбора				= СписокЗначенийИзПеречисления(ОбъектнаяМодель.СтавкиНДС());
	КолонкиТЧ.КодСтраныПроисхождения.ЭлементУправления.СписокВыбора	= СписокВыбораСтраны();
	
	ЭлементыФормы.СодержаниеОперации.СписокВыбора = СписокВыбораСодержаниеОперации();
	
	НеочищаемыеПоля = Новый Массив;
	НеочищаемыеПоля.Добавить(ЭлементыФормы.ФункцияДокумента);
	НеочищаемыеПоля.Добавить(ЭлементыФормы.Продавец);
	НеочищаемыеПоля.Добавить(ЭлементыФормы.Покупатель);
	НеочищаемыеПоля.Добавить(ЭлементыФормы.Грузоотправитель);
	НеочищаемыеПоля.Добавить(ЭлементыФормы.Грузополучатель);
	НеочищаемыеПоля.Добавить(ЭлементыФормы.Валюта);
	НеочищаемыеПоля.Добавить(ЭлементыФормы.Подписант);
	НеочищаемыеПоля.Добавить(ЭлементыФормы.Составитель);
	НеочищаемыеПоля.Добавить(ЭлементыФормы.ОснованиеОтгрузки);
	НеочищаемыеПоля.Добавить(ЭлементыФормы.ТранспортныеНакладные);
	НеочищаемыеПоля.Добавить(ЭлементыФормы.ТабличнаяЧасть.Колонки.ИнфПоле.ЭлементУправления);
	
	ДействиеОчитска = Новый Действие("Подключаемый_ОтменаОчистки");
	Для Каждого Элемент Из НеочищаемыеПоля Цикл //: Элемент = ЭлементыФормы.Продавец;
		Элемент.УстановитьДействие("Очистка", ДействиеОчитска);
	КонецЦикла;
	
	ТабличнаяЧасть.Колонки.Добавить("Идентификатор");
	ТабличнаяЧасть.Колонки.Добавить("ИнфПоле");
	
	Документ = НеФиксированныеДанные(Параметры.Модель);
	УстановитьДокумент(Документ);
	
КонецПроцедуры

Функция ПараметрыФормы()
	
	Если _Параметры = Неопределено Тогда
		ВызватьИсключение "Параметры формы не установлены";
	КонецЕсли;
	
	Возврат _Параметры;
	
КонецФункции

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

Функция Параметры() Экспорт
	
	Параметры = Новый Структура(
		"Модель,
		|Ссылка"
	);
	
	Параметры.Модель = Неопределено; //: Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУПД();
	
	Возврат Параметры;
	
КонецФункции

Функция УстановитьПараметры(Параметры) Экспорт
	
	_Параметры = ФиксированныеДанные(Параметры);
	
КонецФункции

Функция ПроверяемыеРеквизиты() Экспорт
	
	Поля = Новый СписокЗначений;
	
	// Шапка
	
	Поля.Добавить("ФункцияДокументаПредставление",    НСтр("ru = 'Функция документа'"));
	Поля.Добавить("Номер",                            НСтр("ru = 'Номер'"));
	Поля.Добавить("Дата",                             НСтр("ru = 'Дата'"));
	Поля.Добавить("НомерИсправления",                 НСтр("ru = 'Исправление: Номер'"));
	Поля.Добавить("ДатаИсправления",                  НСтр("ru = 'Исправление: Дата'"));

	Поля.Добавить("ПродавецПредставление",            НСтр("ru = 'Продавец'"));
	Поля.Добавить("ПокупательПредставление",          НСтр("ru = 'Покупатель'"));
	Поля.Добавить("ГрузоотправительПредставление",    НСтр("ru = 'Грузоотправитель'"));
	Поля.Добавить("ГрузополучательПредставление",     НСтр("ru = 'Грузополучатель'"));

	Поля.Добавить("ВалютаПредставление",              НСтр("ru = 'Валюта'"));

	// Табличная часть
	
	ПредставлениеТЧ = НСтр("ru = 'Товары (услуги)'");
	Поля.Добавить("ТабличнаяЧасть",               ПредставлениеТЧ);
	Поля.Добавить("ТабличнаяЧасть.Наименование",  ПредставлениеТЧ + НСтр("ru = '#Наименование товара (описание работ, услуг), прав'"));
	Поля.Добавить("ТабличнаяЧасть.СтавкаНДС",     ПредставлениеТЧ + НСтр("ru = '#% НДС'"));
	Поля.Добавить("ТабличнаяЧасть.СуммаСНДС",     ПредставлениеТЧ + НСтр("ru = '#Сумма (с НДС)'"));

	// Данные транспортировки
	
	Поля.Добавить("СодержаниеОперации",               НСтр("ru = 'Содержание операции'"));
	Поля.Добавить("ОснованиеОтгрузкиПредставление",   НСтр("ru = 'Основание отгрузки'"));

	// Дополнительная информация
	
	ПредставлениеДопИнфо = НСтр("ru = 'Дополнительная информация'");
	Поля.Добавить("ДополнительнаяИнформация.Поле",        ПредставлениеДопИнфо + НСтр("ru = '#Поле'"));
	Поля.Добавить("ДополнительнаяИнформация.Значение",    ПредставлениеДопИнфо + НСтр("ru = '#Значение'"));

	// Подвал
	
	Поля.Добавить("ПодписантПредставление",   НСтр("ru = 'Подписант'"));
	Поля.Добавить("СоставительПредставление", НСтр("ru = 'Составитель'"));
	
	Возврат Поля;
	
КонецФункции

//========================================================================
// СОБЫТИЯ
//========================================================================

//===================================
//{ События формы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьФорму();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	УстановитьОтображение();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты) Экспорт
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если НЕ ЭтоИсправление Тогда
		НепроверяемыеРеквизиты.Добавить("НомерИсправления");
		НепроверяемыеРеквизиты.Добавить("ДатаИсправления");
	КонецЕсли;
	
	Если НЕ ГрузоотправительУказан Тогда
		НепроверяемыеРеквизиты.Добавить("ГрузоотправительПредставление");
	КонецЕсли;
	
	Если НЕ ГрузополучательУказан Тогда
		НепроверяемыеРеквизиты.Добавить("ГрузополучательПредставление");
	КонецЕсли;
	
	УдалитьНепроверяемыеРеквизиты(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

//}

//===================================
//{ Кнопки формы

Процедура ОсновныеДействияФормыСохранить(Кнопка)
	
	Если НЕ ПроверитьЗаполнениеФормы(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Сохранить();
	
КонецПроцедуры

//}

//===================================
//{ События элементов шапки

Процедура ФункцияДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Форма_ВыборФункцииДокумента", Элемент);
	
	Параметры = ФормаВыбора.Параметры();
	Параметры.ТекущееЗначение	= ФункцияДокумента;
	Параметры.ЭтоФункцияУПД		= Истина;
	
	ФормаВыбора.УстановитьПараметры(Параметры);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ФункцияДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьФункциюДокумента(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ЭтоИсправлениеПриИзменении(Элемент)
	
	УстановитьЭтоИсправление(ЭтоИсправление);
	
КонецПроцедуры

Процедура ПродавецНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачатьЗаполнениеКонтрагента(Элемент, Продавец, НСтр("ru = 'Продавец'"));
	
КонецПроцедуры

Процедура ПродавецОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПродавца(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ГрузоотправительУказанПриИзменении(Элемент)
	
	УстановитьГрузоотправительУказан(ГрузоотправительУказан);
	
КонецПроцедуры

Процедура ГрузоотправительНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачатьЗаполнениеКонтрагента(Элемент, Грузоотправитель, НСтр("ru = 'Грузоотправитель'"));
	
КонецПроцедуры

Процедура ГрузоотправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьГрузоотправителя(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ПокупательНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачатьЗаполнениеКонтрагента(Элемент, Покупатель, НСтр("ru = 'Покупатель'"));
	
КонецПроцедуры

Процедура ПокупательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПокупателя(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ГрузополучательУказанПриИзменении(Элемент)
	
	УстановитьГрузополучательУказан(ГрузополучательУказан);
	
КонецПроцедуры

Процедура ГрузополучательНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачатьЗаполнениеКонтрагента(Элемент, Грузополучатель, НСтр("ru = 'Грузополучатель'"));
	
КонецПроцедуры

Процедура ГрузополучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьГрузополучателя(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ВалютаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Форма_ЗаполнениеВалюты", Элемент);
	
	Параметры = ФормаВыбора.Параметры();
	Параметры.Модель = Валюта;
	
	ФормаВыбора.УстановитьПараметры(Параметры);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ВалютаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьВалюту(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ПлатежноРасчетныеДокументыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Форма_ЗаполнениеДопДокументов", Элемент);
	
	Параметры = ФормаВыбора.Параметры();
	Параметры.Модель	= ПлатежноРасчетныеДокументы;
	Параметры.ВидСписка	= ФормаВыбора.ВидыСпискаДокументов().ПлатежноРасчетныеДокументы;
	
	ФормаВыбора.УстановитьПараметры(Параметры);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ПлатежноРасчетныеДокументыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПРД(ВыбранноеЗначение);
	
КонецПроцедуры

//}

//===================================
//{ События элементов таблицы ТабличнаяЧасть

Процедура ТабличнаяЧастьПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	НомерСтроки = ТабличнаяЧасть.Индекс(ДанныеСтроки) + 1;
	ОформлениеСтроки.Ячейки.НомерСтроки.УстановитьТекст(Формат(НомерСтроки, "ЧГ="));
	
	УстановитьПредставлениеКолонкиСоСпискомВыбора("Признак",                  ЭлементыФормы.ТабличнаяЧасть, ОформлениеСтроки);
	УстановитьПредставлениеКолонкиСоСпискомВыбора("СтавкаНДС",                ЭлементыФормы.ТабличнаяЧасть, ОформлениеСтроки);
	УстановитьПредставлениеКолонкиСоСпискомВыбора("КодСтраныПроисхождения",   ЭлементыФормы.ТабличнаяЧасть, ОформлениеСтроки);
	
КонецПроцедуры

Процедура ТабличнаяЧастьНаименованиеЕИПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущиеДанные;
	
	УстановитьЕдиницуИзмерения(ТекущаяСтрока, ТекущаяСтрока.НаименованиеЕИ);
	
КонецПроцедуры

Процедура ТабличнаяЧастьНаименованиеЕИОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиницаИзмерения = ВыбранноеЗначение;
	УстановитьЕдиницуИзмерения(ТекущаяСтрока, ЕдиницаИзмерения.Наименование, ЕдиницаИзмерения.Код);
	
КонецПроцедуры

Процедура ТабличнаяЧастьКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущиеДанные;
	
	УстановитьКоличество(ТекущаяСтрока, ТекущаяСтрока.Количество);
	
КонецПроцедуры

Процедура ТабличнаяЧастьЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущиеДанные;
	
	УстановитьЦену(ТекущаяСтрока, ТекущаяСтрока.Цена);
	
КонецПроцедуры

Процедура ТабличнаяЧастьСуммаБезНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущиеДанные;
	
	УстановитьСуммуБезНДС(ТекущаяСтрока, ТекущаяСтрока.СуммаБезНДС);
	
КонецПроцедуры

Процедура ТабличнаяЧастьСуммаСНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущиеДанные;
	
	УстановитьСуммуСНДС(ТекущаяСтрока, ТекущаяСтрока.СуммаСНДС);
	
КонецПроцедуры

Процедура ТабличнаяЧастьСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущиеДанные;
	
	УстановитьСтавкуНДС(ТекущаяСтрока, ТекущаяСтрока.СтавкаНДС);
	
КонецПроцедуры

Процедура ТабличнаяЧастьИнфПолеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = ЭлементыФормы.ТабличнаяЧасть.ТекущиеДанные;
	
	КлючСтроки = ИдентификаторСтрокиТЧ(ТекущаяСтрока);
	
	ФормаВыбора = ПолучитьФорму("Форма_ЗаполнениеДопИнформации", Элемент, КлючСтроки);
	
	Параметры = ФормаВыбора.Параметры();
	Параметры.Модель		= ТекущаяСтрока.ИнфПоле;
	Параметры.КлючСтроки	= КлючСтроки;
	
	ФормаВыбора.УстановитьПараметры(Параметры);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ТабличнаяЧастьИнфПолеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТЧ = СтрокаТЧПоИдентификатору(ТабличнаяЧасть, ВыбранноеЗначение.КлючСтроки);
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИнфПоле(СтрокаТЧ, ВыбранноеЗначение.Модель);
	
КонецПроцедуры

//}

//===================================
//{ События элементов страницы ДанныеТранспортировки

Процедура ОснованиеОтгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаВыбора = ПолучитьФорму("Форма_ЗаполнениеОснования", Элемент);
	
	Параметры = ФормаВыбора.Параметры();
	Параметры.Модель = ОснованиеОтгрузки;
	
	ФормаВыбора.УстановитьПараметры(Параметры);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ОснованиеОтгрузкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьОснованиеОтгрузки(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ЛицоПередавшееТоварНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Форма_ЗаполнениеОтветственногоЛица", Элемент);
	
	Параметры = ФормаВыбора.Параметры();
	Параметры.Модель = ЛицоПередавшееТовар;
	
	ФормаВыбора.УстановитьПараметры(Параметры);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ЛицоПередавшееТоварОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьЛицоПередавшееТовар(Неопределено);
	
КонецПроцедуры

Процедура ЛицоПередавшееТоварОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьЛицоПередавшееТовар(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ТранспортныеНакладныеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Форма_ЗаполнениеДопДокументов", Элемент);
	
	Параметры = ФормаВыбора.Параметры();
	Параметры.Модель	= ТранспортныеНакладные;
	Параметры.ВидСписка	= ФормаВыбора.ВидыСпискаДокументов().ТранспортныеНакладные;
	
	ФормаВыбора.УстановитьПараметры(Параметры);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ТранспортныеНакладныеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьТранспортныеНакладные(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ПеревозчикНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьЗаполнениеКонтрагента(Элемент, Перевозчик, НСтр("ru = 'Перевозчик'"));
	
КонецПроцедуры

Процедура ПеревозчикОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПеревозчика(Неопределено);
	
КонецПроцедуры

Процедура ПеревозчикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПеревозчика(ВыбранноеЗначение);
	
КонецПроцедуры

//}

//===================================
//{ События элементов страницы Дополнительно

Процедура ФакторНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Форма_ЗаполнениеФактора", Элемент);
	
	Параметры = ФормаВыбора.Параметры();
	Параметры.Модель = Фактор;
	
	ФормаВыбора.УстановитьПараметры(Параметры);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ФакторОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьФактора(Неопределено);
	
КонецПроцедуры

Процедура ФакторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьФактора(ВыбранноеЗначение);
	
КонецПроцедуры

//}

//===================================
//{ События элементов таблицы ДополнительнаяИнформация

Процедура ДополнительнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	НомерСтроки = ДополнительнаяИнформация.Индекс(ДанныеСтроки) + 1;
	ОформлениеСтроки.Ячейки.НомерСтроки.УстановитьТекст(Формат(НомерСтроки, "ЧГ="));
	
КонецПроцедуры

//}

//===================================
//{ События элементов подвала

Процедура ПодписантНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Форма_ЗаполнениеПодписанта", Элемент);
	
	Параметры = ФормаВыбора.Параметры();
	Параметры.Модель		= Подписант;
	Параметры.ТипДокумента	= ОбъектнаяМодель.ТипыДокументов().ТитулПродавцаУПД;
	
	ФормаВыбора.УстановитьПараметры(Параметры);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ПодписантОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПодписанта(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СоставительНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Форма_ЗаполнениеСоставителяДокумента", Элемент);
	
	Параметры = ФормаВыбора.Параметры();
	Параметры.Модель = Составитель;
	
	ФормаВыбора.УстановитьПараметры(Параметры);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура СоставительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьСоставителя(ВыбранноеЗначение);
	
КонецПроцедуры

//}

//===================================
//{ Команды

Процедура Сохранить()
	
	Модель = Документ();
	
	ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
	
	ТипДокумента = ?(НЕ ЭтоИсправление,
		ТипыДокумента.ТитулПродавцаУПД,
		ТипыДокумента.ИсправленныйТитулПродавцаУПД
	);
	
	РезультатСериализации = ФормированиеДокументов.МодельВДокумент(ТипДокумента, Модель);
	Если РезультатСериализации.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ФормированиеДокументов.Новый_ОтредактированныйДокумент();
	Результат.Ссылка				= Ссылка;
	Результат.Модель				= Модель;
	Результат.ТипДокумента			= ТипДокумента;
	Результат.ВидДокумента			= Модель.ВидДокумента;
	Результат.РезультатСериализации	= РезультатСериализации;
	
	ОповеститьОВыборе(Результат);
	
КонецПроцедуры

//}

//===================================
//{ Общие обработчики

// Обработчик для полей, для которых не нужна очистка,
// чтобы пользователь не мог эту самую очистку вызывать.
Процедура Подключаемый_ОтменаОчистки(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

//}

//========================================================================
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================

Процедура УстановитьОтображение()
	
	ЭлементыФормы.Исправление.Доступность = ЭтоИсправление;
	
	ЭлементыФормы.Грузоотправитель.Доступность = ГрузоотправительУказан;
	ЭлементыФормы.Грузополучатель.Доступность = ГрузополучательУказан;
	
КонецПроцедуры

Процедура УстановитьПредставлениеКолонкиСоСпискомВыбора(ИмяКолонки, ТабличноеПоле, ОформлениеСтроки)
	
	ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
	
	СписокВыбора = ТабличноеПоле.Колонки[ИмяКолонки].ЭлементУправления.СписокВыбора; //: СписокВыбора = Новый СписокЗначений;
	ЭлементСписка = СписокВыбора.НайтиПоЗначению(ДанныеСтроки[ИмяКолонки]);
	Если ЭлементСписка <> Неопределено Тогда
		ОформлениеСтроки.Ячейки[ИмяКолонки].УстановитьТекст(ЭлементСписка.Представление);
	КонецЕсли;
	
КонецПроцедуры

//===================================
//{ Геттеры и сеттеры

// Модель документа

Процедура УстановитьДокумент(Документ)
	
	УстановитьФункциюДокумента(Документ.ВидДокумента);
	
	Номер = Документ.Описание.Номер;
	Дата = Документ.Описание.Дата;
	
	УстановитьИсправление(Документ.Описание.ИсправлениеНомер, Документ.Описание.ИсправлениеДата);
	
	УстановитьПродавца(Документ.Продавец);
	УстановитьПокупателя(Документ.Покупатель);
	
	УстановитьГрузоотправителя(Документ.Грузоотправитель);
	УстановитьГрузополучателя(Документ.Грузополучатель);
	
	УстановитьВалюту(Документ.Валюта);
	
	ИдГосКонтракта = Документ.ИдГосКонтракта;
	
	УстановитьПРД(Документ.ПлатежноРасчетныеДокументы);
	
	СодержаниеОперации	= Документ.ИнформацияПродавца.СведенияОбОперации.Описание;
	ВидОперации			= Документ.ИнформацияПродавца.ВидОперации;
	
	ДатаОтгрузки = Документ.ИнформацияПродавца.СведенияОбОперации.Дата;
	
	Основания = Документ.Основание;
	Если Основания.Количество() > 0 Тогда
		УстановитьОснованиеОтгрузки(Основания[0]);
	КонецЕсли;
	
	УстановитьЛицоПередавшееТовар(Документ.ИнформацияПродавца.ЛицоПередавшееТовар);
	
	УстановитьТранспортныеНакладные(Документ.ТранспортныеНакладные);
	УстановитьПеревозчика(Документ.Перевозчик);
	
	СведенияОТранспортировке = Документ.СведенияОТранспортировке;
	
	СведенияОПерадчеВещи	= Документ.СведенияОПередачеВещи.Описание;
	ДатаПередачиВещи		= Документ.СведенияОПередачеВещи.Дата;
	
	Для Каждого СтрокаТЧ Из Документ.ТМЦ.ТабличнаяЧасть Цикл
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ,
			"Признак, ПризнакДопИнфо,
			|Наименование, Код,
			|КоличествоОтпустить,
			|Количество, Цена,
			|СтавкаНДС, СуммаБезНДС, СуммаНДС, СуммаСНДС,
			|Акциз,
			|НомерГТД,
			|СчетДт, СчетКт"
		);
		
		НоваяСтрока.КодСтраныПроисхождения = СтрокаТЧ.КодСтраны;
		
		УстановитьЕдиницуИзмерения(НоваяСтрока, СтрокаТЧ.ЕИНаименование, СтрокаТЧ.ЕИКод);
		УстановитьИнфПоле(НоваяСтрока, СтрокаТЧ.ИнфПоле);
		
	КонецЦикла;
	
	Для Каждого СтрокаИнфПоле Из Документ.ИнфПоле Цикл
		НовоеПоле = ДополнительнаяИнформация.Добавить();
		НовоеПоле.Поле		= СтрокаИнфПоле.Идентификатор;
		НовоеПоле.Значение	= СтрокаИнфПоле.Значение;
	КонецЦикла;
	
	Подписанты = Документ.ИнформацияПродавца.Подписанты;
	Если Подписанты.Количество() > 0 Тогда
		УстановитьПодписанта(Подписанты[0]);
	КонецЕсли;
	
	УстановитьСоставителя(Документ.ИнформацияПродавца.Составитель);
	
	УстановитьФактора(Документ.Фактор);
	
КонецПроцедуры

Функция Документ()
	
	Документ = ОбъектнаяМодель.Новый_ТитулПродавцаУПД();
	
	Документ.Описание.Номер	= Номер;
	Документ.Описание.Дата	= Дата;
	
	Если ЭтоИсправление Тогда
		Документ.Описание.ИсправлениеНомер	= НомерИсправления;
		Документ.Описание.ИсправлениеДата	= ДатаИсправления;
	КонецЕсли;
	
	Документ.ВидДокумента = ФункцияДокумента;
	
	Документ.Продавец	= Продавец;
	Документ.Покупатель	= Покупатель;
	
	Если ГрузоотправительУказан Тогда
		Документ.Грузоотправитель	= Грузоотправитель;
	КонецЕсли;
	Если ГрузополучательУказан Тогда
		Документ.Грузополучатель	= Грузополучатель;
	КонецЕсли;
	
	Документ.Валюта = Валюта;
	
	Документ.ИдГосКонтракта = ИдГосКонтракта;
	
	Документ.ПлатежноРасчетныеДокументы = ПлатежноРасчетныеДокументы;
	
	Документ.ИнформацияПродавца.СведенияОбОперации.Описание	= СодержаниеОперации;
	Документ.ИнформацияПродавца.СведенияОбОперации.Дата		= ДатаОтгрузки;
	Документ.ИнформацияПродавца.ВидОперации					= ВидОперации;
	
	Документ.Основание.Добавить(ОснованиеОтгрузки);
	
	Документ.ИнформацияПродавца.ЛицоПередавшееТовар = ЛицоПередавшееТовар;
	
	Документ.ТранспортныеНакладные = ТранспортныеНакладные;
	Документ.Перевозчик = Перевозчик;
	
	Документ.СведенияОТранспортировке = СведенияОТранспортировке;
	
	Документ.СведенияОПередачеВещи.Описание	= СведенияОПерадчеВещи;
	Документ.СведенияОПередачеВещи.Дата		= ДатаПередачиВещи;
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		
		НоваяСтрока = Документ.ТМЦ.ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ,
			"Признак, ПризнакДопИнфо,
			|Наименование, Код,
			|КоличествоОтпустить,
			|Количество, Цена,
			|СтавкаНДС, СуммаБезНДС, СуммаНДС, СуммаСНДС,
			|Акциз,
			|НомерГТД,
			|СчетДт, СчетКт"
		);
		
		НоваяСтрока.КодСтраны = СтрокаТЧ.КодСтраныПроисхождения;
		
		НоваяСтрока.ЕИНаименование	= СтрокаТЧ.НаименованиеЕИ;
		НоваяСтрока.ЕИКод			= СтрокаТЧ.КодЕИ;
		
		НоваяСтрока.ИнфПоле = СтрокаТЧ.ИнфПоле;
		
	КонецЦикла;
	
	// TODO: Нормальный расчет итогов
	Для Каждого Итого Из Документ.ТМЦ.Итого Цикл
		Документ.ТМЦ.Итого[Итого.Ключ] = Документ.ТМЦ.ТабличнаяЧасть.Итог(Итого.Ключ);
	КонецЦикла;
	
	Для Каждого СтрокаДопИнфо Из ДополнительнаяИнформация Цикл
		НовоеПоле = Документ.ИнфПоле.Добавить();
		НовоеПоле.Идентификатор	= СтрокаДопИнфо.Поле;
		НовоеПоле.Значение		= СтрокаДопИнфо.Значение;
	КонецЦикла;
	
	Документ.ИнформацияПродавца.Подписанты.Добавить(Подписант);
	
	Документ.ИнформацияПродавца.Составитель = Составитель;
	
	Документ.Фактор = Фактор;
	
	Возврат Документ;
	
КонецФункции

// Шапка

Процедура УстановитьФункциюДокумента(НовоеЗначение)
	
	ФункцияДокумента				= НовоеЗначение;
	ФункцияДокументаПредставление	= ПредставлениеПеречисления(ОбъектнаяМодель.ВидыУПД(), ФункцияДокумента);
	
КонецПроцедуры

Процедура УстановитьЭтоИсправление(НовоеЗначение)
	
	ЭтоИсправление = НовоеЗначение;
	
	УстановитьОтображение();
	
КонецПроцедуры

Процедура УстановитьИсправление(НовыйНомерИсправления, НоваяДатаИсправления)
	
	НомерИсправления	= НовыйНомерИсправления;
	ДатаИсправления		= НоваяДатаИсправления;
	
	Исправление = Ложь
		ИЛИ ЗначениеЗаполнено(НомерИсправления)
		ИЛИ ЗначениеЗаполнено(ДатаИсправления);
		
	УстановитьЭтоИсправление(Исправление);
	
КонецПроцедуры

Процедура УстановитьПродавца(Контрагент)
	
	Продавец				= Контрагент;
	ПродавецПредставление	= ОбъектнаяМодель.КонтрагентПредставлениеДляUI(Контрагент);
	
КонецПроцедуры

Процедура УстановитьПокупателя(Контрагент)
	
	Покупатель				= Контрагент;
	ПокупательПредставление	= ОбъектнаяМодель.КонтрагентПредставлениеДляUI(Контрагент);
	
КонецПроцедуры

Процедура УстановитьГрузоотправительУказан(НовоеЗначение)
	
	ГрузоотправительУказан = НовоеЗначение;
	
	ОбновитьПредставлениеГрузоотправителя();
	УстановитьОтображение();
	
КонецПроцедуры

Процедура УстановитьГрузоотправителя(Контрагент)
	
	Грузоотправитель = Контрагент;
	
	Указан = (Грузоотправитель <> Неопределено);
	УстановитьГрузоотправительУказан(Указан);
	
	ОбновитьПредставлениеГрузоотправителя();
	
КонецПроцедуры

Процедура ОбновитьПредставлениеГрузоотправителя()
	
	ГрузоотправительПредставление = ?(ГрузоотправительУказан,
		ОбъектнаяМодель.КонтрагентПредставлениеДляUI(Грузоотправитель),
		НСтр("ru = 'Совпадает с продавцом'")
	);
	
КонецПроцедуры

Процедура УстановитьГрузополучательУказан(НовоеЗначение)
	
	ГрузополучательУказан = НовоеЗначение;
	
	ОбновитьПредставлениеГрузополучателя();
	УстановитьОтображение();
	
КонецПроцедуры

Процедура УстановитьГрузополучателя(Контрагент)
	
	Грузополучатель = Контрагент;
	
	Указан = (Грузополучатель <> Неопределено);
	УстановитьГрузополучательУказан(Указан);
	
	ОбновитьПредставлениеГрузополучателя();
	
КонецПроцедуры

Процедура ОбновитьПредставлениеГрузополучателя()
	
	ГрузополучательПредставление = ?(ГрузополучательУказан,
		ОбъектнаяМодель.КонтрагентПредставлениеДляUI(Грузополучатель),
		НСтр("ru = 'Совпадает с покупателем'")
	);
	
КонецПроцедуры

Процедура УстановитьВалюту(НоваяВалюта)
	
	Валюта				= НоваяВалюта;
	ВалютаПредставление	= ОбъектнаяМодель.ВалютаПредставлениеДляUI(Валюта);
	
КонецПроцедуры

Процедура УстановитьПРД(НовоеЗначение)
	
	ПлатежноРасчетныеДокументы				= НовоеЗначение;
	ПлатежноРасчетныеДокументыПредставление	= ОбъектнаяМодель.ПлатежноРасчетныеДокументыПредставление(ПлатежноРасчетныеДокументы);
	
КонецПроцедуры

// Табличная часть

Процедура УстановитьЗначенияРеквизитовТЧ(СтрокаТЧ, РеквизитыТЧ)
	
	ЗаполнитьЗначенияСвойств(СтрокаТЧ, РеквизитыТЧ, "Количество, Цена, СтавкаНДС, СуммаБезНДС, СуммаНДС, СуммаСНДС");
	
КонецПроцедуры

Функция ЗначенияРеквизитовТЧ(СтрокаТЧ)
	
	РеквизитыТЧ = РаботаСФормами.Новый_РеквизитыТЧ();
	ЗаполнитьЗначенияСвойств(РеквизитыТЧ, СтрокаТЧ, "Количество, Цена, СтавкаНДС, СуммаБезНДС, СуммаНДС, СуммаСНДС");
	
	Возврат РеквизитыТЧ;
	
КонецФункции

Процедура УстановитьЕдиницуИзмерения(СтрокаТЧ, Наименование, Код = Неопределено)
	
	//: СтрокаТЧ = ТабличнаяЧасть[0];
	
	СтрокаТЧ.НаименованиеЕИ	= Наименование;
	СтрокаТЧ.КодЕИ			= ЗаполненноеЗначение(Код, "0000");
	
КонецПроцедуры

Процедура УстановитьКоличество(СтрокаТЧ, НовоеЗначение)
	
	РеквизитыТЧ = ЗначенияРеквизитовТЧ(СтрокаТЧ);
	РеквизитыТЧ.Количество = НовоеЗначение;
	
	РаботаСФормами.ПересчитатьЗначенияРеквизитовТЧ(РеквизитыТЧ, РаботаСФормами.ИзмененныеРеквизитыТЧ().Количество);
	
	УстановитьЗначенияРеквизитовТЧ(СтрокаТЧ, РеквизитыТЧ);
	
КонецПроцедуры

Процедура УстановитьЦену(СтрокаТЧ, НовоеЗначение)
	
	РеквизитыТЧ = ЗначенияРеквизитовТЧ(СтрокаТЧ);
	РеквизитыТЧ.Цена = НовоеЗначение;
	
	РаботаСФормами.ПересчитатьЗначенияРеквизитовТЧ(РеквизитыТЧ, РаботаСФормами.ИзмененныеРеквизитыТЧ().Цена);
	
	УстановитьЗначенияРеквизитовТЧ(СтрокаТЧ, РеквизитыТЧ);
	
КонецПроцедуры

Процедура УстановитьСтавкуНДС(СтрокаТЧ, НовоеЗначение)
	
	РеквизитыТЧ = ЗначенияРеквизитовТЧ(СтрокаТЧ);
	РеквизитыТЧ.СтавкаНДС = НовоеЗначение;
	
	РаботаСФормами.ПересчитатьЗначенияРеквизитовТЧ(РеквизитыТЧ, РаботаСФормами.ИзмененныеРеквизитыТЧ().СтавкаНДС);
	
	УстановитьЗначенияРеквизитовТЧ(СтрокаТЧ, РеквизитыТЧ);
	
КонецПроцедуры

Процедура УстановитьСуммуБезНДС(СтрокаТЧ, НовоеЗначение)
	
	РеквизитыТЧ = ЗначенияРеквизитовТЧ(СтрокаТЧ);
	РеквизитыТЧ.СуммаБезНДС = НовоеЗначение;
	
	РаботаСФормами.ПересчитатьЗначенияРеквизитовТЧ(РеквизитыТЧ, РаботаСФормами.ИзмененныеРеквизитыТЧ().СуммаБезНДС);
	
	УстановитьЗначенияРеквизитовТЧ(СтрокаТЧ, РеквизитыТЧ);
	
КонецПроцедуры

Процедура УстановитьСуммуСНДС(СтрокаТЧ, НовоеЗначение)
	
	РеквизитыТЧ = ЗначенияРеквизитовТЧ(СтрокаТЧ);
	РеквизитыТЧ.СуммаСНДС = НовоеЗначение;
	
	РаботаСФормами.ПересчитатьЗначенияРеквизитовТЧ(РеквизитыТЧ, РаботаСФормами.ИзмененныеРеквизитыТЧ().СуммаСНДС);
	
	УстановитьЗначенияРеквизитовТЧ(СтрокаТЧ, РеквизитыТЧ);
	
КонецПроцедуры

Процедура УстановитьИнфПоле(СтрокаТЧ, НовоеЗначение)
	
	СтрокаТЧ.ИнфПоле				= НовоеЗначение;
	СтрокаТЧ.ИнфПолеПредставление	= ОбъектнаяМодель.ИнфПолеПредставление(НовоеЗначение);
	
КонецПроцедуры

// Операции и транспортировка

Процедура УстановитьОснованиеОтгрузки(НовоеЗначение)
	
	ОснованиеОтгрузки				= НовоеЗначение;
	ОснованиеОтгрузкиПредставление	= ОбъектнаяМодель.ОснованиеПредставлениеДляUI(ОснованиеОтгрузки);
	
КонецПроцедуры

Процедура УстановитьЛицоПередавшееТовар(ОтветственноеЛицо)
	
	ЛицоПередавшееТовар					= ОтветственноеЛицо;
	ЛицоПередавшееТоварПредставление	= ОбъектнаяМодель.ОтветственноеЛицоПредставление(ОтветственноеЛицо);
	
КонецПроцедуры

Процедура УстановитьТранспортныеНакладные(НовоеЗначение)
	
	ТранспортныеНакладные				= НовоеЗначение;
	ТранспортныеНакладныеПредставление	= ОбъектнаяМодель.ТранспортныеНакладныеПредставление(ТранспортныеНакладные);
	
КонецПроцедуры

Процедура УстановитьПеревозчика(Контрагент)
	
	Перевозчик				= Контрагент;
	ПеревозчикПредставление	= ОбъектнаяМодель.КонтрагентПредставлениеДляUI(Контрагент);
	
КонецПроцедуры

// Дополнительно

Процедура УстановитьФактора(НовоеЗначение)
	
	Фактор				= НовоеЗначение;
	ФакторПредставление	= ОбъектнаяМодель.ФакторПредставлениеДляUI(Фактор);
	
КонецПроцедуры

// Подвал

Процедура УстановитьПодписанта(НовоеЗначение)
	
	Подписант = НовоеЗначение;
	ПодписантПредставление = ОбъектнаяМодель.ПодписантПредставление(Подписант);
	
КонецПроцедуры

Процедура УстановитьСоставителя(НовоеЗначение)
	
	Составитель					= НовоеЗначение;
	СоставительПредставление	= ОбъектнаяМодель.СоставительДокументаПредставление(Составитель);
	
КонецПроцедуры

//}

Функция СписокВыбораЕдиницыИзмерения()
	
	СписокВыбора = Новый СписокЗначений;
	
	ВсеЕИ = Классификаторы.ВсеЕдиинцыИзмерения();
	Для Каждого ЕдиницаИзмерения Из ВсеЕИ Цикл
		СписокВыбора.Добавить(ЕдиницаИзмерения, ЕдиницаИзмерения.Наименование);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Функция СписокВыбораСтраны()
	
	СписокВыбора = Новый СписокЗначений;
	
	ВсеСтраны = Классификаторы.ВсеСтраны();
	Для Каждого Страна Из ВсеСтраны Цикл
		СписокВыбора.Добавить(Страна.Код, Страна.Наименование);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Функция СписокВыбораСодержаниеОперации()
	
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора.Добавить(НСтр("ru = 'Товары переданы'"));
	СписокВыбора.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме'"));
	
	Возврат СписокВыбора;
	
КонецФункции

Процедура НачатьЗаполнениеКонтрагента(Элемент, Контрагент, ВидКонтрагента)
	
	ФормаВыбора = ПолучитьФорму("Форма_ЗаполнениеКонтрагента", Элемент);
	
	Параметры = ФормаВыбора.Параметры();
	Параметры.ЗаголовокФормы	= ВидКонтрагента;
	Параметры.Модель			= Контрагент;
	
	ФормаВыбора.УстановитьПараметры(Параметры);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Функция ИдентификаторСтрокиТЧ(СтрокаТЧ)
	
	Если СтрокаТЧ.Идентификатор = Неопределено Тогда
		СтрокаТЧ.Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Возврат СтрокаТЧ.Идентификатор;
	
КонецФункции

Функция СтрокаТЧПоИдентификатору(ТабличнаяЧасть, Идентификатор)
	
	//: ТабличнаяЧасть = Новый ТаблицаЗначений;
	
	Если Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаТЧ = ТабличнаяЧасть.Найти(Идентификатор, "Идентификатор");
	
	Возврат СтрокаТЧ;
	
КонецФункции


Инициализировать();
