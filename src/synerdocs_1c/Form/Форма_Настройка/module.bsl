
//========================================================================
// Форма настройки ИР
//========================================================================

// Модули
Перем МенеджерНастроек, ОбъектнаяМодель;

//========================================================================
// ИНИЦИАЛИЗАЦИЯ
//========================================================================

Процедура ПодключитьМодули()
	
	МенеджерНастроек	= Модуль("Модуль_МенеджерНастроек");
	ОбъектнаяМодель		= Модуль("Модуль_ОбъектнаяМодель");
	
КонецПроцедуры

Процедура Инициализировать()
	
	ПодключитьМодули();
	
КонецПроцедуры

Процедура ИнициализироватьФорму()
	
	ВариантыКодаНоменклатуры = МенеджерНастроек.ВариантыПодбораКодаНоменклатуры();
	ЭлементыФормы.ЗначениеКодаНоменклаутрыТН_Код.ВыбираемоеЗначение		= ВариантыКодаНоменклатуры.Код;
	ЭлементыФормы.ЗначениеКодаНоменклаутрыТН_Штрих.ВыбираемоеЗначение	= ВариантыКодаНоменклатуры.Штрихкод;
	
	ВариантыОтправки = МенеджерНастроек.ВариантыОтправкиУниверсальногоДокумента();
	ЭлементыФормы.ВариантОтправкиОднимДокументом.ВыбираемоеЗначение		= ВариантыОтправки.ОднимДокументом;
	ЭлементыФормы.ВариантОтправкиРазнымиДокументами.ВыбираемоеЗначение	= ВариантыОтправки.РазнымиДокументами;
	
	ТипыДокументов = ОбъектнаяМодель.ТипыДокументов();
	ОбластиПолномочий = ОбъектнаяМодель.ОбластиПолномочий();
	ОбластиПолномочийУПД = ОбъектнаяМодель.ДопустимыеОбластиПолномочий(ТипыДокументов.ТитулПродавцаУПД);
	ОбластиПолномочийУКД = ОбъектнаяМодель.ДопустимыеОбластиПолномочий(ТипыДокументов.ТитулПродавцаУКД);
	
	ЭлементыФормы.ПодписантОбластьПолномочийУПД.СписокВыбора	= СписокЗначенийИзПеречисления(ОбластиПолномочий, ОбластиПолномочийУПД);
	ЭлементыФормы.ПодписантОбластьПолномочийУКД.СписокВыбора	= СписокЗначенийИзПеречисления(ОбластиПолномочий, ОбластиПолномочийУКД);
	ЭлементыФормы.ПодписантСтатус.СписокВыбора					= СписокЗначенийИзПеречисления(ОбъектнаяМодель.СтатусыПодписанта());
	
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

Функция ПроверяемыеРеквизиты() Экспорт
	
	Поля = Новый СписокЗначений;
	
	Поля.Добавить("ПодписантОбластьПолномочийУПД",            НСтр("ru = 'Подписант: Область полномочий УПД'"));
	Поля.Добавить("ПодписантОбластьПолномочийУКД",            НСтр("ru = 'Подписант: Область полномочий УКД'"));
	Поля.Добавить("ПодписантСтатус",                          НСтр("ru = 'Подписант: Статус'"));
	Поля.Добавить("ПодписантОснованиеПолномочий",             НСтр("ru = 'Подписант: Основание полномочий'"));
	Поля.Добавить("ПодписантОснованиеПолномочийОрганизации",  НСтр("ru = 'Подписант: Основ. полномоч. орг-ции'"));
	
	ПредставлениеТЧФакторинга = НСтр("ru = 'Договоры факторинга'");
	Поля.Добавить("ПривязкаДоговоровФакторинг",               ПредставлениеТЧФакторинга);
	Поля.Добавить("ПривязкаДоговоровФакторинг.Контрагент",    ПредставлениеТЧФакторинга + НСтр("ru = '#Контрагент'"));
	Поля.Добавить("ПривязкаДоговоровФакторинг.Договор",       ПредставлениеТЧФакторинга + НСтр("ru = '#Договор'"));
	Поля.Добавить("ПривязкаДоговоровФакторинг.Фактор",        ПредставлениеТЧФакторинга + НСтр("ru = '#Фактор'"));
	
	Возврат Поля;
	
КонецФункции

//========================================================================
// СОБЫТИЯ
//========================================================================

//===================================
//{ События формы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьФорму();
	
	ТЗ_УдаляемыеСвязи.Колонки.Добавить("Контрагент");
	ТЗ_УдаляемыеСвязи.Колонки.Добавить("Договор");
	ТЗ_УдаляемыеСвязи.Колонки.Добавить("Фактор");
	
	//Восстанавливаем настройки пользователя
	Настройки = МенеджерНастроек.НастройкиИР();
	ЗаполнитьФормуИзНастроек(Настройки);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	УстановитьЗаголовокОкна(ЭтаФорма, "Настройка");

	// Если авторизованы = заполним договора фаторинга
	Если НЕ Организация = Неопределено И НЕ ЭтоБГУ Тогда
		ТаблицаСвязей = ЗаполнитьТаблицуДоговоровФакторинг();	
		
		Если НЕ ТаблицаСвязей = Неопределено Тогда
			
			ПривязкаДоговоровФакторинг.Очистить();
			
			Для Каждого ТекСтр Из ТаблицаСвязей Цикл 
				НовСтр = ПривязкаДоговоровФакторинг.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
			
	УстановитьВидимость();
	УстановитьОтображение_Отправка();
	УстановитьОтображение_Подписант();

КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Настройки были изменены. Сохранить изменения?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Сохранены = СохранитьНастройки();
			Отказ = НЕ Сохранены;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты) Экспорт
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если ЗначениеВыбрано(ЭлементыФормы.ПодписантОбластьПолномочийУПД) Тогда
		НепроверяемыеРеквизиты.Добавить("ПодписантОбластьПолномочийУПД");
	КонецЕсли;
	
	Если ЗначениеВыбрано(ЭлементыФормы.ПодписантОбластьПолномочийУКД) Тогда
		НепроверяемыеРеквизиты.Добавить("ПодписантОбластьПолномочийУКД");
	КонецЕсли;
	
	Если НЕ ПроверятьОбластьПолномочийОрганизации() Тогда
		НепроверяемыеРеквизиты.Добавить("ПодписантОснованиеПолномочийОрганизации");
	КонецЕсли;
	
	Если НЕ ФлагПривязыватьДоговора ИЛИ НЕ ЭлементыФормы.Панель_Настройка.Страницы.ДоговораФактор.Доступность Тогда
		НепроверяемыеРеквизиты.Добавить("ПривязкаДоговоровФакторинг");
		НепроверяемыеРеквизиты.Добавить("ПривязкаДоговоровФакторинг.Контрагент");
		НепроверяемыеРеквизиты.Добавить("ПривязкаДоговоровФакторинг.Договор");
		НепроверяемыеРеквизиты.Добавить("ПривязкаДоговоровФакторинг.Фактор");
	КонецЕсли;
	
	УдалитьНепроверяемыеРеквизиты(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

//}

//===================================
//{ Работа с документами

Процедура АвтоматическиПолучатьВходящиеДокументыПриИзменении(Элемент)
	
	ЭлементыФормы.Надпись_ИнтервалПолученияДокументовИзСервиса.Доступность = АвтоматическиПолучатьВходящиеДокументы;
	ЭлементыФормы.ИнтервалПолученияДокументовИзСервиса.Доступность = АвтоматическиПолучатьВходящиеДокументы;

КонецПроцедуры

Процедура ИнтервалПолученияДокументовИзСервисаПриИзменении(Элемент)
	
	Если ИнтервалПолученияДокументовИзСервиса < 5 Тогда
		ИнтервалПолученияДокументовИзСервиса = 5;
	КонецЕсли;

КонецПроцедуры

//}

//===================================
//{ Отправка

Процедура ОтправлятьДокументыВНовомФорматеПриИзменении(Элемент)
	
	УстановитьОтображение_Отправка();
	
КонецПроцедуры

Процедура ПояснениеОНовыхФорматахНажатие(Элемент)
	
	ЗапуститьПриложение(ЭлементыФормы.ПояснениеОНовыхФорматах.Подсказка);
	
КонецПроцедуры

//}

//===================================
//{ Подписант

Процедура ПодписантОбластьПолномочийУПДПриИзменении(Элемент)
	
	УстановитьОтображение_Подписант();
	
КонецПроцедуры

Процедура ПодписантОбластьПолномочийУКДПриИзменении(Элемент)
	
	УстановитьОтображение_Подписант();
	
КонецПроцедуры

Процедура ПодписантСтатусПриИзменении(Элемент)
	
	УстановитьОтображение_Подписант();
	
КонецПроцедуры

//}

//===================================
//{ Подключение

Процедура ИспользоватьПроксиПриИзменении(Элемент)
	
	УстановитьВидимость();

КонецПроцедуры

Процедура ПроверитьПодключениеНажатие(Элемент)

	Если ПодключитьсяКВебСервисуSynerdocs() Тогда
		Сообщить("Подключение к Веб-сервису прошло успешно");
	Иначе
		Сообщить("Ошибка подключения к Веб-сервису");
	КонецЕсли;
	
КонецПроцедуры


//}

//===================================
//{ Криптопровайдер

Процедура Флаг_ИспользоватьЛокальнуюКриптографиюПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

//}

//===================================
//{ Уступочная надпись

Процедура НадписьНаимОрганизацииНажатие(Элемент)
	ЭлементыФормы.ПолеШаблонУступочнойНадписи.ВыделенныйТекст = Элемент.Заголовок;
КонецПроцедуры

Процедура НадписьИННОрганизацииНажатие(Элемент)
	ЭлементыФормы.ПолеШаблонУступочнойНадписи.ВыделенныйТекст = Элемент.Заголовок;
КонецПроцедуры

Процедура НадписьКППОрганизацииНажатие(Элемент)
	ЭлементыФормы.ПолеШаблонУступочнойНадписи.ВыделенныйТекст = Элемент.Заголовок;
КонецПроцедуры

Процедура НадписьСчетОрганизацииНажатие(Элемент)
	ЭлементыФормы.ПолеШаблонУступочнойНадписи.ВыделенныйТекст = Элемент.Заголовок;
КонецПроцедуры

Процедура НадписьКорСчетОрганизацииНажатие(Элемент)
	ЭлементыФормы.ПолеШаблонУступочнойНадписи.ВыделенныйТекст = Элемент.Заголовок;
КонецПроцедуры

Процедура НадписьБанкОрганизацииНажатие(Элемент)
	ЭлементыФормы.ПолеШаблонУступочнойНадписи.ВыделенныйТекст = Элемент.Заголовок;
КонецПроцедуры

Процедура НадписьБИКОрганизацииНажатие(Элемент)
	ЭлементыФормы.ПолеШаблонУступочнойНадписи.ВыделенныйТекст = Элемент.Заголовок;
КонецПроцедуры

Процедура НадписьТлфОрганизацииНажатие(Элемент)
	ЭлементыФормы.ПолеШаблонУступочнойНадписи.ВыделенныйТекст = Элемент.Заголовок;
КонецПроцедуры

Процедура НадписьАдресОрганизацииНажатие(Элемент)
	ЭлементыФормы.ПолеШаблонУступочнойНадписи.ВыделенныйТекст = Элемент.Заголовок;
КонецПроцедуры

//}

//===================================
//{ Договоры факторинга

Процедура ФлагПривязыватьДоговораПриИзменении(Элемент)
	
	ЭлементыФормы.КоманднаяПанельПривязкаДоговоровФакторинг.Доступность = ФлагПривязыватьДоговора;
	ЭлементыФормы.ПривязкаДоговоровФакторинг.Доступность = ФлагПривязыватьДоговора;
	
КонецПроцедуры

Процедура ПривязкаДоговоровФакторингДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЭтоБГУ Тогда
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"); 
		Элемент.ОграничениеТипа = ОписаниеТипа; 
		Элемент.ВыбиратьТип = Ложь; 
		
		Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
			Элемент.Значение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;

	//Заполним список уже добавленных договоров
	СписокСуществующихДоговоров = Новый СписокЗначений;
	
	Для Каждого ТекСтр Из ПривязкаДоговоровФакторинг Цикл
		СписокСуществующихДоговоров.Добавить(ТекСтр.Договор);
	КонецЦикла;
	
	
	ФормаВыбораДоговора				= Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора();
    ФормаВыбораДоговора.Заголовок	= "Выбор договора для контрагента " + Строка(Элемент.ВыборПоВладельцу);
	
	ФормаВыбораДоговора.Отбор.Организация.Использование	= Истина;
    ФормаВыбораДоговора.Отбор.Организация.ВидСравнения 	= ВидСравнения.Равно;
    ФормаВыбораДоговора.Отбор.Организация.Значение		= Организация; 
	
	ФормаВыбораДоговора.Отбор.Владелец.Использование	= Истина;
    ФормаВыбораДоговора.Отбор.Владелец.ВидСравнения 	= ВидСравнения.Равно;
    ФормаВыбораДоговора.Отбор.Владелец.Значение			= ?(ЗначениеЗаполнено(Элемент.ВыборПоВладельцу), Элемент.ВыборПоВладельцу, Справочники.Контрагенты.ПустаяСсылка());
	
	ФормаВыбораДоговора.Отбор.ВидДоговора.Использование	= Истина;
    ФормаВыбораДоговора.Отбор.ВидДоговора.ВидСравнения 	= ВидСравнения.НеРавно;
    ФормаВыбораДоговора.Отбор.ВидДоговора.Значение		= Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком; 

	ФормаВыбораДоговора.Отбор.Ссылка.Использование	= Истина;
    ФормаВыбораДоговора.Отбор.Ссылка.ВидСравнения 	= ВидСравнения.НеВСписке;
    ФормаВыбораДоговора.Отбор.Ссылка.Значение		= СписокСуществующихДоговоров; 

	ФормаВыбораДоговора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	
	ВыбранноеЗначение = ФормаВыбораДоговора.ОткрытьМодально();
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Элемент.Значение = ВыбранноеЗначение;
		
		ТекущаяСтрока = ЭлементыФормы.ПривязкаДоговоровФакторинг.ТекущаяСтрока;
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Контрагент) Тогда
			ТекущаяСтрока.Контрагент = Элемент.Значение.Владелец;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПривязкаДоговоровФакторингПередНачаломДобавления(Элемент, Отказ, Копирование)
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПривязкаДоговоровФакторингПередУдалением(Элемент, Отказ)
	
	НовСтр = ТЗ_УдаляемыеСвязи.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, Элемент.ТекущаяСтрока); 
	
	ТЗ_УдаляемыеСвязи.Свернуть("Контрагент, Договор, Фактор");
	
КонецПроцедуры

Процедура ПривязкаДоговоровФакторингКонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЭтоБГУ Тогда
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты"); 
		Элемент.ОграничениеТипа = ОписаниеТипа; 
		Элемент.ВыбиратьТип = Ложь; 
		Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
			Элемент.Значение = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПривязкаДоговоровФакторингФакторНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЭтоБГУ Тогда
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты"); 
		Элемент.ОграничениеТипа = ОписаниеТипа; 
		Элемент.ВыбиратьТип = Ложь; 
		Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
			Элемент.Значение = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//}

//===================================
//{ Команды

Функция СохранитьНастройки()
	
	Если НЕ ПроверитьЗаполнениеФормы(ЭтаФорма) Тогда
		
		ТекстВопроса = НСтр("ru = 'Вы заполнили не все обязательные поля. Продолжить?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьДоговорыФакторинга();
	ЗаписатьНастройки();
	ЗаписатьНастройкиПрокси();		
	
	ЭтаФорма.Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

Процедура ОсновныеДействияФормыСохранитьИЗакрыть(Кнопка)
	
	Сохранены = СохранитьНастройки();
	
	Если Сохранены Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПрименить(Кнопка)

	СохранитьНастройки();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОтмена(Кнопка)

	Закрыть();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПоУмолчанию(Кнопка)
	
	Ответ = Вопрос("Вернуть по умолчанию все настройки?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		НастройкиПоУмолчанию = МенеджерНастроек.НастройкиПоУмолчанию();
		ЗаполнитьФормуИзНастроек(НастройкиПоУмолчанию);
		
	КонецЕсли;
	
КонецПроцедуры

//}

//========================================================================
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================

Процедура УстановитьВидимость()
	
	ЭлементыФормы.ПроксиСервер.Доступность				= ИспользоватьПрокси;
	ЭлементыФормы.Порт.Доступность						= ИспользоватьПрокси;
	ЭлементыФормы.Логин.Доступность						= ИспользоватьПрокси;
	ЭлементыФормы.Пароль.Доступность					= ИспользоватьПрокси;
	ЭлементыФормы.ИспользоватьNTLM.Доступность			= ИспользоватьПрокси;
	ЭлементыФормы.ИспользоватьДляЛокальных.Доступность	= ИспользоватьПрокси;
	ЭлементыФормы.ФлагОтправлятьАктПУ.Доступность 		= Метаданные.Имя = "УправлениеПроизводственнымПредприятием";
	
	// Криптопровадйеры
	ЭлементыФормы.Криптопровайдер_0.Доступность 		= Флаг_ИспользоватьЛокальнуюКриптографию;
	ЭлементыФормы.Криптопровайдер_1.Доступность 		= Флаг_ИспользоватьЛокальнуюКриптографию;
	
	//Договора факторинга
	ЭлементыФормы.Панель_Настройка.Страницы.УступочнаяНадпись.Доступность = НЕ ЭтоБГУ;
	ЭлементыФормы.Панель_Настройка.Страницы.ДоговораФактор.Доступность = ЗначениеЗаполнено(Организация) И НЕ ЭтоБГУ;
	ЭлементыФормы.КоманднаяПанельПривязкаДоговоровФакторинг.Доступность = ФлагПривязыватьДоговора;
	ЭлементыФормы.ПривязкаДоговоровФакторинг.Доступность = ФлагПривязыватьДоговора;
	
	ЭлементыФормы.Надпись_ИнтервалПолученияДокументовИзСервиса.Доступность = АвтоматическиПолучатьВходящиеДокументы;
	ЭлементыФормы.ИнтервалПолученияДокументовИзСервиса.Доступность = АвтоматическиПолучатьВходящиеДокументы;	
			
КонецПроцедуры

Процедура УстановитьОтображение_Отправка()
	
	ЭлементыФормы.НастройкаОтправки.Доступность = ОтправлятьДокументыВНовомФормате;
	
КонецПроцедуры

Функция ПроверятьОбластьПолномочийОрганизации()
	
	Результат = (ПодписантСтатус = ОбъектнаяМодель.СтатусыПодписанта().РаботникИнойОрганизации);
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеВыбрано(Элемент)
	
	Результат = ЗначениеЕстьВСписке(Элемент.СписокВыбора, Элемент.Значение);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьОтображение_Подписант()
	
	ЭлементыФормы.ПодписантОбластьПолномочийУПД.ОтметкаНезаполненного = НЕ ЗначениеВыбрано(ЭлементыФормы.ПодписантОбластьПолномочийУПД);
	ЭлементыФормы.ПодписантОбластьПолномочийУКД.ОтметкаНезаполненного = НЕ ЗначениеВыбрано(ЭлементыФормы.ПодписантОбластьПолномочийУКД);
	
	ЭлементыФормы.ПодписантОснованиеПолномочийОрганизации.ОтметкаНезаполненного		= Ложь;
	ЭлементыФормы.ПодписантОснованиеПолномочийОрганизации.АвтоОтметкаНезаполненного	= ПроверятьОбластьПолномочийОрганизации();
	
КонецПроцедуры

//===================================
//{ Загрузка и запись настроек

Процедура ЗаполнитьФормуИзНастроек(Настройки)
	
	ВариантСинхронизацииНоменклатуры				= Настройки.ВариантСинхронизацииНоменклатуры;
	ВариантАвтоматическойСинхронизацииНоменклатуры	= Настройки.ВариантАвтоматическойСинхронизацииНоменклатуры;
	ЗначениеКодаНоменклаутрыТН						= Настройки.ЗначениеКодаНоменклаутрыТН;
	
	ТипКриптопровайдера						= Настройки.ТипКриптопровайдера;
	Флаг_ИспользоватьЛокальнуюКриптографию	= Настройки.ИспользоватьЛокальнуюКриптографию;
	
	ИспользоватьПрокси			= Настройки.Прокси.Использовать;
	ПроксиСервер				= Настройки.Прокси.Адрес;
	Порт						= Настройки.Прокси.Порт;
	Логин						= Настройки.Прокси.Логин;
	Пароль						= Настройки.Прокси.Пароль;
	ИспользоватьNTLM			= Настройки.Прокси.ИспользоватьNTLM;
	ИспользоватьДляЛокальных	= Настройки.Прокси.ИспользоватьДляЛокальных;
	
	ОтправлятьДанныеАналитики = Настройки.ОтправлятьДанныеАналитики;
	
	// Типы отправляенмых документов
	ОтправлятьАкт 		= Настройки.ОтправлятьАкт;
	ОтправлятьАктПУ 	= Настройки.ОтправлятьАктПУ;
	ОтправлятьТОРГ12	= Настройки.ОтправлятьТОРГ12;
	ОтправлятьСФ		= Настройки.ОтправлятьСФ;
	ОтправлятьСчет		= Настройки.ОтправлятьСчет;		
	 			
	Если ЗначениеЗаполнено(Организация) И НЕ ЭтоБГУ Тогда
		ФлагПривязыватьДоговора = Настройки.ИспользоватьДоговорыФакторинг;
	КонецЕсли;
	
	ПутьПубликацииСервиса	= Настройки.ПутьПубликацииСервиса;
	АдресВебКлиента			= Настройки.АдресВебКлиента;
	
	ИнтервалПолученияДокументовИзСервиса	= Настройки.ИнтервалПолученияДокументовИзСервиса;
	АвтоматическиПолучатьВходящиеДокументы	= Настройки.АвтоматическиПолучатьВходящиеДокументы;
	
	ВариантСохраненияФайловСДлиннымиИменами	= Настройки.ВариантСохраненияФайловСДлиннымиИменами;
	МаксимальноРазрешеннаяДлинаИмениФайла	= Настройки.МаксимальноРазрешеннаяДлинаИмениФайла;
	
	МаксимальноеВремяОжиданияПолученияОчередногоСообщения = Настройки.ИнтервалПолученияДокументовИзСервиса;
	
	ВидАкта =  Настройки.ВидАкта;
	
	ПолеШаблонУступочнойНадписи = Настройки.ШаблонУступочнойНадписи;
	
	ПоддержкаНовыхФорматов = Настройки.ПоддержкаНовыхФорматов;
	ОтправлятьДокументыВНовомФормате		= ПоддержкаНовыхФорматов.Включена;
	ВариантОтправкиУниверсальногоДокумента	= ПоддержкаНовыхФорматов.ВариантОтправкиУниверсальногоДокумента;
	
	Подписант = ПоддержкаНовыхФорматов.Подписант;
	ПодписантОбластьПолномочийУПД			= Подписант.ОбластьПолномочийУПД;
	ПодписантОбластьПолномочийУКД			= Подписант.ОбластьПолномочийУКД;
	ПодписантСтатус							= Подписант.Статус;
	ПодписантОснованиеПолномочий			= Подписант.ОснованиеПолномочий;
	ПодписантОснованиеПолномочийОрганизации	= Подписант.ОснованиеПолномочийОрганизации;
	
КонецПроцедуры

Процедура ЗаписатьНастройки()
		
	Настройки = МенеджерНастроек.НастройкиИР();
	
	//Записываем установленные свойства
	Настройки.ВариантСинхронизацииНоменклатуры					= ВариантСинхронизацииНоменклатуры;
	Настройки.ВариантАвтоматическойСинхронизацииНоменклатуры	= ВариантАвтоматическойСинхронизацииНоменклатуры;
	Настройки.ЗначениеКодаНоменклаутрыТН						= ЗначениеКодаНоменклаутрыТН;
	Настройки.ВидАкта											= ВидАкта;
	
	Настройки.Прокси.Использовать				= ИспользоватьПрокси;
	Настройки.Прокси.Адрес						= ПроксиСервер;
	Настройки.Прокси.Порт						= Порт;
	Настройки.Прокси.Логин						= Логин;
	Настройки.Прокси.Пароль						= Пароль;
	Настройки.Прокси.ИспользоватьNTLM			= ИспользоватьNTLM;
	Настройки.Прокси.ИспользоватьДляЛокальных	= ИспользоватьДляЛокальных;
	
	Настройки.ОтправлятьДанныеАналитики	= ОтправлятьДанныеАналитики;
	 		
	Настройки.ПутьПубликацииСервиса	= ПутьПубликацииСервиса;
	Настройки.АдресВебКлиента		= АдресВебКлиента;
	
	Настройки.ИнтервалПолученияДокументовИзСервиса		= ИнтервалПолученияДокументовИзСервиса;
	Настройки.АвтоматическиПолучатьВходящиеДокументы	= АвтоматическиПолучатьВходящиеДокументы;
	Настройки.ВариантСохраненияФайловСДлиннымиИменами	= ВариантСохраненияФайловСДлиннымиИменами;
	Настройки.МаксимальноРазрешеннаяДлинаИмениФайла		= МаксимальноРазрешеннаяДлинаИмениФайла;
	
	// Типы отправляенмых документов
	Настройки.ОтправлятьАкт		= ОтправлятьАкт;
	Настройки.ОтправлятьАктПУ	= ОтправлятьАктПУ;
	Настройки.ОтправлятьТОРГ12	= ОтправлятьТОРГ12;
	Настройки.ОтправлятьСФ		= ОтправлятьСФ;
	Настройки.ОтправлятьСчет	= ОтправлятьСчет;
                                                              		
	Настройки.ШаблонУступочнойНадписи = ПолеШаблонУступочнойНадписи;
	
	Настройки.ИспользоватьДоговорыФакторинг = ФлагПривязыватьДоговора;
	
	//Криптопровайдер
	Настройки.ИспользоватьЛокальнуюКриптографию	= Флаг_ИспользоватьЛокальнуюКриптографию;
	Настройки.ТипКриптопровайдера				= ТипКриптопровайдера;
	
	ПоддержкаНовыхФорматов = Настройки.ПоддержкаНовыхФорматов;
	ПоддержкаНовыхФорматов.Включена									= ОтправлятьДокументыВНовомФормате;
	ПоддержкаНовыхФорматов.ВариантОтправкиУниверсальногоДокумента	= ВариантОтправкиУниверсальногоДокумента;
	
	Подписант = ПоддержкаНовыхФорматов.Подписант;
	Подписант.ОбластьПолномочийУПД				= ПодписантОбластьПолномочийУПД;
	Подписант.ОбластьПолномочийУКД				= ПодписантОбластьПолномочийУКД;
	Подписант.Статус							= ПодписантСтатус;
	Подписант.ОснованиеПолномочий				= ПодписантОснованиеПолномочий;
	Подписант.ОснованиеПолномочийОрганизации	= ПодписантОснованиеПолномочийОрганизации;

	МенеджерНастроек.СохранитьНастройкиИР(Настройки);
		
КонецПроцедуры

Процедура ЗаписатьНастройкиПрокси()
	
	ИмяФайлаПрокси = КаталогПрограммы() + "conf\inetcfg.xml";
	
	Если ИспользоватьПрокси Тогда
		ТипКодировки = "windows-1251";
		
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(ИмяФайлаПрокси, ТипКодировки);
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("InternetProxy");
			ЗаписатьXMLАтрибут(НоваяЗаписьXML, "protocols", "http=" + ПроксиСервер + ":" + Порт + " https=" + ПроксиСервер + ":" + Порт);
			ЗаписатьXMLАтрибут(НоваяЗаписьXML, "user", Логин);
			ЗаписатьXMLАтрибут(НоваяЗаписьXML, "password", Пароль);
			ЗаписатьXMLАтрибут(НоваяЗаписьXML, "bypassOnLocal", ?(ИспользоватьДляЛокальных, "true", "false"));
			ЗаписатьXMLАтрибут(НоваяЗаписьXML, "ntlm", ?(ИспользоватьNTLM, "true", "false"));
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		НоваяЗаписьXML.Закрыть();
	Иначе
		Попытка
			УдалитьФайлы(ИмяФайлаПрокси);
		Исключение
			// Упс, нет прав, файл заблокирован, etc
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДоговорыФакторинга()
	
	// Договоры факторинг
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
		
	// Удаляем связи, если есть
	Если ТЗ_УдаляемыеСвязи.Количество() > 0 Тогда
		Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Syn_Фактор");
	
		Для Каждого ТекСтр Из ТЗ_УдаляемыеСвязи Цикл
			НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей(); 
			НаборЗаписей.Отбор.Объект.Установить(ТекСтр.Договор); 
			НаборЗаписей.Отбор.Свойство.Установить(Свойство); 
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
        КонецЦикла;
	КонецЕсли;
	
		
	Для Каждого ТекСтрока Из ПривязкаДоговоровФакторинг Цикл
		
		// Пишем строку ТЧ в регистр
		УстановитьЗначениеСвойства(ТекСтрока.Договор, "Syn_Факторинг", ТекСтрока.Фактор);
		
	КонецЦикла;
	
КонецПроцедуры

//}


Инициализировать();
