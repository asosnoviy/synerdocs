
//========================================================================
// Модуль для работы с классификаторами.
// Поддерживаемые классификаторы:
//  - единицы измерения (ОКЕИ)
//  - валюты (ОКВ)
//  - страны мира (ОКСМ)
//  - регионы РФ
//========================================================================

Процедура Инициализировать() Экспорт
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

// Найти ЕИ в классификаторе по коду.
//
// Параметры:
//  Код	 - Строка - код ЕИ.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура, Неопределено - найденная ЕИ (см. Новый_ЕдиницаИзмерения()).
//
Функция ЕдиницаИзмерения(Код) Экспорт
	
	Результат = Неопределено;
	
	МинДлинаКода = 3;
	
	Фильтр = Новый_ЕдиницаИзмерения();
	Фильтр.Код = ПривестиКодКМинимальнойДлине(Код, МинДлинаКода);
	
	Элемент = НайтиЭлементКлассификатора(Классификаторы().ОКЕИ, Фильтр);
	
	Если Элемент <> Неопределено Тогда
		Результат = Новый_ЕдиницаИзмерения();
		ЗаполнитьЗначенияСвойств(Результат, Элемент, "Код, Наименование");
		Результат = Новый ФиксированнаяСтруктура(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Найти валюту в классификаторе по коду.
//
// Параметры:
//  Код	 - Строка - код валюты.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура, Неопределено - найденная валюта (см. Новый_Валюта()).
//
Функция Валюта(Код) Экспорт
	
	Результат = Неопределено;
	
	МинДлинаКода = 3;
	
	Фильтр = Новый_Валюта();
	Фильтр.Код = ПривестиКодКМинимальнойДлине(Код, МинДлинаКода);
	
	Элемент = НайтиЭлементКлассификатора(Классификаторы().ОКВ, Фильтр);
	
	Если Элемент <> Неопределено Тогда
		Результат = Новый_Валюта();
		ЗаполнитьЗначенияСвойств(Результат, Элемент, "Код, Наименование, Обозначение");
		Результат = Новый ФиксированнаяСтруктура(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Найти страну в классификаторе стран мира по указанным параметрам.
//
// Параметры:
//  Код			 - Строка - код страны.
//  Наименование - Строка - наименование страны.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура, Неопределено - найденная страна (см. Новый_Страна()).
//
Функция Страна(Код = Неопределено, Наименование = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	МинДлинаКода = 3;
	
	Фильтр = Новый_Страна();
	Если Код <> Неопределено Тогда
		Фильтр.Код = ПривестиКодКМинимальнойДлине(Код, МинДлинаКода);
	КонецЕсли;
	Фильтр.Наименование = ВРег(Наименование);
	
	Элемент = НайтиЭлементКлассификатора(Классификаторы().ОКСМ, Фильтр);
	
	Если Элемент <> Неопределено Тогда
		Результат = Новый_Страна();
		ЗаполнитьЗначенияСвойств(Результат, Элемент, "Код, Наименование, ПолноеНаименование");
		Результат = Новый ФиксированнаяСтруктура(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Найти регион РФ в классификаторе субъектов РФ по указанным параметрам.
//
// Параметры:
//  Код				 - Строка - код региона.
//  Наименование	 - Строка - наименование региона.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура, Неопределено - найденный регион (см. Новый_РегионРФ()).
//
Функция РегионРФ(Код = Неопределено, Наименование = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	МинДлинаКода = 2;
	
	Фильтр = Новый_РегионРФ();
	Если Код <> Неопределено Тогда
		Фильтр.Код = ПривестиКодКМинимальнойДлине(Код, МинДлинаКода);
	КонецЕсли;
	
	Если Наименование <> Неопределено Тогда
		Фильтр.ПолноеНаименование = Наименование;
		Фильтр.Наименование = РегионБезСокращения(Наименование);
	КонецЕсли;
	
	Элемент = НайтиЭлементКлассификатора(Классификаторы().РегионыРФ, Фильтр);
	
	Если Элемент <> Неопределено Тогда
		Результат = Новый_РегионРФ();
		ЗаполнитьЗначенияСвойств(Результат, Элемент, "Код, Наименование, Сокращение, ПолноеНаименование");
		Результат = Новый ФиксированнаяСтруктура(Результат);
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

// Формирует массив всех единиц измерения по ОКЕИ.
// 
// Возвращаемое значение:
//  Массив - массив единиц измерения (см. Новый_ЕдиницаИзмерения()).
//
Функция ВсеЕдиинцыИзмерения() Экспорт
	
	Результат = Новый Массив;
	
	ВсеЭлементы = ВсеЭлементыКлассификатора(Классификаторы().ОКЕИ);
	Для Каждого Элемент Из ВсеЭлементы Цикл
		
		ЕдиницаИзмерения = Новый_ЕдиницаИзмерения();
		ЗаполнитьЗначенияСвойств(ЕдиницаИзмерения, Элемент, "Код, Наименование");
		
		Результат.Добавить(ЕдиницаИзмерения);
		
	КонецЦикла;
	
	Результат = ФиксированныеДанные(Результат);
	Возврат Результат;
	
КонецФункции

// Формирует массив всех валют по ОКВ.
// 
// Возвращаемое значение:
//  Массив - массив единиц измерения (см. Новый_Валюта()).
//
Функция ВсеВалюты() Экспорт
	
	Результат = Новый Массив;
	
	ВсеЭлементы = ВсеЭлементыКлассификатора(Классификаторы().ОКВ);
	Для Каждого Элемент Из ВсеЭлементы Цикл
		
		Валюта = Новый_Валюта();
		ЗаполнитьЗначенияСвойств(Валюта, Элемент, "Код, Наименование, Обозначение");
		
		Результат.Добавить(Валюта);
		
	КонецЦикла;
	
	Результат = ФиксированныеДанные(Результат);
	Возврат Результат;
	
КонецФункции

// Формирует массив всех стран по ОКСМ.
// 
// Возвращаемое значение:
//  Массив - массив единиц измерения (см. Новый_Страна()).
//
Функция ВсеСтраны() Экспорт
	
	Результат = Новый Массив;
	
	ВсеЭлементы = ВсеЭлементыКлассификатора(Классификаторы().ОКСМ);
	Для Каждого Элемент Из ВсеЭлементы Цикл
		
		Страна = Новый_Страна();
		ЗаполнитьЗначенияСвойств(Страна, Элемент, "Код, Наименование, ПолноеНаименование");
		
		Результат.Добавить(Страна);
		
	КонецЦикла;
	
	Результат = ФиксированныеДанные(Результат);
	Возврат Результат;
	
КонецФункции

// Формирует массив всех регионов РФ по КЛАДР.
// 
// Возвращаемое значение:
//  Массив - массив единиц измерения (см. Новый_РегионРФ()).
//
Функция ВсеРегионыРФ() Экспорт
	
	Результат = Новый Массив;
	
	ВсеЭлементы = ВсеЭлементыКлассификатора(Классификаторы().РегионыРФ);
	Для Каждого Элемент Из ВсеЭлементы Цикл
		
		РегионРФ = Новый_РегионРФ();
		ЗаполнитьЗначенияСвойств(РегионРФ, Элемент, "Код, Наименование, Сокращение, ПолноеНаименование");
		
		Результат.Добавить(РегионРФ);
		
	КонецЦикла;
	
	Результат = ФиксированныеДанные(Результат);
	Возврат Результат;
	
КонецФункции

//========================================================================
// ОБЪЕКТНАЯ МОДЕЛЬ
//========================================================================

// Поддерживаемые классификаторы
Функция Классификаторы()
	
	Классификаторы = Новый Структура(
		"ОКЕИ,
		|ОКВ,
		|ОКСМ,
		|РегионыРФ"
	);
	
	Для Каждого Элемент Из Классификаторы Цикл
		Классификаторы[Элемент.Ключ] = Элемент.Ключ;
	КонецЦикла;
	
	Классификаторы = Новый_Перечисление(Классификаторы);
	
	Возврат Классификаторы;
	
КонецФункции

//===================================
//{ Объекты классификатора

Функция Новый_ЕдиницаИзмерения()
	
	ЕИ = Новый Структура(
		"Код,
		|Наименование"
	);
	
	Возврат ЕИ;
	
КонецФункции

Функция Новый_Валюта()
	
	Валюта = Новый Структура(
		"Код,
		|Наименование,
		|Обозначение"
	);
	
	Возврат Валюта;
	
КонецФункции

Функция Новый_Страна()
	
	Страна = Новый Структура(
		"Код,
		|Наименование,
		|ПолноеНаименование"
	);
	
	Возврат Страна;
	
КонецФункции

Функция Новый_РегионРФ()
	
	Регион = Новый Структура(
		"Код,
		|Наименование,
		|Сокращение,
		|ПолноеНаименование"
	);
	
	Возврат Регион;
	
КонецФункции

//}

//========================================================================
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================

//===================================
//{ Работа с классификатором

// Получить классификатор для работы с ним.
//
// Параметры:
//  ВидКлассификатора	 - Строка - один из поддерживаемых классификторов (см. Классификаторы()).
// 
// Возвращаемое значение:
//  ДокументDOM - распарсенный в DOM классификатор.
//
Функция Классификатор(ВидКлассификатора)
	
	ИмяМакета = ВидКлассификатора;
	Макет = ПолучитьМакет(ИмяМакета);
	
	ТекстКлассификатора = Макет.ПолучитьТекст();
	
	Классификатор = ПрочитатьXMLвDOM(ТекстКлассификатора);
	
	Возврат Классификатор;
	
КонецФункции

// Формирует XPath для поиска элемента классификатора.
//
// Параметры:
//  Фильтр	 - Структура -	фильтр, по которому отбираются элементы, учитываются только заполненные поля,
// 							в качестве фильтра используется один из объектов классификатора.
//  ПолноеСоответствие - Булево - соединить условия поиска по И, иначе по ИЛИ.
// 
// Возвращаемое значение:
//  Строка - выражение XPath для поиска в классификаторе
//
Функция ТекстВыражения(Фильтр, ПолноеСоответствие)
	
	ШаблонЗапрос = "/Items/Item[%1][1]";
	ШаблонПараметр = "@%1='%2'";
	
	ТипУсловия = ?(ПолноеСоответствие,
		" and ",
		" or "
	);
	
	Параметры = Новый Массив;
	Для Каждого ЭлементФильтра Из Фильтр Цикл
		
		Если ЭлементФильтра.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Параметр = СтрШаблон2(ШаблонПараметр,
			ЭлементФильтра.Ключ,
			ЭлементФильтра.Значение
		);
		Параметры.Добавить(Параметр);
		
	КонецЦикла;
	Параметры = СтрСоединить2(Параметры, ТипУсловия);
	
	ТекстЗапроса = СтрШаблон2(ШаблонЗапрос, Параметры);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Поиск в классификаторе по указанному фильтру,
// возвращает структуру, поля которой можно использовать для заполнения объекта классификатора.
//
// Параметры:
//  ВидКлассификатора	 - Строка - один из поддерживаемых классификторов (см. Классификаторы()).
//  Фильтр	 			 - Структура -	фильтр, по которому отбираются элементы, учитываются только заполненные поля,
// 										в качестве фильтра используется один из объектов классификатора.
//  ПолноеСоответствие	 - Булево - найденный элемент должен соответствовать всем полям фильтра, иначе тольк одному из них.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура, Неопределено - найденный элемент классификатора, его атрибуты.
//
Функция НайтиЭлементКлассификатора(ВидКлассификатора, Фильтр, ПолноеСоответствие = Ложь)
	
	//: Фильтр = Новый Структура;
	
	Результат = Неопределено;
	
	Классификатор = Классификатор(ВидКлассификатора); //: Классификатор = Новый ДокументDOM;
	
	ВыражениеПоиска = ТекстВыражения(Фильтр, ПолноеСоответствие);
	МенеджерПИ = Классификатор.СоздатьРазыменовательПИ();
	
	ВыбранныеЭлементы = Классификатор.ВычислитьВыражениеXPath(ВыражениеПоиска, Классификатор, МенеджерПИ);
	
	Узел = ВыбранныеЭлементы.ПолучитьСледующий();
	Если Узел <> Неопределено Тогда
		
		Результат = Новый Структура;
		Для Каждого Атрибут Из Узел.Атрибуты Цикл //: Атрибут = Узел;
			Результат.Вставить(Атрибут.Имя, Атрибут.Значение);
		КонецЦикла;
		
		Результат = Новый ФиксированнаяСтруктура(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает все элементы классификатора.
//
// Параметры:
//  ВидКлассификатора	 - Строка - один из поддерживаемых классификторов (см. Классификаторы()).
// 
// Возвращаемое значение:
//  Массив - массив элементов классификатора, их атрибуты.
//
Функция ВсеЭлементыКлассификатора(ВидКлассификатора)
	
	Результат = Новый Массив;
	
	Классификатор = Классификатор(ВидКлассификатора); //: Классификатор = Новый ДокументDOM;
	
	ВыражениеПоиска = "/Items/Item";
	МенеджерПИ = Классификатор.СоздатьРазыменовательПИ();
	
	ВыбранныеЭлементы = Классификатор.ВычислитьВыражениеXPath(ВыражениеПоиска, Классификатор, МенеджерПИ);
	
	Пока Истина Цикл
		
		Узел = ВыбранныеЭлементы.ПолучитьСледующий();
		Если Узел = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Элемент = Новый Структура;
		Для Каждого Атрибут Из Узел.Атрибуты Цикл //: Атрибут = Узел;
			Элемент.Вставить(Атрибут.Имя, Атрибут.Значение);
		КонецЦикла;
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Результат = ФиксированныеДанные(Результат);
	Возврат Результат;
	
КонецФункции

//}

//===================================
//{ Утилитарные функции

// Парсит строку в DOM.
//
// Параметры:
//  ТекстXML - Строка - xml в виде строки.
// 
// Возвращаемое значение:
//  ДокументDOM - распарсенный DOM
//
Функция ПрочитатьXMLвDOM(ТекстXML)
	
	ПостроительДОМ = Новый ПостроительDOM;
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстXML);
	
	ДокументДОМ = ПостроительДОМ.Прочитать(Чтение);
	
	Чтение.Закрыть();
	
	Возврат ДокументДОМ;
	
КонецФункции

// Приводит код к указанной минимальной длине, дополняя его нолями.
// Если код больше минимальной длины, то возвращается он же.
//
// Параметры:
//  Код				 - Строка - код, который надо привести к минимальной длине.
//  МинимальнаяДлина - Число - минимальный размер кода.
// 
// Возвращаемое значение:
//  Строка - приведенное значение.
//
Функция ПривестиКодКМинимальнойДлине(Код, МинимальнаяДлина)
	
	Результат = СокрЛП(Код);
	ДлинаКода = СтрДлина(Результат);
	
	НехватаетСимволов = МинимальнаяДлина - ДлинаКода;
	Если НехватаетСимволов > 0 Тогда
		Для Сч = 1 По НехватаетСимволов Цикл
			Результат = "0" + Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Убирает сокращение из наименования региона.
// Формат наименований регионов в конфигурациях выглядит примерно так "Удмуртская Респ",
// в то время как в классификаторе сокращение и наименование идуд в отдельных полях.
//
// Параметры:
//  НаименованиеРегиона	 - Строка - полное наименование региона из адреса.
// 
// Возвращаемое значение:
//  Строка - наименование без сокращения или исходное наименование, если сокращение не удалось найти.
//
Функция РегионБезСокращения(НаименованиеРегиона)
	
	Сокращения = СтрРазделить2(
		"Респ, край, обл, г, АО, округ, Аобл",
		",",, Истина
	); //: Сокращения = Новый Массив;
	
	Результат = НаименованиеРегиона;
	
	ЧастиНаименования = СтрРазделить2(НаименованиеРегиона, " ", Ложь, Истина); //: ЧастиНаименования = Новый Массив;
	Если ЧастиНаименования.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПоследняяЧасть = ЧастиНаименования.Количество() - 1;
	Если Сокращения.Найти(ЧастиНаименования[ПоследняяЧасть]) <> Неопределено Тогда
		ЧастиНаименования.Удалить(ПоследняяЧасть);
		Результат = СтрСоединить2(ЧастиНаименования, " ");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//}
