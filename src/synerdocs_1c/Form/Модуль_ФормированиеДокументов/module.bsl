
//========================================================================
// Модуль формирования документов
//========================================================================

// Модули
Перем Сервис, ОбъектнаяМодель, Криптография, МенеджерНастроек, Классификаторы;
Перем ДанныеКонфигурации;

// Дополнительные параметры, которые не передаются в формы выбора,
// но нужны для продолжения выполнения операции.
Перем ДополнительныеПараметры;

//========================================================================
// ИНИЦИАЛИЗАЦИЯ
//========================================================================

Процедура ПодключитьМодули()
	
	Сервис				= Модуль("Модуль_Сервис");
	ОбъектнаяМодель		= Модуль("Модуль_ОбъектнаяМодель");
	Криптография		= Модуль("Модуль_Криптография");
	МенеджерНастроек	= Модуль("Модуль_МенеджерНастроек");
	Классификаторы		= Модуль("Модуль_Классификаторы");
	ДанныеКонфигурации	= Модуль("Модуль_ДанныеКонфигурации");
	
КонецПроцедуры

Процедура Инициализировать() Экспорт
	
	ПодключитьМодули();
	
	ДополнительныеПараметры = Новый Соответствие;
	
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

// Формирует документ из объектной модели ИР и выводит ошибки формирования пользователю.
// Автоматически пробрасываются вызовы к нужному модулю, который может
// сформировать указанный тип документа.
//
// Параметры:
//  ТипДокумента	 - Произвольный - тип документа (см. Модуль_ОбъектнаяМодель.ТипыДокументов()).
//  Модель			 - Структура - представление документа в виде объектной модели ИР
// 								(см. Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУПД(),
// 								Модуль_ОбъектнаяМодель.Новый_ТитулПокупателяУПД(), Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУКД(),
// 								Модуль_ОбъектнаяМодель.Новый_ТитулПокупателяУКД(), Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаДПТ(),
// 								Модуль_ОбъектнаяМодель.Новый_ТитулПокупателяДПТ(), Модуль_ОбъектнаяМодель.Новый_ТитулИсполнителяДПРР(),
// 								Модуль_ОбъектнаяМодель.Новый_ТитулЗаказчикаДПРР()).
//  ИдИсходногоДокумента - Строка - обязателен для титула покупателя, часть реквизитов документа заполняется
// 								из титула продавца с указанным идентификатором.
// 
// Возвращаемое значение:
//  Структура - сформированный документ и информация о том, были ли ошибки при сериализации (см. Новый_РезультатСериализацииДокумента()).
//
Функция МодельВДокумент(ТипДокумента, Модель, ИдИсходногоДокумента = Неопределено) Экспорт
	
	Результат = Новый_РезультатСериализацииДокумента();
	
	Если Сервис.МожноСериализовать(ТипДокумента) Тогда
		РезультатГенератора = Сервис.МодельВДокумент(ТипДокумента, Модель, ИдИсходногоДокумента);
	Иначе
		ВызватьИсключение "Не реализовано";
	КонецЕсли;
	
	СтатусыВалидации = Сервис.СтатусыВалидации();
	
	РезультатВалидации = РезультатГенератора.РезультатВалидации;
	
	Для Каждого Ошибка Из РезультатВалидации.ОшибкиXSD Цикл
		ТекстСообщения = Ошибка.Описание;
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	КонецЦикла;
	
	Для Каждого Ошибка Из РезультатВалидации.ОшибкиФЛК Цикл
		ТекстСообщения = Ошибка.Описание;
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	КонецЦикла;
	
	Результат.ЕстьОшибки = (РезультатВалидации.Результат = СтатусыВалидации.Ошибка);
	
	Результат.Документ.Имя			= РезультатГенератора.Документ.Имя;
	Результат.Документ.Содержимое	= РезультатГенератора.Документ.Содержимое;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДокументы(СписокДокументов, ОтредактированныеДокументы = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		Документ = СформироватьДокумент(СтрокаСписка.Ссылка, СтрокаСписка.Фактор, ОтредактированныеДокументы);
		Результат.Добавить(Документ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДокумент(Ссылка, Фактор = Неопределено, ОтредактированныеДокументы = Неопределено) Экспорт
	
	ИнформацияОДокументе = ДанныеКонфигурации.ПолнаяИнформацияОДокументе(Ссылка);
	
	// TODO: Не трогать и не использовать больше нигде, обеспечение совместимости со старым кодом
	СчетНаОплату = СчетНаОплату(ИнформацияОДокументе);
	Если СчетНаОплату <> Неопределено Тогда
		Возврат СчетНаОплату;
	КонецЕсли;
	
	Документ = ОтредактированныйДокумент(ОтредактированныеДокументы, Ссылка);
	Если Документ <> Неопределено Тогда
		
		ТипДокумента = Документ.ТипДокумента;
		ВидДокумента = Документ.ВидДокумента;
		
		РезультатСериализации = Документ.РезультатСериализации
		
	Иначе
		
		Модель = Документ1СВМодель(ИнформацияОДокументе, Фактор);
		
		ТипДокумента = ИнформацияОДокументе.ТипДокумента;
		ВидДокумента = Модель.ВидДокумента;
		
		РезультатСериализации = МодельВДокумент(ТипДокумента, Модель);
		
	КонецЕсли;
	
	Результат = Новый_СериализованныйДокумент();
	Результат.РезультатСериализации	= РезультатСериализации;
	Результат.ТипДокумента			= ТипДокумента;
	Результат.ВидДокумента			= ВидДокумента;
	
	Результат.Ссылки.Добавить(ИнформацияОДокументе.ЭтотДокумент.Ссылка);
	Если ОбъектнаяМодель.ЭтоЕдиныйДокумент(ТипДокумента, ВидДокумента) Тогда
		Результат.Ссылки.Добавить(ИнформацияОДокументе.ПарныйДокумент.Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Процедура НачатьРедактированиеДокумента(Ссылка, Фактор, ОтредактированныеДокументы, Элемент) Экспорт
	
	РедактироватьДокумент(Ссылка, Фактор, ОтредактированныеДокументы, Элемент);
	
КонецПроцедуры

Процедура ЗакончитьРедактированиеДокумента(ОтредактированныйДокумент, ОтредактированныеДокументы) Экспорт
	
	РедактироватьДокумент_Завершение(ОтредактированныйДокумент, ОтредактированныеДокументы);
	
КонецПроцедуры

Функция ДоступноРедактированиеДокумента(Ссылка) Экспорт
	
	ИнформацияОДокументе = ДанныеКонфигурации.ПолнаяИнформацияОДокументе(Ссылка);
	
	ТипДокумента = ИнформацияОДокументе.ТипДокумента;
	Результат = Ложь
		ИЛИ ОбъектнаяМодель.ЭтоТитулПродавцаУПД(ТипДокумента)
		ИЛИ ОбъектнаяМодель.ЭтоТитулПродавцаУКД(ТипДокумента);
		
	Возврат Результат;
	
КонецФункции


// Конвертирует данные конфигурации в объектную модель титула продавца указанного типа.
//
// Параметры:
//  ТипДокумента - Произвольный - тип документа (см. Модуль_ОбъектнаяМодель.ТипыДокументов()).
//  Данные		 - Структура - данные конфигурации,
// 								документ (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_ИсходныйДокумент(),
// 								Модуль_ОбъектнаяМодельКонфигурации.Новый_КорректировочныйДокумент()).
// 
// Возвращаемое значение:
//  Структура - сформированный титул
// 		(см. Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУПД(),
// 		Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУКД(),
// 		Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаДПТ(),
// 		Модуль_ОбъектнаяМодель.Новый_ТитулИсполнителяДПРР()).
//
Функция ТитулПродавца(ТипДокумента, Данные) Экспорт
	
	Если ОбъектнаяМодель.ЭтоТитулПродавцаУПД(ТипДокумента) Тогда
		Модель = ТитулПродавца_УПД(Данные);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПродавцаУКД(ТипДокумента) Тогда
		Модель = ТитулПродавца_УКД(Данные);
	Иначе
		ВызватьИсключение "Не реализовано";
	КонецЕсли;
	
	Возврат Модель;
	
КонецФункции

// Конвертирует данные формы в модель титула покупателя указанного типа.
//
// Параметры:
//  ТипДокумента - Произвольный - тип документа (см. Модуль_ОбъектнаяМодель.ТипыДокументов()).
//  Данные		 - Структура - данные формы (см. Новый_ДанныеТитулаПокупателя()).
// 
// Возвращаемое значение:
//  Структура - сформированный титул
// 		(см. Модуль_ОбъектнаяМодель.Новый_ТитулПокупателяУПД()
// 		Модуль_ОбъектнаяМодель.Новый_ТитулПокупателяУКД()
// 		Модуль_ОбъектнаяМодель.Новый_ТитулПокупателяДПТ()
// 		Модуль_ОбъектнаяМодель.Новый_ТитулЗаказчикаДПРР()).
//
Функция ТитулПокупателя(ТипДокумента, Данные) Экспорт
	
	Если ОбъектнаяМодель.ЭтоТитулПокупателяУПД(ТипДокумента) Тогда
		Модель = ТитулПокупателя_УПД(Данные);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПокупателяУКД(ТипДокумента) Тогда
		Модель = ТитулПокупателя_УКД(Данные);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПокупателяДПТ(ТипДокумента) Тогда
		Модель = ТитулПокупателя_ДПТ(Данные);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулЗаказчикаДПРР(ТипДокумента) Тогда
		Модель = ТитулПокупателя_ДПРР(Данные);
	Иначе
		ВызватьИсключение "Не реализовано";
	КонецЕсли;
	
	Возврат Модель;
	
КонецФункции

// Формирует подписанта из текущего сертификата.
// 
// Возвращаемое значение:
//  Структура - подписант (см. Модуль_ОбъектнаяМодель.Новый_Подписант()).
//
Функция ПодписантПоУмолчанию() Экспорт
	
	Подписант = Подписант();
	
	Возврат Подписант;
	
КонецФункции

Функция СоставительДокументаПоУмолчанию() Экспорт
	
	Составитель = СоставительДокумента();
	
	Возврат Составитель;
	
КонецФункции

//========================================================================
// ОБЪЕКТНАЯ МОДЕЛЬ
//========================================================================

Функция Новый_СписокДокументовДляСериализации() Экспорт
	
	СписокДокументов = Новый ТаблицаЗначений;
	
	ТипВсеДокументы = Документы.ТипВсеСсылки();
	ТипФактор = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	Колонки = СписокДокументов.Колонки;
	Колонки.Добавить("Ссылка",    ТипВсеДокументы);
	Колонки.Добавить("Фактор",    ТипФактор);
	
	Возврат СписокДокументов;
	
КонецФункции

Функция Новый_СериализованныйДокумент()
	
	СериализованныйДокумент = Новый Структура(
		"РезультатСериализации,
		|ТипДокумента,
		|ВидДокумента,
		|Ссылки"
	);
	
	СериализованныйДокумент.РезультатСериализации	= Новый_РезультатСериализацииДокумента();
	СериализованныйДокумент.ТипДокумента			= ОбъектнаяМодель.ТипыДокументов().Неформализованный;
	СериализованныйДокумент.ВидДокумента			= Неопределено; //: ОбъектнаяМодель.ВидыУПД(); ОбъектнаяМодель.ВидыУКД();
	СериализованныйДокумент.Ссылки					= Новый Массив; //: ДокументСсылка
	
	Возврат СериализованныйДокумент;
	
КонецФункции

// Данные для формирования титула покупателя

Функция Новый_ДанныеТитулаПокупателя() Экспорт
	
	Данные = Новый Структура(
		"ВидОперации, ОписаниеОперации,
		|СведенияОПолученииВещи,
		|Подписант, Приемщик, Составитель,
		|ИнфПоле"
	);
	
	Данные.Подписант				= ОбъектнаяМодель.Новый_Подписант();
	Данные.Приемщик					= ОбъектнаяМодель.Новый_ОтветственноеЛицо();
	Данные.Составитель				= ОбъектнаяМодель.Новый_СоставительДокумента();
	Данные.ОписаниеОперации			= ОбъектнаяМодель.Новый_ОписаниеОперации();
	Данные.СведенияОПолученииВещи	= ОбъектнаяМодель.Новый_ОписаниеОперации();
	Данные.ИнфПоле					= ОбъектнаяМодель.Новый_ИнфПоле();
	
	Возврат Данные;
	
КонецФункции

// Результат конвертации модели в документ

Функция Новый_РезультатСериализацииДокумента()
	
	Результат = Новый Структура(
		"ЕстьОшибки,
		|Документ,
		|Карточка"
	);
	
	Результат.ЕстьОшибки = Ложь;
	Результат.Документ = Новый_Документ();
	Результат.Карточка = Неопределено; //: ДвоичныеДанные
	
	Возврат Результат;
	
КонецФункции

Функция Новый_Документ()
	
	Документ = Новый Структура(
		"Имя,
		|Содержимое"
	);
	
	Возврат Документ;
	
КонецФункции

// Результат редактирования документа

Функция Новый_ОтредактированныйДокумент() Экспорт
	
	Документ = Новый Структура(
		"Ссылка,
		|Модель,
		|ТипДокумента,
		|ВидДокумента,
		|РезультатСериализации"
	);
	
	Документ.Ссылка					= Неопределено; //: ДокументСсылка
	//: Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУПД();
	//: Модуль_ОбъектнаяМодель.Новый_ТитулПродавцаУПД();
	Документ.Модель					= Неопределено; 
	Документ.ТипДокумента			= Неопределено; //: Модуль_ОбъектнаяМодель.ТипыДокументов();
	Документ.ВидДокумента			= Неопределено; //: Модуль_ОбъектнаяМодель.ВидыУПД(); Модуль_ОбъектнаяМодель.ВидыУКД();
	Документ.РезультатСериализации	= Неопределено; //: Новый_РезультатСериализацииДокумента();
	
	Возврат Документ;
	
КонецФункции

//========================================================================
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================

// TODO: Не трогать и не использовать больше нигде, обеспечение совместимости со старым кодом
Функция СчетНаОплату(ИнформацияОДокументе)
	
	ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
	ВидыДокумента = ОбъектнаяМодель.ВидыНеформализованныхДокументов();
	
	Ссылка			= ИнформацияОДокументе.ЭтотДокумент.Ссылка;
	ТипДокумента	= ИнформацияОДокументе.ТипДокумента;
	ВидДокумента	= ИнформацияОДокументе.ВидДокумента;
	
	Если НЕ (ТипДокумента = ТипыДокумента.Неформализованный
			И ВидДокумента = ВидыДокумента.СчетНаОплату) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый_СериализованныйДокумент();
	Результат.ТипДокумента = ТипыДокумента.Неформализованный;
	Результат.ВидДокумента = ВидыДокумента.СчетНаОплату;
	Результат.Ссылки.Добавить(Ссылка);
	
	РезультатСерилазиации = Результат.РезультатСериализации;
	
	Документ	= СоздатьЭлектронныйДокументСчетНаОплатуПродавец(Ссылка);
	Карточка	= СоздатьКарточкуДокументаСчетНаОплату(Ссылка);
	
	РезультатСерилазиации.ЕстьОшибки = (Документ = Неопределено) ИЛИ (Карточка = Неопределено);
	
	РезультатСерилазиации.Карточка = Карточка;
	Если Документ <> Неопределено Тогда
		РезультатСерилазиации.Документ.Содержимое	= Документ.Документ_ДвоичныеДанные;
		РезультатСерилазиации.Документ.Имя			= Документ.Документ_ИмяФайла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//===================================
//{ Формирование титула продавца

Функция ТитулПродавца_УПД(ИсходныйДокумент)
	
	УПД = ОбъектнаяМодель.Новый_ТитулПродавцаУПД();
	
	Реквизиты = ИсходныйДокумент.Реквизиты;
	ОписаниеДокумента = УПД.Описание;
	
	ОписаниеДокумента.Номер	= Реквизиты.Номер;
	ОписаниеДокумента.Дата	= Реквизиты.Дата;
	Если Реквизиты.Исправление <> Неопределено Тогда
		ОписаниеДокумента.ИсправлениеНомер	= Реквизиты.Исправление.Номер;
		ОписаниеДокумента.ИсправлениеДата	= Реквизиты.Исправление.Дата;
	КонецЕсли;
	
	СтороныСделки = ИсходныйДокумент.СтороныСделки;
	УПД.Продавец	= СтороныСделки.Продавец;
	УПД.Покупатель	= СтороныСделки.Покупатель;
	
	ДанныеТранспортировки = ИсходныйДокумент.ДанныеТранспортировки;
	
	УПД.Основание.Добавить(ДанныеТранспортировки.Основание);
	
	Если НЕ ИсходныйДокумент.ТМЦ.ТолькоУслуги Тогда
		УПД.Грузоотправитель	= ДанныеТранспортировки.Грузоотправитель;
		УПД.Грузополучатель		= ДанныеТранспортировки.Грузополучатель;
	КонецЕсли;
	УПД.Перевозчик				= ДанныеТранспортировки.Перевозчик;
	УПД.ТранспортныеНакладные	= ДанныеТранспортировки.ТранспортныеНакладные;
	
	УПД.Валюта = ИсходныйДокумент.Валюта;
	УПД.ПлатежноРасчетныеДокументы = ИсходныйДокумент.ПлатежноРасчетныеДокументы;
	
	Если ИсходныйДокумент.ОтветственныеЛица.ОтпускПроизвел <> Неопределено Тогда
		УПД.ИнформацияПродавца.ЛицоПередавшееТовар = ИсходныйДокумент.ОтветственныеЛица.ОтпускПроизвел;
	КонецЕсли;
	
	УПД.ИнформацияПродавца.СведенияОбОперации.Описание = ?(ИсходныйДокумент.ТМЦ.ТолькоУслуги,
		НСтр("ru = 'Услуги оказаны в полном объеме'"),
		НСтр("ru = 'Товары переданы'")
	);
	
	УПД.ТМЦ = ТабЧастьТитулаПродавца_УПД(ИсходныйДокумент.ТМЦ);
	
	Возврат УПД;
	
КонецФункции

Функция ТабЧастьТитулаПродавца_УПД(ИсходныйДокументТМЦ)
	
	ТМЦ = ОбъектнаяМодель.Новый_ТМЦУПД();
	
	Настройки = МенеджерНастроек.НастройкиИР();
	ВариантыКодаНоменклатуры = МенеджерНастроек.ВариантыПодбораКодаНоменклатуры();
	
	СтавкиНДС = ОбъектнаяМодель.СтавкиНДС();
	ПризнакиТМЦ = ОбъектнаяМодель.ПризнакиТМЦ();
	
	ТабличнаяЧасть = ТМЦ.ТабличнаяЧасть; //: ТабличнаяЧасть = Документы.РеализацияТоваровУслуг.ПустаяСсылка().Товары;
	Для Каждого СтрокаТЧ Из ИсходныйДокументТМЦ.ТабличнаяЧасть Цикл
		
		СтрокаТМЦ = ТабличнаяЧасть.Добавить();
		
		//: СтрокаТЧ = СтрокаТМЦ;
		
		Номенклатура = СтрокаТЧ.Номенклатура;
		СтрокаТМЦ.Наименование = Номенклатура.Наименование;
		СтрокаТМЦ.Код = ?(
			Настройки.ЗначениеКодаНоменклаутрыТН = ВариантыКодаНоменклатуры.Штрихкод
				И ЗначениеЗаполнено(Номенклатура.Штрихкод),
			Номенклатура.Штрихкод, 
			Номенклатура.Код
		);
		
		СтрокаТМЦ.ЕИКод				= СтрокаТЧ.ЕдиницаИзмерения.Код;
		СтрокаТМЦ.ЕИНаименование	= СтрокаТЧ.ЕдиницаИзмерения.Наименование;
		
		ЗаполнитьЗначенияСвойств(СтрокаТМЦ, СтрокаТЧ, "Количество, Цена, СуммаБезНДС, СуммаСНДС");
		
		СтрокаТМЦ.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
		СтрокаТМЦ.СуммаНДС = СуммаНДС(СтрокаТЧ.СуммаНДС, СтрокаТЧ.СтавкаНДС);
		
		СтрокаТМЦ.НомерГТД	= НеопределеноЕслиНеЗаполнено(СтрокаТЧ.НомерГТД);
		СтрокаТМЦ.КодСтраны	= НеопределеноЕслиНеЗаполнено(СтрокаТЧ.КодСтраныПроисхождения);
		
		КодСтраны = СтрокаТЧ.КодСтраныПроисхождения;
		Если ЗначениеЗаполнено(КодСтраны) Тогда
			СтранаПроисхождения = Классификаторы.Страна(КодСтраны);
			СтрокаТМЦ.СтранаПроисхождения = СтранаПроисхождения.Наименование;
		КонецЕсли;
		
		СтрокаТМЦ.Признак = ?(СтрокаТЧ.ЭтоУслуга,
			ПризнакиТМЦ.Услуга,
			ПризнакиТМЦ.Имущество
		);
	
		ИнфПоле = ОбъектнаяМодель.Новый_ИнфПоле();

		Характеристика = Номенклатура.Характеристика;
		Если ЗначениеЗаполнено(Характеристика) Тогда
			Поле = ИнфПоле.Добавить();
			Поле.Идентификатор	= "ИД";
			Поле.Значение		= Характеристика.Ссылка.УникальныйИдентификатор();
		КонецЕсли;
		
		СтрокаТМЦ.ИнфПоле = ИнфПоле;
		
	КонецЦикла;
	
	Итого = ТМЦ.Итого;
	ЗаполнитьЗначенияСвойств(Итого, ИсходныйДокументТМЦ.Итого, "Количество, СуммаБезНДС, СуммаНДС, СуммаСНДС");
	
	Возврат ТМЦ;
	
КонецФункции

Функция ТитулПродавца_УКД(КорректировочныйДокумент)
	
	УКД = ОбъектнаяМодель.Новый_ТитулПродавцаУКД();
	
	Реквизиты = КорректировочныйДокумент.Реквизиты;
	ОписаниеДокумента = УКД.Описание;
	
	ОписаниеДокумента.Номер	= Реквизиты.Номер;
	ОписаниеДокумента.Дата	= Реквизиты.Дата;
	Если Реквизиты.Исправление <> Неопределено Тогда
		ОписаниеДокумента.ИсправлениеНомер	= Реквизиты.Исправление.Номер;
		ОписаниеДокумента.ИсправлениеДата	= Реквизиты.Исправление.Дата;
	КонецЕсли;
	
	ИсходныйДокумент = ОбъектнаяМодель.Новый_ИсходныйДокумент();
	УКД.ИсходныеДокументы.Добавить(ИсходныйДокумент);
	
	ИсходныйДокумент.Номер	= Реквизиты.ИсходныйДокумент.Номер;
	ИсходныйДокумент.Дата	= Реквизиты.ИсходныйДокумент.Дата;
	Если Реквизиты.ИсходныйДокумент.Исправление <> Неопределено Тогда
		ИсходныйДокумент.ИсправлениеНомер	= Реквизиты.ИсходныйДокумент.Исправление.Номер;
		ИсходныйДокумент.ИсправлениеДата	= Реквизиты.ИсходныйДокумент.Исправление.Дата;
	КонецЕсли;
	
	СтороныСделки = КорректировочныйДокумент.СтороныСделки;
	УКД.Продавец	= СтороныСделки.Продавец;
	УКД.Покупатель	= СтороныСделки.Покупатель;
	
	ДанныеСогласования = КорректировочныйДокумент.ДанныеСогласования;
	
	УКД.Основание.Добавить(ДанныеСогласования.Основание);
	
	УКД.Валюта = КорректировочныйДокумент.Валюта;
	
	УКД.ИнформацияПродавца.СведенияОбОперации.Описание = НСтр("ru = 'Предлагаю изменить стоимость'");
	
	УКД.ИзмененияТМЦ = ТабЧастьТитулаПродавца_УКД(КорректировочныйДокумент.ИзмененияТМЦ);
	
	Возврат УКД;
	
КонецФункции

Функция ТабЧастьТитулаПродавца_УКД(КорректировочныйДокументИзмененияТМЦ)
	
	ИзмененияТМЦ = ОбъектнаяМодель.Новый_ИзмененияТМЦУКД();
	
	Настройки = МенеджерНастроек.НастройкиИР();
	ВариантыКодаНоменклатуры = МенеджерНастроек.ВариантыПодбораКодаНоменклатуры();
	
	СтавкиНДС = ОбъектнаяМодель.СтавкиНДС();
	
	ДоПосле = ПоляССуффиксами(
		"Количество, ЕИКод, ЕИНаименование, Цена, СтавкаНДС, СуммаБезНДС, СуммаНДС, СуммаСНДС",
		"До, После"
	); //: ДоПосле = Новый Структура;
	
	ДоПослеКонф = ПоляССуффиксами(
		"Количество, ЕдиницаИзмерения, Цена, СтавкаНДС, СуммаБезНДС, СуммаНДС, СуммаСНДС",
		"До, После"
	); //: ДоПослеКонф = Новый Структура;
	
	УвелУмен = ПоляССуффиксами(
		"СуммаБезНДС, СуммаНДС, СуммаСНДС",
		"Увеличение, Уменьшение"
	); //: УвелУмен = Новый Структура;
	
	ТабличнаяЧасть = ИзмененияТМЦ.ТабличнаяЧасть; //: ТабличнаяЧасть = Документы.РеализацияТоваровУслуг.ПустаяСсылка().Товары;
	Для Каждого СтрокаТЧ Из КорректировочныйДокументИзмененияТМЦ.ТабличнаяЧасть Цикл
		
		СтрокаТМЦ = ТабличнаяЧасть.Добавить();
		
		//: СтрокаТЧ = СтрокаТМЦ;
		
		СтрокаТМЦ.Наименование = СтрокаТЧ.Наименование;
		
		Для Каждого Суффикс Из ДоПосле Цикл
			
			Поля = Суффикс.Значение;
			ПоляКонф = ДоПослеКонф[Суффикс.Ключ];
			
			СтрокаТМЦ[Поля.ЕИКод]			= СтрокаТЧ[ПоляКонф.ЕдиницаИзмерения].Код;
			СтрокаТМЦ[Поля.ЕИНаименование]	= СтрокаТЧ[ПоляКонф.ЕдиницаИзмерения].Наименование;
			
			СтрокаТМЦ[Поля.Количество]		= СтрокаТЧ[ПоляКонф.Количество];
			СтрокаТМЦ[Поля.Цена]			= СтрокаТЧ[ПоляКонф.Цена];
			СтрокаТМЦ[Поля.СуммаБезНДС]		= СтрокаТЧ[ПоляКонф.СуммаБезНДС];
			СтрокаТМЦ[Поля.СуммаСНДС]		= СтрокаТЧ[ПоляКонф.СуммаСНДС];
		
			СтавкаНДС = СтрокаТЧ[ПоляКонф.СтавкаНДС];
			СтрокаТМЦ[Поля.СтавкаНДС] = СтавкаНДС;
			СтрокаТМЦ[Поля.СуммаНДС] = СуммаНДС(СтрокаТЧ[ПоляКонф.СуммаНДС], СтавкаНДС);
			
		КонецЦикла;
		
		Для Каждого Суффикс Из УвелУмен Цикл
			
			Поля = Суффикс.Значение;
			
			СтрокаТМЦ[Поля.СуммаБезНДС]	= НеопределеноЕслиНеЗаполнено(СтрокаТЧ[Поля.СуммаБезНДС]);
			СтрокаТМЦ[Поля.СуммаНДС]	= НеопределеноЕслиНеЗаполнено(СтрокаТЧ[Поля.СуммаНДС]);
			СтрокаТМЦ[Поля.СуммаСНДС]	= НеопределеноЕслиНеЗаполнено(СтрокаТЧ[Поля.СуммаСНДС]);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Итого = ИзмененияТМЦ.Итого;
	ИтогоКД = КорректировочныйДокументИзмененияТМЦ.Итого;
	Для Каждого Суффикс Из УвелУмен Цикл
		
		Поля = Суффикс.Значение;
		
		Итого[Поля.СуммаБезНДС]	= ИтогоКД[Поля.СуммаБезНДС];
		Итого[Поля.СуммаНДС]	= ИтогоКД[Поля.СуммаНДС];
		Итого[Поля.СуммаСНДС]	= ИтогоКД[Поля.СуммаСНДС];
		
	КонецЦикла;
	
	Возврат ИзмененияТМЦ;
	
КонецФункции

Функция СуммаНДС(СуммаНДС, СтавкаНДС)
	
	СтавкиНДС = ОбъектнаяМодель.СтавкиНДС();	
	
	Результат = ?(СтавкаНДС = СтавкиНДС.БезНДС,
		Неопределено,
		СуммаНДС
	);
	
	Возврат Результат;
	
КонецФункции

//}

//===================================
//{ Формирование титула покупателя

Функция ТитулПокупателя_УПД(Данные)
	
	УПД = ОбъектнаяМодель.Новый_ТитулПокупателяУПД();
	
	УПД.ИнформацияПокупателя.ВидОперации		= Данные.ВидОперации;
	УПД.ИнформацияПокупателя.СведенияОбОперации	= Данные.ОписаниеОперации;
	УПД.ИнформацияПокупателя.ЛицоПринявшееТовар	= Данные.Приемщик;
	УПД.ИнформацияПокупателя.Составитель		= Данные.Составитель;
	
	УПД.ИнформацияПокупателя.Подписанты.Добавить(Данные.Подписант);
	
	УПД.ИнформацияПокупателя.ИнфПоле = Данные.ИнфПоле;
	
	Возврат УПД;
	
КонецФункции

Функция ТитулПокупателя_УКД(Данные)
	
	УКД = ОбъектнаяМодель.Новый_ТитулПокупателяУКД();
	
	УКД.ИнформацияПокупателя.СведенияОбОперации	= Данные.ОписаниеОперации;
	УКД.ИнформацияПокупателя.Составитель		= Данные.Составитель;
	
	УКД.ИнформацияПокупателя.Подписанты.Добавить(Данные.Подписант);
	
	УКД.ИнформацияПокупателя.ИнфПоле = Данные.ИнфПоле;
	
	Возврат УКД;
	
КонецФункции

Функция ТитулПокупателя_ДПТ(Данные)
	
	ДПТ = ОбъектнаяМодель.Новый_ТитулПокупателяДПТ();
	
	ДПТ.ИнформацияПокупателя.ВидОперации		= Данные.ВидОперации;
	ДПТ.ИнформацияПокупателя.СведенияОбОперации	= Данные.ОписаниеОперации;
	ДПТ.ИнформацияПокупателя.ЛицоПринявшееТовар	= Данные.Приемщик;
	ДПТ.ИнформацияПокупателя.Составитель		= Данные.Составитель;
	
	ДПТ.ИнформацияПокупателя.Подписанты.Добавить(Данные.Подписант);
	
	ДПТ.ИнформацияПокупателя.ИнфПоле = Данные.ИнфПоле;
	
	Возврат ДПТ;
	
КонецФункции

Функция ТитулПокупателя_ДПРР(Данные)
	
	ДПРР = ОбъектнаяМодель.Новый_ТитулЗаказчикаДПРР();
	
	ДПРР.ИнформацияПокупателя.ВидОперации			= Данные.ВидОперации;
	ДПРР.ИнформацияПокупателя.СведенияОбОперации	= Данные.ОписаниеОперации;
	ДПРР.ИнформацияПокупателя.Составитель			= Данные.Составитель;
	
	ДПРР.ИнформацияПокупателя.Подписанты.Добавить(Данные.Подписант);
	
	ДПРР.ИнформацияПокупателя.ИнфПоле = Данные.ИнфПоле;
	
	ДПРР.СведенияОПолученииВещи = Данные.СведенияОПолученииВещи;
	
	Возврат ДПРР;
	
КонецФункции

//}

//===================================
//{ Заполнение полей документа недоступных в БД конфигурации

// Подписант

Функция ТипОрганизацииПодписанта(ТипСубъекта)
	
	ТипыСубъекта = Криптография.ТипыСубъекта();
	ТипыОрганизации = ОбъектнаяМодель.ТипыОрганизации();
	ЮрФизЛицо = Перечисления.ЮрФизЛицо;
	
	Если ТипСубъекта = Неопределено Тогда
		
		ТипОрганизации = Новый Соответствие;
		ТипОрганизации[ЮрФизЛицо.ЮрЛицо]	= ТипыОрганизации.ЮрЛицо;
		ТипОрганизации[ЮрФизЛицо.ФизЛицо]	= ТипыОрганизации.ФизЛицо;
		
		Результат = ТипОрганизации[Организация.ЮрФизЛицо];
		
	Иначе
		
		ТипОрганизации = Новый Соответствие;
		ТипОрганизации[ТипыСубъекта.ЮрЛицо]		= ТипыОрганизации.ЮрЛицо;
		ТипОрганизации[ТипыСубъекта.ИП]			= ТипыОрганизации.ИП;
		ТипОрганизации[ТипыСубъекта.ФизЛицо]	= ТипыОрганизации.ФизЛицо;
		
		Результат = ТипОрганизации[ТипСубъекта];
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Подписант()
	
	Сертификат = ТекущийСертификат();
	Если Сертификат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подписант = ОбъектнаяМодель.Новый_Подписант();
	
	Сертификат = Криптография.Сертификат(Сертификат);
	Субъект = Сертификат.Субъект;
	
	ИНН = Субъект.ИНН;
	// TODO: Выделить в отдельный модуль работы с конфигурацией
	Если ИНН = Неопределено Тогда
		ИНН = Организация.ИНН;
	КонецЕсли;
	
	Подписант.НаименованиеОрганизации = Субъект.НаименованиеОрганизации;
	
	Подписант.ИНН		= ИНН;
	Подписант.Должность	= Субъект.Должность;
	ЗаполнитьЗначенияСвойств(Подписант.ФИО, Субъект.ФИО, "Фамилия, Имя, Отчество");
	
	Подписант.ТипОрганизации = ТипОрганизацииПодписанта(Субъект.ТипСубъекта);
	
	Подписант.ОснованиеПолномочий = "Должностные обязанности";
	
	Возврат Подписант;
	
КонецФункции

Функция ПодписантПоТипуДокумента(ТипДокумента)
	
	Подписант = ПодписантПоУмолчанию();
	Если Подписант = Неопределено Тогда
		Подписант = ОбъектнаяМодель.Новый_Подписант();
	КонецЕсли;
	
	Настройки = МенеджерНастроек.НастройкиИР();
	ПоляПодписанта = Настройки.ПоддержкаНовыхФорматов.Подписант;
	
	ЗаполнитьЗначенияСвойств(Подписант, ПоляПодписанта, "Статус, ОснованиеПолномочий, ОснованиеПолномочийОрганизации");
	
	Если ОбъектнаяМодель.ЭтоТитулПродавцаУПД(ТипДокумента) Тогда
		Подписант.ОбластьПолномочий = ПоляПодписанта.ОбластьПолномочийУПД;
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПродавцаУКД(ТипДокумента) Тогда
		Подписант.ОбластьПолномочий = ПоляПодписанта.ОбластьПолномочийУКД;
	КонецЕсли;
	
	Возврат Подписант;
	
КонецФункции

// Составитель документа

Функция СоставительДокумента()
	
	Составитель = ОбъектнаяМодель.Новый_СоставительДокумента();
	
	ТекущаяОрганизация = ДанныеКонфигурации.ТекущаяОрганизация();
	Составитель.НаименованиеОрганизации = ТекущаяОрганизация.Наименование;
	
	Возврат Составитель;
	
КонецФункции

//}

Функция Документ1СВМодель(ИнформацияОДокументе, Фактор = Неопределено)
	
	ОтправитьКомплект = БудетОтправленКомплект(ИнформацияОДокументе);
	
	Ссылка = ?(ОтправитьКомплект,
		ИнформацияОДокументе.СчетФактура.Ссылка,
		ИнформацияОДокументе.ЭтотДокумент.Ссылка
	);
	
	Если ИнформацияОДокументе.ЭтоКорректировка Тогда
		ДокументДанные = ДанныеКонфигурации.КорректировочныйДокумент(Ссылка);
	Иначе
		ДокументДанные = ДанныеКонфигурации.ИсходныйДокумент(Ссылка);
	КонецЕсли;
	
	ТипДокумента = ИнформацияОДокументе.ТипДокумента;
	
	Если ОбъектнаяМодель.ЭтоТитулПродавцаУПД(ТипДокумента) Тогда
		ФункцияДокумента = ФункцияУПД(ОтправитьКомплект, ИнформацияОДокументе.ЭтоСФ);
	Иначе
		ФункцияДокумента = ФункцияУКД(ОтправитьКомплект, ИнформацияОДокументе.ЭтоСФ);
	КонецЕсли;
	
	Модель = ТитулПродавца(ТипДокумента, ДокументДанные);
	
	Модель.ВидДокумента = ФункцияДокумента;
	
	Если Фактор <> Неопределено Тогда
		Модель.Фактор = ДанныеКонфигурации.Фактор(Фактор);
	КонецЕсли;
	
	Подписант = ПодписантПоТипуДокумента(ТипДокумента);
	//КостыльНаЗаполненниеПодписанта	
	ДополнитьПодписанта(Подписант, Модель, ИнформацияОДокументе);
		
	Модель.ИнформацияПродавца.Подписанты.Добавить(Подписант);
	
	Модель.ИнформацияПродавца.Составитель = СоставительДокумента();
	
	Возврат Модель;
	
КонецФункции

Процедура ДополнитьПодписанта(Подписант, Модель, ИнформацияОДокументе)
	
	Фио = Неопределено;
	Должность = "";
	
	Если ИнформацияОДокументе.Свойство("СчетФактура") 
		И ИнформацияОДокументе.СчетФактура.Свойство("Ссылка")
		И ЗначениеЗаполнено(ИнформацияОДокументе.СчетФактура.Ссылка) Тогда
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИнформацияОДокументе.СчетФактура.Ссылка, "Организация");
		
		ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(Организация, Модель.Описание.Дата);
		Должность = ОтветственныеЛица.РуководительДолжность;
		Фио = ОтветственныеЛица.РуководительФИО;
		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Подписант.Фио.Имя) И ЗначениеЗаполнено(Фио) Тогда
		
		  Подписант.Фио.Имя = Фио.Имя;
		  
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Подписант.Фио.Фамилия) И ЗначениеЗаполнено(Фио) Тогда
		
		  Подписант.Фио.Фамилия = Фио.Фамилия;

		
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(Подписант.ИНН) Тогда
		
		 Подписант.ИНН = Модель.Продавец.ИНН;
		 
	КонецЕсли;	
	 
	
	Если НЕ ЗначениеЗаполнено(Подписант.Должность) И ЗначениеЗаполнено(Должность) Тогда
		
		 Подписант.Должность = Строка(Должность);
		 
	КонецЕсли;	 

	
КонецПроцедуры	

//===================================
//{ Редактирование документа

Процедура РедактироватьДокумент(Ссылка, Фактор, ОтредактированныеДокументы, Элемент)
	
	Документ = ОтредактированныйДокумент(ОтредактированныеДокументы, Ссылка);
	
	Если Документ <> Неопределено Тогда
		
		Модель = Документ.Модель;
		ТипДокумента = Документ.ТипДокумента;
		
	Иначе
		
		ИнформацияОДокументе = ДанныеКонфигурации.ПолнаяИнформацияОДокументе(Ссылка);
		Модель = Документ1СВМодель(ИнформацияОДокументе, Фактор);
		ТипДокумента = ИнформацияОДокументе.ТипДокумента;
		
	КонецЕсли;
	
	Если ОбъектнаяМодель.ЭтоТитулПродавцаУПД(ТипДокумента) Тогда
		Форма = ПолучитьФорму("Форма_ЗаполнениеТитулаПродавцаУПД", Элемент);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПродавцаУКД(ТипДокумента) Тогда
		Форма = ПолучитьФорму("Форма_ЗаполнениеТитулаПродавцаУКД", Элемент);
	КонецЕсли;
	
	Параметры = Форма.Параметры();
	Параметры.Модель = Модель;
	Параметры.Ссылка = Ссылка;
	
	Форма.УстановитьПараметры(Параметры);
	Форма.Открыть();
	
КонецПроцедуры

Процедура РедактироватьДокумент_Завершение(Документ, ОтредактированныеДокументы)
	
	УстановитьОтредактированныйДокумент(ОтредактированныеДокументы, Документ);
	
КонецПроцедуры

Функция ОтредактированныйДокумент(ОтредактированныеДокументы, Ссылка)
	
	Если ОтредактированныеДокументы = Неопределено Тогда
		ОтредактированныеДокументы = Новый Соответствие;
	КонецЕсли;
	
	Документ = ОтредактированныеДокументы[Ссылка];
	
	Возврат Документ;
	
КонецФункции

Процедура УстановитьОтредактированныйДокумент(ОтредактированныеДокументы, Документ)
	
	Если ОтредактированныеДокументы = Неопределено Тогда
		ОтредактированныеДокументы = Новый Соответствие;
	КонецЕсли;
	
	ОтредактированныеДокументы[Документ.Ссылка] = Документ;
	
КонецПроцедуры

//}

//===================================
//{ Выбор функции универсального документа

Функция БудетОтправленКомплект(ИнформацияОДокументе)
	
	Настройки = МенеджерНастроек.НастройкиИР();
	Варианты = МенеджерНастроек.ВариантыОтправкиУниверсальногоДокумента();
	
	ОтправитьКомплект = (Настройки.ПоддержкаНовыхФорматов.ВариантОтправкиУниверсальногоДокумента = Варианты.ОднимДокументом);
	
	Если ОтправитьКомплект Тогда
		
		ПарныйДокумент = ИнформацияОДокументе.ПарныйДокумент;
		ЕстьПарныйДокумент = (ПарныйДокумент <> Неопределено) И НЕ ПарныйДокумент.Отправлен;
		
		ОтправитьКомплект = ЕстьПарныйДокумент;
		
	КонецЕсли;
	
	Возврат ОтправитьКомплект;
	
КонецФункции

Функция ФункцияУПД(ЭтоЕдиныйДокумент, ЭтоСФ)
	
	ВидыУПД = ОбъектнаяМодель.ВидыУПД();
	
	Если ЭтоЕдиныйДокумент Тогда
		
		Результат = ВидыУПД.СЧФДОП;
		
	Иначе
		
		Результат = ?(ЭтоСФ,
			ВидыУПД.СЧФ,
			ВидыУПД.ДОП
		);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФункцияУКД(ЭтоЕдиныйДокумент, ЭтоСФ)
	
	ВидыУКД = ОбъектнаяМодель.ВидыУКД();
	
	Если ЭтоЕдиныйДокумент Тогда
		
		Результат = ВидыУКД.КСЧФДИС;
		
	Иначе
		
		Результат = ?(ЭтоСФ,
			ВидыУКД.КСЧФ,
			ВидыУКД.ДИС
		);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//}

//===================================
//{ Обработчики событий

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УничтожитьМодули" Тогда
		ДополнительныеПараметры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

//}

