
Перем _ИмяФормы;
Перем Сертификат;

Перем МенеджерНастроек, Телеметрия;
Перем СобытияТелеметрии;

Процедура ПодключитьМодули()
	
	Модули = ТребуютсяМодули("Модуль_МенеджерНастроек, Модуль_Телеметрия");
	МенеджерНастроек	= Модули.Модуль_МенеджерНастроек;
	Телеметрия			= Модули.Модуль_Телеметрия;
	
	СобытияТелеметрии = Телеметрия.ОписаниеСобытий();
	
КонецПроцедуры

Процедура ИнициализироватьФорму()
	
	ПодключитьМодули();
	
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

Функция ИмяФормы() Экспорт
	
	Если _ИмяФормы = Неопределено Тогда
		_ИмяФормы = ПолучитьИмяФормы(ЭтаФорма);
	КонецЕсли;
	
	Возврат _ИмяФормы;
	
КонецФункции

// ====================================
// Предопределенные процедуры и функции
// ====================================

Процедура ПриОткрытии()
		
	УстановитьЗаголовокОкна(ЭтаФорма, "Вход");
	Сертификаты.Колонки.Добавить("Сертификат");
	Сертификаты.Колонки.Добавить("Отпечаток");
	Сертификаты.Колонки.Добавить("ОблачныйИД");
	
	ЗаполнитьСписокСертификаторв();

	ПроверкаОбновления = ПроверитьОбновление(); 
	
	// TODO: Сделать нормально
	Если ЗначениеЗаполнено(ПроверкаОбновления) Тогда
		ЭлементыФормы.Версия.Заголовок = "Доступно обновление";
		ЭлементыФормы.Версия.Гиперссылка = Истина;
		ЭлементыФормы.Версия.Видимость = Истина;
		ЭлементыФормы.Версия.ЦветТекста = WebЦвета.Синий;
		ПутьОбновления = ПроверкаОбновления.Ссылка;
	Иначе
		ЭлементыФормы.Версия.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокСертификаторв()
	
	СтруктураНастроек = МенеджерНастроек.НастройкиИР();
	
	Сертификаты.Очистить();
	
	Если СоздатьМенеджерКриптографии() И ХранилищеСертификатов <> Неопределено Тогда
		
		м_Сертификаты = ХранилищеСертификатов.ПолучитьВсе();
		
		Тип_ArrayOfString = ExchangeService.ФабрикаXDTO.Тип("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "ArrayOfstring");
		ArrayOfPrint = ExchangeService.ФабрикаXDTO.Создать(Тип_ArrayOfString);
		
		МассивОтпечатков = Новый Массив;
		// Проверим сертификаты, по которым возможна атворизация
		Для Каждого ТекСертификат из м_Сертификаты Цикл
			Если ТекСертификат.ИспользоватьДляШифрования И ТекСертификат.ИспользоватьДляПодписи Тогда
				Отпечаток = Строка(ТекСертификат.Отпечаток);
				Отпечаток = СтрЗаменить(Отпечаток," ","");
				ArrayOfPrint.string.Добавить(Отпечаток);	
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			
			СписокДействительныхОтпечатков = ExchangeService.CheckCertificateList(ArrayOfPrint);
			
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			ТекстСообщения = РазобратьИсключениеSynerdocs(ТекстОшибки);
			
			Сообщить(ТекстСообщения);
			
			Возврат;
			
		КонецПопытки;
		
		Для Каждого ТекСертификат из м_Сертификаты Цикл
							
			Для Каждого ТекСтрока Из СписокДействительныхОтпечатков.CertificateCheckInfo Цикл
				
				Если НЕ СтруктураНастроек.ИспользоватьЛокальнуюКриптографию И Не ЗначениеЗаполнено(ТекСтрока.CloudAbonentId) Тогда
					Продолжить;
				КонецЕсли;
								
				Отпечаток = СтрЗаменить(Строка(ТекСертификат.Отпечаток)," ","");
				
				// Не выводим облачные серты, если не включена соотв. настройка
				
				Если СтрЗаменить(Строка(ТекСертификат.Отпечаток)," ","") = ТекСтрока.Thumbprint Тогда                     
					
					НоваяСтрока = Сертификаты.Добавить();
					НоваяСтрока.Сертификат = ТекСертификат;
					O = "";
					CN = "";
					НоваяСтрока.СертификатO = "";
					
					Если ТекСертификат.Субъект.Свойство("O", O) Тогда
						НоваяСтрока.СертификатO = O;
					КонецЕсли;	
					
					Если ТекСертификат.Субъект.Свойство("CN", CN) Тогда
						НоваяСтрока.СертификатO = ?(НоваяСтрока.СертификатO = "", CN, НоваяСтрока.СертификатO + Символы.ВК + Символы.ПС + CN);
					КонецЕсли;	
					
					НоваяСтрока.СертификатO = НоваяСтрока.СертификатO + Символы.ВК + Символы.ПС + "Действителен по " + Формат(ТекСертификат.ДатаОкончания, "ДФ=dd.MM.yyyy");
					НоваяСтрока.Отпечаток = Строка(ТекСертификат.Отпечаток);
					
					Если ЗначениеЗаполнено(ТекСтрока.CloudAbonentId) Тогда
						НоваяСтрока.ОблачныйИД = ТекСтрока.CloudAbonentId;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Сертификаты.Сортировать("СертификатO");
	
КонецПроцедуры

Функция ПроверитьОбновление()
	
	Попытка
		ТекущаяВерсия		= ЭтотОбъект.Метаданные().Комментарий;	
		ТекВерМассив 		= СтрРазделить2(ТекущаяВерсия, ".", Ложь);
		 						
		Шаблон 	= "http://s1c.synerdocs.ru/s1c.ashx?rn1=%1&rn2=%2&rn3=%3&rn4=%4";
		Шаблон = СтрЗаменить(Шаблон, "%1", ТекВерМассив[0]);
		Шаблон = СтрЗаменить(Шаблон, "%2", ТекВерМассив[1]);
		Шаблон = СтрЗаменить(Шаблон, "%3", ТекВерМассив[2]);
		Шаблон = СтрЗаменить(Шаблон, "%4", ТекВерМассив[3]);
		
		ИмяФайлаИсточника = Шаблон;
		ИмяФайлаПриемника = КаталогВременныхФайлов() + "1cver.xml";
		КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
		
		ПостроительДОМ = Новый ПостроительDOM;
		ЧтениеXML = Новый ЧтениеXML;
					
		ЧтениеXML.ОткрытьФайл(ИмяФайлаПриемника);
		ДокументДОМ = ПостроительДОМ.Прочитать(ЧтениеXML);
		ЧтениеXML.Закрыть();	
		РазыменовательПИ = ДокументДОМ.СоздатьРазыменовательПИ(ДокументДОМ);	
		ЗапросДОМ = "/Versions/Release";
		ХПуть = ДокументДОМ.СоздатьВыражениеXPath(ЗапросДОМ,РазыменовательПИ);
		Результат = ХПуть.Вычислить(ДокументДОМ);
		ВерсииДОМ = Результат.ПолучитьСледующий();
		
		Если ВерсииДОМ <> Неопределено Тогда
			Релиз = ВерсииДОМ.Атрибуты.ПолучитьИменованныйЭлемент("Version").Значение;
			Если Не Релиз = ТекущаяВерсия Тогда
				Баги = СтрРазделить2(ВерсииДОМ.Атрибуты.ПолучитьИменованныйЭлемент("ExBugs").Значение, ";", Ложь);
				Фичи = СтрРазделить2(ВерсииДОМ.Атрибуты.ПолучитьИменованныйЭлемент("News").Значение, ";", Ложь);	
				
				Если Баги.Количество() = 0 И Фичи.Количество() = 0 Тогда
					Возврат Неопределено;					
				Иначе
					// TODO: Конструктор
					СтруктураВерсии = Новый Структура;
					СтруктураВерсии.Вставить("Релиз", Релиз);
					СтруктураВерсии.Вставить("Ссылка", ВерсииДОМ.Атрибуты.ПолучитьИменованныйЭлемент("Link").Значение);
					СтруктураВерсии.Вставить("Дата", ВерсииДОМ.Атрибуты.ПолучитьИменованныйЭлемент("Date").Значение);
					СтруктураВерсии.Вставить("Баги", Баги);
					СтруктураВерсии.Вставить("Фичи", Фичи);
				КонецЕсли;
				
				Возврат СтруктураВерсии;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
		
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ОтправитьУведомлениеПользователю("Не удалось получить информацию об обновлении: " + ОписаниеОшибкиСтрокой);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// ========================
// Действия элементов формы
// ========================

// Запуск браузера и переход на сайт Synerdocs.ru в раздел Регистрация
Процедура НадписьРегНажатие(Элемент)
	
	ЗапуститьПриложение("https://client.synerdocs.ru/Account/Register");
	
КонецПроцедуры

Процедура КоманднаяПанель1Настройка(Кнопка)

	ПолучитьФорму("Форма_Настройка").ОткрытьМодально();
	
КонецПроцедуры

// =========================
// Обработчики авторизации
// =========================

Процедура СертификатыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Авторизация.Вход,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_Аутентификация.ТекущаяСтраница
	);
	
	Авторизация(Истина, ВыбраннаяСтрока.Сертификат);
	
КонецПроцедуры

Процедура Войти_ПоСертификатуНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Авторизация.Вход,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_Аутентификация.ТекущаяСтраница
	);

	Если НЕ Сертификаты.Количество() = 0 Тогда	
		Авторизация(Истина, ЭлементыФормы.Сертификаты.ТекущаяСтрока.Сертификат);
	Иначе
		Сообщить("Нет доступных сертификатов для авторизации");
	КонецЕсли;
	
КонецПроцедуры

Процедура Войти_ПоПаролюНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Авторизация.Вход,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_Аутентификация.ТекущаяСтраница
	);
    	
	Авторизация(Ложь, , ЛогинПользователя, ПарольПользователя);
	
КонецПроцедуры

// =========================
// Аутентификация
// =========================

// Процедура авторизации
//
// Параметры 
//  ПоСертификату	- Булево	- Вариант аутентификации. Истина если по сертификату, ложь - если по логину/паролю
//  Сертификат		- Структура	- Выбранный сертификат
//  Логин			- Строка	- Логин пользователя
//  Пароль			- Строка	- Пароль пользователя
//
Процедура Авторизация(ПоСертификату, ВыбранныйСертификат = Неопределено, Логин = Неопределено, Пароль = Неопределено)
	
	// TODO: Переработать лапшу. Разделить на нормальные логические области.
	
	Сертификат = ВыбранныйСертификат;
	УстановитьТекущийСертфикат(Сертификат);
	
	Если НЕ ЭлементыФормы.Сертификаты.ТекущаяСтрока = Неопределено И ПоСертификату Тогда
    	ОблачнаяЭП = ЗначениеЗаполнено(ЭлементыФормы.Сертификаты.ТекущаяСтрока.ОблачныйИД);	
	Иначе
		ОблачнаяЭП = ЛожЬ;
	КонецЕсли;
			
	Если ОблачнаяЭП Тогда
		
		Режим = РежимДиалогаВопрос.ОКОтмена;
		Текст = "Для выполнения операции необходимо авторизоваться в облачном сервисе. Получить код авторизации?";
		Ответ = Вопрос(Текст, Режим, 0);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Телеметрия.ОтправитьАналитику(
				СобытияТелеметрии.Криптография.Отмена,
				ЭтаФорма
			);
			
			Токен = Неопределено;
			
		Иначе
			
			ВыбЗнач = "";
			Массив = Новый Массив;
			Массив.Добавить(Тип("Строка"));
			КС = Новый КвалификаторыСтроки(0);
			
			ОписаниеТипов = Новый ОписаниеТипов(Массив, КС);
			
			КА_Идентификатор = ЭлементыФормы.Сертификаты.ТекущаяСтрока.ОблачныйИД;
			Если Не КА_ЗапроситьПароль(КА_Идентификатор) Тогда
				Возврат;
			КонецЕсли;
			
			Если ВвестиЗначение(ВыбЗнач, "Введите код авторизации:", ОписаниеТипов) Тогда
				
				Телеметрия.ОтправитьАналитику(
					СобытияТелеметрии.Криптография.ПолучениеДоступа,
					ЭтаФорма
				);
				
				КА_Токен = КА_ПолучитьТокен(КА_Идентификатор, ВыбЗнач);
				Если КА_Токен = Неопределено Тогда
					
					Телеметрия.ОтправитьАналитику(
						СобытияТелеметрии.Криптография.Ошибка,
						ЭтаФорма
					);
					
					Предупреждение("Ошибка авторизации. Неверный код авторизации.");
					
				Иначе
					
					Токен = ПолучитьТокенПоСертификату(Сертификат);
					
				КонецЕсли;
				
			Иначе
				
				Телеметрия.ОтправитьАналитику(
					СобытияТелеметрии.Криптография.Отмена,
					ЭтаФорма
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
    Иначе
		
		Токен = ?(ПоСертификату, ПолучитьТокенПоСертификату(Сертификат), ПолучитьТокенПоЛогину(Логин, Пароль));
		
    КонецЕсли;
			
	Если Токен = 0 Тогда
		Предупреждение("Отмена авторизации. Выберите другой сертификат или введите логин и пароль");
		Возврат;
	ИначеЕсли  Токен = -1 Тогда
		Предупреждение("Ошибка проверки сертификата. Возможно, неверно указан пароль");
		Возврат;
	ИначеЕсли Токен = Неопределено Тогда
		Если ПоСертификату И НЕ ОблачнаяЭП Тогда
			Предупреждение("Ошибка авторизации. Выбранный сертификат не зарегистрирован в сервисе");
		ИначеЕсли ПоСертификату И ОблачнаяЭП Тогда
		//	Предупреждение("Ошибка авторизации. Неверный код авторизации.");
		Иначе
			Предупреждение("Ошибка авторизации. Проверьте правильность логина и пароля, после чего повторите авторизацию");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Сп 						= ПолучитьСтруктуруСоответствияОрганизацийЯщиков(Токен);
	СписокДоступныхЯщиков 	= Сп;
	
	Если Сп.Количество() = 1 Тогда
		Ящик = Сп[0].Ящик;
	ИначеЕсли Сп.Количество() > 1 Тогда
		ФормаВыбораЯщика = ПолучитьФорму("Форма_ВыборЯщика");
		ФормаВыбораЯщика.СписокЯщиков = Сп;
		Ящик = ФормаВыбораЯщика.ОткрытьМодально();
		Если Ящик = Неопределено Тогда
			Предупреждение("Организация не выбрана, работа с сервисом невозможна. Повторите авторизацию");
			Токен = Неопределено;
			Возврат;
		КонецЕсли;
	Иначе
		Предупреждение("Нет ящиков, доступных для работы. Настройте пользователя, используя веб-клиент.");
		Токен = Неопределено;
		Возврат;
	КонецЕсли;
		
	Syn_ЯщикОрганизации = Ящик.Address;
	Syn_IDОрганизации = Ящик.OrganizationId;
	
	// Поиск организации по ИНН и КПП
	// Если подходщих организаций несколько, то выбирается первая из них
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИНН = &ИНН
		|	И Организации.КПП = &КПП";
	Запрос.УстановитьПараметр("ИНН", ?(ЗначениеЗаполнено(Ящик.INN), Ящик.INN, ""));
	Запрос.УстановитьПараметр("КПП", ?(ЗначениеЗаполнено(Ящик.KPP), Ящик.KPP, ""));
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Организация = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Синхронизация.СозданиеОрганизации,
			ЭтаФорма
		);
		Если Вопрос("В текущей базе 1С нет такой организации. Создать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Если Не СоздатьОрганизацию(Ящик) Тогда
				Предупреждение("Работа с сервисом невозможна. Повторите авторизацию");
				Токен = Неопределено;
				Возврат;
			КонецЕсли;
		Иначе
			Телеметрия.ОтправитьАналитику(
				СобытияТелеметрии.Синхронизация.ОтменаСозданияОрганизации,
				ЭтаФорма
			);
			Предупреждение("Работа с сервисом невозможна. Повторите авторизацию");
			Токен = Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Закрыть(Токен);

КонецПроцедуры

Функция ПолучитьТокенПоСертификату(Серт)
	CN = "";
	Отпечаток = Серт.Отпечаток;
	СтрокаОтпечаток = СтрЗаменить(Строка(Отпечаток), " ", "");
	
	Попытка
		ЗашифрованныйТокен = ExchangeService.AuthenticateWithCertificate2(СтрокаОтпечаток, "6012A7CD-9C62-470D-BE5F-BAF378876A3B");
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		Сообщить(ТекстОшибкиSynerdocs);
	КонецПопытки;
	
	Возврат ?(ЗашифрованныйТокен = Неопределено, Неопределено, РасшифроватьТокен(ЗашифрованныйТокен));
КонецФункции

Функция ПолучитьТокенПоЛогину(Логин, Пароль)
	
	Попытка
		Токен = ExchangeService.Authenticate(Логин, Пароль, "6012A7CD-9C62-470D-BE5F-BAF378876A3B");
		Возврат Токен;
	Исключение
		
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		Сообщить(ТекстОшибкиSynerdocs);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция РасшифроватьДанные(ЗашифрованныеДанные, ВывестиСообщение = Истина)
	
	//: МенеджерКриптографии = Новый МенеджерКриптографии;
	
	Данные = Неопределено;
	ДанныеРасшифрованы = Ложь;
	
	Попытка
		Данные = МенеджерКриптографии.Расшифровать(ЗашифрованныеДанные);
		ДанныеРасшифрованы = Истина;
	Исключение
		ТекстИсключения = ОписаниеОшибки();
		ДанныеРасшифрованы = Ложь;
	КонецПопытки;
	
	Если НЕ ДанныеРасшифрованы Тогда
		Если ВывестиСообщение Тогда
			ТекстОшибки = РазобратьИсключениеSynerdocs(ТекстИсключения);
			Сообщить(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция РасшифроватьТокен(ЗашифрованныйТокен_ДвоичныеДанные)
	
	Если ОблачнаяЭП Тогда
		
		Токен_ДвоичныеДанные = КА_Расшифровать(КА_Токен, ЗашифрованныйТокен_ДвоичныеДанные);
		
	Иначе
		
		Токен_ДвоичныеДанные = РасшифроватьДанные(ЗашифрованныйТокен_ДвоичныеДанные, Ложь);
		
		ТокенПолучен = (Токен_ДвоичныеДанные <> Неопределено);
		
		Если НЕ ТокенПолучен Тогда
			
			Для КоличествоПопыток = 0 по 2 Цикл
				
				ФормаПароля = ПолучитьФорму("Форма_ВводПароля");
				ФормаПароля.НомерПопытки = КоличествоПопыток;
				Ответ = ФормаПароля.ОткрытьМодально();
				
				Если Ответ = Неопределено Тогда
					Возврат 0;
				КонецЕсли;
				
				ПарольЗК		= Ответ.Пароль;
				СохранитьПароль	= Ответ.СохранитьПароль;
					
				МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольЗК;
				Токен_ДвоичныеДанные = РасшифроватьДанные(ЗашифрованныйТокен_ДвоичныеДанные, Ложь);
				
				Если НЕ СохранитьПароль Тогда
					МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = "";
				КонецЕсли;
				
				ТокенПолучен = (Токен_ДвоичныеДанные <> Неопределено);
				Если ТокенПолучен Тогда
					Прервать;
				КонецЕсли;
					
				Телеметрия.ОтправитьАналитику(
					СобытияТелеметрии.Криптография.Ошибка,
					ЭтаФорма
				);
				
				Если КоличествоПопыток = 2 Тогда
					Возврат -1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Токен_ДвоичныеДанные <> Неопределено Тогда
		
		Токен = "";
		ТокенСтрока = Строка(Токен_ДвоичныеДанные);
		
		//TODO:
		// Написать изящнее
		Поз = 1;
		Пока Поз < СтрДлина(ТокенСтрока) Цикл
			// Получим HEX код символа
			КодСимвола16 = Сред(ТокенСтрока, Поз, 2);
			// Преобразуем HEX в DEC
			КодСимвола10 = Число16_10(КодСимвола16);
			// Добавим к строке Токен символ с полученным кодом
			Токен = Токен + Символ(КодСимвола10);
			// Сместим позицию на 3 символа (2 символа HEX кода + 1 символ пробел)
			Поз = Поз + 3;
		КонецЦикла;
	КонецЕсли;
	
	Результат = ?(Токен = "" Или Токен = Неопределено, Неопределено, Токен);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруСоответствияОрганизацийЯщиков(Токен)
	
	Соответствие = Новый Массив;
	СписокЯщиков = ExchangeService.GetBoxes(Токен).BoxInfo;
	СписокЯщиковСертификатов = ExchangeService.GetBoxCertificates(Токен).BoxCertificate;
	Для Поз = 0 По СписокЯщиков.Количество() - 1 Цикл
		СтруктураСоответствия = Новый Структура;
		СтруктураСоответствия.Вставить("Ящик", СписокЯщиков[Поз]);
		СтруктураСоответствия.Вставить("Отпечаток");
		Для Поз2 = 0 По СписокЯщиковСертификатов.Количество() - 1 Цикл
			Если СписокЯщиков[Поз].Address = СписокЯщиковСертификатов[Поз2].Address Тогда
				СтруктураСоответствия.Отпечаток = СписокЯщиковСертификатов[Поз2].Thumbprint;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Соответствие.Добавить(СтруктураСоответствия);
	КонецЦикла;
	Возврат Соответствие;
КонецФункции

Процедура ВерсияНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОбновлениеИР.Обновление,
		ЭтаФорма,
		Элемент
	);

	// TODO: Переработать лапшу.
	
	ПС = Символы.ПС;
	// TODO: ПроверкаОбновления - что это?
	Текст = 
		"Версия: " + ПроверкаОбновления.Релиз + "
		|Дата выхода: " + ПроверкаОбновления.Дата;
	Если ПроверкаОбновления.Фичи.Количество() > 0 Тогда
		Текст = Текст + ПС +
			ПС +
			"Новая функциональность:";
		Для Каждого ОписаниеФичи Из ПроверкаОбновления.Фичи Цикл
			Текст = Текст + ПС +
				" - " + ОписаниеФичи;
		КонецЦикла;
	КонецЕсли;
	Если ПроверкаОбновления.Баги.Количество() > 0 Тогда
		Текст = Текст + ПС +
			ПС +
			"Исправленные дефекты:";
		Для Каждого ОписаниеБага Из ПроверкаОбновления.Баги Цикл
			Текст = Текст + ПС +
				" - " + ОписаниеБага;
		КонецЦикла;
	КонецЕсли;
	Текст = Текст + ПС +
		ПС +
		"Скачать обновление? Ссылка откроется в новой вкладке браузера";
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос(Текст, Режим, 0, , "Описание обновления",);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗапуститьПриложение(ПутьОбновления);
	Иначе
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.ОбновлениеИР.Отмена,
			ЭтаФорма,
			Элемент
		);
	КонецЕсли;
		
КонецПроцедуры

Процедура СертификатыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// Подсветим облачные сертификаты
	Если ЗначениеЗаполнено(ДанныеСтроки.ОблачныйИД) Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Синий;		
	КонецЕсли;
				
КонецПроцедуры

Процедура КоманднаяПанель1О_Программе(Кнопка)

	Форма_ОПрограмме = ПолучитьФорму("Форма_ОПрограмме");
	Форма_ОПрограмме.ОткрытьМодально();

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	События = МенеджерНастроек.События();
	Если ИмяСобытия = События.НастройкиИзменились Тогда
		ЗаполнитьСписокСертификаторв();
	КонецЕсли;
	
КонецПроцедуры

ИнициализироватьФорму();

