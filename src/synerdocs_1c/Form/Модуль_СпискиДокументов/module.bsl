
//========================================================================
// Модуль для формирования списков документов
// 
//========================================================================

// Модули
Перем ОбъектнаяМодель, Сервис, ДанныеКонфигурации;

//========================================================================
// ИНИЦИАЛИЗАЦИЯ
//========================================================================

Процедура ПодключитьМодули()
	
	ОбъектнаяМодель		= Модуль("Модуль_ОбъектнаяМодель");
	Сервис				= Модуль("Модуль_Сервис");
	ДанныеКонфигурации	= Модуль("Модуль_ДанныеКонфигурации");
	
КонецПроцедуры

Процедура Инициализировать() Экспорт
	
	ПодключитьМодули();
	
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

//===================================
//{ Фильтрация

// Перечисления

Функция ТипыДокументов() Экспорт
	
	Типы = Новый Структура(
		"СФ,
		|ДПТ,
		|ДПРР,
		|Универсальные,
		|Неформализованные"
	);
	
	Типы.СФ					= 1;
	Типы.ДПТ				= 2;
	Типы.ДПРР				= 3;
	Типы.Универсальные		= 4;
	Типы.Неформализованные	= 5;
	
	Представление = Новый Соответствие;
	Представление[Типы.СФ]					= НСтр("ru = 'Счета-фактуры'");
	Представление[Типы.ДПТ]					= НСтр("ru = 'Документы передачи товаров'");
	Представление[Типы.ДПРР]				= НСтр("ru = 'Документы передачи результатов работ'");
	Представление[Типы.Универсальные]		= НСтр("ru = 'Универсальные документы'");
	Представление[Типы.Неформализованные]	= НСтр("ru = 'Неформализованные документы'");
	
	Типы = Новый_Перечисление(Типы, Представление);
	
	Возврат Типы;
	
КонецФункции

Функция СтатусыДокументов() Экспорт
	
	Статусы = Новый Структура(
		"ТребуетсяПодпись,
		|Подписан,
		|ОтказаноВПодписании"
	);
	
	Статусы.ТребуетсяПодпись	= 1;
	Статусы.Подписан			= 2;
	Статусы.ОтказаноВПодписании	= 3;
	
	Представление = Новый Соответствие;
	Представление[Статусы.ТребуетсяПодпись]		= НСтр("ru = 'Требуется подпись'");
	Представление[Статусы.Подписан]				= НСтр("ru = 'Подписан'");
	Представление[Статусы.ОтказаноВПодписании]	= НСтр("ru = 'Отказано в подписании'");
	
	Статусы = Новый_Перечисление(Статусы, Представление);
	
	Возврат Статусы;
	
КонецФункции

// Объекты

Функция Новый_НастройкиОтбора() Экспорт
	
	НастройкиОтбора = Новый Структура(
		"РазмерСтраницы,
		|НачалоПериода,
		|КонецПериода,
		|ТипДокумента,
		|СтатусДокумента,
		|Контрагент"
	);
	
	НастройкиОтбора.РазмерСтраницы	= 0;
	
	НастройкиОтбора.НачалоПериода	= ПустаяДата();
	НастройкиОтбора.КонецПериода	= ПустаяДата();
	
	НастройкиОтбора.ТипДокумента	= Неопределено; //: ТипыДокументов();
	НастройкиОтбора.СтатусДокумента	= Неопределено; //: СтатусыДокументов();
	
	НастройкиОтбора.Контрагент		= ""; // Ящик организации
	
	Возврат НастройкиОтбора;
	
КонецФункции

// Методы

Функция НастройкиОтбораПоУмолчанию() Экспорт
	
	НастройкиОтбора = Новый_НастройкиОтбора();
	
	НастройкиОтбора.РазмерСтраницы = 25;
	
	Возврат НастройкиОтбора;
	
КонецФункции

//}

Функция СписокВходящихДокументов(НомерСтраницы, НастройкиОтбора) Экспорт
	
	Паджинация	= ПараметрыПаджинации(НомерСтраницы, НастройкиОтбора.РазмерСтраницы);
	Фильтр		= ФильтрСпискаДокументов(НастройкиОтбора);
	
	Результат = Сервис.ПолучитьСписокДокументов(Истина, Паджинация.ПервыйДокумент, Паджинация.ВсегоДокументов, Фильтр);
	
	Возврат Результат;
	
КонецФункции

Функция СписокИсходящихДокументов(НомерСтраницы, НастройкиОтбора) Экспорт
	
	Паджинация	= ПараметрыПаджинации(НомерСтраницы, НастройкиОтбора.РазмерСтраницы);
	Фильтр		= ФильтрСпискаДокументов(НастройкиОтбора);
	
	Результат = Сервис.ПолучитьСписокДокументов(Ложь, Паджинация.ПервыйДокумент, Паджинация.ВсегоДокументов, Фильтр);
	
	Возврат Результат;
	
КонецФункции

Функция СписокДокументовДляОтправки(НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	Контрагенты = ДоступныеКонтрагенты();
	Результат = ДанныеКонфигурации.ПолучитьСписокДокументовДляОтправки(Контрагенты, НачалоПериода, КонецПериода); //: Результат = Новый ТаблицаЗначений;
	
	Результат.Сортировать("Дата Убыв, Ссылка Убыв");
	
	Возврат Результат;
	
КонецФункции

Функция ЯщикКонтрагента(Ссылка) Экспорт
	
	Ящик = Неопределено;
	
	Контрагент = Контрагенты_Авторизованные.Найти(Ссылка, "Контрагент");
	Если Контрагент <> Неопределено Тогда
		Ящик = Контрагент.Ящик;
	КонецЕсли;
	
	Возврат Ящик;
	
КонецФункции

//========================================================================
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================

//===================================
//{ Паджинация

Функция Новый_ПараметрыПаджинации()
	
	Паджинация = Новый Структура(
		"ПервыйДокумент, ВсегоДокументов"
	);
	
	Возврат Паджинация;
	
КонецФункции

Функция ПараметрыПаджинации(НомерСтраницы, РазмерПорции)
	
	Паджинация = Новый_ПараметрыПаджинации();
	
	ПервыйДокумент = (НомерСтраницы - 1) * РазмерПорции;
	
	Паджинация.ПервыйДокумент = ПервыйДокумент;
	Паджинация.ВсегоДокументов = РазмерПорции;
	
	Паджинация = Новый ФиксированнаяСтруктура(Паджинация);
	
	Возврат Паджинация;
	
КонецФункции

//}

//===================================
//{ Фильтрация

Функция ФильтрСпискаДокументов(НастройкиОтбора)
	
	Фильтр = Сервис.Новый_ФильтрСпискаДокументов();
	
	Если ЗначениеЗаполнено(НастройкиОтбора.НачалоПериода) Тогда
		Фильтр.НачалоПериода = НастройкиОтбора.НачалоПериода;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиОтбора.КонецПериода) Тогда
		Фильтр.КонецПериода = НастройкиОтбора.КонецПериода;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиОтбора.СтатусДокумента) Тогда
		
		СтатусыДокумента = СтатусыДокументов();
		СтатусыПодписания = Сервис.СтатусыПодписанияДокумента();
		СтатусыСФ = Сервис.СтатусыСФ();
		
		СтатусДокумента = НастройкиОтбора.СтатусДокумента;
		Если СтатусДокумента = СтатусыДокумента.ТребуетсяПодпись Тогда
			Фильтр.СтатусыСФ.Добавить(СтатусыСФ.Отправлен);
			Фильтр.СтатусыПодписания.Добавить(СтатусыПодписания.ТребуетсяПодпись);
		ИначеЕсли СтатусДокумента = СтатусыДокумента.Подписан Тогда
			Фильтр.СтатусыСФ.Добавить(СтатусыСФ.Выставлен);
			Фильтр.СтатусыПодписания.Добавить(СтатусыПодписания.Подписан);
		ИначеЕсли СтатусДокумента = СтатусыДокумента.ОтказаноВПодписании Тогда
			Фильтр.СтатусыСФ.Добавить(СтатусыСФ.ЗапрошеноУточнение);
			Фильтр.СтатусыПодписания.Добавить(СтатусыПодписания.Отказано);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиОтбора.ТипДокумента) Тогда
		
		ПользовательскиеТипыДокументов = ТипыДокументов();
		ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
		
		ТипДокумента = НастройкиОтбора.ТипДокумента;
		Если ТипДокумента = ПользовательскиеТипыДокументов.СФ Тогда
			Фильтр.ТипыДокументов = ЗначенияВМассиве(
				ТипыДокумента.СФ,
				ТипыДокумента.ИСФ,
				ТипыДокумента.КСФ,
				ТипыДокумента.ИКСФ
			);
		ИначеЕсли ТипДокумента = ПользовательскиеТипыДокументов.ДПТ Тогда
			Фильтр.ТипыДокументов = ЗначенияВМассиве(
				ТипыДокумента.ТитулПродавцаТОРГ12,
				ТипыДокумента.ТитулПродавцаДПТ,
				ТипыДокумента.ИсправленныйТитулПродавцаДПТ
			);
		ИначеЕсли ТипДокумента = ПользовательскиеТипыДокументов.ДПРР Тогда
			Фильтр.ТипыДокументов = ЗначенияВМассиве(
				ТипыДокумента.ТитулИсполнителяАкт,
				ТипыДокумента.ТитулИсполнителяДПРР,
				ТипыДокумента.ИсправленныйТитулИсполнителяДПРР
			);
		ИначеЕсли ТипДокумента = ПользовательскиеТипыДокументов.Универсальные Тогда
			Фильтр.ТипыДокументов = ЗначенияВМассиве(
				ТипыДокумента.ТитулПродавцаУПД,
				ТипыДокумента.ИсправленныйТитулПродавцаУПД,
				ТипыДокумента.ТитулПокупателяУКД,
				ТипыДокумента.ИсправленныйТитулПродавцаУКД
			);
		ИначеЕсли ТипДокумента = ПользовательскиеТипыДокументов.Неформализованные Тогда
			Фильтр.ТипыДокументов = ЗначенияВМассиве(
				ТипыДокумента.Неформализованный
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиОтбора.Контрагент) Тогда
		Фильтр.Контрагенты.Добавить(НастройкиОтбора.Контрагент);
	КонецЕсли;
	
	Возврат Фильтр;
	
КонецФункции

//}

Функция ДоступныеКонтрагенты()
	
	Результат = Новый Массив;
	Для Каждого СтрокаТЧ Из Контрагенты_Авторизованные Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Контрагент) Тогда
			Результат.Добавить(СтрокаТЧ.Контрагент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

