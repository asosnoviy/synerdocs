
//========================================================================
// Модуль, содержащий операции, которые можно выполнить с документами:
//  - подписание;
//  - отправка.
//========================================================================

// Модули
Перем Криптография, ОбъектнаяМодель, Сервис, ДанныеКонфигурации, МенеджерНастроек;
Перем СпискиДокументов, ФормированиеДокументов;

// Дополнительные параметры, которые не передаются в формы выбора,
// но нужны для продолжения выполнения операции.
Перем ДополнительныеПараметры;

//========================================================================
// ИНИЦИАЛИЗАЦИЯ
//========================================================================

Процедура ПодключитьМодули()
	
	Криптография			= Модуль("Модуль_Криптография");
	ОбъектнаяМодель			= Модуль("Модуль_ОбъектнаяМодель");
	Сервис					= Модуль("Модуль_Сервис");
	ДанныеКонфигурации		= Модуль("Модуль_ДанныеКонфигурации");
	МенеджерНастроек		= Модуль("Модуль_МенеджерНастроек");
	СпискиДокументов		= Модуль("Модуль_СпискиДокументов");
	ФормированиеДокументов	= Модуль("Модуль_ФормированиеДокументов");
	
КонецПроцедуры

Процедура Инициализировать() Экспорт
	
	ПодключитьМодули();
	
	ДополнительныеПараметры = Новый Соответствие;
	
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

Функция События() Экспорт
	
	События = Новый Структура(
		"ДокументПодписан,
		|ДокументыОтправлены,
		|
		|РазорванаСвязь"
	);
	
	Для Каждого Событие Из События Цикл
		События[Событие.Ключ] = "Syn_" + Событие.Ключ;
	КонецЦикла;
	
	События = Новый ФиксированнаяСтруктура(События);
	Возврат События;
	
КонецФункции

// Подписывает входящий документ.
// В том числе формирует ответный титул покупателя и подписывает его.
// При успешном завершении высылает событие События().ДокументПодписан
// с идентификатором подписываемого документа.
//
// Параметры:
//  ИД	 - Строка - идентификатор подписываемого документа (титула продавца).
//
Процедура Подписать(ИД) Экспорт
	
	Подписать_Начало(ИД);
	
КонецПроцедуры

Процедура ОтправитьДокументы(МассивДокументов) Экспорт
	
	Если НЕ ОтправкаВозможна() Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументов = Новый_СписокДокументов(); //: СписокДокументов = Новый ТаблицаЗначений;
	
	Для Каждого Ссылка Из МассивДокументов Цикл
		
		Документ = ДанныеКонфигурации.ИнформацияОДокументе(Ссылка); //: Документ = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		
		НоваяСтрока = СписокДокументов.Добавить();
		НоваяСтрока.Ссылка		= Ссылка;
		НоваяСтрока.Получатель	= СпискиДокументов.ЯщикКонтрагента(Документ.Контрагент);
		
	КонецЦикла;
	
	СписокНаСериализацию = ФормированиеДокументов.Новый_СписокДокументовДляСериализации(); //: СписокНаСериализацию = Новый ТаблицаЗначений;
	Для Каждого Документ Из СписокДокументов Цикл
		НоваяСтрока = СписокНаСериализацию.Добавить();
		НоваяСтрока.Ссылка = Документ.Ссылка;
	КонецЦикла;
	
	СериализованныеДокументы = ФормированиеДокументов.СформироватьДокументы(СписокНаСериализацию); //: СериализованныеДокументы = Новый Массив;
	
	Сч = СериализованныеДокументы.Количество();
	Пока Сч > 0 Цикл
		
		Сч = Сч - 1;
		Документ = СериализованныеДокументы[Сч];
		
		Если Документ.РезультатСериализации.ЕстьОшибки Тогда
			СериализованныеДокументы.Удалить(Сч);
		КонецЕсли;
		
	КонецЦикла;
	
	Отправить(СписокДокументов, СериализованныеДокументы);
	
КонецПроцедуры

Процедура ОтправитьПакетДокументов(Пакет, Получатели, ОтредактированныеДокументы) Экспорт
	
	Если НЕ ОтправкаВозможна() Тогда
		Возврат;
	КонецЕсли;
	
	СписокНаСериализацию = ФормированиеДокументов.Новый_СписокДокументовДляСериализации(); //: СписокНаСериализацию = Новый ТаблицаЗначений;
	ЗаполнитьТаблицу(СписокНаСериализацию, Пакет.Отправляемые, "Ссылка, Фактор");
	
	СериализованныеДокументы = ФормированиеДокументов.СформироватьДокументы(СписокНаСериализацию, ОтредактированныеДокументы);
	
	ЕстьОшибки = Ложь;
	Для Каждого Документ Из СериализованныеДокументы Цикл
		ЕстьОшибки = Документ.РезультатСериализации.ЕстьОшибки;
		Если ЕстьОшибки Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьПакет(Пакет, Получатели, СериализованныеДокументы);
	
КонецПроцедуры

Процедура РазорватьСвязьСДокументами(ИдДокументов) Экспорт
	
	Для Каждого ИдДокумента Из ИдДокументов Цикл
		ДанныеКонфигурации.УдалитьИдентитфикаторДокумента(ИдДокумента);
	КонецЦикла;
	
	Оповестить(События().РазорванаСвязь, ИдДокументов);
	
КонецПроцедуры

Процедура РазорватьСвязьСДокументом(ИдДокумента) Экспорт
	
	РазорватьСвязьСДокументами(ЗначениеВМассиве(ИдДокумента));
	
КонецПроцедуры

//========================================================================
// ОБЪЕКТНАЯ МОДЕЛЬ
//========================================================================

Функция Действия()
	
	Действия = Новый Структура(
		"Подписание,
		|
		|Отправка,
		|ВыборФункцииДокумента"
	);
	
	Для Каждого Действие Из Действия Цикл
		Действия[Действие.Ключ] = Действие.Ключ;
	КонецЦикла;
	
	Действия = Новый_Перечисление(Действия);
	
	Возврат Действия;
	
КонецФункции

Функция ПараметрыПодписания()
	
	Параметры = Новый Структура(
		"Действие,
		|ИД, ТипДокумента, Получатель"
	);
	
	Параметры.Действие = Действия().Подписание;
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыОтправкиПакета()
	
	Параметры = Новый Структура(
		"Пакет,
		|Получатели"
	);
	
	Параметры.Пакет = Новый_ПакетДокументов();
	Параметры.Получатели = Новый Массив; //: Строка (Ящик)
	
	Возврат Параметры;
	
КонецФункции


Функция Новый_ПакетДокументов() Экспорт
	
	Пакет = Новый Структура(
		"Отправляемые,
		|Пересылаемые,
		|Загруженные"
	);
	
	Пакет.Отправляемые	= Новый_ОтправляемыеДокументы();
	Пакет.Пересылаемые	= Новый_ПересылаемыеДокументы();
	Пакет.Загруженные	= Новый_ЗагруженныеДокументы();
	
	Возврат Пакет;
	
КонецФункции

Функция Новый_ОтправляемыеДокументы()
	
	СписокДокументов = Новый ТаблицаЗначений;
	
	ТипВсеДокументы = Документы.ТипВсеСсылки();
	ТипФактор = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ТипБулево = ОписаниеТипаБулево();
	
	Колонки = СписокДокументов.Колонки;
	Колонки.Добавить("Ссылка",    ТипВсеДокументы);
	Колонки.Добавить("Фактор",    ТипФактор);
	
	Возврат СписокДокументов;
	
КонецФункции

Функция Новый_ПересылаемыеДокументы()
	
	СписокДокументов = Новый ТаблицаЗначений;
	
	ТипИД = ОписаниеТипаСтрока();
	ТипБулево = ОписаниеТипаБулево();
	
	Колонки = СписокДокументов.Колонки;
	Колонки.Добавить("ИД",                ТипИД);
	Колонки.Добавить("ЗапроситьПодпись",  ТипБулево);
	
	Возврат СписокДокументов;
	
КонецФункции

Функция Новый_ЗагруженныеДокументы()
	
	СписокДокументов = Новый ТаблицаЗначений;
	
	ТипИмяФайла = ОписаниеТипаСтрока();
	ТипБулево = ОписаниеТипаБулево();
	
	Колонки = СписокДокументов.Колонки;
	Колонки.Добавить("ИмяФайла", ТипИмяФайла);
	Колонки.Добавить("ЗапроситьПодпись", ТипБулево);
	Колонки.Добавить("ТипДокумента");
	
	Возврат СписокДокументов;
	
КонецФункции


Функция Новый_СписокДокументов()
	
	Стек = Новый ТаблицаЗначений;
	
	ТипВсеДокументы = Документы.ТипВсеСсылки();
	ТипПолучатель = ОписаниеТипаСтрока();
	
	Колонки = Стек.Колонки;
	Колонки.Добавить("Ссылка",        ТипВсеДокументы);
	Колонки.Добавить("Получатель",    ТипПолучатель);
	
	Возврат Стек;
	
КонецФункции

//========================================================================
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================

//===================================
//{ Подписание

Процедура Подписать_Начало(ИД)
	
	ИДФормы = Новый УникальныйИдентификатор(ИД);
	ФормаТитула = ПолучитьФорму("Форма_ЗаполнениеТитулаПокупателя", ЭтаФорма, ИДФормы);
	
	Если ФормаТитула.Открыта() Тогда
		ФормаТитула.Активизировать();
		Возврат;
	КонецЕсли;
	
	// TODO: Вынести получение информации в модуль сервиса
	// TODO: Получать данные для подписи из списка документов?
	RequestParams = Сервис.Новый_ОбъектСервиса(Сервис.КлассыСервиса().FullDocumentInfoRequestParams);
	RequestParams.GetCard = Ложь;
	RequestParams.GetContent = Ложь;
	RequestParams.GetRelatedDocuments = Ложь;
	RequestParams.GetRevocationOffers = Ложь;
	RequestParams.GetServiceDocuments = Ложь;
	RequestParams.GetSigns = Ложь;
	
	Service = ExchangeService();
	FullDocumentInfo = Service.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, ИД, RequestParams);
	
	ТипДокумента = ОбъектнаяМодель.ТипТитулаПокупателя(FullDocumentInfo.Document.DocumentTypeEnum.Code);
	Получатель = FullDocumentInfo.From;
	
	Если ТипДокумента = Неопределено Тогда
		ВызватьИсключение "Не реализовано";
	КонецЕсли;
	
	Параметры = ФормаТитула.Параметры();
	Параметры.ТипДокумента	= ТипДокумента;
	Параметры.ИД			= ИД;
	
	ФормаТитула.УстановитьПараметры(Параметры);
	
	ФормаТитула.Открыть();
	
	ПараметрыПодписания = ПараметрыПодписания();
	ПараметрыПодписания.ИД				= ИД;
	ПараметрыПодписания.ТипДокумента	= ТипДокумента;
	ПараметрыПодписания.Получатель		= Получатель;
	
	ДополнительныеПараметры[ИДФормы] = ПараметрыПодписания;
	
КонецПроцедуры

Процедура Подписать_Продолжение(СодержимоеДокумента, ПараметрыПодписания)
	
	Сообщение = Сервис.Новый_Сообщение();
	Сообщение.Получатели.Добавить(ПараметрыПодписания.Получатель);
	
	Документ = Сервис.Новый_Документ();
	Документ.РодительскийДокумент	= ПараметрыПодписания.ИД;
	Документ.ТипДокумента			= ПараметрыПодписания.ТипДокумента;
	Документ.ИмяФайла				= СодержимоеДокумента.Имя;
	Документ.Содержимое				= СодержимоеДокумента.Содержимое;
	
	Подпись = Сервис.Новый_Подпись();
	Подпись.ИДДокумента	= Документ.ИД;
	Подпись.Содержимое	= СформироватьЭЦПДокумента(, СодержимоеДокумента.Содержимое);
	
	Сообщение.Документы.Добавить(Документ);
	Сообщение.Подписи.Добавить(Подпись);
	
	Сервис.ОтправитьСообщение(Сообщение);
	
	Оповестить(События().ДокументПодписан, ПараметрыПодписания.ИД);
	
КонецПроцедуры

//}

Функция ОтправкаВозможна()
	
	Результат = Истина;
	
	Настройки = МенеджерНастроек.НастройкиИР();
	Если НЕ МенеджерНастроек.ПодписантЗаполнен(Настройки) Тогда
		
		Результат = Ложь;
		
		ТекстСообщения = НСтр("ru = 'Не настроено заполнение полей подписанта.
                               |Пожалуйста зайдите в настройки и заполните их.'");
		Предупреждение(ТекстСообщения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НуженРодительскийДокумент(ТипДокумента)
	
	ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
	
	Результат = Ложь
		ИЛИ ОбъектнаяМодель.ЭтоТитулПродавцаУКД(ТипДокумента)
		ИЛИ ТипДокумента = ТипыДокумента.ИсправленныйТитулПродавцаУПД;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРодительскийДокумент(ТипДокумента, Ссылка)
	
	Если НЕ НуженРодительскийДокумент(ТипДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИнформацияОДокументе = ДанныеКонфигурации.ПолнаяИнформацияОДокументе(Ссылка);
	РодительскийДокумент = ИнформацияОДокументе.РодительскийДокумент;
	
	Возврат РодительскийДокумент;
	
КонецФункции

Функция ОтправкаДокументаВозможна(Ссылка, РодительскийДокумент, ОтправляемыеДокументы)
	
	Если РодительскийДокумент = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = Ложь
		ИЛИ РодительскийДокумент.Отправлен
		ИЛИ ОтправляемыеДокументы[РодительскийДокумент.Ссылка] <> Неопределено;
		
	Если НЕ Результат Тогда
		ТекстСообщения = НСтр("ru = 'Отправка документа [%1] невозможна: Сначала необходимо отправить исходный документ [%2].'");
		ТекстСообщения = СтрШаблон2(ТекстСообщения, Ссылка, РодительскийДокумент.Ссылка);
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьСериализованныеДокументыВСообщение(Сообщение, СериализованныеДокументы)
	
	ДобавленныеДокументы = Новый Соответствие;
	
	// Заранее генерируются идентификаторы, чтобы можно было указать еще не отправленные документы
	// в качестве родительских
	Для Каждого Сериализация Из СериализованныеДокументы Цикл
		ИдДокумента = Новый УникальныйИдентификатор;
		Для Каждого Ссылка Из Сериализация.Ссылки Цикл
			ДобавленныеДокументы[Ссылка] = ИдДокумента;
		КонецЦикла;
	КонецЦикла;
	
	ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
	
	Для Каждого Сериализация Из СериализованныеДокументы Цикл
		
		ТипДокумента = Сериализация.ТипДокумента;
		ВидДокумента = Сериализация.ВидДокумента;
		
		РезультатСериализации = Сериализация.РезультатСериализации;
		
		Ссылка = Сериализация.Ссылки[0];
		
		РодительскийДокумент = ПолучитьРодительскийДокумент(ТипДокумента, Ссылка);
		
		Если НЕ ОтправкаДокументаВозможна(Ссылка, РодительскийДокумент, ДобавленныеДокументы) Тогда
			Продолжить;
		КонецЕсли;
		
		Документ = Сервис.Новый_Документ();
		Документ.ИД				= ДобавленныеДокументы[Ссылка];
		Документ.ТипДокумента	= ТипДокумента;
		
		Документ.ТребуетсяПодписание = ТребуетсяПодписание(ТипДокумента, ВидДокумента);
		
		Документ.ИмяФайла	= РезультатСериализации.Документ.Имя;
		Документ.Содержимое	= РезультатСериализации.Документ.Содержимое;
		
		Документ.Карточка	= РезультатСериализации.Карточка;
		
		Если ТипДокумента = ТипыДокумента.Неформализованный Тогда
			Документ.ВидДокумента = ВидДокумента;
		КонецЕсли;
		
		Если РодительскийДокумент <> Неопределено Тогда
			Документ.РодительскийДокумент = ?(РодительскийДокумент.Отправлен,
				РодительскийДокумент.ИД,
				ДобавленныеДокументы[РодительскийДокумент.Ссылка]
			);
		КонецЕсли;
		
		Сообщение.Документы.Добавить(Документ);
		
	КонецЦикла;
	
	Возврат ДобавленныеДокументы;
	
КонецФункции

Процедура Отправить(СписокДокументов, СериализованныеДокументы)
	
	//: СписокДокументов = Новый ТаблицаЗначений;
	
	Для Каждого Сериализация Из СериализованныеДокументы Цикл
		
		РезультатСериализации = Сериализация.РезультатСериализации;
		
		ДокументИзСписка = Неопределено;
		Для Каждого Ссылка Из Сериализация.Ссылки Цикл
			ДокументИзСписка = СписокДокументов.Найти(Ссылка, "Ссылка");
			Если ДокументИзСписка <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Сообщение = Сервис.Новый_Сообщение();
		Сообщение.Получатели.Добавить(ДокументИзСписка.Получатель);
		
		ОтправляемыеДокументы = ДобавитьСериализованныеДокументыВСообщение(Сообщение, ЗначениеВМассиве(Сериализация));
		
		Если Сообщение.Документы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПодписатьДокументыВСообщении(Сообщение);
		
		ИдОтправленныхДокументов = Сервис.ОтправитьСообщение(Сообщение);
	
		ПометитьОтправленныеДокументы(ОтправляемыеДокументы, ИдОтправленныхДокументов);
		
	КонецЦикла;
	
	Оповестить(События().ДокументыОтправлены);
	
КонецПроцедуры

Процедура ОтправитьПакет(Пакет, Получатели, СериализованныеДокументы)
		
	Сообщение = Сервис.Новый_Сообщение();
	Для Каждого Получатель Из Получатели Цикл
		Сообщение.Получатели.Добавить(Получатель);
	КонецЦикла;
	
	ОтправляемыеДокументы = ДобавитьСериализованныеДокументыВСообщение(Сообщение, СериализованныеДокументы);
	
	НеВсеДокументыДобавлены = (Сообщение.Документы.Количество() < СериализованныеДокументы.Количество());
	Если НеВсеДокументыДобавлены Тогда
		Возврат;
	КонецЕсли;
	
	ПересылаемыеДокументы = Пакет.Пересылаемые;
	Для Каждого Документ Из ПересылаемыеДокументы Цикл
		
		ПересылаемыйДокумент = Сервис.Новый_ПересылаемыйДокумент();
		ПересылаемыйДокумент.ИД						= Документ.ИД;
		ПересылаемыйДокумент.ТребуетсяПодписание	= Документ.ЗапроситьПодпись;
		
		Сообщение.ПересылаемыеДокументы.Добавить(ПересылаемыйДокумент);
		
	КонецЦикла;
	
	ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
	
	Файлы = Пакет.Загруженные;
	Для Каждого Файл Из Файлы Цикл
		
		ИмяФайла		= ИмяФайла(Файл.ИмяФайла);
		СодержимоеФайла	= Новый ДвоичныеДанные(Файл.ИмяФайла);
		
		Документ = Сервис.Новый_Документ();
		Документ.ТипДокумента			= ТипыДокумента.Неформализованный;
		Документ.ИмяФайла				= ИмяФайла;
		Документ.Содержимое				= СодержимоеФайла;
		Документ.ТребуетсяПодписание	= Файл.ЗапроситьПодпись;
		
		Сообщение.Документы.Добавить(Документ);
		
	КонецЦикла;
	
	ПодписатьДокументыВСообщении(Сообщение);
	
	ИдОтправленныхДокументов = Сервис.ОтправитьСообщение(Сообщение);
	
	ПометитьОтправленныеДокументы(ОтправляемыеДокументы, ИдОтправленныхДокументов);
	
	Оповестить(События().ДокументыОтправлены);
	
КонецПроцедуры

Процедура ПометитьОтправленныеДокументы(ОтправленныеДокументы, ИдОтправленныхДокументов)
	
	Для Каждого Документ Из ИдОтправленныхДокументов Цикл
		
		ЛокальныйИД = Документ.Ключ;
		СерверныйИД = Документ.Значение;
		
		Для Каждого ОтправленныйДокумент Из ОтправленныеДокументы Цикл
			Если ОтправленныйДокумент.Значение = ЛокальныйИД Тогда
				ДанныеКонфигурации.УстановитьДокументОтправлен(ОтправленныйДокумент.Ключ, СерверныйИД);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодписатьДокументыВСообщении(Сообщение)
	
	Для Каждого Документ Из Сообщение.Документы Цикл
		
		Подпись = Сервис.Новый_Подпись();
		Подпись.ИдДокумента	= Документ.ИД;
		Подпись.Содержимое	= СформироватьЭЦПДокумента(, Документ.Содержимое);
		
		Сообщение.Подписи.Добавить(Подпись);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТребуетсяПодписание(ТипДокумента, ВидДокумента = Неопределено)
	
	Результат = ОбъектнаяМодель.ТребуетсяПодписьПолучателя(ТипДокумента, ВидДокумента);

	Возврат Результат;
	
КонецФункции

//===================================
//{ Обработчики событий

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	//: Источник = ПолучитьФорму();
	
	Результат = ЗначениеВыбора;
	Параметры = ДополнительныеПараметры[Источник.КлючУникальности];
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Действия = Действия();
	Действие = Параметры.Действие;
	Если Действие = Действия.Подписание Тогда
		Подписать_Продолжение(Результат, Параметры);
	КонецЕсли;
	
КонецПроцедуры

//}

