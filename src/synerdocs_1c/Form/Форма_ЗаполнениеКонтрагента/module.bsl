
//========================================================================
// Форма заполнения реквизитов контрагента.
// Используется для заполнения объекта Модуль_ОбъектнаяМодель.Новый_Контрагент().
//========================================================================

Перем _Параметры;

// Модули
Перем ОбъектнаяМодель, Классификаторы;

//========================================================================
// ИНИЦИАЛИЗАЦИЯ
//========================================================================

Процедура ПодключитьМодули()
	
	ОбъектнаяМодель	= Модуль("Модуль_ОбъектнаяМодель");
	Классификаторы	= Модуль("Модуль_Классификаторы");
	
КонецПроцедуры

Процедура Инициализировать()
	
	ПодключитьМодули();
	
КонецПроцедуры

Процедура ИнициализироватьФорму()
	
	Параметры = ПараметрыФормы();
	
	ЭтаФорма.Заголовок = Параметры.ЗаголовокФормы;
	
	ВидыАдреса = ОбъектнаяМодель.ВидыАдреса();
	ЭлементыФормы.ВидАдресаАдресРФ.ВыбираемоеЗначение	= ВидыАдреса.АдресРФ;
	ЭлементыФормы.ВидАдресаСтрокой.ВыбираемоеЗначение	= ВидыАдреса.Неструктурированный;
	ЭлементыФормы.ВидАдресаКодГАР.ВыбираемоеЗначение	= ВидыАдреса.КодГАР;
	
	ТипыОрганизации = ОбъектнаяМодель.ТипыОрганизации();
	ЭлементыФормы.ТипОрганизацииЮрЛицо.ВыбираемоеЗначение	= ТипыОрганизации.ЮрЛицо;
	ЭлементыФормы.ТипОрганизацииИП.ВыбираемоеЗначение		= ТипыОрганизации.ИП;
	ЭлементыФормы.ТипОрганизацииИнОрг.ВыбираемоеЗначение	= ТипыОрганизации.ИнОрг;
	
	ЭлементыФормы.АдресКодРегиона.СписокВыбора	= СписокВыбораРегионаРФ();
	ЭлементыФормы.АдресКодСтраны.СписокВыбора	= СписокВыбораСтраны();
	
	НеочищаемыеПоля = Новый Массив;
	НеочищаемыеПоля.Добавить(ЭлементыФормы.БанковскиеРеквизиты);
	
	ДействиеОчитска = Новый Действие("Подключаемый_ОтменаОчистки");
	Для Каждого Элемент Из НеочищаемыеПоля Цикл
		Элемент.УстановитьДействие("Очистка", ДействиеОчитска);
	КонецЦикла;
	
	УстановитьТипОрганизации(ТипыОрганизации.ЮрЛицо);
	УстановитьВидАдреса(ВидыАдреса.АдресРФ);
	
	УстановитьКонтрагента(Параметры.Модель);
	
КонецПроцедуры

Функция ПараметрыФормы()
	
	Если _Параметры = Неопределено Тогда
		ВызватьИсключение "Параметры формы не установлены";
	КонецЕсли;
	
	Возврат _Параметры;
	
КонецФункции

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

Функция Параметры() Экспорт
	
	Параметры = Новый Структура(
		"Модель,
		|ЗаголовокФормы"
	);
	
	Параметры.Модель			= Неопределено; //: Модуль_ОбъектнаяМодель.Новый_Контрагент();
	Параметры.ЗаголовокФормы	= "";
	
	Возврат Параметры;
	
КонецФункции

Функция УстановитьПараметры(Параметры) Экспорт
	
	_Параметры = ФиксированныеДанные(Параметры);
	
КонецФункции

Функция ПроверяемыеРеквизиты() Экспорт
	
	Поля = Новый СписокЗначений;
	
	Поля.Добавить("КонтрагентНаименованиеОрганизации",    НСтр("ru = 'Реквизиты: Наименование'"));
	Поля.Добавить("КонтрагентИНН",                        НСтр("ru = 'Реквизиты: ИНН'"));
	Поля.Добавить("КонтрагентФамилия",                    НСтр("ru = 'Реквизиты: Фамилия'"));
	Поля.Добавить("КонтрагентИмя",                        НСтр("ru = 'Реквизиты: Имя'"));

	Поля.Добавить("АдресКодРегиона",                      НСтр("ru = 'Адрес: Регион'"));
	Поля.Добавить("АдресКодСтраны",                       НСтр("ru = 'Адрес: Страна'"));
	Поля.Добавить("АдресТекст",                           НСтр("ru = 'Адрес: Адрес'"));
	Поля.Добавить("АдресКодГАР",                          НСтр("ru = 'Адрес: Код'"));
	
	Возврат Поля;
	
КонецФункции

//========================================================================
// СОБЫТИЯ
//========================================================================

//===================================
//{ События формы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьФорму();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	УстановитьОтображение();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты) Экспорт
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ТипыОрганизации = ОбъектнаяМодель.ТипыОрганизации();
	
	Если ТипОрганизации = ТипыОрганизации.ЮрЛицо Тогда
		
		НепроверяемыеРеквизиты.Добавить("КонтрагентФамилия");
		НепроверяемыеРеквизиты.Добавить("КонтрагентИмя");
		
	ИначеЕсли ТипОрганизации = ТипыОрганизации.ИП Тогда
		
		НепроверяемыеРеквизиты.Добавить("КонтрагентНаименованиеОрганизации");
		
	ИначеЕсли ТипОрганизации = ТипыОрганизации.ИнОрг Тогда
		
		НепроверяемыеРеквизиты.Добавить("КонтрагентИНН");
		НепроверяемыеРеквизиты.Добавить("КонтрагентФамилия");
		НепроверяемыеРеквизиты.Добавить("КонтрагентИмя");
		
	КонецЕсли;
	
	ВидыАдреса = ОбъектнаяМодель.ВидыАдреса();
	
	Если ВидАдреса = ВидыАдреса.АдресРФ Тогда
		
		НепроверяемыеРеквизиты.Добавить("АдресКодСтраны");
		НепроверяемыеРеквизиты.Добавить("АдресТекст");
		НепроверяемыеРеквизиты.Добавить("АдресКодГАР");
		
	ИначеЕсли ВидАдреса = ВидыАдреса.Неструктурированный Тогда
		
		НепроверяемыеРеквизиты.Добавить("АдресКодРегиона");
		НепроверяемыеРеквизиты.Добавить("АдресКодГАР");
		
	ИначеЕсли ВидАдреса = ВидыАдреса.КодГАР Тогда
		
		НепроверяемыеРеквизиты.Добавить("АдресКодРегиона");
		НепроверяемыеРеквизиты.Добавить("АдресКодСтраны");
		НепроверяемыеРеквизиты.Добавить("АдресТекст");
		
	КонецЕсли;
	
	УдалитьНепроверяемыеРеквизиты(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

//}

//===================================
//{ Кнопки формы

Процедура ОсновныеДействияФормыСохранить(Кнопка)
	
	Если НЕ ПроверитьЗаполнениеФормы(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Сохранить();
	
КонецПроцедуры

//}

//===================================
//{ События элементов формы

Процедура ТипОрганизацииПриИзменении(Элемент)
	
	УстановитьТипОрганизации(ТипОрганизации);
	
КонецПроцедуры

Процедура ВидАдресаПриИзменении(Элемент)
	
	УстановитьВидАдреса(ВидАдреса);
	
КонецПроцедуры

Процедура БанковскиеРеквизитыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Форма = ЭтотОбъект.ПолучитьФорму("Форма_ЗаполнениеБанковскихРеквизитов", Элемент);
	
	Параметры = Форма.Параметры();
	Параметры.Модель				= БанковскиеРеквизиты;
	Параметры.ПроверятьЗаполнение	= Ложь;
	
	Форма.УстановитьПараметры(Параметры);
	Форма.Открыть();
	
КонецПроцедуры

Процедура БанковскиеРеквизитыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьБанковскиеРеквизиты(ВыбранноеЗначение);
	
КонецПроцедуры

//}

//===================================
//{ Команды

Процедура Сохранить()
	
	Результат = Контрагент();
	ОповеститьОВыборе(Результат);
	
КонецПроцедуры

//}

//===================================
//{ Общие обработчики

// Обработчик для полей, для которых не нужна очистка,
// чтобы пользователь не мог эту самую очистку вызывать.
Процедура Подключаемый_ОтменаОчистки(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

//}

//========================================================================
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================

Функция УстановитьОтображение()
	
	СтраницыКонтрагента = Новый Соответствие;
	СтраницыКонтрагента[ЭлементыФормы.ТипОрганизацииЮрЛицо.ВыбираемоеЗначение]	= ЭлементыФормы.ТипыОрганизации.Страницы.ЮрЛицо;
	СтраницыКонтрагента[ЭлементыФормы.ТипОрганизацииИП.ВыбираемоеЗначение]		= ЭлементыФормы.ТипыОрганизации.Страницы.ИП;
	СтраницыКонтрагента[ЭлементыФормы.ТипОрганизацииИнОрг.ВыбираемоеЗначение]	= ЭлементыФормы.ТипыОрганизации.Страницы.ИнОрг;
	
	ЭлементыФормы.ТипыОрганизации.ТекущаяСтраница = СтраницыКонтрагента[ТипОрганизации];
	
	СтраницыАдреса = Новый Соответствие;
	СтраницыАдреса[ЭлементыФормы.ВидАдресаАдресРФ.ВыбираемоеЗначение]	= ЭлементыФормы.ВидыАдреса.Страницы.АдресРФ;
	СтраницыАдреса[ЭлементыФормы.ВидАдресаСтрокой.ВыбираемоеЗначение]	= ЭлементыФормы.ВидыАдреса.Страницы.Строкой;
	СтраницыАдреса[ЭлементыФормы.ВидАдресаКодГАР.ВыбираемоеЗначение]	= ЭлементыФормы.ВидыАдреса.Страницы.КодГАР;
	
	ЭлементыФормы.ВидыАдреса.ТекущаяСтраница = СтраницыАдреса[ВидАдреса];
	
КонецФункции

//===================================
//{ Геттеры и сеттеры

// Модель формы

Процедура УстановитьКонтрагента(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		Контрагент = ОбъектнаяМодель.Новый_Контрагент();
	Иначе
		Контрагент = НовоеЗначение;
	КонецЕсли;
	
	УстановитьТипОрганизации(Контрагент.ТипОрганизации);
	
	КонтрагентНаименованиеОрганизации	= Контрагент.Наименование;
	КонтрагентИНН						= Контрагент.ИНН;
	КонтрагентКПП						= Контрагент.КПП;
	
	ФИО = Контрагент.ФИО;
	КонтрагентФамилия						= ФИО.Фамилия;
	КонтрагентИмя							= ФИО.Имя;
	КонтрагентОтчество						= ФИО.Отчество;
	КонтрагентСвидетельствоОРегистрацииИП	= Контрагент.СвидетельствоОРегистрацииИП;
	
	КонтрагентОКПО					= Контрагент.ОКПО;
	
	КонтрагентИныеСведения			= Контрагент.ДопИнфо;
	КонтрагентДопИнфоДляУчастника	= Контрагент.ДопИнфоДляУчастников;
	
	КонтрагентПодразделение			= Контрагент.Подразделение;
	
	УстановитьБанковскиеРеквизиты(Контрагент.БанковскийСчет);
	
	УстановитьАдрес(Контрагент.Адрес);
	УстановитьКИ(Контрагент.КонтактнаяИнформация);
	
КонецПроцедуры

Функция Контрагент()
	
	Контрагент = ОбъектнаяМодель.Новый_Контрагент();
	
	Контрагент.ТипОрганизации = ТипОрганизации;
	
	Контрагент.ОКПО					= КонтрагентОКПО;
	Контрагент.Подразделение		= КонтрагентПодразделение;
	Контрагент.ДопИнфоДляУчастников	= КонтрагентДопИнфоДляУчастника;
	
	ТипыОрганизации = ОбъектнаяМодель.ТипыОрганизации();
	
	Если ТипОрганизации = ТипыОрганизации.ЮрЛицо
			ИЛИ ТипОрганизации = ТипыОрганизации.ИнОрг Тогда
		Контрагент.Наименование	= КонтрагентНаименованиеОрганизации;
	КонецЕсли;
	
	Если ТипОрганизации = ТипыОрганизации.ИП Тогда
	
		ФИО = Контрагент.ФИО;
		ФИО.Фамилия		= КонтрагентФамилия;
		ФИО.Имя			= КонтрагентИмя;
		ФИО.Отчество	= КонтрагентОтчество;
		
		Контрагент.СвидетельствоОРегистрацииИП	= КонтрагентСвидетельствоОРегистрацииИП;
		
	КонецЕсли;
	
	Если ТипОрганизации = ТипыОрганизации.ЮрЛицо
			ИЛИ ТипОрганизации = ТипыОрганизации.ИП Тогда
		Контрагент.ИНН = КонтрагентИНН;
	КонецЕсли;
	
	Если ТипОрганизации = ТипыОрганизации.ЮрЛицо Тогда
		Контрагент.КПП = КонтрагентКПП;
	КонецЕсли;
	
	Если ТипОрганизации = ТипыОрганизации.ИП
			ИЛИ ТипОрганизации = ТипыОрганизации.ИнОрг Тогда
		Контрагент.ДопИнфо = КонтрагентИныеСведения;
	КонецЕсли;
	
	Контрагент.БанковскийСчет		= БанковскиеРеквизиты;
	
	Контрагент.Адрес				= Адрес();
	Контрагент.КонтактнаяИнформация	= КонтактнаяИнформация();
	
	Возврат Контрагент;
	
КонецФункции

Процедура УстановитьАдрес(Адрес)
	
	УстановитьВидАдреса(Адрес.ВидАдреса);
	
	АдресПочтовыйИндекс		= Адрес.ПочтовыйИндекс;
	АдресКодРегиона			= Адрес.КодРегиона;
	АдресРайон				= Адрес.Район;
	АдресГород				= Адрес.Город;
	АдресНаселенныйПункт	= Адрес.НаселенныйПункт;
	АдресУлица				= Адрес.Улица;
	АдресДом				= Адрес.Дом;
	АдресКвартира			= Адрес.Квартира;
	АдресСтроение			= Адрес.Строение;
	
	АдресКодСтраны			= Адрес.КодСтраны;
	АдресТекст				= Адрес.ИностранныйАдрес;
	
	АдресКодГАР				= Адрес.КодГАР;
	
КонецПроцедуры

Функция Адрес()
	
	Адрес = ОбъектнаяМодель.Новый_Адрес();
	Адрес.ВидАдреса = ВидАдреса;
	
	ВидыАдреса = ОбъектнаяМодель.ВидыАдреса();
	
	Если ВидАдреса = ВидыАдреса.АдресРФ Тогда
		
		Адрес.ПочтовыйИндекс	= АдресПочтовыйИндекс;
		Адрес.КодРегиона		= АдресКодРегиона;
		Адрес.Район				= АдресРайон;
		Адрес.Город				= АдресГород;
		Адрес.НаселенныйПункт	= АдресНаселенныйПункт;
		Адрес.Улица				= АдресУлица;
		Адрес.Дом				= АдресДом;
		Адрес.Квартира			= АдресКвартира;
		Адрес.Строение			= АдресСтроение;
		
	ИначеЕсли ВидАдреса = ВидыАдреса.Неструктурированный Тогда
		
		Адрес.КодСтраны			= АдресКодСтраны;
		Адрес.ИностранныйАдрес	= АдресТекст;
		
	ИначеЕсли ВидАдреса = ВидыАдреса.КодГАР Тогда
		
		Адрес.КодГАР			= АдресКодГАР;
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

Процедура УстановитьКИ(КонтактнаяИнформация)
	
	КИТелефон	= КонтактнаяИнформация.Телефон;
	КИEmail		= КонтактнаяИнформация.Email;
	
КонецПроцедуры

Функция КонтактнаяИнформация()
	
	КИ = ОбъектнаяМодель.Новый_КонтактнаяИнформацияКонтрагента();
	
	КИ.Телефон	= КИТелефон;
	КИ.Email	= КИEmail;
	
	Возврат КИ;
	
КонецФункции

// Реквизиты контрагента

Процедура УстановитьТипОрганизации(НовоеЗначение)
	
	ТипОрганизации = НовоеЗначение;
	
	УстановитьОтображение();
	
КонецПроцедуры

// Адрес

Процедура УстановитьВидАдреса(НовоеЗначение)
	
	ВидАдреса = НовоеЗначение;
	
	УстановитьОтображение();
	
КонецПроцедуры

// Банковские реквизиты

Процедура УстановитьБанковскиеРеквизиты(НовоеЗначение)
	
	БанковскиеРеквизиты					= НовоеЗначение;
	БанковскиеРеквизитыПредставление	= ОбъектнаяМодель.БанковскийСчетПредставлениеДляUI(БанковскиеРеквизиты);
	
КонецПроцедуры

//}

Функция СписокВыбораРегионаРФ()
	
	СписокВыбора = Новый СписокЗначений;
	
	ВсеРегионыРФ = Классификаторы.ВсеРегионыРФ();
	Для Каждого Регион Из ВсеРегионыРФ Цикл
		СписокВыбора.Добавить(Регион.Код, Регион.ПолноеНаименование);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Функция СписокВыбораСтраны()
	
	СписокВыбора = Новый СписокЗначений;
	
	ВсеСтраны = Классификаторы.ВсеСтраны();
	Для Каждого Страна Из ВсеСтраны Цикл
		СписокВыбора.Добавить(Страна.Код, Страна.Наименование);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции


Инициализировать();
