
//========================================================================
// Модуль для работы с данными конфигурации. Отвечает за:
// 	- получение данных
// 	- запись данных
//========================================================================

// Модули
Перем ОбъектнаяМодель, ОМКонфигурации, Конфигурация, Классификаторы, МенеджерНастроек;

//========================================================================
// ИНИЦИАЛИЗАЦИЯ
//========================================================================

Процедура ПодключитьМодули()
	
	ОбъектнаяМодель		= Модуль("Модуль_ОбъектнаяМодель");
	ОМКонфигурации		= Модуль("Модуль_ОбъектнаяМодельКонфигурации");
	Классификаторы		= Модуль("Модуль_Классификаторы");
	МенеджерНастроек	= Модуль("Модуль_МенеджерНастроек");
	
КонецПроцедуры

Процедура ПодключитьЗависимости(МодульКонфигурация) Экспорт
	
	Конфигурация = МодульКонфигурация;
	
КонецПроцедуры

Процедура Инициализировать() Экспорт
	
	ПодключитьМодули();
	
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

// Конвертирует документ конфигурации в объект ИР.
//
// Параметры:
//  Ссылка	 - ДокументСсылка - конвертируемый документ.
// 
// Возвращаемое значение:
//  Структура - объект ИР (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_ИсходныйДокумент()).
//
Функция ИсходныйДокумент(Ссылка) Экспорт
	
	Документ = Неопределено;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Документ = СчетФактура(Ссылка);
	Иначе
		Документ = ПервичныйДокумент(Ссылка);
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

// Конвертирует документ конфигурации в объект ИР.
//
// Параметры:
//  Ссылка	 - ДокументСсылка - конвертируемый документ.
// 
// Возвращаемое значение:
//  Структура - объект ИР (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_КорректировочныйДокумент()).
//
Функция КорректировочныйДокумент(Ссылка) Экспорт
	
	Документ = Неопределено;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Документ = КорректировочныйСчетФактура(Ссылка);
	Иначе
		Документ = ПервичныйКорректировочныйДокумент(Ссылка);
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

// Получает список документов, которые можно отправить в сервис.
//
// Параметры:
//  ДоступныеКонтрагенты - Массив - массив контрагентов, по которым ограничена выборка документов.
//  НачалоПериода		 - Дата - начало периода выборки.
//  КонецПериода		 - Дата - конец периода выборка.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список документов для отправки (см. Модуль_ОбъектнаяМодель.Новый_СписокДокументовДляОтправки()).
//
Функция ПолучитьСписокДокументовДляОтправки(ДоступныеКонтрагенты, НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	СписокДокументов = ПолучитьДокументыДляОтправки(, НачалоПериода, КонецПериода, ДоступныеКонтрагенты);
	Если СписокДокументов = Неопределено Тогда
		СписокДокументов = ОбъектнаяМодель.Новый_СписокДокументовДляОтправки();
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции

Функция ТекущаяОрганизация() Экспорт
	
	ОрганзиацияМодель = Контрагент(Организация);
	
	Возврат ОрганзиацияМодель;
	
КонецФункции

Функция Фактор(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Фактор = ОбъектнаяМодель.Новый_Фактор();
	
	Контрагент = Контрагент(Ссылка);
	
	ЗаполнитьЗначенияСвойств(Фактор, Контрагент, "Наименование, ИНН, КПП, БанковскийСчет");
	
	Адрес = АдресКонтрагента(Ссылка);
	
	Фактор.Адрес	= ОбъектнаяМодель.АдресПредставление(Адрес);
	Фактор.Телефон	= Контрагент.КонтактнаяИнформация.Телефон;
	
	Возврат Фактор;
	
КонецФункции

Функция ПолнаяИнформацияОДокументе(Ссылка) Экспорт
	
	Результат = ПолучитьПолнуюИнформациюОДокументе(Ссылка);
	
	Возврат Результат;
	
КонецФункции

Функция ИнформацияОДокументе(Ссылка) Экспорт
	
	Результат = ПолучитьИнформациюОДокументе(Ссылка);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьДокументОтправлен(Ссылка, ИдДокумента) Экспорт
	
	//: Ссылка = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	УстановитьСвойствоОбъекта(Ссылка, ОМКонфигурации.ДопСвойстваОбъектов().ИдДокумента, ИдДокумента);
	
	ДокументОбъект = Ссылка.ПолучитьОбъект();
	ДокументОбъект.Комментарий = НСтр("ru = '[Отправлено через сервис обмена Synerdocs] '") + ДокументОбъект.Комментарий;
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Процедура УдалитьИдентитфикаторДокумента(ИдДокумента) Экспорт
	
	СписокДокументов = ДокументыСИдентификатором(ИдДокумента);
	Для Каждого Ссылка Из СписокДокументов Цикл
		УстановитьСвойствоОбъекта(Ссылка, ОМКонфигурации.ДопСвойстваОбъектов().ИдДокумента, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

//========================================================================
// СЛУЖЕБНЫЙ ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

//===================================
//{ Преобразование объектов конфигурации в объектную модель ИР

// Перечисления

// Получить тип организации из перечисления конфигурации.
//
// Параметры:
//  ЮрФизЛицо	 - ПеречислениеСсылка.ЮрФизЛицо - перечисление конфигурации.
// 
// Возвращаемое значение:
//  Число - соответствующее значение перечисления ИР (см. Модуль_ОбъектнаяМодель.ТипыОрганизации()).
//
Функция ТипОрганизации(ЮрФизЛицо) Экспорт
	
	ТипыОрганизации = ОбъектнаяМодель.ТипыОрганизации();
	
	Соответствие = Новый Соответствие;
	Соответствие[Перечисления.ЮрФизЛицо.ЮрЛицо]		= ТипыОрганизации.ЮрЛицо;
	Соответствие[Перечисления.ЮрФизЛицо.ФизЛицо]	= ТипыОрганизации.ИП;
	
	ТипОрганизации = Соответствие[ЮрФизЛицо];
	
	Возврат ТипОрганизации;
	
КонецФункции

// Получить ставку НДС из перечисления конфигурации.
//
// Параметры:
//  СтавкаНДС	 - ПеречислениеСсылка.СтавкиНДС - перечисление конфигурации.
// 
// Возвращаемое значение:
//  Число - соответствующее значение перечисления ИР (см. Модуль_ОбъектнаяМодель.СтавкиНДС()).
//
Функция СтавкаНДС(СтавкаНДС) Экспорт
	
	//: Ссылка = Перечисления.СтавкиНДС.ПустаяСсылка();
	
	СтавкиНДС = ОбъектнаяМодель.СтавкиНДС();
	
	Соответствие = Новый Соответствие;
	Соответствие[Перечисления.СтавкиНДС.БезНДС]		= СтавкиНДС.БезНДС;
	Соответствие[Перечисления.СтавкиНДС.НДС0]		= СтавкиНДС.НДС0;
	Соответствие[Перечисления.СтавкиНДС.НДС10]		= СтавкиНДС.НДС10;
	Соответствие[Перечисления.СтавкиНДС.НДС18]		= СтавкиНДС.НДС18;
	Соответствие[Перечисления.СтавкиНДС.НДС20]		= СтавкиНДС.НДС20;
	Соответствие[Перечисления.СтавкиНДС.НДС10_110]	= СтавкиНДС.НДС10_110;
	Соответствие[Перечисления.СтавкиНДС.НДС18_118]	= СтавкиНДС.НДС18_118;
	
	Результат = Соответствие[СтавкаНДС];
	
	Возврат Результат;
	
КонецФункции

// Контрагент

// Конвертирует объект конфигурации в объект ИР.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - ссылка на объект конфигурации.
// 
// Возвращаемое значение:
//  Структура - объект ИР, соответствующий объекту конфигурации (см. Модуль_ОбъектнаяМодель.Новый_Контрагент()).
//
Функция Контрагент(Ссылка) Экспорт
	
	//: Ссылка = Справочники.Организации.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Контрагент = ОбъектнаяМодель.Новый_Контрагент();
	
	ТипыОрганизации = ОбъектнаяМодель.ТипыОрганизации();
	ТипОрганизации = ТипОрганизации(Ссылка.ЮрФизЛицо);
	
	Контрагент.ТипОрганизации = ТипОрганизации;
	
	Контрагент.Наименование = ЗаполненноеЗначение(Ссылка.НаименованиеПолное, Ссылка.Наименование);
	Контрагент.ИНН = Ссылка.ИНН;
	Контрагент.КПП = Ссылка.КПП;
	
	Контрагент.ОКПО = Ссылка.КодПоОКПО;
	
	Если ТипОрганизации = ТипыОрганизации.ИП Тогда
		
		ФИО = ФИОИндивидуальногоПредпринимателя(Ссылка);
		ЗаполнитьЗначенияСвойств(Контрагент.ФИО, ФИО, "Фамилия, Имя, Отчество");
		
		Если ЭтоОрганизация(Ссылка) Тогда
			Контрагент.СвидетельствоОРегистрацииИП = ПредставлениеДокумента(
				,
				Ссылка.СвидетельствоСерияНомер,
				Ссылка.СвидетельствоДатаВыдачи,
				Истина
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Контрагент.КонтактнаяИнформация = КонтактнаяИнформацияКонтрагента(Ссылка);	
	Контрагент.БанковскийСчет 		= БанковскийСчет(Ссылка.ОсновнойБанковскийСчет);	
	Контрагент.Ящик 				= ПолучитьЯщик(Ссылка);
	
	Возврат Контрагент;
	
КонецФункции

// Получает адрес контрагента/организации.
//
// Параметры:
//  Ссылка		 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - ссылка на объект конфигурации, для которого нужно получить адрес.
//  НуженЮрАдрес - Булево - если Истина, будет выполнена попытка получения юр. адреса, если юр. адрес не указан, будет возвращен фактический адрес,
// 							иначе сначала будет выполнена попытка получения фактического адрес объекта.
// 
// Возвращаемое значение:
//  Структура - адрес объекта (см. Модуль_ОбъектнаяМодель.Новый_Адрес()).
//
Функция АдресКонтрагента(Ссылка, НуженЮрАдрес = Истина) Экспорт
	
	//: Ссылка = Справочники.Организации.ПустаяСсылка();
	//: Ссылка = Справочники.Контрагенты.ПустаяСсылка();
	
	Адрес = ОбъектнаяМодель.Новый_Адрес();
	
	ОбъектКИ = ОбъектКИ(Ссылка);
	
	ВидКИ = ВидАдреса(ОбъектКИ, НуженЮрАдрес);
	АдресКИ = ПолучитьКонтактнуюИнформацию(ОбъектКИ, Перечисления.ТипыКонтактнойИнформации.Адрес, ВидКИ);
	
	Если АдресКИ = Неопределено Тогда
		ВидКИ = ВидАдреса(ОбъектКИ, НЕ НуженЮрАдрес);
		АдресКИ = ПолучитьКонтактнуюИнформацию(ОбъектКИ, Перечисления.ТипыКонтактнойИнформации.Адрес, ВидКИ);
	КонецЕсли;
	
	Если АдресКИ <> Неопределено Тогда
		
		ВидыАдреса = ОбъектнаяМодель.ВидыАдреса();
		
		Если АдресКИ.ЭтоАдресРФ Тогда
			
			Регион = Классификаторы.РегионРФ(, АдресКИ.Регион);
			
			Адрес.ВидАдреса			= ВидыАдреса.АдресРФ;
			
			Если Регион <> Неопределено Тогда
				Адрес.КодРегиона	= Регион.Код;
			КонецЕсли;
			Адрес.ПочтовыйИндекс	= СокрЛП(АдресКИ.Индекс);
			Адрес.Район				= АдресКИ.Район;
			Адрес.Город				= АдресКИ.Город;
			Адрес.НаселенныйПункт	= АдресКИ.НаселенныйПункт;
			Адрес.Улица				= АдресКИ.Улица;
			Адрес.Дом				= АдресКИ.Дом;
			Адрес.Квартира			= АдресКИ.Квартира;
			Адрес.Строение			= АдресКИ.Корпус;
			
		Иначе
			
			Страна = Классификаторы.Страна(, АдресКИ.Страна);
			
			Адрес.ВидАдреса			= ВидыАдреса.Неструктурированный;
			
			Если Страна <> Неопределено Тогда
				Адрес.КодСтраны		= Страна.Код;
			КонецЕсли;
			Адрес.ИностранныйАдрес	= АдресКИ.ПолныйАдрес;
			
		КонецЕсли;
		
	Иначе
		
		Адрес = Неопределено;
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

// Получает контактную информацию контрагента/организации.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - ссылка на объект конфигурации, для которого нужно получить КИ.
// 
// Возвращаемое значение:
//  Структура - контактная информация объекта (см. Модуль_ОбъектнаяМодель.Новый_КонтактнаяИнформацияКонтрагента()).
//
Функция КонтактнаяИнформацияКонтрагента(Ссылка) Экспорт
	
	КонтактнаяИнформация = ОбъектнаяМодель.Новый_КонтактнаяИнформацияКонтрагента();
	
	ВидКИ = ВидТелефона(Ссылка);
	Телефон = ПолучитьКонтактнуюИнформацию(Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, ВидКИ);
	
	ВидКИ = ВидФакса(Ссылка);
	Факс = ПолучитьКонтактнуюИнформацию(Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, ВидКИ);
	
	ВидКИ = ВидEmail(Ссылка);
	Мыло = ПолучитьКонтактнуюИнформацию(Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВидКИ);
	
	КонтактнаяИнформация.Телефон	= Телефон;
	КонтактнаяИнформация.Факс		= Факс;
	КонтактнаяИнформация.Email		= Мыло;
	
	Возврат КонтактнаяИнформация;
	
КонецФункции

// Номенклатура

// Конвертирует объект конфигурации в объект ИР.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.Номенклатура - ссылка на объект конфигурации.
// 
// Возвращаемое значение:
//  Структура - объект ИР, соответствующий объекту конфигурации (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_Номенклатура()).
//
Функция Номенклатура(Ссылка) Экспорт
	
	//: Ссылка = Справочники.Номенклатура.ПустаяСсылка();
	
	Номенклатура = ОМКонфигурации.Новый_Номенклатура();
	Номенклатура.Наименование	= ЗаполненноеЗначение(Ссылка.НаименованиеПолное, Ссылка.Наименование);
	Номенклатура.Код			= СокрЛП(Ссылка.Код);
	Номенклатура.Артикул		= Ссылка.Артикул;
	
	Возврат Номенклатура;
	
КонецФункции

Функция Характеристика(Ссылка)
	
	//: Ссылка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Характеристика = ОМКонфигурации.Новый_Характеристика();
	Характеристика.Ссылка			= Ссылка;
	Характеристика.Представление	= Строка(Ссылка);
	
	Возврат Характеристика;
	
КонецФункции

// Конвертирует объект конфигурации в объект ИР.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.ЕдиницыИзмерения - ссылка на объект конфигурации.
// 
// Возвращаемое значение:
//  Структура - объект ИР, соответствующий объекту конфигурации (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_ЕдиницаИзмерения()).
//
Функция ЕдиницаИзмерения(Ссылка) Экспорт
	
	//: Ссылка = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
	ЕИ = ОМКонфигурации.Новый_ЕдиницаИзмерения();
	
	ЕдиницаИзКлассификатора = Ссылка;
	
	ОКЕИ = Классификаторы.ЕдиницаИзмерения(ЕдиницаИзКлассификатора.Код);
	Если ОКЕИ <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЕИ, ОКЕИ, "Код, Наименование");
	Иначе
		ЕИ.Наименование = ЕдиницаИзКлассификатора.Наименование;
	КонецЕсли;
	
	Возврат ЕИ;
	
КонецФункции

// Прочие объекты

// Конвертирует объект конфигурации в объект ИР.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.БанковскиеСчета - ссылка на объект конфигурации.
// 
// Возвращаемое значение:
//  Структура - объект ИР, соответствующий объекту конфигурации (см. Модуль_ОбъектнаяМодель.Новый_БанковскийСчет()).
//
Функция БанковскийСчет(Ссылка) Экспорт
	
	//: Ссылка = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Счет = ОбъектнаяМодель.Новый_БанковскийСчет();
	
	Счет.РасчетныйСчет			= Ссылка.НомерСчета;
	Если ЗначениеЗаполнено(Ссылка.Банк) Тогда
		Счет.БИК				= СокрЛП(Ссылка.Банк.Код);
		Счет.НаименованиеБанка	= Ссылка.Банк.Наименование;
		Счет.КоррСчет			= СокрЛП(Ссылка.Банк.КоррСчет);
	КонецЕсли;
	
	Возврат Счет;
	
КонецФункции

// Конвертирует объект конфигурации в объект ИР.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.Валюты - ссылка на объект конфигурации.
// 
// Возвращаемое значение:
//  Структура - объект ИР, соответствующий объекту конфигурации (см. Модуль_ОбъектнаяМодель.Новый_Валюта()).
//
Функция Валюта(Ссылка) Экспорт
	
	//: Ссылка = Справочники.Валюты.ПустаяСсылка();
	
	Валюта = ОбъектнаяМодель.Новый_Валюта();
	
	ОКВ = Классификаторы.Валюта(Ссылка.Код);
	Если ОКВ <> Неопределено Тогда
		Валюта.Код			= ОКВ.Код;
		Валюта.Наименование	= ОКВ.Наименование;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

// Конвертирует объект конфигурации в объект ИР.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.ФизическиеЛица - ссылка на объект конфигурации.
// 
// Возвращаемое значение:
//  Структура - объект ИР, соответствующий объекту конфигурации (см. Модуль_ОбъектнаяМодель.Новый_ОтветственноеЛицо()).
//
Функция ОтветственноеЛицо(Ссылка, Организация, Дата) Экспорт
	
	//: Ссылка = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОтветственноеЛицо = ОбъектнаяМодель.Новый_ОтветственноеЛицо();
	
	ВидыОЛ = ОбъектнаяМодель.ВидыОтветственногоЛица();
	ОтветственноеЛицо.Вид = ВидыОЛ.СотрудникОрганизации;
	
	ФИО = ФИОФизЛица(Ссылка);
	Если ФИО <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОтветственноеЛицо.ФИО, ФИО);
	КонецЕсли;
	
	Должность = ДолжностьФизЛица(Ссылка, Организация, Дата);
	ОтветственноеЛицо.Должность = Должность;
	
	Если Должность = Неопределено Тогда
		ОтветственноеЛицо.Вид = ВидыОЛ.ФизЛицо;
	КонецЕсли;
	
	Возврат ОтветственноеЛицо;
	
КонецФункции

// Конвертирует объект конфигурации в объект ИР.
//
// Параметры:
//  ДоговорКонтрагента	 - СправочникСсылка.ДоговорыКонтрагентов - объект конфигурации.
// 
// Возвращаемое значение:
//  Структура - объект ИР, соответствующий объекту конфигурации (см. Модуль_ОбъектнаяМодель.Новый_Основание()).
//
Функция Основание(ДоговорКонтрагента) Экспорт
	
	//: ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Основание = ОбъектнаяМодель.Новый_Основание();
	
	Основание.Наименование	= ДоговорКонтрагента.Наименование;
	Основание.Номер			= НеопределеноЕслиНеЗаполнено(ДоговорКонтрагента.Номер);
	Основание.Дата			= НеопределеноЕслиНеЗаполнено(ДоговорКонтрагента.Дата);
	
	Возврат Основание;
	
КонецФункции

//}

//===================================
//{ Конвертация табличных частей в объектную модель ИР

// Параметры заполнения таб.частей, зависящие от конфигурации и типа документа

// Параметры заполнения таб.части документа ИР из таб.части с товарами.
// Формируются автоматически по переданным параметрам.
//
// Параметры:
//  ДокументСсылка		 - ДокументСсылка - ссылка на документ, для таб.части которого нужно сформировать параметры заполнения.
//  ИмяТабЧастиТовары	 - Строка - имя таб.части документа.
// 
// Возвращаемое значение:
//  Структура - параметры заполнения товаров.
//
Функция ПараметрыЗаполненияТоваров(Документ, ИмяТабЧастиТовары) Экспорт
	
	//: ДокументСсылка = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	Параметры = Новый Структура(
		"ЕстьХарактеристика,
		|ЕстьШтрихкод,
		|ЕстьЕдиницаХраненияОстатков,
		|ЕдиницаИзмеренияИзКлассификатора,
		|ЕстьЕдиницаИзмеренияВТЧ,
		|ЕстьСерия"
	);
	
	МетаданныеДокумента = Документ.Метаданные();
	
	Параметры.ЕстьХарактеристика				= ЕстьРеквизитТабличнойЧастиОбъекта("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабЧастиТовары);
	Параметры.ЕстьШтрихкод						= Конфигурация.ЕстьШтрихкод();
	Параметры.ЕстьЕдиницаХраненияОстатков		= Конфигурация.ЕдиницыИзмеренияПоддерживаютсяПолностью();
	Параметры.ЕдиницаИзмеренияИзКлассификатора	= НЕ Конфигурация.ЕдиницыИзмеренияПоддерживаютсяПолностью();
	Параметры.ЕстьЕдиницаИзмеренияВТЧ			= ЕстьРеквизитТабличнойЧастиОбъекта("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабЧастиТовары);
	Параметры.ЕстьСерия							= ЕстьРеквизитТабличнойЧастиОбъекта("СерияНоменклатуры", МетаданныеДокумента, ИмяТабЧастиТовары);
	
	Параметры = Новый ФиксированнаяСтруктура(Параметры);
	Возврат Параметры;
	
КонецФункции

// Параметры заполнения таб.части документа ИР из таб.части с услугами.
// 
// Возвращаемое значение:
//  Структура - параметры заплонения услуг.
//
Функция ПараметрыЗаполненияУслуг() Экспорт
	
	Параметры = Новый Структура(
		"ЕстьЕдиницаХраненияОстатков,
		|ЕдиницаИзмеренияИзКлассификатора"
	);
	
	Параметры.ЕстьЕдиницаХраненияОстатков		= Конфигурация.ЕдиницыИзмеренияПоддерживаютсяПолностью();
	Параметры.ЕдиницаИзмеренияИзКлассификатора	= НЕ Конфигурация.ЕдиницыИзмеренияПоддерживаютсяПолностью();
	
	Параметры = Новый ФиксированнаяСтруктура(Параметры);
	Возврат Параметры;
	
КонецФункции

// Табличная часть исходного документа

// Заполняет таб.часть исходного документа ИР из таб.части документа конфигурации с товарами.
//
// Параметры:
//  Шапка				 - ДокументСсылка			 - документ конфигурации.
//  Товары				 - ДокументТабличнаяЧасть	 - таб.часть документа конфигурации с товарами.
//  ПараметрыЗаполнения	 - Структура				 - параметры заполнения (см. ПараметрыЗаполненияТоваров()).
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таб.часть исходного документа (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_ТабЧастьИсходногоДокумента()).
//
Функция ТабЧастьТовары(Шапка, Товары, ПараметрыЗаполнения) Экспорт
	
	//: Товары = Документы.РеализацияТоваровУслуг.ПустаяСсылка().Товары;
	
	ТабличнаяЧасть = ОМКонфигурации.Новый_ТабЧастьИсходногоДокумента();
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		СтрокаТМЦ = ТабличнаяЧасть.Добавить();
		
		Номенклатура = Номенклатура(СтрокаТЧ.Номенклатура);
		Если ПараметрыЗаполнения.ЕстьХарактеристика Тогда
			Номенклатура.Характеристика = Характеристика(СтрокаТЧ.ХарактеристикаНоменклатуры);
		КонецЕсли;
		Если ПараметрыЗаполнения.ЕстьШтрихкод Тогда
			Номенклатура.Штрихкод = Штрихкод(
				СтрокаТЧ.Номенклатура,
				СтрокаТЧ.ХарактеристикаНоменклатуры,
				СтрокаТЧ.СерияНоменклатуры,
				СтрокаТЧ.ЕдиницаИзмерения,
				СтрокаТЧ.Качество
			);
		КонецЕсли;
		
		СтрокаТМЦ.Номенклатура = Номенклатура;
		
		СтрокаТМЦ.Количество = СтрокаТЧ.Количество;
		
		ЕдиницаИзКлассификатора = ЕдиницаИзКлассификатора(
			?(ПараметрыЗаполнения.ЕстьЕдиницаИзмеренияВТЧ,
				СтрокаТЧ.ЕдиницаИзмерения,
				СтрокаТЧ.Номенклатура
			),
			ПараметрыЗаполнения
		);
		
		СтрокаТМЦ.ЕдиницаИзмерения = ЕдиницаИзмерения(ЕдиницаИзКлассификатора);
		
		СтрокаТМЦ.СтавкаНДС	= СтавкаНДС(СтрокаТЧ.СтавкаНДС);
		СтрокаТМЦ.СуммаНДС	= СтрокаТЧ.СуммаНДС;
		
		Суммы = РассчитатьСуммы(Шапка.СуммаВключаетНДС, СтрокаТЧ.Сумма, СтрокаТЧ.СуммаНДС);
		СтрокаТМЦ.СуммаБезНДС	= Суммы.БезНДС;
		СтрокаТМЦ.СуммаСНДС		= Суммы.СНДС;
		СтрокаТМЦ.Цена			= РассчитатьЦену(СтрокаТМЦ.Количество, СтрокаТМЦ.СуммаБезНДС);
		
		Если ПараметрыЗаполнения.ЕстьСерия Тогда
			Серия = СтрокаТЧ.СерияНоменклатуры;
			Если ЗначениеЗаполнено(Серия) Тогда
				СтрокаТМЦ.НомерГТД					= СокрЛП(Серия.НомерГТД);
				СтрокаТМЦ.КодСтраныПроисхождения	= КодСтраны(Серия.СтранаПроисхождения);
			КонецЕсли;
		Иначе
			СтрокаТМЦ.НомерГТД						= СокрЛП(СтрокаТЧ.НомерГТД);
			СтрокаТМЦ.КодСтраныПроисхождения		= КодСтраны(СтрокаТЧ.СтранаПроисхождения);
		КонецЕсли;
		
		СтрокаТМЦ.ЭтоУслуга = Ложь;
		
	КонецЦикла;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

// Заполняет таб.часть исходного документа ИР из таб.части документа конфигурации с услугами.
//
// Параметры:
//  Шапка				 - ДокументСсылка			 - документ конфигурации.
//  Услуги				 - ДокументТабличнаяЧасть	 - таб.часть документа конфигурации с услугами.
//  ПараметрыЗаполнения	 - Структура				 - параметры заполнения (см. ПараметрыЗаполненияУслуг()).
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таб.часть исходного документа (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_ТабЧастьИсходногоДокумента()).
//
Функция ТабЧастьУслуги(Шапка, Услуги, ПараметрыЗаполнения) Экспорт
	
	//: Услуги = Документы.РеализацияТоваровУслуг.ПустаяСсылка().Услуги;
	
	ТабличнаяЧасть = ОМКонфигурации.Новый_ТабЧастьИсходногоДокумента();
	
	Для Каждого СтрокаТЧ Из Услуги Цикл
		
		СтрокаТМЦ = ТабличнаяЧасть.Добавить();
		
		Номенклатура = Номенклатура(СтрокаТЧ.Номенклатура);
		
		СтрокаТМЦ.Номенклатура = Номенклатура;
		
		СтрокаТМЦ.Количество = СтрокаТЧ.Количество;
		
		ЕдиницаИзКлассификатора = ЕдиницаИзКлассификатора(СтрокаТЧ.Номенклатура, ПараметрыЗаполнения);
		СтрокаТМЦ.ЕдиницаИзмерения = ЕдиницаИзмерения(ЕдиницаИзКлассификатора);
		
		СтрокаТМЦ.СтавкаНДС	= СтавкаНДС(СтрокаТЧ.СтавкаНДС);
		СтрокаТМЦ.СуммаНДС	= СтрокаТЧ.СуммаНДС;
		
		Суммы = РассчитатьСуммы(Шапка.СуммаВключаетНДС, СтрокаТЧ.Сумма, СтрокаТЧ.СуммаНДС);
		СтрокаТМЦ.СуммаБезНДС	= Суммы.БезНДС;
		СтрокаТМЦ.СуммаСНДС		= Суммы.СНДС;
		СтрокаТМЦ.Цена			= РассчитатьЦену(СтрокаТМЦ.Количество, СтрокаТМЦ.СуммаБезНДС);
		
		СтрокаТМЦ.ЭтоУслуга = Истина;
		
	КонецЦикла;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

//}

// Формирует запрос для получения документов для отправки.
//
// Параметры:
//  НачалоПериода			 - Дата - начало периода выборки.
//  КонецПериода			 - Дата - конец периода выборки.
//  ДопустимыеКонтрагенты	 - Массив - массив контрагентов, по которым ограничена выборка документов.
// 
// Возвращаемое значение:
//  Запрос - запрос с установленными параметрами для выборки документов для отправки.
//
Функция Запрос_ДокументыДляОтправки(ТекстЗапроса, Ссылка = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ДопустимыеКонтрагенты = Неопределено) Экспорт
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.Текст = ТекстЗапроса;
	Построитель.ЗаполнитьНастройки();
	
	НевозможноСформироватьЗапрос = Ложь;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ПолеСсылка = Построитель.ДоступныеПоля.Ссылка; //: ПолеСсылка = Построитель.ДоступныеПоля.Добавить();
		
		Если ПолеСсылка.ТипЗначения.СодержитТип(ТипЗнч(Ссылка)) Тогда
			ДобавитьОтборПостроителя(Построитель, "Ссылка", Ссылка);
		Иначе
			НевозможноСформироватьЗапрос = Истина;
		КонецЕсли;
		
	Иначе
		
		Отбор = Новый Структура(
			"Организация, Контрагент",
			Организация,
			ДопустимыеКонтрагенты
		);
		УстановитьОтборПостроителя(Построитель, Отбор);
		
		Если ЗначениеЗаполнено(НачалоПериода) Тогда
			ДобавитьОтборПостроителя(Построитель, "Дата", НачалоПериода, ВидСравнения.БольшеИлиРавно);
		КонецЕсли;
		Если ЗначениеЗаполнено(КонецПериода) Тогда
			ДобавитьОтборПостроителя(Построитель, "Дата", КонецПериода, ВидСравнения.МеньшеИлиРавно);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НевозможноСформироватьЗапрос Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Построитель.ПолучитьЗапрос(); //: Запрос = Новый Запрос;
	
	//{ Установка параметров
	
	Настройки = МенеджерНастроек.НастройкиИР();
	Запрос.УстановитьПараметр("ОтправлятьНовыеФорматы",   Настройки.ПоддержкаНовыхФорматов.Включена);
	Запрос.УстановитьПараметр("ОтправлятьАкт",            Настройки.ОтправлятьАкт);
	Запрос.УстановитьПараметр("ОтправлятьТН",             Настройки.ОтправлятьТОРГ12);
	Запрос.УстановитьПараметр("ОтправлятьСФ",             Настройки.ОтправлятьСФ);
	Запрос.УстановитьПараметр("ОтправлятьСчетНаОплату",   Настройки.ОтправлятьСчет);
	Запрос.УстановитьПараметр("ОтправлятьАОПУ",           Настройки.ОтправлятьАктПУ);
	
	Варианты = МенеджерНастроек.ВариантыОтправкиУниверсальногоДокумента();
	ОтправитьКомплект = (Настройки.ПоддержкаНовыхФорматов.ВариантОтправкиУниверсальногоДокумента = Варианты.ОднимДокументом);
	
	Запрос.УстановитьПараметр("ОтправлятьКомплект", ОтправитьКомплект);
	
	ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
	Запрос.УстановитьПараметр("ТипТН",                ТипыДокумента.ТитулПродавцаТОРГ12);
	Запрос.УстановитьПараметр("ТипАкт",               ТипыДокумента.ТитулИсполнителяАкт);
	Запрос.УстановитьПараметр("ТипСчетНаОплату",      ТипыДокумента.Неформализованный);
	Запрос.УстановитьПараметр("ТипУПД",               ТипыДокумента.ТитулПродавцаУПД);
	Запрос.УстановитьПараметр("ТипУКД",               ТипыДокумента.ТитулПродавцаУКД);
	Запрос.УстановитьПараметр("ТипИсправленныйУПД",   ТипыДокумента.ИсправленныйТитулПродавцаУПД);
	Запрос.УстановитьПараметр("ТипИсправленныйУКД",   ТипыДокумента.ИсправленныйТитулПродавцаУКД);
	
	Запрос.УстановитьПараметр("СвойствоИдДокумента", СвойствоОбъекта(ОМКонфигурации.ДопСвойстваОбъектов().ИдДокумента));
	
	//}
	
	Возврат Запрос;
	
КонецФункции

// Конвертирует данные запроса в список документов для отправки.
//
// Параметры:
//  ДанныеЗапроса	 - ТаблицаЗначений - данные полученные в результате выполнения запроса из Запрос_ДокументыДляОтправки().
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список документов для отправки.
//
Функция СписокДокументовДляОтправки(ДанныеЗапроса) Экспорт
	
	//: ДанныеЗапроса = ОтправитьДокументы;
	
	СписокДокументов = ОбъектнаяМодель.Новый_СписокДокументовДляОтправки(); //: СписокДокументов = ОтправитьДокументы;
	
	ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
	ВидыДокумента = ОбъектнаяМодель.ВидыНеформализованныхДокументов();
	
	Для Каждого СтрокаСписка Из ДанныеЗапроса Цикл 
		
		Документ = СписокДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(Документ, СтрокаСписка, "Ссылка, Дата, Контрагент, ТипДокумента, Сумма");
		
		Документ.ВидДокумента = НеопределеноЕслиНеЗаполнено(СтрокаСписка.ВидДокумента);
		
		ТипПредставление = Неопределено;
		Если СтрокаСписка.ТипДокумента = ТипыДокумента.Неформализованный Тогда
			ТипПредставление = ПредставлениеПеречисления(ВидыДокумента, СтрокаСписка.ВидДокумента);
		Иначе
			ТипПредставление = ПредставлениеПеречисления(ТипыДокумента, СтрокаСписка.ТипДокумента);
		КонецЕсли;
		
		Документ.ТипПредставление = ТипПредставление;
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

//========================================================================
// ОБЪЕКТНАЯ МОДЕЛЬ
//========================================================================

Функция Новый_Суммы()
	
	Суммы = Новый Структура(
		"БезНДС,
		|СНДС"
	);
	
	Возврат Суммы;
	
КонецФункции


//========================================================================
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================

//===================================
//{ Получение данных

// Получает правильный код страны из страны происхождения.
//
// Параметры:
//  СтранаПроисхождения	 - СправочникСсылка.КлассификаторСтранМира - ссылка на страну происхождения.
// 
// Возвращаемое значение:
//  Строка, Неопределено - код страны по ОКСМ.
//
Функция КодСтраны(СтранаПроисхождения)
	
	//: СтранаПроисхождения = Справочники.КлассификаторСтранМира.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(СтранаПроисхождения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КодСтраны = Неопределено;
	
	ОКСМ = Классификаторы.Страна(СтранаПроисхождения.Код);
	Если ОКСМ <> Неопределено Тогда
		КодСтраны = ОКСМ.Код;
	КонецЕсли;
	
	Возврат КодСтраны;
	
КонецФункции

// Поиск штрихкода.
//
// Параметры:
//  Номенклатура	 - СправочникСсылка.Номенклатура - номенклатура.
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры.
//  Серия			 - СправочникСсылка.СерииНоменклатуры - серия номенклатуры.
//  ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения - единица измерения номенклатуры.
//  Качество		 - СправочникСсылка.Качество - качество.
// 
// Возвращаемое значение:
//  Строка, Неопределено - найденный штрихкод.
//
Функция Штрихкод(Номенклатура, Характеристика, Серия, ЕдиницаИзмерения, Качество)
	
	Результат = Неопределено;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Номенклатура
		|{ГДЕ
		|	Штрихкоды.ЕдиницаИзмерения,
		|	Штрихкоды.ХарактеристикаНоменклатуры КАК Характеристика,
		|	Штрихкоды.СерияНоменклатуры КАК Серия,
		|	Штрихкоды.Качество}";
		
	Построитель = Новый ПостроительЗапроса(ТекстЗапроса);
	Построитель.Параметры.Вставить("Номенклатура", Номенклатура);
	Построитель.ЗаполнитьНастройки();
	
	Отборы = Новый Массив;
	Отбор = Новый Структура(
		"ЕдиницаИзмерения, Характеристика, Серия, Качество",
		ЕдиницаИзмерения,
		Характеристика,
		Серия,
		Качество
	);
	Отборы.Добавить(Отбор);
	Отбор = Новый Структура(
		"ЕдиницаИзмерения, Характеристика, Качество",
		ЕдиницаИзмерения,
		Характеристика,
		Качество
	);
	Отборы.Добавить(Отбор);
	Отбор = Новый Структура(
		"ЕдиницаИзмерения, Качество",
		ЕдиницаИзмерения,
		Характеристика,
		Качество
	);
	Отборы.Добавить(Отбор);
	
	Найден = Ложь;
	Для Каждого Отбор Из Отборы Цикл
		
		Построитель.Отбор.Сбросить();
		УстановитьОтборПостроителя(Построитель, Отбор);
		
		Построитель.Выполнить();
		
		Найден = НЕ Построитель.Результат.Пустой();
		
		Если Найден Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден Тогда
		
		Выборка = Построитель.Результат.Выбрать();
		Выборка.Следующий();
		
		Результат = Выборка.Штрихкод;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает должность физ.лица.
//
// Параметры:
//  ФизЛицо		 - СправочникСсылка.ФизическиеЛица - физ. лицо, должность которого надо получить.
//  Организация	 - СправочникСсылка.Организации - организация, в которой работает физ. лицо.
//  Дата		 - Дата - дата, на которую будет получена должность.
// 
// Возвращаемое значение:
//  Строка - должность физ. лица.
//
Функция ДолжностьФизЛица(ФизЛицо, Организация, Дата)
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Должность = Конфигурация.ДолжностьФизЛица(ФизЛицо, Организация, Дата);
	Должность = НеопределеноЕслиНеЗаполнено(Строка(Должность));
	
	Возврат Должность;
	
КонецФункции

//}


//===================================
//{ Преобразование документов в объектную модель ИР

// Исходный документ

// Конвертирует счет-фактуру в объект ИР.
// В том числе извлекаются данные первичного документа, если он поддерживается.
//
// Параметры:
//  Ссылка	 - ДокументСсылка.СчетФактураВыданный - счет-фактура.
// 
// Возвращаемое значение:
//  Структура - объект ИР (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_ИсходныйДокумент()).
//
Функция СчетФактура(Ссылка)
	
	//: Ссылка = Документы.СчетФактураВыданный.ПустаяСсылка();
	
	Шапка = Ссылка;
	
	Документ = ПервичныйДокумент(Шапка.ДокументОснование);
	
	//{ Реквизиты документа
	
	Реквизиты = Документ.Реквизиты;
	
	Если НЕ Шапка.Исправление Тогда
		
		Реквизиты.Номер	= ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
		Реквизиты.Дата	= Шапка.Дата;
		
	Иначе
		
		Реквизиты.Номер	= Шапка.НомерИсходногоДокумента;
		Реквизиты.Дата	= Шапка.ДатаИсходногоДокумента;
		
		Исправление = ОМКонфигурации.Новый_Исправление();
		Исправление.Номер	= Шапка.НомерИсправления;
		Исправление.Дата	= Шапка.Дата;
		
		Реквизиты.Исправление = Исправление;
		
	КонецЕсли;
	
	//}
	
	ПлатежноРасчетныеДокументы = Документ.ПлатежноРасчетныеДокументы; //: ПлатежноРасчетныеДокументы = Новый ТаблицаЗначений;
	Для Каждого ПРД Из Шапка.ДатаНомерДокументовОплаты Цикл
		
		Номер	= ПРД.НомерПлатежноРасчетногоДокумента;
		Дата	= ПРД.ДатаПлатежноРасчетногоДокумента;
		
		Если НЕ ЗначениеЗаполнено(Номер) И НЕ ЗначениеЗаполнено(Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйПРД = ПлатежноРасчетныеДокументы.Добавить();
		НовыйПРД.Номер	= Номер;
		НовыйПРД.Дата	= Дата;
		
	КонецЦикла;
	
	Возврат Документ;
	
КонецФункции

// Конвертирует документ конфигурации в объект ИР.
//
// Параметры:
//  Ссылка	 - ДокументСсылка - конвертируемый документ.
// 
// Возвращаемое значение:
//  Структура - объект ИР (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_ИсходныйДокумент()).
//
Функция ПервичныйДокумент(Ссылка)
	
	Документ = Неопределено;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Документ = ПервичныйДокумент_РеализацияТоваровУслуг(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Документ = ПервичныйДокумент_КорректировкаРеализации(Ссылка);
	КонецЕсли;
	
	Если Документ = Неопределено Тогда
		Документ = Конфигурация.ПервичныйДокумент(Ссылка);
	КонецЕсли;
	
	Если Документ = Неопределено Тогда
		ВызватьИсключение "Не реализовано";
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

// Вспомогательная функция для формирования первичного документа.
// 
Функция ПервичныйДокумент_РеализацияТоваровУслуг(Ссылка)
	
	//: Ссылка = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	Документ = ОМКонфигурации.Новый_ИсходныйДокумент();
	
	Шапка = Ссылка;
	
	//{ Реквизиты документа
	
	Реквизиты = Документ.Реквизиты;
	Реквизиты.Номер	= Шапка.Номер;
	Реквизиты.Дата	= Шапка.Дата;
	
	//}
	
	//{ Стороны сделки
	
	СтороныСделки = Документ.СтороныСделки;
	СтороныСделки.Продавец						= Контрагент(Шапка.Организация);
	СтороныСделки.Продавец.Адрес				= АдресКонтрагента(Шапка.Организация, Истина);
	Если ЗначениеЗаполнено(Шапка.БанковскийСчетОрганизации) Тогда
		СтороныСделки.Продавец.БанковскийСчет	= БанковскийСчет(Шапка.БанковскийСчетОрганизации);
	КонецЕсли;
	
	СтороныСделки.Покупатель		= Контрагент(Шапка.Контрагент);
	СтороныСделки.Покупатель.Адрес	= АдресКонтрагента(Шапка.Контрагент, Истина);
	
	//}
	
	//{ Данные транспортировки
	
	ДанныеТранспортировки = Документ.ДанныеТранспортировки;
	
	ДанныеТранспортировки.Основание = Основание(Шапка.ДоговорКонтрагента);
	
	Грузоотправитель = Контрагент(Шапка.Грузоотправитель);
	Если Грузоотправитель <> Неопределено Тогда
		Грузоотправитель.Адрес = АдресКонтрагента(Шапка.Грузоотправитель, Ложь);
	КонецЕсли;
	Грузополучатель	= Контрагент(Шапка.Грузополучатель);
	Если Грузополучатель <> Неопределено Тогда
		Грузополучатель.Адрес = АдресКонтрагента(Шапка.Грузополучатель, Ложь);
	КонецЕсли;
	ДанныеТранспортировки.Грузоотправитель	= Грузоотправитель;
	ДанныеТранспортировки.Грузополучатель	= Грузополучатель;
	
	//}
	
	Документ.Валюта = Валюта(Шапка.ВалютаДокумента);
	
	//{ Ответственные лица
	
	ОтветственныеЛица = Документ.ОтветственныеЛица;
	ОтветственныеЛица.ОтпускПроизвел = ОтветственноеЛицо(Шапка.ОтпускПроизвел, Шапка.Организация, Шапка.Дата);
	
	//}
	
	//{ Табличная часть
	
	ТабличнаяЧасть = Документ.ТМЦ.ТабличнаяЧасть;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияТоваров(Ссылка, "Товары");
	Товары = ТабЧастьТовары(Шапка, Шапка.Товары, ПараметрыЗаполнения); //: Товары = Новый ТаблицаЗначений;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияУслуг();
	Услуги = ТабЧастьУслуги(Шапка, Шапка.Услуги, ПараметрыЗаполнения);
	
	ДополнитьТаблицу(ТабличнаяЧасть, Товары);
	ДополнитьТаблицу(ТабличнаяЧасть, Услуги);
	
	ОМКонфигурации.ЗаполнитьКолонкуНомерСтроки(ТабличнаяЧасть);
	
	Итого = Документ.ТМЦ.Итого;
	ОМКонфигурации.ЗаполнитьИтого(Итого, ТабличнаяЧасть);
	
	Документ.ТМЦ.ТолькоУслуги = (Товары.Количество() = 0);
	
	//}
	
	Возврат Документ;
	
КонецФункции

// Вспомогательная функция для формирования первичного документа.
// 
Функция ПервичныйДокумент_КорректировкаРеализации(Ссылка)
	
	//: Ссылка = Документы.КорректировкаРеализации.ПустаяСсылка();
	
	Документ = ОМКонфигурации.Новый_ИсходныйДокумент();
	
	Шапка = Ссылка;
	
	//{ Реквизиты документа
	
	Реквизиты = Документ.Реквизиты;
		
	Реквизиты.Номер	= Шапка.ИсправляемыйДокументРеализации.Номер;
	Реквизиты.Дата	= Шапка.ИсправляемыйДокументРеализации.Дата;
	
	Исправление = ОМКонфигурации.Новый_Исправление();
	Исправление.Дата = Шапка.Дата;
	
	Реквизиты.Исправление = Исправление;
	
	//}
	
	//{ Стороны сделки
	
	СтороныСделки = Документ.СтороныСделки;
	СтороныСделки.Продавец						= Контрагент(Шапка.Организация);
	СтороныСделки.Продавец.Адрес				= АдресКонтрагента(Шапка.Организация, Истина);
	Если ЗначениеЗаполнено(Шапка.БанковскийСчетОрганизации) Тогда
		СтороныСделки.Продавец.БанковскийСчет	= БанковскийСчет(Шапка.БанковскийСчетОрганизации);
	КонецЕсли;
	
	СтороныСделки.Покупатель		= Контрагент(Шапка.Контрагент);
	СтороныСделки.Покупатель.Адрес	= АдресКонтрагента(Шапка.Контрагент, Истина);
	
	//}
	
	//{ Данные транспортировки
	
	ДанныеТранспортировки = Документ.ДанныеТранспортировки;
	
	ДанныеТранспортировки.Основание = Основание(Шапка.ДоговорКонтрагента);
	
	Грузоотправитель = Контрагент(Шапка.Грузоотправитель);
	Если Грузоотправитель <> Неопределено Тогда
		Грузоотправитель.Адрес = АдресКонтрагента(Шапка.Грузоотправитель, Ложь);
	КонецЕсли;
	Грузополучатель	= Контрагент(Шапка.Грузополучатель);
	Если Грузополучатель <> Неопределено Тогда
		Грузополучатель.Адрес = АдресКонтрагента(Шапка.Грузополучатель, Ложь);
	КонецЕсли;
	ДанныеТранспортировки.Грузоотправитель	= Грузоотправитель;
	ДанныеТранспортировки.Грузополучатель	= Грузополучатель;
	
	//}
	
	Документ.Валюта = Валюта(Шапка.ВалютаДокумента);
	
	//{ Ответственные лица
	
	ОтветственныеЛица = Документ.ОтветственныеЛица;
	
	Если ЕстьРеквизитОбъекта("ОтпускПроизвел", Шапка.ИсправляемыйДокументРеализации.Метаданные()) Тогда
		ОтветственныеЛица.ОтпускПроизвел = ОтветственноеЛицо(Шапка.ИсправляемыйДокументРеализации.ОтпускПроизвел, Шапка.Организация, Шапка.Дата);
	КонецЕсли;
	
	//}
	
	//{ Табличная часть
	
	ТабличнаяЧасть = Документ.ТМЦ.ТабличнаяЧасть;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияТоваров(Ссылка, "Товары");
	Товары = ТабЧастьТовары(Шапка, Шапка.Товары, ПараметрыЗаполнения); //: Товары = Новый ТаблицаЗначений;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияУслуг();
	Услуги = ТабЧастьУслуги(Шапка, Шапка.Услуги, ПараметрыЗаполнения);
	
	ДополнитьТаблицу(ТабличнаяЧасть, Товары);
	ДополнитьТаблицу(ТабличнаяЧасть, Услуги);
	
	ОМКонфигурации.ЗаполнитьКолонкуНомерСтроки(ТабличнаяЧасть);
	
	Итого = Документ.ТМЦ.Итого;
	ОМКонфигурации.ЗаполнитьИтого(Итого, ТабличнаяЧасть);
	
	Документ.ТМЦ.ТолькоУслуги = (Товары.Количество() = 0);
	
	//}
	
	Возврат Документ;
	
КонецФункции

// Корректировочный документ

// Конвертирует корректировочный счет-фактуру в объект ИР.
// В том числе извлекаются данные первичного документа, если он поддерживается.
//
// Параметры:
//  Ссылка	 - ДокументСсылка.СчетФактураВыданный - счет-фактура.
// 
// Возвращаемое значение:
//  Структура - объект ИР (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_КорректировочныйДокумент()).
//
Функция КорректировочныйСчетФактура(Ссылка)
	
	//: Ссылка = Документы.СчетФактураВыданный.ПустаяСсылка();
	
	Шапка = Ссылка;
	
	Документ = ПервичныйКорректировочныйДокумент(Шапка.ДокументОснование);
	
	//{ Реквизиты документа
	
	Реквизиты = Документ.Реквизиты;
	
	Если НЕ Шапка.Исправление Тогда
		
		Реквизиты.Номер	= ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
		Реквизиты.Дата	= Шапка.Дата;
		
	Иначе
		
		Реквизиты.Номер	= Шапка.НомерИсправляемогоКорректировочногоДокумента;
		Реквизиты.Дата	= Шапка.ДатаИсправляемогоКорректировочногоДокумента;
		
		Исправление = ОМКонфигурации.Новый_Исправление();
		Исправление.Номер	= Шапка.НомерИсправления;
		Исправление.Дата	= Шапка.Дата;
		
		Реквизиты.Исправление = Исправление;
		
	КонецЕсли;
	
	//}
	
	//{ Реквизиты исходного документа
	
	РеквизитыОснования = Шапка.ДокументыОснования.Найти(Шапка.ДокументОснование, "ДокументОснование");
	Если РеквизитыОснования <> Неопределено Тогда
		
		ИсходныйДокумент = Реквизиты.ИсходныйДокумент;
		ИсходныйДокумент.Номер = РеквизитыОснования.НомерИсходногоДокумента;
		ИсходныйДокумент.Дата = РеквизитыОснования.ДатаИсходногоДокумента;
		
		ЕстьИсправление = РеквизитыОснования.УчитыватьИсправлениеИсходногоДокумента;
		Если ЕстьИсправление Тогда
			
			Исправление = ОМКонфигурации.Новый_Исправление();
			Исправление.Номер = РеквизитыОснования.НомерИсправленияИсходногоДокумента;
			Исправление.Дата = РеквизитыОснования.ДатаИсправленияИсходногоДокумента;
			
			ИсходныйДокумент.Исправление = Исправление;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//}
	
	Возврат Документ;
	
КонецФункции

// Конвертирует документ конфигурации в объект ИР.
//
// Параметры:
//  Ссылка	 - ДокументСсылка.КорректировкаРеализации - конвертируемый документ.
// 
// Возвращаемое значение:
//  Структура - объект ИР (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_КорректировочныйДокумент()).
//
Функция ПервичныйКорректировочныйДокумент(Ссылка)
	
	Документ = Неопределено;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Документ = ПервичныйКорректировочныйДокумент_КорректировкаРеализации(Ссылка);
	Иначе
		ВызватьИсключение "Не реализовано";
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

// Вспомогательная функция для формирования первичного корректировочного документа.
// 
Функция ПервичныйКорректировочныйДокумент_КорректировкаРеализации(Ссылка)
	
	//: Ссылка = Документы.КорректировкаРеализации.ПустаяСсылка();
	
	Документ = ОМКонфигурации.Новый_КорректировочныйДокумент();
	
	Шапка = Ссылка;
	
	//{ Реквизиты документа
	
	Реквизиты = Документ.Реквизиты;
	Реквизиты.Номер	= Шапка.Номер;
	Реквизиты.Дата	= Шапка.Дата;
	
	//}
	
	//{ Реквизиты исходного документа
	
	ИсходнаяРеализация = Шапка.ИсправляемыйДокументРеализации;
	
	ИсходныйДокумент = Реквизиты.ИсходныйДокумент;
	ИсходныйДокумент.Номер	= ИсходнаяРеализация.Номер;
	ИсходныйДокумент.Дата	= ИсходнаяРеализация.Дата;
	
	//}
	
	//{ Стороны сделки
	
	СтороныСделки = Документ.СтороныСделки;
	СтороныСделки.Продавец						= Контрагент(Шапка.Организация);
	СтороныСделки.Продавец.Адрес				= АдресКонтрагента(Шапка.Организация, Истина);
	Если ЗначениеЗаполнено(Шапка.БанковскийСчетОрганизации) Тогда
		СтороныСделки.Продавец.БанковскийСчет	= БанковскийСчет(Шапка.БанковскийСчетОрганизации);
	КонецЕсли;
	
	СтороныСделки.Покупатель		= Контрагент(Шапка.Контрагент);
	СтороныСделки.Покупатель.Адрес	= АдресКонтрагента(Шапка.Контрагент, Истина);
	
	//}
	
	//{ Данные согласования
	
	ДанныеСогласования = Документ.ДанныеСогласования;
	ДанныеСогласования.Основание = Основание(Шапка.ДоговорКонтрагента);
	
	//}
	
	Документ.Валюта = Валюта(Шапка.ВалютаДокумента);
	
	//{ Табличная часть
	
	ТабличнаяЧасть = Документ.ИзмененияТМЦ.ТабличнаяЧасть;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияТоваров(Ссылка, "Товары");
	ЗаполнитьТабЧастьКорректировкиИзТоваров(ТабличнаяЧасть, Шапка, Шапка.Товары, ПараметрыЗаполнения);
	
	ПараметрыЗаполнения = ПараметрыЗаполненияУслуг();
	ЗаполнитьТабЧастьКорректировкиИзУслуг(ТабличнаяЧасть, Шапка, Шапка.Услуги, ПараметрыЗаполнения);
	
	ОМКонфигурации.ЗаполнитьКолонкуНомерСтроки(ТабличнаяЧасть);
	
	Итого = Документ.ИзмененияТМЦ.Итого;
	ОМКонфигурации.ЗаполнитьИтого(Итого, ТабличнаяЧасть);
	
	//}
	
	Возврат Документ;
	
КонецФункции

// Табличная часть корректировочного документа

// Заполняет таб.часть корректировочного документа ИР из таб.части документа конфигурации с товарами.
//
// Параметры:
//  ТабличнаяЧасть		 - ТаблицаЗначений - таб.часть корректировочного документа (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_ТабЧастьКорректировки()).
//  Шапка				 - ДокументСсылка - документ конфигурации.
//  Товары				 - ДокументТабличнаяЧасть - таб.часть документа конфигурации с товарами.
//  ПараметрыЗаполнения	 - Структура - параметры заполнения (см. ПараметрыЗаполненияТоваров()).
//
Процедура ЗаполнитьТабЧастьКорректировкиИзТоваров(ТабличнаяЧасть, Шапка, Товары, ПараметрыЗаполнения)
	
	//: Шапка = Документы.КорректировкаРеализации.ПустаяСсылка();
	//: Товары = Шапка.Товары;
	//: ТабличнаяЧасть = Товары;
	
	ДоПосле = ПоляССуффиксами(
		"Количество, ЕдиницаИзмерения, СтавкаНДС, Цена, СуммаБезНДС, СуммаНДС, СуммаСНДС",
		"До, После"
	); //: ДоПосле = Новый Структура;
	
	ДоПослеКонф = ПоляССуффиксами(
		"Количество, Цена, Сумма, СуммаНДС",
		"ДоИзменения, ",
		Ложь
	); //: ДоПослеКонф = Новый Соответствие;
	
	СуффиксыКонф = Новый Структура(
		"До,			После",
		"ДоИзменения",	""
	);
	
	ИменаПолейУвелУмен = "СуммаБезНДС, СуммаНДС, СуммаСНДС";
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		СтрокаТМЦ = ТабличнаяЧасть.Добавить();
		
		Номенклатура = Номенклатура(СтрокаТЧ.Номенклатура);
		
		СтрокаТМЦ.Наименование = Номенклатура.Наименование;
		
		ЕдиницаИзКлассификатора = ЕдиницаИзКлассификатора(
			?(ПараметрыЗаполнения.ЕстьЕдиницаИзмеренияВТЧ,
				СтрокаТЧ.ЕдиницаИзмерения,
				СтрокаТЧ.Номенклатура
			),
			ПараметрыЗаполнения
		);
		ЕдиницаИзмерения = ЕдиницаИзмерения(ЕдиницаИзКлассификатора);
		
		СтавкаНДС = СтавкаНДС(СтрокаТЧ.СтавкаНДС);
		
		Для Каждого Суффикс Из ДоПосле Цикл
			
			СуффиксКонф = СуффиксыКонф[Суффикс.Ключ];
			
			Поля = Суффикс.Значение;
			ПоляКонф = ДоПослеКонф[СуффиксКонф];
			
			СтрокаТМЦ[Поля.Количество]			= СтрокаТЧ[ПоляКонф.Количество];
			СтрокаТМЦ[Поля.ЕдиницаИзмерения]	= ЕдиницаИзмерения;
			
			СтрокаТМЦ[Поля.СтавкаНДС]	= СтавкаНДС;
			СтрокаТМЦ[Поля.СуммаНДС]	= СтрокаТЧ[ПоляКонф.СуммаНДС];
			
			Суммы = РассчитатьСуммы(Шапка.СуммаВключаетНДС, СтрокаТЧ[ПоляКонф.Сумма], СтрокаТЧ[ПоляКонф.СуммаНДС]);
			СтрокаТМЦ[Поля.СуммаБезНДС]	= Суммы.БезНДС;
			СтрокаТМЦ[Поля.СуммаСНДС]	= Суммы.СНДС;
			СтрокаТМЦ[Поля.Цена]		= РассчитатьЦену(СтрокаТМЦ[Поля.Количество], СтрокаТМЦ[Поля.СуммаБезНДС]);
			
		КонецЦикла;
		
	КонецЦикла;
	
	РассчитатьИЗаполнитьУвеличениеУменьшение(ТабличнаяЧасть, ИменаПолейУвелУмен);
	
КонецПроцедуры

// Заполняет таб.часть корректировочного документа ИР из таб.части документа конфигурации с услугами.
//
// Параметры:
//  ТабличнаяЧасть		 - ТаблицаЗначений - таб.часть корректировочного документа (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_ТабЧастьИсходногоДокумента()).
//  Шапка				 - ДокументСсылка - документ конфигурации.
//  Услуги				 - ДокументТабличнаяЧасть - таб.часть документа конфигурации с услугами.
//  ПараметрыЗаполнения	 - Структура - параметры заполнения (см. ПараметрыЗаполненияУслуг()).
//
Процедура ЗаполнитьТабЧастьКорректировкиИзУслуг(ТабличнаяЧасть, Шапка, Услуги, ПараметрыЗаполнения)
	
	//: Шапка = Документы.КорректировкаРеализации.ПустаяСсылка();
	//: Услуги = Шапка.Услуги;
	//: ТабличнаяЧасть = Услуги;
	
	ДоПосле = ПоляССуффиксами(
		"Количество, ЕдиницаИзмерения, СтавкаНДС, Цена, СуммаБезНДС, СуммаНДС, СуммаСНДС",
		"До, После"
	); //: ДоПосле = Новый Структура;
	
	ДоПослеКонф = ПоляССуффиксами(
		"Количество, Цена, Сумма, СуммаНДС",
		"ДоИзменения, ",
		Ложь
	); //: ДоПослеКонф = Новый Соответствие;
	
	СуффиксыКонф = Новый Структура(
		"До,			После",
		"ДоИзменения",	""
	);
	
	ИменаПолейУвелУмен = "СуммаБезНДС, СуммаНДС, СуммаСНДС";
	
	Для Каждого СтрокаТЧ Из Услуги Цикл
		
		СтрокаТМЦ = ТабличнаяЧасть.Добавить();
		
		Номенклатура = Номенклатура(СтрокаТЧ.Номенклатура);
		
		СтрокаТМЦ.Наименование = Номенклатура.Наименование;
		
		ЕдиницаИзКлассификатора = ЕдиницаИзКлассификатора(СтрокаТЧ.Номенклатура, ПараметрыЗаполнения);
		ЕдиницаИзмерения = ЕдиницаИзмерения(ЕдиницаИзКлассификатора);
		
		СтавкаНДС = СтавкаНДС(СтрокаТЧ.СтавкаНДС);
		
		Для Каждого Суффикс Из ДоПосле Цикл
			
			СуффиксКонф = СуффиксыКонф[Суффикс.Ключ];
			
			Поля = Суффикс.Значение;
			ПоляКонф = ДоПослеКонф[СуффиксКонф];
			
			СтрокаТМЦ[Поля.Количество]			= СтрокаТЧ[ПоляКонф.Количество];
			СтрокаТМЦ[Поля.ЕдиницаИзмерения]	= ЕдиницаИзмерения;
			
			СтрокаТМЦ[Поля.СтавкаНДС]	= СтавкаНДС;
			СтрокаТМЦ[Поля.СуммаНДС]	= СтрокаТЧ[ПоляКонф.СуммаНДС];
			
			Суммы = РассчитатьСуммы(Шапка.СуммаВключаетНДС, СтрокаТЧ[ПоляКонф.Сумма], СтрокаТЧ[ПоляКонф.СуммаНДС]);
			СтрокаТМЦ[Поля.СуммаБезНДС]	= Суммы.БезНДС;
			СтрокаТМЦ[Поля.СуммаСНДС]	= Суммы.СНДС;
			СтрокаТМЦ[Поля.Цена]		= РассчитатьЦену(СтрокаТМЦ[Поля.Количество], СтрокаТМЦ[Поля.СуммаБезНДС]);
			
		КонецЦикла;
		
	КонецЦикла;
	
	РассчитатьИЗаполнитьУвеличениеУменьшение(ТабличнаяЧасть, ИменаПолейУвелУмен);
	
КонецПроцедуры

// Вспомогательная процедура для заполнения колонок *Увеличение и *Уменьшение таб.части корректировочного документа ИР.
// Рассчет идет на базе полей *До и *После.
//
// Параметры:
//  ТабличнаяЧасть		 - ТаблицаЗначений - таб.часть корректировочного документа (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_ТабЧастьКорректировки()).
//  ИменаПолейУвелУмен	 - Строка - имена полей для заполнения без суффиксов *Увеличение/*Уменьшение;
// 									заполнение идет из полей с суффиксами *До и *После, так что они должны быть заполнены для правильного рассчета.
//
Процедура РассчитатьИЗаполнитьУвеличениеУменьшение(ТабличнаяЧасть, ИменаПолейУвелУмен)
	
	ДоПосле = ПоляССуффиксами(
		ИменаПолейУвелУмен,
		"До, После"
	); //: ДоПосле = Новый Структура;
	
	УвелУмен = ПоляССуффиксами(
		ИменаПолейУвелУмен,
		"Увеличение, Уменьшение"
	); //: УвелУмен = Новый Структура;
	
	СписокПолейУвелУмен = СтрРазделить2(ИменаПолейУвелУмен, ",",, Истина);
	
	Для Каждого СтрокаТМЦ Из ТабличнаяЧасть Цикл
		
		Для Каждого ИмяПоля Из СписокПолейУвелУмен Цикл
			
			До			= ДоПосле.До[ИмяПоля];
			После		= ДоПосле.После[ИмяПоля];
			Увеличение	= УвелУмен.Увеличение[ИмяПоля];
			Уменьшение	= УвелУмен.Уменьшение[ИмяПоля];
			
			Разность = СтрокаТМЦ[После] - СтрокаТМЦ[До];
			Если Разность > 0 Тогда
				СтрокаТМЦ[Увеличение] = Разность;
			Иначе
				СтрокаТМЦ[Уменьшение] = -Разность;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//}

//===================================
//{ Утилитарные методы для конвертации документов

// Заполнение реквизитов, зависящее от параметров заполнения

// Получает соответствующую переданному объекту единицу измерения из справочника КлассификаторЕдиницИзмерения.
//
// Параметры:
//  ЕдиницаИзмеренияИлиНоменклатура	 - СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.Номенклатура - 
// 											объект, единицу измерения которого надо получить.
//  ПараметрыЗаполнения				 - Структура - паразметры заполнения таб.части документа ИР (см. ПараметрыЗаполненияТоваров(), ПараметрыЗаполненияУслуг()).
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторЕдиницИзмерения - единица измерения из справочника-классификатора.
//
Функция ЕдиницаИзКлассификатора(ЕдиницаИзмеренияИлиНоменклатура, ПараметрыЗаполнения)
	
	Результат = Неопределено;
	
	ЕдиницаИзмерения = Неопределено;
	Если ТипЗнч(ЕдиницаИзмеренияИлиНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Номенклатура = ЕдиницаИзмеренияИлиНоменклатура; //: Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		
		Если ПараметрыЗаполнения.ЕстьЕдиницаХраненияОстатков Тогда
			ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
		Иначе
			ЕдиницаИзмерения = Номенклатура.БазоваяЕдиницаИзмерения;
		КонецЕсли;
		
	Иначе
		
		ЕдиницаИзмерения = ЕдиницаИзмеренияИлиНоменклатура; //: ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЕдиницаИзмеренияИзКлассификатора Тогда
		Результат = ЕдиницаИзмерения;
	Иначе
		Результат = ЕдиницаИзмерения.ЕдиницаПоКлассификатору;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сумма

// Рассчитывает сумму с НДС и без НДС из суммы строки ТЧ документа и суммы НДС
//
// Параметры:
//  СуммаВключаетНДС - Булево - признак того, что передаваемая сумма включает НДС.
//  Сумма			 - Число - сумма, которая может включать НДС, а может его не включать.
//  СуммаНДС		 - Число - сумма НДС.
// 
// Возвращаемое значение:
//  Структура - рассчитанные суммы (см. Новый_Суммы).
//
Функция РассчитатьСуммы(СуммаВключаетНДС, Сумма, СуммаНДС)
	
	Суммы = Новый_Суммы();
	
	СуммаБезНДС = ?(СуммаВключаетНДС, 
		Сумма - СуммаНДС, 
		Сумма
	);
	
	СуммаСНДС = СуммаБезНДС + СуммаНДС;
	
	Суммы.БезНДС = СуммаБезНДС;
	Суммы.СНДС = СуммаСНДС;
	
	Суммы = Новый ФиксированнаяСтруктура(Суммы);
	Возврат Суммы;
	
КонецФункции

// Цена

// Рассчитывает цену из количества и суммы.
//
// Параметры:
//  Количество	 - Число - количество.
//  Сумма		 - Число - сумма.
// 
// Возвращаемое значение:
//  Число - цена.
//
Функция РассчитатьЦену(Количество, Сумма)
	
	Цена = Сумма / ?(Количество = 0, 1, Количество);
	
	Возврат Цена;
	
КонецФункции

//}


//===================================
//{ Контактная информация

// Объекты

Функция Новый_АдресРФ()
	
	Адрес = Новый Структура(
		"ЭтоАдресРФ,
		|
		|Индекс,
		|Регион,
		|Район,
		|Город,
		|НаселенныйПункт,
		|Улица,
		|Дом,
		|Корпус,
		|Квартира"
	);
	
	Адрес.ЭтоАдресРФ = Истина;
	
	Возврат Адрес;
	
КонецФункции

Функция Новый_ИностранныйАдрес()
	
	Адрес = Новый Структура(
		"ЭтоАдресРФ,
		|
		|Страна,
		|ПолныйАдрес"
	);
	
	Адрес.ЭтоАдресРФ = Ложь;
	
	Возврат Адрес;
	
КонецФункции

// Методы

// Вспомогательная функция для определения нужного вида КИ при получении адреса.
//
// Параметры:
//  Ссылка		 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, СправочникСсылка.ФизическиеЛица - 
// 							объект, адрес которого необходимо получить.
//  НуженЮрАдрес - Булево - признак того, что необходимо получить юр. адрес, в противном случае - фактический.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации - вид адреса, который нужно подать на вход функции получения КИ.
//
Функция ВидАдреса(Ссылка, НуженЮрАдрес)
	
	ЮрФакт = ?(НуженЮрАдрес, "Юр", "Факт");
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		ТипОбъекта = "Организации";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТипОбъекта = "Контрагента";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ТипОбъекта = "ФизЛица";
	КонецЕсли;
	
	ИмяПеречисления = ЮрФакт + "Адрес" + ТипОбъекта;
	ЗначениеПеречисления = Справочники.ВидыКонтактнойИнформации[ИмяПеречисления];
	
	Возврат ЗначениеПеречисления;
	
КонецФункции

// Вспомогательная функция для определения нужного вида КИ при получении телефона.
//
// Параметры:
//  Ссылка		 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, СправочникСсылка.ФизическиеЛица - 
// 							объект, телефон которого необходимо получить.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации, Неопределено - вид телефона, который нужно подать на вход функции получения КИ.
//
Функция ВидТелефона(Ссылка)
	
	Результат = Конфигурация.ВидТелефона(Ссылка);
	
	Возврат Результат;
	
КонецФункции

// Вспомогательная функция для определения нужного вида КИ при получении факса.
//
// Параметры:
//  Ссылка		 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - 
// 							объект, факс которого необходимо получить.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации, Неопределено - вид факса, который нужно подать на вход функции получения КИ.
//
Функция ВидФакса(Ссылка)
	
	Результат = Конфигурация.ВидФакса(Ссылка);
	
	Возврат Результат;
	
КонецФункции

// Вспомогательная функция для определения нужного вида КИ при получении email.
//
// Параметры:
//  Ссылка		 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, СправочникСсылка.ФизическиеЛица - 
// 							объект, email которого необходимо получить.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации, Неопределено - вид email, который нужно подать на вход функции получения КИ.
//
Функция ВидEmail(Ссылка)
	
	Результат = Конфигурация.ВидEmail(Ссылка);
	
	Возврат Результат;
	
КонецФункции

// Предназначена для получения контактной информации конкретного типа и вида.
//
// Параметры:
//  Ссылка	 - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация,
// 							 контрагент и т.п.)
//  ТипКИ	 - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//  ВидКИ	 - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура, Строка, Неопределено - зависит от типа контактной информации (см. Новый_АдресРФ(), Новый_ИностранныйАдрес())
//
Функция ПолучитьКонтактнуюИнформацию(Ссылка, ТипКИ, ВидКИ)
	
	Результат = Неопределено;
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	КонтактнаяИнформация.Поле1 КАК Индекс,
			|	КонтактнаяИнформация.Поле2 КАК Регион,
			|	КонтактнаяИнформация.Поле3 КАК Район,
			|	КонтактнаяИнформация.Поле4 КАК Город,
			|	КонтактнаяИнформация.Поле5 КАК НаселенныйПункт,
			|	КонтактнаяИнформация.Поле6 КАК Улица,
			|	КонтактнаяИнформация.Поле7 КАК Дом,
			|	КонтактнаяИнформация.Поле8 КАК Корпус,
			|	КонтактнаяИнформация.Поле9 КАК Квартира,
			|	КонтактнаяИнформация.Поле1 КАК Страна,
			|	КонтактнаяИнформация.Представление КАК ПолныйАдрес
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект
			|	И КонтактнаяИнформация.Тип = &Тип
			|	И КонтактнаяИнформация.Вид = &Вид";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	КонтактнаяИнформация.Представление
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект
			|	И КонтактнаяИнформация.Тип = &Тип
			|	И КонтактнаяИнформация.Вид = &Вид"
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Запрос.УстановитьПараметр("Тип", ТипКИ);
	Запрос.УстановитьПараметр("Вид", ВидКИ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
		ЭтоАдресРФ = ЗначениеЗаполнено("" + Выборка.Регион + Выборка.Район + Выборка.Город + Выборка.НаселенныйПункт +
			Выборка.Улица + Выборка.Дом + Выборка.Корпус + Выборка.Квартира);
		Если ЭтоАдресРФ Тогда
			Адрес = Новый_АдресРФ();
			ЗаполнитьЗначенияСвойств(Адрес, Выборка, "Индекс, Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира");
		Иначе
			Адрес = Новый_ИностранныйАдрес();
			ЗаполнитьЗначенияСвойств(Адрес, Выборка, "Страна, ПолныйАдрес");
		КонецЕсли;
		
		Результат = Новый ФиксированнаяСтруктура(Адрес);
		
	Иначе
		
		Результат = НеопределеноЕслиНеЗаполнено(Выборка.Представление);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//}

//===================================
//{ Работа с организациями и контрагентами

// Определяет, является ли переданная ссылка, ссылкой на организацию.
//
// Параметры:
//  Ссылка	 - ЛюбаяСсылка - ссылка на объект.
// 
// Возвращаемое значение:
//  Булево - это ссылка на организацию.
//
Функция ЭтоОрганизация(Ссылка)
	
	Результат = (ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации"));
	
	Возврат Результат;
	
КонецФункции

// Определяет, является ли переденный контрагент или организация индивидуальным предпринимателем.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - ссылка на объект.
// 
// Возвращаемое значение:
//  Булево - это ИП.
//
Функция ЭтоИП(Ссылка)
	
	Результат = (Ссылка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	
	Возврат Результат;
	
КонецФункции

// Получает физ.лицо, соответствующее организации-ИП.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - организация, являющаяся индивидуальным предпринимателем.
// 
// Возвращаемое значение:
//  СправочникСсылка.ФизическиеЛица, Неопределено - физ.лицо, соответсвующее организации.
//
Функция ФизЛицоИП(Организация)
	
	//: Организация = Справочники.Организации.ПустаяСсылка();
	
	ФизЛицо = Неопределено;
	Если ЕстьРеквизитОбъекта("ИндивидуальныйПредприниматель", Метаданные.Справочники.Организации) Тогда
		ФизЛицо = НеопределеноЕслиНеЗаполнено(Организация.ИндивидуальныйПредприниматель);
	КонецЕсли;
	
	Возврат ФизЛицо;
	
КонецФункции

Функция ОбъектКИ(Ссылка)
	
	ОбъектКИ = Неопределено;
	Если ЭтоОрганизация(Ссылка)
			И ЭтоИП(Ссылка) Тогда
		ОбъектКИ = ФизЛицоИП(Ссылка);
	КонецЕсли;
	
	Если ОбъектКИ = Неопределено Тогда
		ОбъектКИ = Ссылка;
	КонецЕсли;
	
	Возврат ОбъектКИ;
	
КонецФункции

//}

//===================================
//{ Список документов на отправку

Функция ПоддерживаемыеПервичныеДокументы()
	
	ТипыПервичногоДокумента = ЗначенияВМассиве(
		Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		Тип("ДокументСсылка.КорректировкаРеализации")
	);
	
	ДополнительныеТипы = Конфигурация.ПоддерживаемыеПервичныеДокументы();
	Если ДополнительныеТипы <> Неопределено Тогда
		ДополнитьМассив(ТипыПервичногоДокумента, ДополнительныеТипы);
	КонецЕсли;
	
	//ТипыПервичногоДокумента = Новый ФиксированныйМассив(ТипыПервичногоДокумента);
	Возврат ТипыПервичногоДокумента;
	
КонецФункции

Функция ТекстЗапроса_ДокументыДляОтправки()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокДокументов.Ссылка,
		|	СписокДокументов.Дата,
		|	СписокДокументов.Контрагент,
		|	СписокДокументов.СуммаДокумента КАК Сумма,
		|	СписокДокументов.ТипДокумента,
		|	СписокДокументов.ВидДокумента
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|		РеализацияТоваровУслуг.Дата КАК Дата,
		|		РеализацияТоваровУслуг.Проведен КАК Проведен,
		|		РеализацияТоваровУслуг.Организация КАК Организация,
		|		РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|		ВЫБОР
		|			КОГДА &ОтправлятьНовыеФорматы
		|				ТОГДА &ТипУПД
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НаличиеТоваров.Ссылка ЕСТЬ NULL 
		|						ТОГДА &ТипАкт
		|					ИНАЧЕ &ТипТН
		|				КОНЕЦ
		|		КОНЕЦ КАК ТипДокумента,
		|		NULL КАК ВидДокумента
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
		|			ИЗ
		|				Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары) КАК НаличиеТоваров
		|			ПО РеализацияТоваровУслуг.Ссылка = НаличиеТоваров.Ссылка
		|	ГДЕ
		|		ИСТИНА = ВЫБОР
		|				КОГДА НаличиеТоваров.Ссылка ЕСТЬ NULL 
		|					ТОГДА &ОтправлятьАкт
		|				ИНАЧЕ &ОтправлятьТН
		|			КОНЕЦ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СчетФактураВыданный.Ссылка,
		|		СчетФактураВыданный.Дата,
		|		СчетФактураВыданный.Проведен,
		|		СчетФактураВыданный.Организация,
		|		СчетФактураВыданный.Контрагент,
		|		СчетФактураВыданный.СуммаДокумента,
		|		ВЫБОР СчетФактураВыданный.ВидСчетаФактуры
		|			КОГДА &КорректировочныйСФ
		|				ТОГДА ВЫБОР
		|						КОГДА СчетФактураВыданный.Исправление
		|							ТОГДА &ТипИсправленныйУКД
		|						ИНАЧЕ &ТипУКД
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА СчетФактураВыданный.Исправление
		|						ТОГДА &ТипИсправленныйУПД
		|					ИНАЧЕ &ТипУПД
		|				КОНЕЦ
		|		КОНЕЦ,
		|		NULL
		|	ИЗ
		|		Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ЗначенияСвойствОбъектов.Объект КАК Ссылка
		|			ИЗ
		|				РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|			ГДЕ
		|				ЗначенияСвойствОбъектов.Свойство = &СвойствоИдДокумента) КАК ОтправленныеОснования
		|			ПО СчетФактураВыданный.ДокументОснование = ОтправленныеОснования.Ссылка
		|	ГДЕ
		|		&ОтправлятьСФ
		|		И &ОтправлятьНовыеФорматы
		|		И СчетФактураВыданный.ВидСчетаФактуры В(&ДопустимыеВидыСФ)
		|		И ТИПЗНАЧЕНИЯ(СчетФактураВыданный.ДокументОснование) В (&ДопустимыеОснованияСФ)
		|		И ВЫБОР
		|				КОГДА &ОтправлятьКомплект
		|					ТОГДА НЕ ОтправленныеОснования.Ссылка ЕСТЬ NULL 
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СчетНаОплатуПокупателю.Ссылка,
		|		СчетНаОплатуПокупателю.Дата,
		|		ИСТИНА,
		|		СчетНаОплатуПокупателю.Организация,
		|		СчетНаОплатуПокупателю.Контрагент,
		|		СчетНаОплатуПокупателю.СуммаДокумента,
		|		&ТипСчетНаОплату,
		|		&ВидСчетНаОплату
		|	ИЗ
		|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|	ГДЕ
		|		&ОтправлятьСчетНаОплату
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КорректировкаРеализации.Ссылка,
		|		КорректировкаРеализации.Дата,
		|		КорректировкаРеализации.Проведен,
		|		КорректировкаРеализации.Организация,
		|		КорректировкаРеализации.Контрагент,
		|		КорректировкаРеализации.СуммаДокумента,
		|		ВЫБОР КорректировкаРеализации.ВидОперации
		|			КОГДА &ИсправлениеОшибки
		|				ТОГДА ВЫБОР ТИПЗНАЧЕНИЯ(КорректировкаРеализации.ИсправляемыйДокументРеализации)
		|						КОГДА ТИП(Документ.КорректировкаРеализации)
		|							ТОГДА &ТипИсправленныйУКД
		|						ИНАЧЕ &ТипИсправленныйУПД
		|					КОНЕЦ
		|			КОГДА &СогласованноеИзменение
		|				ТОГДА &ТипУКД
		|		КОНЕЦ,
		|		NULL
		|	ИЗ
		|		Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|	ГДЕ
		|		&ОтправлятьНовыеФорматы
		|		И КорректировкаРеализации.ВидОперации В(&ДопустимыеВидыКорректировки)
		|		И ТИПЗНАЧЕНИЯ(КорректировкаРеализации.ИсправляемыйДокументРеализации) В (&ДопустимыеОснованияКорректировки)) КАК СписокДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗначенияСвойствОбъектов.Объект КАК Ссылка
		|		ИЗ
		|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство = &СвойствоИдДокумента) КАК ОтправленныеДокументы
		|		ПО СписокДокументов.Ссылка = ОтправленныеДокументы.Ссылка
		|ГДЕ
		|	СписокДокументов.Проведен
		|	И ОтправленныеДокументы.Ссылка ЕСТЬ NULL 
		|{ГДЕ
		|	СписокДокументов.Дата,
		|	СписокДокументов.Ссылка,
		|	СписокДокументов.Контрагент,
		|	СписокДокументов.Организация}";
		
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьДокументыДляОтправки(Ссылка = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ДопустимыеКонтрагенты = Неопределено)
	
	СписокДокументов = ОбъектнаяМодель.Новый_СписокДокументовДляОтправки();
	
	Запрос = Запрос_ДокументыДляОтправки(ТекстЗапроса_ДокументыДляОтправки(), Ссылка, НачалоПериода, КонецПериода, ДопустимыеКонтрагенты); //: Запрос = Новый Запрос;
	Если Запрос <> Неопределено Тогда
		
		//{ Установка параметров
		
		ВидыДокумента = ОбъектнаяМодель.ВидыНеформализованныхДокументов();
		Запрос.УстановитьПараметр("ВидСчетНаОплату", ВидыДокумента.СчетНаОплату);
		
		Запрос.УстановитьПараметр("КорректировочныйСФ", Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		
		Запрос.УстановитьПараметр("ИсправлениеОшибки",        Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
		Запрос.УстановитьПараметр("СогласованноеИзменение",   Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
		
		ДопустимыеВидыСФ = ЗначенияВМассиве(
			Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию,
			Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
		);
		ДопустимыеТипыОснованийСФ = ПоддерживаемыеПервичныеДокументы();
		
		ДопустимыеВидыКорректировки = ЗначенияВМассиве(
			Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,
			Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
		);
		ДопустимыеТипыОснованийКорректировки = ДопустимыеТипыОснованийСФ;
		
		Запрос.УстановитьПараметр("ДопустимыеВидыСФ",                 ДопустимыеВидыСФ);
		Запрос.УстановитьПараметр("ДопустимыеОснованияСФ",            ДопустимыеТипыОснованийСФ);
		Запрос.УстановитьПараметр("ДопустимыеВидыКорректировки",      ДопустимыеВидыКорректировки);
		Запрос.УстановитьПараметр("ДопустимыеОснованияКорректировки", ДопустимыеТипыОснованийКорректировки);
		
		//}
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Данные = РезультатЗапроса.Выгрузить();
			СписокДокументов = СписокДокументовДляОтправки(Данные);
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеДокументы = Конфигурация.ПолучитьДокументыДляОтправки(Ссылка, НачалоПериода, КонецПериода, ДопустимыеКонтрагенты);
	Если ДополнительныеДокументы <> Неопределено Тогда
		ДополнитьТаблицу(СписокДокументов, ДополнительныеДокументы);
	КонецЕсли;
	
	СписокДокументов = НеопределеноЕслиНеЗаполнено(СписокДокументов);
	
	Возврат СписокДокументов;
	
КонецФункции

//}

//===================================
//{ Дополнительные свойства объектов

// Получить свойство объекта.
//
// Параметры:
//  ИмяСвойства	 - Строка - имя свойства, допустимые имена свойств см. Модуль_ОбъектнаяМодельКонфигурации.ДопСвойстваОбъектов().
// 
// Возвращаемое значение:
//  ПланВидовХарактеристикСсылка.СвойстваОбъектов - свойство.
//
Функция СвойствоОбъекта(ИмяСвойства)
	
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ИмяСвойства, Истина);
	Свойство = НеопределеноЕслиНеЗаполнено(Свойство);
	
	Возврат Свойство;
	
КонецФункции

Функция ЗначениеСвойстваОбъекта(Ссылка, ИмяСвойства)
	
	Свойство = СвойствоОбъекта(ИмяСвойства);
	
	Отбор = Новый Структура(
		"Объект, Свойство",
		Ссылка,
		Свойство
	);
	
	ЗначенияРесурсов = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор);
	
	Значение = НеопределеноЕслиНеЗаполнено(ЗначенияРесурсов.Значение);
	
	Возврат Значение;
	
КонецФункции

Процедура УстановитьСвойствоОбъекта(Ссылка, ИмяСвойства, Значение)
	
	Свойство = СвойствоОбъекта(ИмяСвойства);
	
	Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Запись.Объект	= Ссылка;
	Запись.Свойство	= Свойство;
	Запись.Значение	= Значение;
	
	Если Значение <> Неопределено Тогда
		Запись.Записать(Истина);
	Иначе
		Запись.Удалить();
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектыПоЗначениюСвойства(ИмяСвойства, Значение)
	
	Результат = Новый Массив;
	
	Свойство = СвойствоОбъекта(ИмяСвойства);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияСвойствОбъектов.Объект КАК Ссылка
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &Свойство
		|	И ЗначенияСвойствОбъектов.Значение = &Значение";
		
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Значение", Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//}

Функция ДокументыСИдентификатором(ИдДокумента)
	
	Результат = ОбъектыПоЗначениюСвойства(ОМКонфигурации.ДопСвойстваОбъектов().ИдДокумента, ИдДокумента);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоСФ(Ссылка)
	
	// TODO: Вместо типа использовать перечисление, значением которого является тип
	Результат = (ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный"));
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоКорректировка(Ссылка)
	
	Результат = Ложь;
	
	Если ЭтоСФ(Ссылка) Тогда
		
		СчетФактура = Ссылка; //: СчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		Результат = (СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		Корректировка = Ссылка; //: Корректировка = Документы.КорректировкаРеализации.ПустаяСсылка();
		Результат = Ложь
			ИЛИ Корректировка.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
			ИЛИ (
				Корректировка.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
				И ТипЗнч(Корректировка.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
			);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиПодчиненныйСчетФактуру(Ссылка)
	
	Результат = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный");
	
	Возврат Результат;
	
КонецФункции

Функция ДокументОснованиеСчетаФактуры(Ссылка)
	
	//: Ссылка = Документы.СчетФактураВыданный.ПустаяСсылка();
	
	Результат = НеопределеноЕслиНеЗаполнено(Ссылка.ДокументОснование);
	
	Возврат Результат;
	
КонецФункции

Функция ИдДокумента(Ссылка)
	
	ИдДокумента = ЗначениеСвойстваОбъекта(Ссылка, ОМКонфигурации.ДопСвойстваОбъектов().ИдДокумента);
	ИдДокумента = НеопределеноЕслиНеЗаполнено(ИдДокумента);
	
	Возврат ИдДокумента;
	
КонецФункции

Функция ПолучитьИнформациюОДокументе(Ссылка)
	
	//: Ссылка = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Документ = ОМКонфигурации.Новый_ИнформацияОДокументе();
	
	Документ.Ссылка = Ссылка;
		
	Документ.Контрагент = Ссылка.Контрагент;
	
	ИдДокумента = ИдДокумента(Ссылка);
	Документ.ИД = ЗаполненноеЗначение(
		ИдДокумента, 
		Строка(Ссылка.УникальныйИдентификатор())
	);
	Документ.Отправлен = ЗначениеЗаполнено(ИдДокумента);
	
	Возврат Документ;
	
КонецФункции

Функция ПолучитьПолнуюИнформациюОДокументе(Ссылка)
	
	//: Ссылка = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	Информация = ОМКонфигурации.Новый_ПолнаяИнформацияОДокументе();
	
	ЭтоСФ				= ЭтоСФ(Ссылка);
	ЭтоКорректировка	= ЭтоКорректировка(Ссылка);
	
	Информация.ЭтоСФ			= ЭтоСФ;
	Информация.ЭтоКорректировка	= ЭтоКорректировка;
	
	СчетФактура = Неопределено;
	ПервичныйДокумент = Неопределено;
	
	Если ЭтоСФ Тогда
		СчетФактура			= Ссылка;
		ПервичныйДокумент	= ДокументОснованиеСчетаФактуры(Ссылка);
	Иначе
		СчетФактура			= НайтиПодчиненныйСчетФактуру(Ссылка);
		ПервичныйДокумент	= Ссылка;
	КонецЕсли;
	
	Информация.СчетФактура			= ПолучитьИнформациюОДокументе(СчетФактура);
	Информация.ПервичныйДокумент	= ПолучитьИнформациюОДокументе(ПервичныйДокумент);
	
	Если ЭтоСФ Тогда
		Информация.ЭтотДокумент		= Информация.СчетФактура;
		Информация.ПарныйДокумент	= Информация.ПервичныйДокумент;
	Иначе
		Информация.ЭтотДокумент		= Информация.ПервичныйДокумент;
		Информация.ПарныйДокумент	= Информация.СчетФактура;
	КонецЕсли;
	
	РодительскийДокумент = РодительскийДокумент(Ссылка);
	
	Информация.РодительскийДокумент = ПолучитьИнформациюОДокументе(РодительскийДокумент);
	
	НаОтправку = ПолучитьДокументыДляОтправки(Ссылка);
	Если НаОтправку <> Неопределено Тогда
		
		Документ = НаОтправку[0];
		
		Информация.ТипДокумента = Документ.ТипДокумента;
		Информация.ВидДокумента = Документ.ВидДокумента;
		
	КонецЕсли;
	
	Информация = ФиксированныеДанные(Информация);
	Возврат Информация;
	
КонецФункции

Функция РодительскийДокумент(Ссылка)
	
	Результат = Неопределено;
	
	Если ЭтоСФ(Ссылка) Тогда
		
		Основание = ДокументОснованиеСчетаФактуры(Ссылка);
		
		РодительОснования = РодительскийДокумент(Основание);
		Если РодительОснования <> Неопределено Тогда
			Результат = НайтиПодчиненныйСчетФактуру(РодительОснования);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		Корректировка = Ссылка; //: Корректировка = Документы.КорректировкаРеализации.ПустаяСсылка();
		Результат = Корректировка.ДокументРеализации;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//===================================
//{ Обработчики событий

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УничтожитьМодули" Тогда
		Конфигурация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

//}

