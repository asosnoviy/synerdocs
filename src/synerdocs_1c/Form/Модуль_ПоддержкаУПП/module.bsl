
//========================================================================
// Модуль поддержки конфигурации УПП и КА
//========================================================================

// Модули
Перем ОМКонфигурации, КонфигурацияОбщий;

//========================================================================
// ИНИЦИАЛИЗАЦИЯ
//========================================================================

Процедура ПодключитьМодули()
	
	ОМКонфигурации		= Модуль("Модуль_ОбъектнаяМодельКонфигурации");
	КонфигурацияОбщий	= Модуль("Модуль_ПоддержкаОбщий");
	
	КонфигурацияОбщий.ПодключитьЗависимости(ЭтаФорма);
	
КонецПроцедуры

Процедура Инициализировать() Экспорт
	
	ПодключитьМодули();
	
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

// Конвертирует документ конфигурации в объект ИР.
//
// Параметры:
//  Ссылка	 - ДокументСсылка.СчетФактураВыданный, ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.АктОбОказанииПроизводственныхУслуг - конвертируемый документ.
// 
// Возвращаемое значение:
//  Структура - объект ИР (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_ИсходныйДокумент()).
//
Функция ИсходныйДокумент(Ссылка) Экспорт
	
	Документ = КонфигурацияОбщий.ИсходныйДокумент(Ссылка);
	
	Возврат Документ;
	
КонецФункции

// Конвертирует документ конфигурации в объект ИР.
// Никаких проверок, что это именно корректировочный документ не делается,
// и работа НЕ с корректировочным документом не гарантируется.
//
// Параметры:
//  Ссылка	 - ДокументСсылка.СчетФактураВыданный, ДокументСсылка.КорректировкаРеализации - конвертируемый документ.
// 
// Возвращаемое значение:
//  Структура - объект ИР (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_КорректировочныйДокумент()).
//
Функция КорректировочныйДокумент(Ссылка) Экспорт
	
	Документ = КонфигурацияОбщий.КорректировочныйДокумент(Ссылка);
	
	Возврат Документ;
	
КонецФункции

// Получает список документов, которые можно отправить в сервис.
//
// Параметры:
//  ДоступныеКонтрагенты - Массив - массив контрагентов, по которым ограничена выборка документов.
//  НачалоПериода		 - Дата - начало периода выборки.
//  КонецПериода		 - Дата - конец периода выборка.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список документов для отправки (см. Модуль_ОбъектнаяМодель.Новый_СписокДокументовДляОтправки()).
//
Функция ПолучитьСписокДокументовДляОтправки(ДоступныеКонтрагенты, НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	СписокДокументов = КонфигурацияОбщий.ПолучитьСписокДокументовДляОтправки(ДоступныеКонтрагенты, НачалоПериода, КонецПериода);
	
	Возврат СписокДокументов;
	
КонецФункции

Функция ТекущаяОрганизация() Экспорт
	
	Результат = КонфигурацияОбщий.ТекущаяОрганизация();
	
	Возврат Результат;
	
КонецФункции

Функция Фактор(Ссылка) Экспорт
	
	Результат = КонфигурацияОбщий.Фактор(Ссылка);
	
	Возврат Результат;
	
КонецФункции

Функция ПолнаяИнформацияОДокументе(Ссылка) Экспорт
	
	Результат = КонфигурацияОбщий.ПолнаяИнформацияОДокументе(Ссылка);
	
	Возврат Результат;
	
КонецФункции

Функция ИнформацияОДокументе(Ссылка) Экспорт
	
	Результат = КонфигурацияОбщий.ИнформацияОДокументе(Ссылка);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьДокументОтправлен(Ссылка, ИдДокумента) Экспорт
	
	КонфигурацияОбщий.УстановитьДокументОтправлен(Ссылка, ИдДокумента);
	
КонецПроцедуры

Процедура УдалитьИдентитфикаторДокумента(ИдДокумента) Экспорт
	
	КонфигурацияОбщий.УдалитьИдентитфикаторДокумента(ИдДокумента);
	
КонецПроцедуры

//========================================================================
// СЛУЖЕБНЫЙ ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

Функция ПоддерживаемыеПервичныеДокументы() Экспорт
	
	ТипыПервичногоДокумента = ЗначенияВМассиве(
		Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
	);
	
	ТипыПервичногоДокумента = Новый ФиксированныйМассив(ТипыПервичногоДокумента);
	Возврат ТипыПервичногоДокумента;
	
КонецФункции

Функция ПолучитьДокументыДляОтправки(Ссылка = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ДопустимыеКонтрагенты = Неопределено) Экспорт
	
	Запрос = КонфигурацияОбщий.Запрос_ДокументыДляОтправки(ТекстЗапроса_ДокументыДляОтправки(), Ссылка, НачалоПериода, КонецПериода, ДопустимыеКонтрагенты); //: Запрос = Новый Запрос;
	Если Запрос = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Данные = РезультатЗапроса.Выгрузить();
		СписокДокументов = КонфигурацияОбщий.СписокДокументовДляОтправки(Данные);
	Иначе
		СписокДокументов = Неопределено;
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции

// Конвертирует документ конфигурации в объект ИР.
//
// Параметры:
//  Ссылка	 - ДокументСсылка.АктОбОказанииПроизводственныхУслуг - конвертируемый документ.
// 
// Возвращаемое значение:
//  Структура - объект ИР (см. Модуль_ОбъектнаяМодельКонфигурации.Новый_ИсходныйДокумент()).
//
Функция ПервичныйДокумент(Ссылка) Экспорт
	
	Документ = Неопределено;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		Документ = ПервичныйДокумент_АктОбОказанииПроизводственныхУслуг(Ссылка);
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

//===================================
//{ Параметры конфигурации

Функция ЕдиницыИзмеренияПоддерживаютсяПолностью() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьШтрихкод() Экспорт
	
	Возврат Истина;
	
КонецФункции

//}

Функция ДолжностьФизЛица(ФизЛицо, Организация, Дата) Экспорт
	
	Сотрудник = ПолныеПрава.СведенияОСотруднике(ФизЛицо, Дата, Организация);
	
	Должность = Сотрудник.Должность;
	Если НЕ ЗначениеЗаполнено(Должность) Тогда
		Должность = ДолжностьОтветственногоЛица(ФизЛицо, Организация, Дата);
	КонецЕсли;
	
	Возврат Должность;
	
КонецФункции

//===================================
//{ Контактная информация

Функция ВидТелефона(Ссылка) Экспорт
	
	ВидыКИ = Справочники.ВидыКонтактнойИнформации;
	
	ВидыТелефонов = Новый Соответствие;
	ВидыТелефонов[Тип("СправочникСсылка.Организации")]		= ВидыКИ.ТелефонОрганизации;
	ВидыТелефонов[Тип("СправочникСсылка.Контрагенты")]		= ВидыКИ.ТелефонКонтрагента;
	ВидыТелефонов[Тип("СправочникСсылка.ФизическиеЛица")]	= ВидыКИ.ТелефонФизЛица;
	
	Результат = ВидыТелефонов[ТипЗнч(Ссылка)];
	Возврат Результат;
	
КонецФункции

Функция ВидФакса(Ссылка) Экспорт
	
	ВидыКИ = Справочники.ВидыКонтактнойИнформации;
	
	ВидыФакса = Новый Соответствие;
	ВидыФакса[Тип("СправочникСсылка.Организации")]		= ВидыКИ.ФаксОрганизации;
	ВидыФакса[Тип("СправочникСсылка.Контрагенты")]		= ВидыКИ.ФаксКонтрагента;
	
	Результат = ВидыФакса[ТипЗнч(Ссылка)];
	Возврат Результат;
	
КонецФункции

Функция ВидEmail(Ссылка) Экспорт
	
	ВидыКИ = Справочники.ВидыКонтактнойИнформации;
	
	ВидыМыла = Новый Соответствие;
	ВидыМыла[Тип("СправочникСсылка.Организации")]		= ВидыКИ.EmailОрганизации;
	ВидыМыла[Тип("СправочникСсылка.Контрагенты")]		= ВидыКИ.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами;
	ВидыМыла[Тип("СправочникСсылка.ФизическиеЛица")]	= ВидыКИ.EmailФизЛица;
	
	Результат = ВидыМыла[ТипЗнч(Ссылка)];
	Возврат Результат;
	
КонецФункции

//}

//========================================================================
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================

//===================================
//{ Преобразование документов в объектную модель ИР

// Вспомогательная функция для формирования первичного документа.
// 
Функция ПервичныйДокумент_АктОбОказанииПроизводственныхУслуг(Ссылка)
	
	//: Ссылка = Документы.АктОбОказанииПроизводственныхУслуг.ПустаяСсылка();
	
	Документ = ОМКонфигурации.Новый_ИсходныйДокумент();
	
	Шапка = Ссылка;
	
	//{ Реквизиты документа
	
	Реквизиты = Документ.Реквизиты;
	Реквизиты.Номер	= Шапка.Номер;
	Реквизиты.Дата	= Шапка.Дата;
	
	//}
	
	//{ Стороны сделки
	
	СтороныСделки = Документ.СтороныСделки;
	СтороныСделки.Продавец			= КонфигурацияОбщий.Контрагент(Шапка.Организация);
	СтороныСделки.Продавец.Адрес	= КонфигурацияОбщий.АдресКонтрагента(Шапка.Организация, Истина);
	
	СтороныСделки.Покупатель		= КонфигурацияОбщий.Контрагент(Шапка.Контрагент);
	СтороныСделки.Покупатель.Адрес	= КонфигурацияОбщий.АдресКонтрагента(Шапка.Контрагент, Истина);
	
	//}
	
	//{ Данные транспортировки
	
	ДанныеТранспортировки = Документ.ДанныеТранспортировки;
	
	ДанныеТранспортировки.Основание = КонфигурацияОбщий.Основание(Шапка.ДоговорКонтрагента);
	
	Грузополучатель	= КонфигурацияОбщий.Контрагент(Шапка.Грузополучатель);
	Если Грузополучатель <> Неопределено Тогда
		Грузополучатель.Адрес = КонфигурацияОбщий.АдресКонтрагента(Шапка.Грузополучатель, Ложь);
	КонецЕсли;
	ДанныеТранспортировки.Грузополучатель = Грузополучатель;
	
	//}
	
	Документ.Валюта = КонфигурацияОбщий.Валюта(Шапка.ВалютаДокумента);
	
	//{ Табличная часть
	
	ТабличнаяЧасть = Документ.ТМЦ.ТабличнаяЧасть;
	
	ПараметрыЗаполнения = КонфигурацияОбщий.ПараметрыЗаполненияУслуг();
	Услуги = КонфигурацияОбщий.ТабЧастьУслуги(Шапка, Шапка.Услуги, ПараметрыЗаполнения);
	
	ЗаполнитьТаблицу(ТабличнаяЧасть, Услуги);
	
	ОМКонфигурации.ЗаполнитьКолонкуНомерСтроки(ТабличнаяЧасть);
	
	Итого = Документ.ТМЦ.Итого;
	ОМКонфигурации.ЗаполнитьИтого(Итого, ТабличнаяЧасть);
	
	Документ.ТМЦ.ТолькоУслуги = Истина;
	
	//}
	
	Возврат Документ;
	
КонецФункции

//}

//===================================
//{ Список документов на отправку

Функция ТекстЗапроса_ДокументыДляОтправки()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокДокументов.Ссылка,
		|	СписокДокументов.Дата,
		|	СписокДокументов.Контрагент,
		|	СписокДокументов.СуммаДокумента КАК Сумма,
		|	СписокДокументов.ТипДокумента,
		|	СписокДокументов.ВидДокумента
		|ИЗ
		|	(ВЫБРАТЬ
		|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка,
		|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата,
		|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен,
		|		АктОбОказанииПроизводственныхУслуг.Организация КАК Организация,
		|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент,
		|		АктОбОказанииПроизводственныхУслуг.СуммаДокумента КАК СуммаДокумента,
		|		ВЫБОР
		|			КОГДА &ОтправлятьНовыеФорматы
		|				ТОГДА &ТипУПД
		|			ИНАЧЕ &ТипАкт
		|		КОНЕЦ КАК ТипДокумента,
		|		NULL КАК ВидДокумента
		|	ИЗ
		|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
		|	ГДЕ
		|		&ОтправлятьАОПУ) КАК СписокДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗначенияСвойствОбъектов.Объект КАК Ссылка
		|		ИЗ
		|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство = &СвойствоИдДокумента) КАК ОтправленныеДокументы
		|		ПО СписокДокументов.Ссылка = ОтправленныеДокументы.Ссылка
		|ГДЕ
		|	СписокДокументов.Проведен
		|	И ОтправленныеДокументы.Ссылка ЕСТЬ NULL 
		|{ГДЕ
		|	СписокДокументов.Дата,
		|	СписокДокументов.Ссылка,
		|	СписокДокументов.Контрагент,
		|	СписокДокументов.Организация}";
		
	Возврат ТекстЗапроса;

КонецФункции

//}

//===================================
//{ Получение данных

// Получает должность ответственного лица.
//
// Параметры:
//  ФизЛицо		 - СправочникСсылка.ФизическиеЛица - отвественный.
//  Организация	 - СправочникСсылка.Организации - организация ответственного.
//  Дата		 - Дата - дата, на которую будет получена должность.
// 
// Возвращаемое значение:
//  Строка, Неопределено - должность.
//
Функция ДолжностьОтветственногоЛица(ФизЛицо, Организация, Дата)
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|ГДЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = &ФизЛицо";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Должность = Строка(Выборка.Должность);
		
	Иначе
		
		Должность = Неопределено;
		
	КонецЕсли;
	
	Возврат Должность;
	
КонецФункции

//}

