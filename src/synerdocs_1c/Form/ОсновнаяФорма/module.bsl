
Перем АвтоматическиПолучатьВходящиеДокументы; // Признак автоматического обновления списка документов
Перем ИнтервалПолученияДокументовИзСервиса; // Интервал автоматического обновления списка документов

Перем СтруктураПользователя;

// Настройки фильтрации списка документов сервиса
Перем НастройкиОтбораВх, НастройкиОтбораИсх;

// Модули
Перем МенеджерНастроек, ОперацииСДокументами, Телеметрия, ОбъектнаяМодель, СпискиДокументов, ФормированиеДокументов;
Перем ОбновлениеИР;
Перем СобытияТелеметрии;

Перем _ИмяФормы;

Перем Сертификат;

Процедура ПодключитьМодули()
	
	МенеджерНастроек		= Модуль("Модуль_МенеджерНастроек");
	ОперацииСДокументами	= Модуль("Модуль_ОперацииСДокументами");
	Телеметрия				= Модуль("Модуль_Телеметрия");
	ОбъектнаяМодель			= Модуль("Модуль_ОбъектнаяМодель");
	СпискиДокументов		= Модуль("Модуль_СпискиДокументов");
	ФормированиеДокументов	= Модуль("Модуль_ФормированиеДокументов");
	ОбновлениеИР			= Модуль("Модуль_ОбновлениеИР");
	
	СобытияТелеметрии = Телеметрия.ОписаниеСобытий();
	
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

Функция ИмяФормы() Экспорт
	
	Если _ИмяФормы = Неопределено Тогда
		_ИмяФормы = ПолучитьИмяФормы(ЭтаФорма);
	КонецЕсли;
	
	Возврат _ИмяФормы;
	
КонецФункции

//========================================================================
// ФОРМА
//========================================================================

// События формы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьОбщийМодуль();

	ПодключитьМодули();
	
	Если Найти(НРег(Строка(Метаданные.КраткаяИнформация)),"бухгалтерия государственного учреждения") Тогда
		ЭтоБГУ = Истина;
	Иначе
		ЭтоБГУ = Ложь;
	КонецЕсли;
	
	УстановитьПервоначальныеНастройки();
	ОбновлениеИР.ВыполнитьОбработчикиОбновления();
    	
	Отказ = НЕ ПодключитьсяКВебСервисуSynerdocs();
	
	Если НЕ Отказ Тогда					
		//Аутентификация
		Форма_АутентификацияПользователя = ПолучитьФорму("Форма_АутентификацияПользователя");
		Отказ = (Форма_АутентификацияПользователя.ОткрытьМодально() = НЕОПРЕДЕЛЕНО);
	КонецЕсли;
	
	Если Отказ Тогда
		УничтожитьМодули();
		Возврат;
	КонецЕсли;
	
	Пользователь = глЗначениеПеременной("глТекущийПользователь");
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Сертификат = ТекущийСертификат();
	
	КлючУникальности_ОсновнаяФорма = Новый УникальныйИдентификатор;
	ЭтаФорма.КлючУникальности = КлючУникальности_ОсновнаяФорма;
			
	Если ЭтоБГУ Тогда
		ЭлементыФормы.СинхронизироватьДанныеОрганизации.Доступность = Ложь;
		ЭлементыФормы.СинхронизироватьДанныеОрганизации.Подсказка = "Не доступно для вашей конфигурации.";
		ЭлементыФормы.КоманднаяПанельКонтрагенты_Авторизованные.Кнопки.СинхронизироватьАдрес.Доступность = Ложь;
	    ЭлементыФормы.КоманднаяПанельКонтрагенты_Авторизованные.Кнопки.СинхронизироватьАдрес.Подсказка = "Не доступно для вашей конфигурации.";
	КонецЕсли;
	
	ПериодНачало = ВосстановитьЗначение("ПериодВЗапросеНачало");
	ПериодОкончание = ВосстановитьЗначение("ПериодВЗапросеОкончание");
	Если Не ЗначениеЗаполнено(ПериодНачало) И Не ЗначениеЗаполнено(ПериодОкончание) Тогда
		ПериодНачало = НачалоДня(ТекущаяДата());
		ПериодОкончание = КонецДня(ТекущаяДата());
	КонецЕсли;
	
	//Проверяем, что данная организация подключена к СО и получаем ID
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Если Syn_IDОрганизации = НЕОПРЕДЕЛЕНО Тогда
			//В РСВ у нас орг-ция еще не отмечена, ищем ее в СО по ИНН/КПП
			Попытка
				Syn_Организация = ExchangeService.GetOrganizationByInnKpp(Токен, Организация.ИНН, Организация.КПП);
				Если Syn_Организация <> НЕОПРЕДЕЛЕНО Тогда
					//Нашли в СО, добавляем ID в РСВ
					УстановитьЗначениеСвойства(Организация, "Syn_IDОрганизации", Syn_Организация.OrganizationId);
					Syn_IDОрганизации = Syn_Организация.OrganizationId;
					
					УстановитьЗначениеСвойства(Организация, "Syn_ЯщикОрганизации", Syn_Организация.BoxAddress);
					Syn_ЯщикОрганизации = Syn_Организация.BoxAddress;
				Иначе
					
					ОтправитьУведомлениеПользователю("Организация не подключена к сервису обмена. Отправить запрос на подключение можно  в настройках в разделе <Личные данные>. Модуль будет работать в Демо-режиме.");
					
				КонецЕсли;
			Исключение
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
				
				ОтправитьУведомлениеПользователю("Ошибка получения информации об организации: <" + Организация + ">. " + ТекстОшибкиSynerdocs);
				
			КонецПопытки;
		Иначе
			//Проверяем, что организация соответствует пользователю сервиса
			
			//Получаем список организаций из доступных ящиков
			СписокДоступныхОрганизаций = Новый СписокЗначений;
			Попытка
				Syn_Ящики = ExchangeService.GetBoxes(Токен);
			Исключение
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
				
				ОтправитьУведомлениеПользователю("Ошибка получения списка доступных ящиков. " + ТекстОшибкиSynerdocs);
				
				ДемоРежим = Истина;
			КонецПопытки;
		КонецЕсли;
		
		СтруктураПользователя = ExchangeService.GetUserInfo(Токен,Syn_ЯщикОрганизации);
		
		ЭлементыФормы.НадписьПользователь.Заголовок = "Текущий пользователь: " +  СтруктураПользователя.LastName + 
		" " + СтруктураПользователя.FirstName + " " + 
		СтруктураПользователя.MiddleName + ", " + СтруктураПользователя.Position;
		//Контрагенты
		Обновить_Контрагенты();            
		//Входящие
		УстановитьПараметрыСпискаВходящих(1);
		//Исходящие
		УстановитьПараметрыСпискаИсходящих(1);
		//Отправить документы
		Если НЕ ЭтоБГУ Тогда
			Обновить_ОтправитьДокументы();
		Иначе
			Обновить_ОтправитьДокументыБГУ();
		КонецЕсли;
		//События
		УстановитьВидимостьДоступность();
		
		АвтоматическиПолучатьВходящиеДокументы = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("АвтоматическиПолучатьВходящиеДокументы");
		ИнтервалПолученияДокументовИзСервиса = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("ИнтервалПолученияДокументовИзСервиса");
		
		Если АвтоматическиПолучатьВходящиеДокументы Тогда
			ПодключитьОбработчикОжидания("ОбработкаВходящихСообщений", ИнтервалПолученияДокументовИзСервиса * 60);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтображение_ДокументыДляОтправки();
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Для автотестов закрываем ИР без проверок
	Если СтруктураПараметровТестирования =  Неопределено Тогда
		Отказ = Вопрос("Закрыть Интеграционное решение Synerdocs-1С?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет;
	КонецЕсли;
			
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("ПериодВЗапросеНачало", ПериодНачало);
	СохранитьЗначение("ПериодВЗапросеОкончание", ПериодОкончание);
	
	УничтожитьМодули();
	
КонецПроцедуры

// События эелементов формы


Процедура Панель_РабочаяОбластьПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьЗаголовокОкна(ЭтаФорма, Элемент.ТекущаяСтраница.Заголовок);
	
КонецПроцедуры

// Кнопки

Процедура СинхронизироватьДанныеОрганизацииНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Синхронизация.Синхронизация,
		ЭтаФорма,
		Элемент
	);

	Форма_СинхронизацияКИ = ПолучитьФорму("Форма_СинхронизацияКИ");
	Форма_СинхронизацияКИ.Контрагент = Организация;
	Форма_СинхронизацияКИ.Syn_IDКонтрагента = Syn_IDОрганизации;
	Форма_СинхронизацияКИ.Открыть();
		
КонецПроцедуры

Процедура Кнопка_ОбновитьНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОбновлениеСписка.Обновление,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);

	Если ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница.Имя = "Входящие" Тогда
		Обновить_ВходящиеДокументы();
	ИначеЕсли ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница.Имя = "Исходящие" Тогда
		Обновить_ИсходящиеДокументы();
	ИначеЕсли ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница.Имя = "Контрагенты" Тогда
		Обновить_Контрагенты();
	ИначеЕсли ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница.Имя = "ОтправитьДокументы" Тогда
		Если НЕ ЭтоБГУ Тогда		
			Обновить_ОтправитьДокументы();
		Иначе
			Обновить_ОтправитьДокументыБГУ();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Кнопка_СменитьЯщикНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Авторизация.ВыборЯщика,
		ЭтаФорма,
		Элемент
	);
	
	// Текущие данные авторизации
	ПервоначальныйТокен = Токен;
	ПервоначальныйЯщик	= Syn_ЯщикОрганизации;
	ПервоначальныйID	= Syn_IDОрганизации;	
	
	Если НЕ СписокДоступныхЯщиков = Неопределено Тогда
		
		Если СписокДоступныхЯщиков.Количество() > 1 Тогда
			
			СписокДляКнопки = Новый СписокЗначений;
			
			Для Каждого Элемент Из СписокДоступныхЯщиков Цикл          
				Если НЕ Элемент.Ящик.Address = Syn_ЯщикОрганизации Тогда
					СписокДляКнопки.Добавить(Элемент.Ящик.Address, Элемент.Ящик.Name);	
				КонецЕсли;
			КонецЦикла;
			
			Результат = ЭтаФорма.ВыбратьИзМеню(СписокДляКнопки, ЭлементыФормы.Кнопка_СменитьЯщик);
			
			Если НЕ Результат = Неопределено Тогда
				Syn_ЯщикОрганизации = Результат.Значение;
				
				Для Каждого Элемент Из СписокДоступныхЯщиков Цикл          
					Если Элемент.Ящик.Address = Syn_ЯщикОрганизации Тогда
						ТекЯщик 			= Элемент.Ящик;
						Syn_IDОрганизации 	= Элемент.Ящик.OrganizationId;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// Поиск организации по ИНН и КПП
				// Если подходщих организаций несколько, то выбирается первая из них
				// TODO: В идеале надо предлагать выбор
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Организации.Ссылка
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.ИНН = &ИНН
				|	И Организации.КПП = &КПП";
				Запрос.УстановитьПараметр("ИНН", ?(ЗначениеЗаполнено(ТекЯщик.INN), ТекЯщик.INN, ""));
				Запрос.УстановитьПараметр("КПП", ?(ЗначениеЗаполнено(ТекЯщик.KPP), ТекЯщик.KPP, ""));
				Результат = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					Организация = ВыборкаДетальныеЗаписи.Ссылка;
				Иначе
					Если Вопрос("В текущей базе 1С нет такой организации. Создать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
						Если Не СоздатьОрганизацию(ТекЯщик) Тогда
							Предупреждение("Выбранной организации нет в 1С. Авторизация по выбранному ящику невозможна.");
							Syn_ЯщикОрганизации = ПервоначальныйЯщик;
							Syn_IDОрганизации 	= ПервоначальныйID;
							//	Токен = Неопределено;
							Возврат;
						КонецЕсли;
					Иначе
						Предупреждение("Выбранной организации нет в 1С. Авторизация по выбранному ящику невозможна.");
						Syn_ЯщикОрганизации = ПервоначальныйЯщик;
						Syn_IDОрганизации 	= ПервоначальныйID;
						//	Токен = Неопределено;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				ПриОткрытии();
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    		
КонецПроцедуры

Процедура Кнопка_НастройкиНажатие(Элемент)

	Форма_Настройка = ПолучитьФорму("Форма_Настройка");
	Форма_Настройка.ОткрытьМодально();
	
	АвтоматическиПолучатьВходящиеДокументы = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("АвтоматическиПолучатьВходящиеДокументы");
	ИнтервалПолученияДокументовИзСервиса = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("ИнтервалПолученияДокументовИзСервиса");
	
	Если АвтоматическиПолучатьВходящиеДокументы Тогда
		ПодключитьОбработчикОжидания("ОбработкаВходящихСообщений", ИнтервалПолученияДокументовИзСервиса * 60);
	Иначе
		ОтключитьОбработчикОжидания("ОбработкаВходящихСообщений");
	КонецЕсли;
	
КонецПроцедуры

Процедура Кнопка_СправкаНажатие(Элемент)

	Форма_ОПрограмме = ПолучитьФорму("Форма_ОПрограмме");
	Форма_ОПрограмме.ОткрытьМодально();
	
КонецПроцедуры


//========================================================================
// ВХОДЯЩИЕ ДОКУМЕНТЫ
//========================================================================

// Панель управления

Процедура КоманднаяПанельВходящиеДокументыОткрыть(Кнопка)

	Если ЭлементыФормы.ВходящиеДокументы.ТекущиеДанные = Неопределено Тогда
		Сообщить("Выберите документ");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Просмотр.ПросмотрЭД,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	ТекущаяСтрока = ЭлементыФормы.ВходящиеДокументы.ТекущаяСтрока;
	
	// TODO: Для каждой формы создать и использовать единый метод для открытия
	Форма_КарточкаЭД = ПолучитьФорму("Форма_КарточкаЭД", ЭтаФорма, ТекущаяСтрока.IDДокумента);
	
	ПараметрыФормы = Форма_КарточкаЭД.Новый_ПараметрыФормы(ТекущаяСтрока.IDДокумента, Истина);
	Форма_КарточкаЭД.УстановитьПараметрыФормы(ПараметрыФормы);
	
	Форма_КарточкаЭД.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыСоздатьВ1С(Кнопка)
    	
	Если ЭлементыФормы.ВходящиеДокументы.ТекущиеДанные = Неопределено Тогда
		Сообщить("Выберите документ");
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.ВходящиеДокументы.ТекущаяСтрока;
	
	Если ТекущаяСтрока.Тип = "Неформализованный" Тогда
		Сообщить("Создание неформализованного документа невозможно");
	ИначеЕсли ТекущаяСтрока.Тип = "Акт об установленном расхождении" Тогда
		Сообщить("Создание неформализованного документа невозможно");		
	ИначеЕсли ТекущаяСтрока.Тип = "Исправленный корректировочный счет-фактура" Тогда
		Сообщить("Данный вид документа необходимо создать в 1С вручную.");		
	ИначеЕсли ТекущаяСтрока.УчтенВ1С Или ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
		Сообщить("Документ уже создан");
	Иначе
		
		//Получаем связанные документы: если там есть хотя бы 1 не созданный, то выводим форму связанных документов, иначе сразу создаем этот документ
		Попытка
			FullDocumentInfo = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, ТекущаяСтрока.IDДокумента,);
			Syn_Документ = FullDocumentInfo.Document;
			
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			
			ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
						
			Возврат;
			
		КонецПопытки;
		
		// FIXME: Пока новые форматы не будут сделаны полностью
		Если ОбъектнаяМодель.ЭтоНовыйФормат(FullDocumentInfo.Document.DocumentTypeEnum.Code) Тогда
			Сообщить("Создание этого формата документа документа пока невозможно");
			Возврат;
		КонецЕсли;
		
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Синхронизация.СозданиеДокумента,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
		);
		
		ТЗ_СвязанныеДокументы = ПолучитьСвязанныеДокументыSynerdocs(Syn_Документ, Ложь, Истина);
		
		Если ТЗ_СвязанныеДокументы.Количество() > 0 И
			ТЗ_СвязанныеДокументы.Найти(НЕОПРЕДЕЛЕНО, "Документ1С") <> НЕОПРЕДЕЛЕНО Тогда
			
			//открываем связанные документы
			Форма_СвязанныеДокументы = ПолучитьФорму("Форма_СвязанныеДокументы");
			
			ЭД_Структура = Новый Структура;
			ЭД_Структура.Вставить("Syn_IDДокумента", ТекущаяСтрока.IDДокумента);
			ЭД_Структура.Вставить("ТипЭД", ТекущаяСтрока.Тип);
			ЭД_Структура.Вставить("ПредставлениеЭД", ТекущаяСтрока.ДокументПредставление);
			ЭД_Структура.Вставить("Входящий", Истина);
			
			Форма_СвязанныеДокументы.ЭД_Структура = ЭД_Структура;
			Форма_СвязанныеДокументы.РежимСозданияДокументов1С = Истина;
			
			Форма_СвязанныеДокументы.ОткрытьМодально();
		Иначе
			//строка для заголовка формы синхронизации номенклатуры
			СтруктураИнформации = Новый Структура;
			СтруктураИнформации.Вставить("Контрагент",ТекущаяСтрока.Отправитель);
			СтруктураИнформации.Вставить("Документ",ТекущаяСтрока.ДокументПредставление);
			
			//создание документа 1С
			ТекущаяСтрока.Документ = СоздатьДокумент1С(Syn_Документ, СтруктураИнформации);
			ТекущаяСтрока.УчтенВ1С = ЗначениеЗаполнено(ТекущаяСтрока.Документ);
		КонецЕсли;
		
		ОбновитьКолонкуДокументУчтенВ1С(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыПодписать(Кнопка)
	
	Если Сертификат = Неопределено Тогда
		// Авторизация по паролю
		Сообщить("Для выполнения данной операции необходимо авторизоваться по сертификату");
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ЭлементыФормы.ВходящиеДокументы.ВыделенныеСтроки;
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		// Документы не выбраны
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
		Если ПроверитьДоступностьОперации(СтрокаТЧ.ДоступныеОперации, "Подписать") Тогда
			МассивСтрок.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрок.Количество() = 0 Тогда
		// Ни один из документов не требует подписания
		Сообщить(?(ВыбранныеСтроки.Количество() > 1, "Ни один из выбранных документов", "Выбранный документ") + " не требует подписания");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Подписание.Подписание,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		МассивСтрок.Количество()
	);
	
	Подписать(МассивСтрок, Истина, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыОтказать(Кнопка) 
	
	Если Сертификат = Неопределено Тогда
		// Авторизация по паролю
		Сообщить("Для выполнения данной операции необходимо авторизоваться по сертификату");
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ЭлементыФормы.ВходящиеДокументы.ВыделенныеСтроки;
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		// Документы не выбраны
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
		Если ПроверитьДоступностьОперации(СтрокаТЧ.ДоступныеОперации, "Отказать") Тогда
			МассивСтрок.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрок.Количество() = 0 Тогда
		// Ни один из документов не требует подписания
		Сообщить(?(ВыбранныеСтроки.Количество() > 1, "Ни один из выбранных документов", "Выбранный документ") + " не требует подписания");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Подписание.Отказ,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		МассивСтрок.Количество()
	);
	
	ОтказатьВПодписании(МассивСтрок, Истина, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыСогласовать(Кнопка)
	
	ВыбранныеСтроки = ЭлементыФормы.ВходящиеДокументы.ВыделенныеСтроки;
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		// Документы не выбраны
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
		Если ПроверитьДоступностьОперации(СтрокаТЧ.ДоступныеОперации, "Согласовать") Тогда
			МассивСтрок.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрок.Количество() = 0 Тогда
		// Ни один из документов не требует подписания
		Сообщить("Согласование документов недоступно");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Согласование.Согласование,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		МассивСтрок.Количество()
	);
	
	СогласованиеДокумента(МассивСтрок, Истина);

КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыОтказатьСогласовать(Кнопка)
	
	ВыбранныеСтроки = ЭлементыФормы.ВходящиеДокументы.ВыделенныеСтроки;
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		// Документы не выбраны
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
		Если ПроверитьДоступностьОперации(СтрокаТЧ.ДоступныеОперации, "ОтказатьВСогласовании") Тогда
			МассивСтрок.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрок.Количество() = 0 Тогда
		// Ни один из документов не требует подписания
		Сообщить("Согласование документов недоступно");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Согласование.Отказ,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		МассивСтрок.Количество()
	);
	
	СогласованиеДокумента(МассивСтрок, Ложь);

КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументы_КонтекстноеМенюЭкспортДокументов(Кнопка)
	
	ВыбранныеСтроки = ЭлементыФормы.ВходящиеДокументы.ВыделенныеСтроки;
	
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		Сообщить("Выберите документ");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Экспорт.ЭкспортЭД,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		ВыбранныеСтроки.Количество()
	);
	
	//экспортируем все отмеченные строки
	Форма_ЭкспортДокументов = ПолучитьФорму("Форма_ЭкспортДокументов");
	Форма_ЭкспортДокументов.ДокументыДляЭкспорта = ВыбранныеСтроки;
	Форма_ЭкспортДокументов.ОткрытьМодально();
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыПереслать(Кнопка)
	
	Если Сертификат = Неопределено Тогда
		// Авторизация по паролю
		Сообщить("Для выполнения данной операции необходимо авторизоваться по сертификату");
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ЭлементыФормы.ВходящиеДокументы.ВыделенныеСтроки;
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		// Документы не выбраны
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
		Если ПроверитьДоступностьОперации(СтрокаТЧ.ДоступныеОперации, "Переслать") Тогда
			МассивСтрок.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрок.Количество() = 0 Тогда
		// Ни один из документов не требует подписания
		Сообщить(?(ВыбранныеСтроки.Количество() > 1, "Ни один из выбранных документов", "Выбранный документ") + " не может быть переслан");
		Возврат;
	КонецЕсли;
	
	Если ПакетПустой() Тогда
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.ОтправкаПакета.Формирование,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
		);
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОтправкаПакета.Пересылка,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		МассивСтрок.Количество()
	);
	
	ПереслатьДокументы(МассивСтрок);
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыУдалитьОтметку(Кнопка)

	ВыбранныеСтроки = ЭлементыФормы.ВходящиеДокументы.ВыделенныеСтроки;
	
	Удалено = РазорватьСвязьСДокументами(ВыбранныеСтроки);
	
	Если Удалено > 0 Тогда
		
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Синхронизация.ОтменаСопоставленияДокумента,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
			Удалено
		);
		
	КонецЕсли;
    		
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыАннулировать(Кнопка)
	
	Если Сертификат = Неопределено Тогда
		// Авторизация по паролю
		Сообщить("Для выполнения данной операции необходимо авторизоваться по сертификату");
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ЭлементыФормы.ВходящиеДокументы.ВыделенныеСтроки;
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		// Документы не выбраны
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
		Если ПроверитьДоступностьОперации(СтрокаТЧ.ДоступныеОперации, "Аннулировать") Тогда
			МассивСтрок.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрок.Количество() = 0 Тогда
		// Ни один из документов не требует подписания
		Сообщить(?(ВыбранныеСтроки.Количество() > 1, "Ни один из выбранных документов", "Выбранный документ") + " не может быть аннулирован");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Аннулирование.Аннулирование,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		МассивСтрок.Количество()
	);
	
	Аннулировать(МассивСтрок, Истина);
	
КонецПроцедуры

// События элемента формы

Процедура ВходящиеДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Колонка = ЭлементыФормы.ВходящиеДокументы.Колонки.Получатель Тогда
		
		ВывестиСписокПолучателей(ВыбраннаяСтрока);
		
	Иначе
		
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Просмотр.ПросмотрЭД,
			ЭтаФорма,
			Элемент,
			ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
		);
		
		//открываем карточку документа
		Форма_КарточкаЭД = ПолучитьФорму("Форма_КарточкаЭД", ЭтаФорма, ВыбраннаяСтрока.IDДокумента);
	
		ПараметрыФормы = Форма_КарточкаЭД.Новый_ПараметрыФормы(ВыбраннаяСтрока.IDДокумента, Истина);
		Форма_КарточкаЭД.УстановитьПараметрыФормы(ПараметрыФормы);
		
		Форма_КарточкаЭД.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВходящиеДокументыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПараметрыСпискаВходящих(1, ВыбранноеЗначение);
	
КонецПроцедуры

// Паджинация

Процедура ТекущаяСтраницаВходящиеПриИзменении(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОбновлениеСписка.ВыборСтраницы,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	УстановитьПараметрыСпискаВходящих(ТекущаяСтраницаВходящие);
	
КонецПроцедуры

Процедура ТекущаяСтраницаВходящиеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОбновлениеСписка.ВыборСтраницы,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	ПодобратьТекущуюСтраницу(ЭлементыФормы.ТекущаяСтраницаВходящие, Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура Кнопка_СледующаяСтраницаВходящиеНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОбновлениеСписка.СтраницаВперед,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	СледующаяСтраница = ТекущаяСтраницаВходящие + 1;
	УстановитьПараметрыСпискаВходящих(СледующаяСтраница);
	
КонецПроцедуры

Процедура Кнопка_ПредыдущаяСтраницаВходящиеНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОбновлениеСписка.СтраницаНазад,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	ПредыдущаяСтраница = ТекущаяСтраницаВходящие - 1;
	УстановитьПараметрыСпискаВходящих(ПредыдущаяСтраница);
	
КонецПроцедуры

// Фильтрация

Процедура Кнопка_ОтборНастроитьВходящиеНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Фильтрация.Настройка,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	НастроитьОтбор(НастройкиОтбораВх, ЭлементыФормы.ВходящиеДокументы);
	
КонецПроцедуры

Процедура Кнопка_ОтборОтменитьВходящиеНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Фильтрация.Сброс,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	СброситьОтборВходящих();
	
КонецПроцедуры

// Отображение

Процедура ВходящиеДокументыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УсловноеОформлениеСпискаДокументов(ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура УстановитьОтоборажение_Входящие_Паджинация()
	
	УстановитьОтображениеЭлементовПаджинации(
		ЭлементыФормы.Кнопка_ПредыдущаяСтраницаВходящие,
		ЭлементыФормы.Кнопка_СледующаяСтраницаВходящие,
		ТекущаяСтраницаВходящие,
		ЭлементыФормы.ТекущаяСтраницаВходящие.СписокВыбора
	);
	
КонецПроцедуры

//========================================================================
// ИСХОДЯЩИЕ ДОКУМЕНТЫ
//========================================================================

// Панель управления

Процедура КоманднаяПанельИсходящиеДокументыОткрыть(Кнопка)
	
	Если ЭлементыФормы.ИсходящиеДокументы.ТекущиеДанные = Неопределено Тогда
		Сообщить("Выберите документ");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Просмотр.ПросмотрЭД,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	ТекущаяСтрока = ЭлементыФормы.ИсходящиеДокументы.ТекущиеДанные;
	
	//открываем карточку документа
	Форма_КарточкаЭД = ПолучитьФорму("Форма_КарточкаЭД", ЭтаФорма, ТекущаяСтрока.IDДокумента);

	ПараметрыФормы = Форма_КарточкаЭД.Новый_ПараметрыФормы(ТекущаяСтрока.IDДокумента, Истина);
	Форма_КарточкаЭД.УстановитьПараметрыФормы(ПараметрыФормы);
	
	Форма_КарточкаЭД.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельИсходящиеДокументыСогласовать(Кнопка)
	
	Если Сертификат = Неопределено Тогда
		// Авторизация по паролю
		Сообщить("Для выполнения данной операции необходимо авторизоваться по сертификату");
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ЭлементыФормы.ИсходящиеДокументы.ВыделенныеСтроки;
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		// Документы не выбраны
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
		Если ПроверитьДоступностьОперации(СтрокаТЧ.ДоступныеОперации, "Согласовать") Тогда
			МассивСтрок.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрок.Количество() = 0 Тогда
		// Ни один из документов не требует подписания
		Сообщить(?(ВыбранныеСтроки.Количество() > 1, "Ни один из выбранных документов", "Выбранный документ") + " не требует согласования");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Согласование.Согласование,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		МассивСтрок.Количество()
	);
	
	СогласованиеДокумента(МассивСтрок, Истина);

КонецПроцедуры

Процедура КоманднаяПанельИсходящиеДокументыОтказатьСогласовать(Кнопка)
	
	Если Сертификат = Неопределено Тогда
		// Авторизация по паролю
		Сообщить("Для выполнения данной операции необходимо авторизоваться по сертификату");
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ЭлементыФормы.ИсходящиеДокументы.ВыделенныеСтроки;
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		// Документы не выбраны
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
		Если ПроверитьДоступностьОперации(СтрокаТЧ.ДоступныеОперации, "ОтказатьВСогласовании") Тогда
			МассивСтрок.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрок.Количество() = 0 Тогда
		// Ни один из документов не требует подписания
		Сообщить(?(ВыбранныеСтроки.Количество() > 1, "Ни один из выбранных документов", "Выбранный документ") + " не требует согласования");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Согласование.Отказ,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		МассивСтрок.Количество()
	);
	
	СогласованиеДокумента(МассивСтрок, Ложь);

КонецПроцедуры

Процедура КоманднаяПанельИсходящиеДокументы_КонтекстноеМенюЭкспортДокументов(Кнопка)
	
	ВыбранныеСтроки = ЭлементыФормы.ИсходящиеДокументы.ВыделенныеСтроки;

	Если ВыбранныеСтроки.Количество() = 0 Тогда
		Сообщить("Выберите документ");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Экспорт.ЭкспортЭД,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		ВыбранныеСтроки.Количество()
	);
	
	//экспортируем все отмеченные строки
	Форма_ЭкспортДокументов 								= ПолучитьФорму("Форма_ЭкспортДокументов");
	Форма_ЭкспортДокументов.ДокументыДляЭкспорта 			= ВыбранныеСтроки;
	
	// для автотестов
	Если НЕ СтруктураПараметровТестирования = Неопределено Тогда
		Форма_ЭкспортДокументов.СтруктураПараметровТестирования = СтруктураПараметровТестирования;
		ТаблицаЭкспортаДокументов 								= Форма_ЭкспортДокументов.ОткрытьМодально();
	Иначе
		Форма_ЭкспортДокументов.ОткрытьМодально();
	КонецЕсли;
   	
КонецПроцедуры

Процедура КоманднаяПанельИсходящиеДокументыПереслать(Кнопка)
	
	Если Сертификат = Неопределено Тогда
		// Авторизация по паролю
		Сообщить("Для выполнения данной операции необходимо авторизоваться по сертификату");
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ЭлементыФормы.ИсходящиеДокументы.ВыделенныеСтроки;
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		// Документы не выбраны
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
		Если ПроверитьДоступностьОперации(СтрокаТЧ.ДоступныеОперации, "Переслать") Тогда
			МассивСтрок.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрок.Количество() = 0 Тогда
		// Ни один из документов не требует подписания
		Сообщить(?(ВыбранныеСтроки.Количество() > 1, "Ни один из выбранных документов", "Выбранный документ") + " не может быть переслан");
		Возврат;
	КонецЕсли;
	
	Если ПакетПустой() Тогда
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.ОтправкаПакета.Формирование,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
		);
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОтправкаПакета.Пересылка,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		МассивСтрок.Количество()
	);
	
	ПереслатьДокументы(МассивСтрок);
	
КонецПроцедуры

Процедура КоманднаяПанельИсходящиеДокументыУдалитьОтметку(Кнопка)

	ВыбранныеСтроки = ЭлементыФормы.ИсходящиеДокументы.ВыделенныеСтроки;
	
	Удалено = РазорватьСвязьСДокументами(ВыбранныеСтроки);
	
	Если Удалено > 0 Тогда
		
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Синхронизация.ОтменаСопоставленияДокумента,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
			Удалено
		);
		
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельИсходящиеДокументыАннулировать(Кнопка)
	
	Если Сертификат = Неопределено Тогда
		// Авторизация по паролю
		Сообщить("Для выполнения данной операции необходимо авторизоваться по сертификату");
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ЭлементыФормы.ИсходящиеДокументы.ВыделенныеСтроки;
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		// Документы не выбраны
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
		Если ПроверитьДоступностьОперации(СтрокаТЧ.ДоступныеОперации, "Аннулировать") Тогда
			МассивСтрок.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрок.Количество() = 0 Тогда
		// Ни один из документов не требует подписания
		Сообщить(?(ВыбранныеСтроки.Количество() > 1, "Ни один из выбранных документов", "Выбранный документ") + " не может быть аннулирован");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Аннулирование.Аннулирование,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		МассивСтрок.Количество()
	);
	
	Аннулировать(МассивСтрок, Ложь);
	
КонецПроцедуры

// События элемента формы

Процедура ИсходящиеДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка = ЭлементыФормы.ИсходящиеДокументы.Колонки.Получатель Тогда
		
		ВывестиСписокПолучателей(ВыбраннаяСтрока);
		
	Иначе
		
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Просмотр.ПросмотрЭД,
			ЭтаФорма,
			Элемент,
			ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
		);
		
		//открываем карточку документа
		Форма_КарточкаЭД = ПолучитьФорму("Форма_КарточкаЭД", ЭтаФорма, ВыбраннаяСтрока.IDДокумента);
	
		ПараметрыФормы = Форма_КарточкаЭД.Новый_ПараметрыФормы(ВыбраннаяСтрока.IDДокумента, Истина);
		Форма_КарточкаЭД.УстановитьПараметрыФормы(ПараметрыФормы);
		
		Форма_КарточкаЭД.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсходящиеДокументыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПараметрыСпискаИсходящих(1, ВыбранноеЗначение);
	
КонецПроцедуры

// Падщинация

Процедура ТекущаяСтраницаИсходящиеПриИзменении(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОбновлениеСписка.ВыборСтраницы,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	УстановитьПараметрыСпискаИсходящих(ТекущаяСтраницаИсходящие);
	
КонецПроцедуры

Процедура ТекущаяСтраницаИсходящиеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОбновлениеСписка.ВыборСтраницы,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	ПодобратьТекущуюСтраницу(ЭлементыФормы.ТекущаяСтраницаИсходящие, Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура Кнопка_ПредыдущаяСтраницаИсходящиеНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОбновлениеСписка.СтраницаНазад,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	ПредыдущаяСтраница = ТекущаяСтраницаИсходящие - 1;
	УстановитьПараметрыСпискаИсходящих(ПредыдущаяСтраница);
	
КонецПроцедуры

Процедура Кнопка_СледующаяСтраницаИсходящиеНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОбновлениеСписка.СтраницаВперед,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);

	СледующаяСтраница = ТекущаяСтраницаИсходящие + 1;
	УстановитьПараметрыСпискаИсходящих(СледующаяСтраница);
	
КонецПроцедуры

// Фильтрация

Процедура Кнопка_ОтборНастроитьИсходящиеНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Фильтрация.Настройка,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	НастроитьОтбор(НастройкиОтбораИсх, ЭлементыФормы.ИсходящиеДокументы);
	
КонецПроцедуры

Процедура Кнопка_ОтборОтменитьИсходящиеНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Фильтрация.Сброс,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	СброситьОтборИсходящих();
	
КонецПроцедуры

// Отображение

Процедура ИсходящиеДокументыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УсловноеОформлениеСпискаДокументов(ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура УстановитьОтоборажение_Исходящие_Паджинация()
	
	УстановитьОтображениеЭлементовПаджинации(
		ЭлементыФормы.Кнопка_ПредыдущаяСтраницаИсходящие,
		ЭлементыФормы.Кнопка_СледующаяСтраницаИсходящие,
		ТекущаяСтраницаИсходящие,
		ЭлементыФормы.ТекущаяСтраницаИсходящие.СписокВыбора
	);
	
КонецПроцедуры


//========================================================================
// ДОКУМЕНТЫ ДЛЯ ОТПРАВКИ. СПИСОК ДОКУМЕНТОВ
//========================================================================

Процедура ОткрытьДокументыДляОтправки()
	
	ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница = ЭлементыФормы.Панель_РабочаяОбласть.Страницы.ОтправитьДокументы;
	ЭлементыФормы.ПанельОтправка.ТекущаяСтраница = ЭлементыФормы.ПанельОтправка.Страницы.СтраницаДляОтправки;
	
	УстановитьОтображение_ДокументыДляОтправки();
	
КонецПроцедуры

Процедура УстановитьОтображение_ДокументыДляОтправки()
	
	Настройки = МенеджерНастроек.НастройкиИР();
	ПредпросмотрДоступен = НЕ Настройки.ПоддержкаНовыхФорматов.Включена;
	
	ЭлементыФормы.КоманднаяПанельОтправитьДокументы.Кнопки.Предпросмотр.Доступность = ПредпросмотрДоступен;
	
	ОтправкаДоступна = (Сертификат <> Неопределено);
	ЭлементыФормы.КоманднаяПанельОтправитьДокументы.Кнопки.Отправить.Доступность					= ОтправкаДоступна;
	ЭлементыФормы.КоманднаяПанельОтправитьДокументы.Кнопки.ДобавитьВыбранныеВПакет.Доступность		= ОтправкаДоступна;
	ЭлементыФормы.КоманднаяПанельОтправитьДокументы.Кнопки.РедактироватьЭД.Доступность				= ОтправкаДоступна;
	ЭлементыФормы.КоманднаяПанельОтправитьДокументы.Кнопки.СформироватьПакетДокументов.Доступность	= ОтправкаДоступна;
	
КонецПроцедуры

// Панель управления

Процедура КоманднаяПанельОтправитьДокументыОткрытьВ1С(Кнопка)

	Если ЭлементыФормы.ОтправитьДокументы.ТекущиеДанные = Неопределено Тогда
		Сообщить("Выберите документ");
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.ОтправитьДокументы.ТекущаяСтрока;
	Если ТекущаяСтрока <> НЕОПРЕДЕЛЕНО И
		ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
		ТекущаяСтрока.Документ.ПолучитьФорму("ФормаДокумента").Открыть();
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Просмотр.Просмотр1С,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
КонецПроцедуры

Процедура КоманднаяПанельОтправитьДокументыПредпросмотр(Кнопка)

	Если ЭлементыФормы.ОтправитьДокументы.ВыделенныеСтроки.Количество() = 0 Тогда
		Сообщить("Выберите документ");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Просмотр.Предпросмотр,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
		
	ТекСтрока = ЭлементыФормы.ОтправитьДокументы.ВыделенныеСтроки[0]; //: ТекСтрока = ОтправитьДокументы[0];
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("Акт");
	МассивТипов.Добавить("Торг12");
	
	Если НЕ МассивТипов.Найти(ТекСтрока.Тип) = Неопределено И НЕ ТипЗнч(ТекСтрока.Документ) = Тип("Строка") Тогда 
		// TODO: Открытие формы и передачу параметров выделить в отдельный метод
		ФормаПредпросмотра = ПолучитьФорму("Форма_ПредпросмотраДокумента", ЭтаФорма, ТекСтрока.Документ.УникальныйИдентификатор());
		// TODO: Использовать конструктор
		СтруктураПараметров = Новый Структура; 
		СтруктураПараметров.Вставить("ТипДокумента", ТекСтрока.Тип);
		СтруктураПараметров.Вставить("ДокументСсылка", ТекСтрока.Документ);
		СтруктураПараметров.Вставить("СтруктураУступочнойНадписи", Неопределено);
        		
		ФормаПредпросмотра.СтруктураПараметров = СтруктураПараметров;
		ФормаПредпросмотра.Открыть();
	Иначе
		Сообщить(НСтр("ru = 'Предпросмотр возможен только для формализованных документов, сформированных в 1С.'"));
	КонецЕсли;
    		
КонецПроцедуры

Процедура КоманднаяПанельОтправитьДокументыОтправить(Кнопка)

	Если ЭлементыФормы.ОтправитьДокументы.ТекущиеДанные = Неопределено Тогда
		Сообщить("Выберите документ");
		Возврат;
	КонецЕсли;
		
	ВыбранныеСтроки = ЭлементыФормы.ОтправитьДокументы.ВыделенныеСтроки;

	Телеметрия.ОтправитьАналитику(
		?(ВыбранныеСтроки.Количество() = 1,
			СобытияТелеметрии.Отправка.Единичная,
			СобытияТелеметрии.Отправка.Массовая
		),
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		ВыбранныеСтроки.Количество()
	);
	
	Настройки = МенеджерНастроек.НастройкиИР();
	Если Настройки.ПоддержкаНовыхФорматов.Включена Тогда
		
		МассивДокументов = Новый Массив;
		Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
			МассивДокументов.Добавить(СтрокаТЧ.Документ);
		КонецЦикла;
		
		ОперацииСДокументами.ОтправитьДокументы(МассивДокументов);
		
		Возврат;
		
	КонецЕсли;
	
	ДокументыОтправлены = Ложь;
	
	ВсегоДокументов = ВыбранныеСтроки.Количество();
	ТекущийДокумент = 0;
	
	Комментарий = "";
	ОбщийКомментарий = "";
	флОбщийКомментарий = Ложь;
	
	Для Каждого ТекСтрока Из ВыбранныеСтроки Цикл
		ТекущийДокумент = ТекущийДокумент + 1;
		
		Если Не флОбщийКомментарий Тогда
			// Запрос комментария к документу
			Форма = ПолучитьФорму("Форма_ВводКомментарияПриОтправке");
			Форма.Комментарий = ТекСтрока.Комментарий;
			Форма.ВсегоДокументов = ВсегоДокументов;
			Форма.ТекущийДокумент = ТекущийДокумент;
			Форма.Документ = ТекСтрока.ДокументПредставление;
			Форма.Получатель = ТекСтрока.Контрагент;
			Ответ = Форма.ОткрытьМодально();
			
			// Форма возвращает одно из значений:
			// - Неопределено - Форму закрыли клавишей Esc или крестиком в углу формы. Интерпретируем как нажатие кнопки "Отмена"
			// - Структура - Форму закрыли кнопкой командной панели
			//   - Отмена - Истина если отмена отправки, иначе Ложь
			//   - Комментарий - Текст комментария к документу
			//   - ДляВсех - Истина если для всех последующих документов
			Если Ответ = Неопределено Тогда
				// Отмена
				Продолжить;
			ИначеЕсли Ответ.Отмена Тогда
				// Отмена
				Если Ответ.ДляВсех Тогда
					Сообщить("Отмена отправки " + Строка(ВсегоДокументов - ТекущийДокумент + 1) + " документов из " + ВсегоДокументов);
					Прервать;
				Иначе
					// Обсудили с Максом, решили что при единичной отмене в сообщении нет надобности
					//Сообщить("Отмена отправки документа " + ТекСтрока.ДокументПредставление);
					Продолжить;
				КонецЕсли;
			Иначе
				// Отправка
				Комментарий = Ответ.Комментарий;
				Если Ответ.ДляВсех Тогда
					ОбщийКомментарий = Комментарий;
					флОбщийКомментарий = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТЗ_ДокументыДляОтправки = Новый ТаблицаЗначений;
		ТЗ_ДокументыДляОтправки.Колонки.Добавить("Документ");
		ТЗ_ДокументыДляОтправки.Колонки.Добавить("Комментарий");
		
		//Добавляем сам документ
		НоваяСтрока = ТЗ_ДокументыДляОтправки.Добавить();
		НоваяСтрока.Документ = ТекСтрока.Документ;
		НоваяСтрока.Комментарий = ?(флОбщийКомментарий, ОбщийКомментарий, Комментарий);
		
		Попытка
			СформироватьПодписатьИОтправитьЭД(ТЗ_ДокументыДляОтправки, ТекСтрока.Контрагент);
			Для Каждого ОтправленныйДокумент Из ТЗ_ДокументыДляОтправки Цикл
				НайденнаяСтрока = ОтправитьДокументы.Найти(ОтправленныйДокумент.Документ, "Документ");
				ДокументыОтправлены = Истина;
			КонецЦикла;
		Исключение
			ОШ = ОписаниеОшибки();
			Сообщить(ОШ);
		КонецПопытки;
	КонецЦикла;
	
	Если ДокументыОтправлены Тогда
		Если НЕ ЭтоБГУ Тогда
			Обновить_ОтправитьДокументы();
		Иначе
			Обновить_ОтправитьДокументыБГУ();
		КонецЕсли;
		Обновить_ИсходящиеДокументы();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельОтправитьДокументыДобавитьВыбранныеВПакет(Кнопка)
	
	Если ЭлементыФормы.ОтправитьДокументы.ТекущиеДанные = Неопределено Тогда
		Сообщить("Не выбран ни один документ");
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ЭлементыФормы.ОтправитьДокументы.ВыделенныеСтроки;
	
	Добавлено = 0;
	ПакетПустой = ПакетПустой();
	
	// Переносим выбранные строки, кроме тех, что уже есть в пакете	
	Для Каждого ТекСтрока Из ВыбранныеСтроки Цикл		
		
		НоваяСтрока = ДобавитьДокумент1СВПакет(ТекСтрока);
		Если НоваяСтрока <> Неопределено Тогда
			Добавлено = Добавлено + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПакетПустой Тогда
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.ОтправкаПакета.Формирование,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
		);
	КонецЕсли;
	
	Если Добавлено > 0 Тогда
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.ОтправкаПакета.Добавление,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
			Добавлено
		);
	КонецЕсли;
	
	Если ПакетПустой И ОтправкаВыбранных.Количество() > 1 Тогда
		ФлагСвязатьДокументыВПакете = Истина;
	КонецЕсли;
	
	ОткрытьПакетДокументов();

КонецПроцедуры

Процедура КоманднаяПанельОтправитьДокументыРедактироватьЭД(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ОтправитьДокументы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПакета = ДобавитьДокумент1СВПакет(ТекущаяСтрока);
	РедактироватьДокументПакета(СтрокаПакета);
	
	ОткрытьПакетДокументов();
	
КонецПроцедуры

Процедура КоманднаяПанельОтправитьДокументыСформироватьПакетДокументов(Кнопка)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОтправкаПакета.Формирование,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);

	ЭлементыФормы.ПанельОтправка.ТекущаяСтраница = ЭлементыФормы.ПанельОтправка.Страницы.СтраницаОтправка;	
		
КонецПроцедуры

Процедура КоманднаяПанельОтправитьДокументыВыгрузить(Кнопка)

	Если ЭлементыФормы.ОтправитьДокументы.ТекущиеДанные = Неопределено Тогда
		Сообщить("Выберите документ");
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = ЭлементыФормы.ОтправитьДокументы.ВыделенныеСтроки;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Экспорт.Экспорт1С,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		ВыбранныеСтроки.Количество()
	);
	
	Если ВыбранныеСтроки.Количество() > 0 Тогда
		
		Если ВыбранныеСтроки.Количество() = 1 Тогда
			Если ВыбранныеСтроки[0].Тип = "Счет на оплату" Тогда
				Сообщить("Выгрузка документов [" + ВыбранныеСтроки[0].Тип + "] не предусмотрена");	
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Форма_ЭкспортДокументов = ПолучитьФорму("Форма_ЭкспортДокументовБезАвторизации");
		Форма_ЭкспортДокументов.ДокументыДляЭкспорта = ВыбранныеСтроки;
		Форма_ЭкспортДокументов.ОткрытьМодально();
		
				
	Иначе
		//экспортируем только текущую строку
		ТекущаяСтрока = ЭлементыФормы.ОтправитьДокументы.ТекущаяСтрока;
		ВыбранныеСтроки.Добавить(ТекущаяСтрока);
		Если ТекущаяСтрока <> НЕОПРЕДЕЛЕНО Тогда
			Форма_ЭкспортДокументов = ПолучитьФорму("Форма_ЭкспортДокументов");
			Форма_ЭкспортДокументов.ДокументыДляЭкспорта = ВыбранныеСтроки;
			Форма_ЭкспортДокументов.ЭкспортДляОтправки = Истина;
			Форма_ЭкспортДокументов.ОткрытьМодально();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// События элемента формы

Процедура ОтправитьДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяСтрока.Документ) Тогда
		Возврат;
	КонецЕсли;
		
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Просмотр.Просмотр1С,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	ОткрытьЗначение(ВыбраннаяСтрока.Документ);
	
КонецПроцедуры


//========================================================================
// ДОКУМЕНТЫ ДЛЯ ОТПРАВКИ. ПАКЕТ ДОКУМЕНТОВ
//========================================================================

Процедура ОткрытьПакетДокументов()
	
	ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница = ЭлементыФормы.Панель_РабочаяОбласть.Страницы.ОтправитьДокументы;
	ЭлементыФормы.ПанельОтправка.ТекущаяСтраница = ЭлементыФормы.ПанельОтправка.Страницы.СтраницаОтправка;
	
	УстановитьОтображение_ПакетДокументов();
	
КонецПроцедуры

Процедура УстановитьОтображение_ПакетДокументов()
	
	ЭтоПересылка					= ЕстьПересылаемыеВПакете();
	ЗапретитьИзменениеПолучателя	= ЕстьФормализованныеВПакете(Истина);
	СвязываниеДоступно				= (ОтправкаВыбранных.Количество() > 1);
	
	ЭлементыФормы.ОтправитьПакет.Заголовок					= ?(ЭтоПересылка, "Переслать", "Подписать и отправить");
	ЭлементыФормы.ПолеСписокПолучателей.Доступность			= НЕ ЗапретитьИзменениеПолучателя;
	ЭлементыФормы.ФлагСвязатьДокументыВПакете.Доступность	= СвязываниеДоступно;
	
	Если НЕ СвязываниеДоступно Тогда
		ФлагСвязатьДокументыВПакете = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ОтправкаВыбранных.Колонки.Фактор.Видимость = ФлагФакторинг;
	
	Настройки = МенеджерНастроек.НастройкиИР();
	ПредпросмотрДоступен = НЕ Настройки.ПоддержкаНовыхФорматов.Включена;
	
	ЭлементыФормы.ПревьюДокумента.Доступность = ПредпросмотрДоступен;
	
КонецПроцедуры

// События элементов формы

Процедура ПодписатьОтправитьПакет(Кнопка)

	//Начальные проверки
	Если ПакетПустой() Тогда
		Сообщить("Необходимо выбрать хотя бы один документ!");
		Возврат;
	КонецЕсли;
	
	Если ПолучателиПакета.Количество() = 0 Тогда
		Сообщить("Необходимо выбрать хотя бы одного получателя!");
		Возврат;
	КонецЕсли;
	
	Если ФлагФакторинг Тогда
		Для Каждого ТекСтр Из ОтправкаВыбранных Цикл
			Если НЕ ТипЗнч(ТекСтр.Документ) = Тип("Строка") И 
					НЕ ЗначениеЗаполнено(ТекСтр.Фактор) Тогда
					
				Сообщить("В строке № " + ТекСтр.НомерСтроки + " не заполнен фактор! Отправка не возможна");
				Возврат;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Сертификат = Неопределено Тогда
		Сообщить("Для отправки документов необходима авторизация по сертификату." +
		Символы.ПС + "Отправка документов невозможна.");
		Возврат;
	КонецЕсли;
		
	ОтменитьПакет = Ложь;
	
	//Проверим возможность пересылки выборанному получателю
	Для Каждого ТекСтрока Из ОтправкаВыбранных Цикл
		
		Если ТекСтрока.ЭтоПересылка Тогда
			
			ДокИнфо = ExchangeService.GetFlowDocumentInfo(Токен, Syn_ЯщикОрганизации, ТекСтрока.IDДокумента, );
			
			МассивЯщиков = Новый Массив;
			
			// Кому пересылали
			Для Каждого Получатель Из ДокИнфо.Flows.DocumentFlow Цикл
				МассивЯщиков.Добавить(Получатель.RecipientOrganization.BoxAddress);	
			КонецЦикла;
			
			// Кому отправляли
			Для Каждого Получатель Из ДокИнфо.Recipients.MessageRecipientWithStatus Цикл
				Если МассивЯщиков.Найти(Получатель.OrganizationBoxId) = Неопределено Тогда
					МассивЯщиков.Добавить(Получатель.OrganizationBoxId);	
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Элемент Из ПолучателиПакета Цикл
				Если МассивЯщиков.Найти(Элемент.Значение) <> Неопределено Тогда
					Сообщить("Невозможно переслать документ [" + ТекСтрока.ДокументПредставление + "] контрагенту [" + Строка(Элемент) + "]
							 |т.к. он уже имеет доступ к данному документу.");
					ОтменитьПакет = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
				
	КонецЦикла;
		
	Если ОтменитьПакет Тогда
		Возврат;
	КонецЕсли;
			
	МассивПолучателей 		= Новый Массив;
	МассивДокументов 		= Новый Массив;
	ЕстьДокументыНаПодпись 	= Ложь;
	ЭтоПересылка			= Ложь;	
	
	Для Каждого Получатель Из ПолучателиПакета Цикл
		СтруктураПолучателя = Новый Структура;
		СтруктураПолучателя.Вставить("Ящик", Получатель.Значение);
		СтруктураПолучателя.Вставить("Подразделение", Неопределено);
		МассивПолучателей.Добавить(СтруктураПолучателя);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ОтправкаВыбранных Цикл
		
		Если ТекСтрока.ТребуетсяПодпись Тогда
			ЕстьДокументыНаПодпись = Истина;
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("Документ", ТекСтрока.Документ);
		СтруктураДокумента.Вставить("Тип", ТекСтрока.Тип);
		СтруктураДокумента.Вставить("Комментарий", ТекСтрока.Комментарий);
		СтруктураДокумента.Вставить("НужнаПодпись", ТекСтрока.ТребуетсяПодпись);
		СтруктураДокумента.Вставить("УИ", Строка(Новый УникальныйИдентификатор));
				
		Если ФлагФакторинг Тогда
			
			СтруктураУступочнойНадписи = ЗаполнитьСтруктуруУступочнойНадписи(ТекСтрока.Документ, ТекСтрока.Фактор);
			
			Если НЕ СтруктураУступочнойНадписи = Неопределено Тогда
				СтруктураДокумента.Вставить("СтруктураУступочнойНадписи", СтруктураУступочнойНадписи);
			Иначе
				Сообщить("Не удалось сформировать уступочную надпись.");
				Возврат;
			КонецЕсли;
			
		Иначе
			
			СтруктураДокумента.Вставить("СтруктураУступочнойНадписи", Неопределено);
			
		КонецЕсли;
		
		СтруктураДокумента.Вставить("ЭтоПересылка", ТекСтрока.ЭтоПересылка);
		СтруктураДокумента.Вставить("IDДокумента", ТекСтрока.IDДокумента);
		
		Если ТекСтрока.ЭтоПересылка Тогда
			ЭтоПересылка = Истина;
		КонецЕсли;
		 	
		МассивДокументов.Добавить(СтруктураДокумента);
		
	КонецЦикла;
	
	Если ЕстьДокументыНаПодпись И ПолучателиПакета.Количество() > 10 Тогда
		Если Вопрос("Максимальное число получателей документа для
				|подписания ограничено 10 организациями.
				|Возможно, Вы хотите отправить документы в качестве
				|уведомления, не требующего подписания?", РежимДиалогаВопрос.ДаНет, , , "") = КодВозвратаДиалога.Нет Тогда
				
			Сообщить("Документы на подписание можно отправлять одновременно не более, чем 10 получателям");
			Возврат;
			
		Иначе
			
			Для Каждого ТекСтрока Из ОтправкаВыбранных Цикл
				ТекСтрока.ТребуетсяПодпись = Ложь;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОтправкаПакета.Отправка,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	Настройки = МенеджерНастроек.НастройкиИР();
	Если Настройки.ПоддержкаНовыхФорматов.Включена Тогда
		
		Пакет = ОперацииСДокументами.Новый_ПакетДокументов();
		
		Фильтр = Новый Структура(
			"ЭтоПересылка",
			Истина
		);
		ПересылаемыеДокументы = ОтправкаВыбранных.НайтиСтроки(Фильтр); //: ПересылаемыеДокументы = ОтправкаВыбранных;
		Для Каждого СтрокаТЧ Из ПересылаемыеДокументы Цикл
			
			Документ = Пакет.Пересылаемые.Добавить();
			Документ.ИД					= СтрокаТЧ.IDДокумента;
			Документ.ЗапроситьПодпись	= СтрокаТЧ.ТребуетсяПодпись;
			
		КонецЦикла;
		
		Фильтр = Новый Структура(
			"ЭтоПересылка",
			Ложь
		);
		ОтправляемыеДокументы = ОтправкаВыбранных.НайтиСтроки(Фильтр); //: ОтправляемыеДокументы = ОтправкаВыбранных;
		Для Каждого СтрокаТЧ Из ОтправляемыеДокументы Цикл
			
			ЭтоФайл = (ТипЗнч(СтрокаТЧ.Документ) = Тип("Строка"));
			Если ЭтоФайл Тогда
				
				Документ = Пакет.Загруженные.Добавить();
				Документ.ИмяФайла			= СтрокаТЧ.Документ;
				Документ.ЗапроситьПодпись	= СтрокаТЧ.ТребуетсяПодпись;
				
			Иначе
				
				Документ = Пакет.Отправляемые.Добавить();
				Документ.Ссылка = СтрокаТЧ.Документ;
				Документ.Фактор = СтрокаТЧ.Фактор;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Получатели = ПолучателиПакета.ВыгрузитьЗначения();
		
		ОперацииСДокументами.ОтправитьПакетДокументов(Пакет, Получатели, СодержимоеДокументовПакета);
		
		Возврат;
		
	КонецЕсли;
	
	Если СформироватьИОтправитьСообщение(МассивПолучателей, МассивДокументов, "",  ФлагСвязатьДокументыВПакете, ФлагФакторинг, ЭтоПересылка) Тогда
		
		Обновить_ВходящиеДокументы();
		Обновить_ИсходящиеДокументы();
		// TODO: Скрыть
		Если НЕ ЭтоБГУ Тогда
			Обновить_ОтправитьДокументы();
		Иначе
			Обновить_ОтправитьДокументыБГУ();
		КонецЕсли;
		
		ОтменитьФормированиеПакета();
		
	КонецЕсли;
				
КонецПроцедуры

Процедура ВернутсяДляОтправкиНажатие(Элемент)

	ОткрытьДокументыДляОтправки();
	
КонецПроцедуры

Процедура ОтменитьПакетНажатие(Элемент)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОтправкаПакета.Отмена,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);

	ОтменитьФормированиеПакета();
	
КонецПроцедуры

Процедура ПревьюДокументаНажатие(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ОтправкаВыбранных.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Сообщить("Выберите документ!");
		Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("Акт");
	МассивТипов.Добавить("Торг12");
	
	Если НЕ МассивТипов.Найти(ТекущаяСтрока.Тип) = Неопределено И НЕ ТипЗнч(ТекущаяСтрока.Документ) = Тип("Строка") Тогда 
		
		ФормаПредпросмотра = ПолучитьФорму("Форма_ПредпросмотраДокумента", ЭтаФорма, ТекущаяСтрока.Документ.УникальныйИдентификатор());
		СтруктураПараметров = Новый Структура; 
		СтруктураПараметров.Вставить("ТипДокумента", ТекущаяСтрока.Тип);
		СтруктураПараметров.Вставить("ДокументСсылка", ТекущаяСтрока.Документ);
		СтруктураПараметров.Вставить("СтруктураУступочнойНадписи", ?(ФлагФакторинг, ЗаполнитьСтруктуруУступочнойНадписи(ТекущаяСтрока.Документ, ТекущаяСтрока.Фактор), Неопределено));
		
		ФормаПредпросмотра.СтруктураПараметров = СтруктураПараметров;
		ФормаПредпросмотра.Открыть();
		
	Иначе
		
		Сообщить("Предпросмотр возможен только для формализованных документов, сформированных в 1С.");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеСписокПолучателейПриИзменении(Элемент)
	
	Для Каждого Получатель Из ПолучателиПакета.ВыгрузитьЗначения() Цикл
		ДобавитьПолучателяВПакет(Получатель);
	КонецЦикла;

КонецПроцедуры

Процедура ФлагФакторингПриИзменении(Элемент)
	
	//Если настроены договора, то попробуем автоматически заполнить фактора в ТЧ
	Если ФлагФакторинг Тогда
		
		ТаблицаСвязей = ЗаполнитьТаблицуДоговоровФакторинг(); 
		
		Если НЕ ТаблицаСвязей = Неопределено Тогда
			Для Каждого ТекСтр Из ОтправкаВыбранных Цикл
				Если НЕ ТипЗнч(ТекСтр.Документ) = Тип("Строка") Тогда
					
					ДоговорДокумента = ПолучитьДоговорДокумента(ТекСтр.Документ);
					
					Если НЕ ДоговорДокумента = Неопределено Тогда
						Отбор = Новый Структура;
						Отбор.Вставить("Договор", ДоговорДокумента);
						СтрокаФактора = ТаблицаСвязей.НайтиСтроки(Отбор);
						
						Если СтрокаФактора.Количество() > 0 Тогда
							ТекСтр.Фактор = СтрокаФактора[0].Фактор;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Для Каждого ТекСтр Из ОтправкаВыбранных Цикл 
			ТекСтр.Фактор = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьОтображение_ПакетДокументов();
	
КонецПроцедуры                                       

// Пакет документов. Панель управления

Процедура КоманднаяПанельОтправитьВыбранныеДобавитьДокументы(Кнопка)

	ОткрытьДокументыДляОтправки();
	
КонецПроцедуры

Процедура КоманднаяПанельОтправитьВыбранныеРедактироватьЭД(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ОтправкаВыбранных.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РедактироватьДокументПакета(ТекущаяСтрока);
	
КонецПроцедуры

Процедура КоманднаяПанельОтправитьВыбранныеЗагрузитьИзФайла(Кнопка)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок			= НСтр("ru = 'Выберите файл'");
	Диалог.МножественныйВыбор	= Истина;
	
	ФайлВыбран = Диалог.Выбрать();
	
	Если ФайлВыбран Тогда
	
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.ОтправкаПакета.Добавление,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
			Диалог.ВыбранныеФайлы.Количество()
		);
		
		Для Каждого ИмяФайла Из Диалог.ВыбранныеФайлы Цикл
			
			ДобавитьФайлВПакет(ИмяФайла);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Пакет документов. События элемента

Процедура ОтправкаВыбранныхВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	//Если формализ. документ, открываем по ссылке
	Если Колонка.Имя = "ДокументПредставление" 
			И ЗначениеЗаполнено(ВыбраннаяСтрока.Документ) 
			И НЕ ТипЗнч(ВыбраннаяСтрока.Документ) = Тип("Строка") Тогда
			
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Просмотр.Просмотр1С,
			ЭтаФорма,
			Элемент,
			ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
		);
			
		ОткрытьЗначение(ВыбраннаяСтрока.Документ);
		
	КонецЕсли;
	
	//Если пересылка, тогда открываем карточку ЭД
	Если ВыбраннаяСтрока.ЭтоПересылка И Колонка.Имя = "ДокументПредставление" Тогда
		
		//Ищем документ во входящих
		Отбор = Новый Структура;
		Отбор.Вставить("IDДокумента",  ВыбраннаяСтрока.IDДокумента); 
		МассивСтрок 			= ВходящиеДокументы.НайтиСтроки(Отбор);
		ВыбранныйДокВходящий 	= Истина;
		
		Если МассивСтрок.Количество() = 0 Тогда
			МассивСтрок 			= ИсходящиеДокументы.НайтиСтроки(Отбор);
			ВыбранныйДокВходящий 	= Ложь;
		КонецЕсли;
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			Телеметрия.ОтправитьАналитику(
				СобытияТелеметрии.Просмотр.Предпросмотр,
				ЭтаФорма,
				Элемент,
				ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
			);
			
			ВыбранныйДок = МассивСтрок[0];
			//открываем карточку документа
			Форма_КарточкаЭД = ПолучитьФорму("Форма_КарточкаЭД", , ВыбранныйДок.IDДокумента);
	
			ПараметрыФормы = Форма_КарточкаЭД.Новый_ПараметрыФормы(ВыбранныйДок.IDДокумента, Истина);
			Форма_КарточкаЭД.УстановитьПараметрыФормы(ПараметрыФормы);
			
			Форма_КарточкаЭД.Открыть();
			
		Иначе
			
			Сообщить("Не удалось получить карточку документа [" + ВыбранныйДок.ДокументПредставление + "]");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаВыбранныхПередУдалением(Элемент, Отказ)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ОтправкаПакета.Удаление,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница,
		ЭлементыФормы.ОтправкаВыбранных.ВыделенныеСтроки.Количество()
	);
	
КонецПроцедуры

Процедура ОтправкаВыбранныхПослеУдаления(Элемент)
	
	УстановитьОтображение_ПакетДокументов();
	
КонецПроцедуры

Процедура ОтправкаВыбранныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.ОтправкаВыбранных.Колонки.Фактор.Видимость Тогда
		
		МожноУказатьФактора = Истина
			И НЕ ДанныеСтроки.ЭтоПересылка
			И ОбъектнаяМодель.ЭтоФормализованныйДокумент(ДанныеСтроки.ТипДокумента);
		
		ОформлениеСтроки.Ячейки.Фактор.ТолькоПросмотр = НЕ МожноУказатьФактора;
		
	КонецЕсли;
	
	ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
	ВидыДокумента = ОбъектнаяМодель.ВидыНеформализованныхДокументов();
	
	МожноИзменитьЗапросПодписи = Истина
		И ДанныеСтроки.ТипДокумента = ТипыДокумента.Неформализованный
		И ДанныеСтроки.ВидДокумента <> ВидыДокумента.СчетНаОплату;
		
	ОформлениеСтроки.Ячейки.ТребуетсяПодпись.ТолькоПросмотр = НЕ МожноИзменитьЗапросПодписи;
	
КонецПроцедуры

Процедура ОтправкаВыбранныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РедактироватьДокументПакета_Завершение(ВыбранноеЗначение);
	
КонецПроцедуры


//========================================================================
// КОНТРАГЕНТЫ. ДЕЙСТВУЮЩИЕ
//========================================================================

// Панель управления

Процедура КоманднаяПанельКонтрагенты_АвторизованныеОткрыть(Кнопка)

	ТекущаяСтрока = ЭлементыФормы.Контрагенты_Авторизованные.ТекущаяСтрока;
	Если ТекущаяСтрока <> НЕОПРЕДЕЛЕНО Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Контрагент) Тогда
			//открываем карточку контрагента 1С
			ТекущаяСтрока.Контрагент.ПолучитьФорму().Открыть();
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.IDКонтрагента) Тогда
			//открываем просто форму с карточкой контрагента, которого нет в базе (карточку Synerdocs)
			Попытка
				Syn_Контакт = ExchangeService.GetContact(Токен, Syn_IDОрганизации, ТекущаяСтрока.IDКонтрагента);
				Syn_Контрагент = ExchangeService.GetOrganizationByInnKpp(Токен, Syn_Контакт.ContragentInn, Syn_Контакт.ContragentKpp);
							
				Форма_КарточкаКонтрагентаSynerdocs = ПолучитьФорму("Форма_КарточкаКонтрагентаSynerdocs");
				Форма_КарточкаКонтрагентаSynerdocs.РежимСозданияКонтрагента = Ложь;
				Форма_КарточкаКонтрагентаSynerdocs.Наименование = Syn_Контрагент.Name;
				Форма_КарточкаКонтрагентаSynerdocs.ИНН = Syn_Контрагент.Inn;
				Форма_КарточкаКонтрагентаSynerdocs.КПП = Syn_Контрагент.Kpp;
				Форма_КарточкаКонтрагентаSynerdocs.ЮрФизЛицо = ?(Syn_Контрагент.IsJuridical, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
				Форма_КарточкаКонтрагентаSynerdocs.Syn_IDКонтрагента = Syn_Контрагент.OrganizationId;
								
				Форма_КарточкаКонтрагентаSynerdocs.Открыть();
				
			Исключение
				
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
				
				ОтправитьУведомлениеПользователю("Ошибка получения информации о контрагенте: <" + ТекущаяСтрока.КонтрагентПредставление + ">. " + ТекстОшибкиSynerdocs);
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельКонтрагенты_АвторизованныеСоздатьВ1С(Кнопка) Экспорт
	
	ТекущаяСтрока = ЭлементыФормы.Контрагенты_Авторизованные.ТекущиеДанные; //: ТекущаяСтрока = Контрагенты_Авторизованные[0];
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.УчтенВ1С 
			ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.IDКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Синхронизация.СозданиеКонтрагента,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	Попытка
		
		Syn_Контакт = ExchangeService.GetContact(Токен, Число(Syn_IDОрганизации), Число(ТекущаяСтрока.IDКонтрагента));
		Syn_Контрагент = ExchangeService.GetOrganizationByInnKpp(Токен, Syn_Контакт.ContragentInn, Syn_Контакт.ContragentKpp);
		
		Форма_КарточкаКонтрагентаSynerdocs = ПолучитьФорму("Форма_КарточкаКонтрагентаSynerdocs");
		Форма_КарточкаКонтрагентаSynerdocs.РежимСозданияКонтрагента = Истина;
		Форма_КарточкаКонтрагентаSynerdocs.Наименование = Syn_Контрагент.Name;
		Форма_КарточкаКонтрагентаSynerdocs.ИНН = Syn_Контрагент.Inn;
		Форма_КарточкаКонтрагентаSynerdocs.КПП = Syn_Контрагент.Kpp;
		Форма_КарточкаКонтрагентаSynerdocs.Покупатель = Истина;
		Форма_КарточкаКонтрагентаSynerdocs.Поставщик = Истина;
		Форма_КарточкаКонтрагентаSynerdocs.Syn_IDКонтрагента = Syn_Контрагент.OrganizationId;
		
		Если НЕ ЭтоБГУ Тогда
			Форма_КарточкаКонтрагентаSynerdocs.ЮрФизЛицо = ?(Syn_Контрагент.IsJuridical, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
		Иначе
			Форма_КарточкаКонтрагентаSynerdocs.ЮрФизЛицо = ?(Syn_Контрагент.IsJuridical, Перечисления.ВидыКонтрагентов.Организация, Перечисления.ВидыКонтрагентов.ФизЛицо);
		КонецЕсли;
		
		Контрагент = Форма_КарточкаКонтрагентаSynerdocs.ОткрытьМодально();
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Если НЕ ЭтоБГУ Тогда
				УстановитьЗначениеСвойства(Контрагент, "Syn_IDКонтрагента", ТекущаяСтрока.IDКонтрагента);
			Иначе
				УстановитьЗначениеСвойстваБГУ(Контрагент, "Syn_IDКонтрагента", ТекущаяСтрока.IDКонтрагента);
			КонецЕсли;
			Обновить_Контрагенты();
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации о контрагенте: <" + ТекущаяСтрока.КонтрагентПредставление + ">. " + ТекстОшибкиSynerdocs);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура КоманднаяПанельКонтрагенты_АвторизованныеСинхронизироватьАдрес(Кнопка)

	ТекущаяСтрока = ЭлементыФормы.Контрагенты_Авторизованные.ТекущиеДанные; //: ТекущаяСтрока = Контрагенты_Авторизованные[0];
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Контрагент)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.IDКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Синхронизация.Синхронизация,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница
	);
	
	Попытка
		Форма_СинхронизацияКИ = ПолучитьФорму("Форма_СинхронизацияКИ");
		Форма_СинхронизацияКИ.Контрагент = ТекущаяСтрока.Контрагент;
		Форма_СинхронизацияКИ.Syn_IDКонтрагента = ТекущаяСтрока.IDКонтрагента;
		Форма_СинхронизацияКИ.Открыть();
		
		//Обновить_Контрагенты();
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации о контрагенте: <" + ТекущаяСтрока.КонтрагентПредставление + ">. " + ТекстОшибкиSynerdocs);
		
	КонецПопытки;

КонецПроцедуры

Процедура КоманднаяПанельКонтрагенты_АвторизованныеДобавитьКонтрагента(Кнопка)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ПриглашениеКОбмену.Отправка,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.ПанельКонтрагенты.ТекущаяСтраница
	);

	Форма_ДобавлениеКонтрагента = ПолучитьФорму("Форма_ДобавлениеКонтрагента");
	
	Если Форма_ДобавлениеКонтрагента.ОткрытьМодально() = Истина Тогда
		Обновить_Контрагенты();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельКонтрагенты_АвторизованныеУдалить(Кнопка)

	ОбновитьСписок = Ложь;
	
	Заблокировано = 0;
	Для Каждого ТекСтрока Из ЭлементыФормы.Контрагенты_Авторизованные.ВыделенныеСтроки Цикл
		
		ТекстВопроса = "Прекратить обмен с контрагентом " + Символы.ПС + "[" + ТекСтрока.КонтрагентПредставление + "] ?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Подтверждение");
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Заблокировано = Заблокировано + 1;
			Попытка
				ExchangeService.RejectAuthorization(Токен, Syn_IDОрганизации, Число(ТекСтрока.IDКонтрагента), "");
				Сообщить("Прекращен обмен с контрагентом [" + ТекСтрока.КонтрагентПредставление + "]");
				ОбновитьСписок = Истина;
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Заблокировано > 0 Тогда
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.ПриглашениеКОбмену.Прекращение,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.ПанельКонтрагенты.ТекущаяСтраница,
			Заблокировано
		);
	КонецЕсли;
	
	Если ОбновитьСписок Тогда
		Обновить_Контрагенты();
	КонецЕсли;
	
КонецПроцедуры

// События элемента формы

Процедура Контрагенты_АвторизованныеВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.Контрагент) Тогда
		//открываем карточку контрагента 1С
		ВыбраннаяСтрока.Контрагент.ПолучитьФорму().Открыть();
	ИначеЕсли ЗначениеЗаполнено(ВыбраннаяСтрока.IDКонтрагента) Тогда
		КоманднаяПанельКонтрагенты_АвторизованныеСоздатьВ1С(Элемент);			
	КонецЕсли;
	
КонецПроцедуры


//========================================================================
// КОНТРАГЕНТЫ. ПРИГЛАШЕНИЯ
//========================================================================

// Панель управления

Процедура КоманднаяПанельКонтрагенты_ТребуетсяОтветПринять(Кнопка)

	Принято = 0;
	Для Каждого ТекСтрока Из ЭлементыФормы.Контрагенты_ТребуетсяОтвет.ВыделенныеСтроки Цикл
		
		ТекстВопроса = "Подтвердить приглашение к обмену от контрагента" + Символы.ПС + "[" + ТекСтрока.КонтрагентПредставление + "] ?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Подтверждение");
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Принято = Принято + 1;
			Попытка
				ExchangeService.AcceptAuthorization(Токен, Syn_IDОрганизации, Число(ТекСтрока.IDКонтрагента), "");
				Сообщить("Принято приглашение к обмену от контрагента [" + ТекСтрока.КонтрагентПредставление + "]");
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Принято > 0 Тогда
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.ПриглашениеКОбмену.Принято,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.ПанельКонтрагенты.ТекущаяСтраница,
			Принято
		);
	КонецЕсли;
	
	Обновить_Контрагенты();
	
КонецПроцедуры

Процедура КоманднаяПанельКонтрагенты_ТребуетсяОтветОтклонить(Кнопка)
	
	Отклонено = 0;
	Для Каждого ТекСтрока Из ЭлементыФормы.Контрагенты_ТребуетсяОтвет.ВыделенныеСтроки Цикл
		
		ФормаКомментария = ПолучитьФорму("Форма_КомментарийПриглашениеКОбмену");
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЭтоОтказ", Истина);
		СтруктураПараметров.Вставить("КонтрагентПредставление", ТекСтрока.КонтрагентПредставление);
		ФормаКомментария.СтруктураПараметров = СтруктураПараметров;
		
		Результат = ФормаКомментария.ОткрытьМодально();
		
		Если Результат <> Неопределено И Результат.ПодтверждениеОперации Тогда
			Отклонено = Отклонено + 1;
			Попытка
				 ExchangeService.RejectAuthorization(Токен, Syn_IDОрганизации, Число(ТекСтрока.IDКонтрагента), Результат.Комментарий);
				 Сообщить("Отклонено приглашение к обмену от контрагента [" + ТекСтрока.КонтрагентПредставление + "]");
			Исключение
				 Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отклонено > 0 Тогда
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.ПриглашениеКОбмену.Отклонено,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.ПанельКонтрагенты.ТекущаяСтраница,
			Отклонено
		);
	КонецЕсли;
	
	Обновить_Контрагенты();
	
КонецПроцедуры

Процедура КоманднаяПанельКонтрагенты_ОжидаетсяОтветПригласитьКОбмену(Кнопка)

	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.ПриглашениеКОбмену.Отправка,
		ЭтаФорма,
		Кнопка,
		ЭлементыФормы.ПанельКонтрагенты.ТекущаяСтраница
	);

	Форма_ДобавлениеКонтрагента = ПолучитьФорму("Форма_ДобавлениеКонтрагента");
	Если Форма_ДобавлениеКонтрагента.ОткрытьМодально() = Истина Тогда
		Обновить_Контрагенты();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельКонтрагенты_ОжидаетсяОтветОтозватьПриглашение(Кнопка)
	
	Отозвано = 0;
	Для Каждого ТекСтрока Из ЭлементыФормы.Контрагенты_ОжидаетсяОтвет.ВыделенныеСтроки Цикл
		
		ТекстВопроса = "Отозвать приглашение к обмену с контрагентом " + Символы.ПС + "[" + ТекСтрока.КонтрагентПредставление + "] ?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Подтверждение");
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Отозвано = Отозвано + 1;
			Попытка
				ExchangeService.RejectAuthorization(Токен, Syn_IDОрганизации, Число(ТекСтрока.IDКонтрагента), "");
				Сообщить("Отозвано приглашение к обмену с контрагентом [" + ТекСтрока.КонтрагентПредставление + "]");
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отозвано > 0 Тогда
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.ПриглашениеКОбмену.Прекращение,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.ПанельКонтрагенты.ТекущаяСтраница,
			Отозвано
		);
	КонецЕсли;
	
	Обновить_Контрагенты();

КонецПроцедуры


//========================================================================
// КОНТРАГЕНТЫ. ЗАБЛОКИРОВАННЫЕ
//========================================================================

// Панель управления

Процедура КоманднаяПанельКонтрагенты_ЗаблокированныеВозобновитьОбмен(Кнопка)
	
	ВысланоПриглашений = 0;
	Для Каждого ТекСтрока Из ЭлементыФормы.Контрагенты_Заблокированные.ВыделенныеСтроки Цикл
		
		ФормаКомментария = ПолучитьФорму("Форма_КомментарийПриглашениеКОбмену");
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЭтоОтказ", Ложь);
		СтруктураПараметров.Вставить("КонтрагентПредставление", ТекСтрока.КонтрагентПредставление);
		ФормаКомментария.СтруктураПараметров = СтруктураПараметров;
		
		Результат = ФормаКомментария.ОткрытьМодально();
		
		Если Результат <> Неопределено И Результат.ПодтверждениеОперации Тогда
			ВысланоПриглашений = ВысланоПриглашений + 1;
			Попытка
				ExchangeService.AcceptAuthorization(Токен, Syn_IDОрганизации, Число(ТекСтрока.IDКонтрагента), Результат.Комментарий);
				Сообщить("Отправлено приглашение к обмену контрагенту [" + ТекСтрока.КонтрагентПредставление + "]");
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВысланоПриглашений > 0 Тогда
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.ПриглашениеКОбмену.Возобновление,
			ЭтаФорма,
			Кнопка,
			ЭлементыФормы.ПанельКонтрагенты.ТекущаяСтраница,
			ВысланоПриглашений
		);
	КонецЕсли;
	
	Обновить_Контрагенты();
    	
КонецПроцедуры


//========================================================================
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================

// Отображение списка документов

Процедура УсловноеОформлениеСпискаДокументов(ОформлениеСтроки, ДанныеСтроки)
	
	//: ДанныеСтроки = ВходящиеДокументы[0];
	
	//Если ВыводитьПолучателей(ДанныеСтроки) Тогда
	//	ОформлениеСтроки.Ячейки.Получатель.Гиперссылка = Истина;
	//КонецЕсли;
	
	ОформлениеЯчеек = ОформлениеСтроки.Ячейки;
	
	ОформлениеЯчеек.Отправитель.ОтображатьКартинку	= ДанныеСтроки.Переслан;
	ОформлениеЯчеек.Отправитель.ИндексКартинки		= 0;
	
	ОформлениеЯчеек.Связан.ОтображатьКартинку	= ДанныеСтроки.Связан;
	ОформлениеЯчеек.Связан.ИндексКартинки		= 0;
	
	УсловноеОформлениеСпискаДокументов_СостояниеДокумента(ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Состояние документа в 1С

Функция СостоянияДокумента()
	
	Состояния = Новый Структура(
		"Учтен, НеУчтен, Проведен, ПомеченНаУдаление"
	);
	
	Состояния.Учтен				= 0;
	Состояния.НеУчтен			= 3;
	Состояния.Проведен			= 1;
	Состояния.ПомеченНаУдаление	= 2;
	
	Состояния = Новый ФиксированнаяСтруктура(Состояния);
	
	Возврат Состояния;
	
КонецФункции

Функция УстановитьДокумент1С(СтрокаСпискаДокументов, Документ1С)
	
	СостоянияДокумента = СостоянияДокумента();
	
	ДокументСуществует = ЗначениеЗаполнено(Документ1С);
	
	//: Документ1С = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	Если ДокументСуществует Тогда
		
		Состояние = СостоянияДокумента.Учтен;
		
		Если Документ1С.Проведен Тогда
			Состояние = СостоянияДокумента.Проведен;
		ИначеЕсли Документ1С.ПометкаУдаления Тогда
			Состояние = СостоянияДокумента.ПомеченНаУдаление;
		КонецЕсли;
		
	Иначе
		
		Состояние = СостоянияДокумента.НеУчтен;
		
	КонецЕсли;
	
	СтрокаСпискаДокументов.Документ				= Документ1С;
	СтрокаСпискаДокументов.УчтенВ1С				= ДокументСуществует;
	СтрокаСпискаДокументов.СостояниеДокумента	= Состояние;
	
КонецФункции

Процедура УсловноеОформлениеСпискаДокументов_СостояниеДокумента(ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеЯчеек = ОформлениеСтроки.Ячейки;
	
	ОформлениеЯчеек.СостояниеДокумента.ИндексКартинки		= ДанныеСтроки.СостояниеДокумента;
	ОформлениеЯчеек.СостояниеДокумента.ОтображатьКартинку	= Истина;
	
КонецПроцедуры

// Обновление страниц

Процедура ЗаполнитьСписокДокументов(СписокДокументов, НовоеСодержимоеСписка)
	
	//: СписокДокументов = ВходящиеДокументы;
	
	СостоянияДокумента = СостоянияДокумента();
	
	СписокДокументов.Очистить();
	
	ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
	
	НовоеСодержимое = НовоеСодержимоеСписка.СписокДокументов; //: НовоеСодержимое = ВходящиеДокументы;
	
	Для Каждого Экземпляр Из НовоеСодержимое Цикл
		
		НоваяСтрока = СписокДокументов.Добавить();
		
		НоваяСтрока.ДокументПредставление	= Экземпляр.НаименованиеДокумента;
		НоваяСтрока.Дата					= Экземпляр.Дата;
		НоваяСтрока.Сумма					= Экземпляр.Сумма;
		НоваяСтрока.Комментарий				= Экземпляр.Комментарий;
		
		НоваяСтрока.IDДокумента				= Экземпляр.ИдентификаторДокумента;
		НоваяСтрока.ID_ЭкземпляраДокумента	= Экземпляр.ИдентификаторЭкземпляра;
		НоваяСтрока.Дата					= Экземпляр.ДатаОтправки;
		
		НоваяСтрока.Статус					= Экземпляр.Статус;
		НоваяСтрока.ДопСтатус				= Экземпляр.ДопСтатус;
		НоваяСтрока.ДоступныеОперации		= Экземпляр.ДоступныеОперации;
		
		// FIXME: Это представление, а не тип, убрать
		НоваяСтрока.Тип = ?(ЗначениеЗаполнено(Экземпляр.ВидДокумента), Экземпляр.ВидДокумента, ПредставлениеПеречисления(ТипыДокумента, Экземпляр.ТипДокумента));
		
		НоваяСтрока.ТипДокумента = Экземпляр.ТипДокумента;
		НоваяСтрока.ВидДокумента = Экземпляр.ВидДокумента;
		
		// FIXME: Скрыть
		Если НЕ ЭтоБГУ Тогда
			Документ1С = ПолучитьОбъектПоЗначениюСвойства("Syn_IDДокумента", Экземпляр.ИдентификаторДокумента);
		Иначе
			Документ1С = ПолучитьДокумент1С("Syn_IDДокумента", Экземпляр.ИдентификаторДокумента, Экземпляр.ТипДокументаБГУ);
		КонецЕсли;
		
		УстановитьДокумент1С(НоваяСтрока, Документ1С);
		
		НоваяСтрока.Отправитель = Экземпляр.Отправитель.Наименование;
		
		НоваяСтрока.Переслан	= Экземпляр.Переслан;
		НоваяСтрока.Связан		= Экземпляр.ЕстьСвязанныеДокументы;
		
		УстановитьПолучателей(НоваяСтрока, Экземпляр.Получатели);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Обновить_ВходящиеДокументы() Экспорт
	
	// TODO: Выделить заполнение списка в соответствующий модуль
	
	НовоеСодержимоеСписка = СпискиДокументов.СписокВходящихДокументов(ТекущаяСтраницаВходящие, НастройкиОтбораВх);
	ЗаполнитьСписокДокументов(ВходящиеДокументы, НовоеСодержимоеСписка);
	
	УстановитьСписокВыбораСтраницы(ЭлементыФормы.ТекущаяСтраницаВходящие, НовоеСодержимоеСписка, ТекущаяСтраницаВходящие, НастройкиОтбораВх.РазмерСтраницы);
	
	УстановитьОтоборажение_Входящие_Паджинация();
	
	Если Сертификат <> Неопределено Тогда
		ПроверитьСлужебныеДокументы();
	КонецЕсли;
	
КонецПроцедуры

Процедура Обновить_ИсходящиеДокументы() Экспорт
	
	НовоеСодержимоеСписка = СпискиДокументов.СписокИсходящихДокументов(ТекущаяСтраницаИсходящие, НастройкиОтбораИсх);
	ЗаполнитьСписокДокументов(ИсходящиеДокументы, НовоеСодержимоеСписка);
	
	УстановитьСписокВыбораСтраницы(ЭлементыФормы.ТекущаяСтраницаИсходящие, НовоеСодержимоеСписка, ТекущаяСтраницаИсходящие, НастройкиОтбораИсх.РазмерСтраницы);
	
	УстановитьОтоборажение_Исходящие_Паджинация();
	 
КонецПроцедуры

Процедура Обновить_ВходящиеИсходящиеЕслиНадо(ИдИзменившихсяДокументов)
	
	Если ТипЗнч(ИдИзменившихсяДокументов) = Тип("Массив") Тогда
		СписокДокументов = ИдИзменившихсяДокументов;
	Иначе
		СписокДокументов = ЗначениеВМассиве(ИдИзменившихсяДокументов);
	КонецЕсли;
	
	ЕстьВоВходящих = Ложь;
	ЕстьВИсходящих = Ложь;
	
	Для Каждого ИдДокумента Из СписокДокументов Цикл
		ЕстьВоВходящих = (ВходящиеДокументы.Найти(ИдДокумента, "IDДокумента") <> Неопределено);
		Если ЕстьВоВходящих Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИдДокумента Из СписокДокументов Цикл
		ЕстьВИсходящих = (ИсходящиеДокументы.Найти(ИдДокумента, "IDДокумента") <> Неопределено);
		Если ЕстьВИсходящих Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВоВходящих Тогда
		Обновить_ВходящиеДокументы();
	КонецЕсли;
	Если ЕстьВИсходящих Тогда
		Обновить_ИсходящиеДокументы();
	КонецЕсли;
	
КонецПроцедуры

Процедура Обновить_ОтправитьДокументы() 
	
	СписокДокументов = СпискиДокументов.СписокДокументовДляОтправки(ПериодНачало, ПериодОкончание); //: СписокДокументов = Новый ТаблицаЗначений;
	
	ОтправитьДокументы.Загрузить(СписокДокументов);
	
	ОтсутствующиеКолонки = Новый Структура(
		"Документ,	Тип",
		"Ссылка",	"ТипПредставление"
	);
	Для Каждого Колонка Из ОтсутствующиеКолонки Цикл
		СодержимоеКолонки = СписокДокументов.ВыгрузитьКолонку(Колонка.Значение);
		ОтправитьДокументы.ЗагрузитьКолонку(СодержимоеКолонки, Колонка.Ключ);
	КонецЦикла;
	
	ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
	Для Каждого СтрокаТЧ Из ОтправитьДокументы Цикл
		
		СтрокаТЧ.ДокументПредставление = Строка(СтрокаТЧ.Документ);
		
		Если СтрокаТЧ.ТипДокумента = ТипыДокумента.ТитулПродавцаТОРГ12 Тогда
			СтрокаТЧ.Тип = НСтр("ru = 'Торг12'");
		ИначеЕсли СтрокаТЧ.ТипДокумента = ТипыДокумента.ТитулИсполнителяАкт Тогда
			СтрокаТЧ.Тип = НСтр("ru = 'Акт'");
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементыФормы.Панель_РабочаяОбласть.Страницы.ОтправитьДокументы.Заголовок = "Для отправки" + ?(ОтправитьДокументы.Количество() > 0, " (" + ОтправитьДокументы.Количество() + ")", "");
	ЭлементыФормы.ОтправитьДокументы.НастройкаОтбораСтрок.Дата.Доступность = Ложь;
	
КонецПроцедуры

Процедура Обновить_ОтправитьДокументыБГУ()
	
	ОтправитьДокументы.Очистить();
	
	//сформируем список уже отправленных документов
	ТЗ_Ид = Новый ТаблицаЗначений;
	ТЗ_Ид.Колонки.Добавить("ЛокальныйИд");
	ТЗ_Ид.Колонки.Добавить("СервисныйИд");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) КАК ЛокальныйИд,
	|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 38, 36) КАК СервисныйИд
	|ИЗ
	|	Справочник.ЗначенияСвойств КАК ЗначенияСвойств
	|ГДЕ
	|	ЗначенияСвойств.ПометкаУдаления = ЛОЖЬ";
	ТЗ_Ид = Запрос.Выполнить().Выгрузить();	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЗ_Документы.Ссылка.Ссылка КАК Документ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВЗ_Документы.Ссылка) = ТИП(Документ.МЗ_Реализация)
	|			ТОГДА ВЫРАЗИТЬ(ВЗ_Документы.Ссылка.СубконтоСчетДебета2 КАК Справочник.Контрагенты)
	|		КОГДА ТИПЗНАЧЕНИЯ(ВЗ_Документы.Ссылка) = ТИП(Документ.ОС_Реализация)
	|			ТОГДА ВЫРАЗИТЬ(ВЗ_Документы.Ссылка.СубконтоСчетДоходов2 КАК Справочник.Контрагенты)
	|		КОГДА ТИПЗНАЧЕНИЯ(ВЗ_Документы.Ссылка) = ТИП(Документ.НДС_ИсправительныйСчетФактураВыданный)
	|			ТОГДА ВЗ_Документы.Ссылка.Контрагент
	|		КОГДА ТИПЗНАЧЕНИЯ(ВЗ_Документы.Ссылка) = ТИП(Документ.НДС_КорректировочныйСчетФактураВыданный)
	|			ТОГДА ВЗ_Документы.Ссылка.Контрагент
	|		КОГДА ТИПЗНАЧЕНИЯ(ВЗ_Документы.Ссылка) = ТИП(Документ.НДС_СчетФактураВыданный)
	|			ТОГДА ВЗ_Документы.Ссылка.Контрагент
	|		КОГДА ТИПЗНАЧЕНИЯ(ВЗ_Документы.Ссылка) = ТИП(Документ.УслугиОказанные)
	|			ТОГДА ВЗ_Документы.Ссылка.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЗ_Документы.Тип,
	|	ВЗ_Документы.Ссылка.Дата КАК Дата,
	|	ВЗ_Документы.Ссылка.СуммаДокумента КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОС_Реализация.Ссылка КАК Ссылка,
	|		""ТОРГ-12"" КАК Тип
	|	ИЗ
	|		Документ.ОС_Реализация КАК ОС_Реализация
	|	ГДЕ
	|		ОС_Реализация.Учреждение = &Организация
	|		И ОС_Реализация.СубконтоСчетДоходов2 В(&СписокКонтрагентов)
	|		И ОС_Реализация.Проведен = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УслугиОказанные.Ссылка,
	|		""Акт""
	|	ИЗ
	|		Документ.УслугиОказанные КАК УслугиОказанные
	|	ГДЕ
	|		УслугиОказанные.Учреждение = &Организация
	|		И УслугиОказанные.Контрагент В(&СписокКонтрагентов)
	|		И УслугиОказанные.Проведен = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МЗ_Реализация.Ссылка,
	|		""ТОРГ-12""
	|	ИЗ
	|		Документ.МЗ_Реализация КАК МЗ_Реализация
	|	ГДЕ
	|		МЗ_Реализация.Учреждение = &Организация
	|		И МЗ_Реализация.СубконтоСчетДебета2 В(&СписокКонтрагентов)
	|		И МЗ_Реализация.Проведен = ИСТИНА) КАК ВЗ_Документы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокКонтрагентов", ПолучитьСписокДоступныхКонтрагентов());
	Запрос.УстановитьПараметр("ТЗ_Ид",ТЗ_Ид);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИдСтрока = Строка(Выборка.Документ.УникальныйИдентификатор());
		
		Для Каждого Строка Из ТЗ_Ид Цикл
			Если Строка.ЛокальныйИД = ИдСтрока И ЗначениеЗаполнено(Строка.СервисныйИд) Тогда
				ВыводитьДокумент = Ложь;
				Прервать;
			Иначе
				ВыводитьДокумент = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ТЗ_Ид.Количество() = 0 Тогда //Еще ничего не отправляли, либо нет записей в справочнике
			ВыводитьДокумент = Истина;
		КонецЕсли;
		
		Если НЕ ВыводитьДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		
		ТипИПредставление = ПолучитьТипИПредставлениеДокументаБГУ(Выборка.Документ);
		НоваяСтрока = ОтправитьДокументы.Добавить();
		НоваяСтрока.Контрагент = Выборка.Контрагент;
		НоваяСтрока.Документ = Выборка.Документ;
		НоваяСтрока.Дата = Выборка.Дата;
		НоваяСтрока.Сумма = Выборка.Сумма;
		НоваяСтрока.Тип = ТипИПредставление.Тип;
		НоваяСтрока.ДокументПредставление = ТипИПредставление.Представление;
		
	КонецЦикла;
	
	ЭлементыФормы.Панель_РабочаяОбласть.Страницы.ОтправитьДокументы.Заголовок = "Для отправки" + ?(ОтправитьДокументы.Количество() > 0, " (" + ОтправитьДокументы.Количество() + ")", "");
	
КонецПроцедуры

Процедура Обновить_Контрагенты()
	
	Контрагенты_Авторизованные.Очистить();
	//Сначала обновляем статусы контрагентов в РСВ из сервиса обмена
	Тип_ContactSearchOptions = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ContactSearchOptions");
	
	Тип_ContactStatus = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ContactStatus");
	Фасеты_ContactStatus = Тип_ContactStatus.Фасеты;
	
	ContactSearchOptions = ExchangeService.ФабрикаXDTO.Создать(Тип_ContactSearchOptions);
	ContactSearchOptions.From = 0;
	ContactSearchOptions.Max = 100;
	ContactSearchOptions.OrganizationId = Syn_IDОрганизации;
	ContactSearchOptions.ContactStatus = "Active";
	ContactSearchOptions.SearchString = "";
	
	Позиция = 0;
	
	Пока Истина Цикл
		
		ContactSearchOptions.From = Позиция;
		
		Попытка
			ContactSearchResult = ExchangeService.SearchContacts(Токен, ContactSearchOptions);
			ContactSearchItems = ContactSearchResult.Items.ПолучитьСписок("ContactSearchItem");
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			
			ОтправитьУведомлениеПользователю("Ошибка получения контактов: " + ТекстОшибкиSynerdocs);
				
			Возврат;
		КонецПопытки;
		
		Для Каждого ContactSearchItem Из ContactSearchItems Цикл
			IDКонтрагента = СтрЗаменить((Строка(Формат(ContactSearchItem.ContragentId, "ЧГ=0")))," ","");
			
			//Ищем контрагента по ID
			Если НЕ ЭтоБГУ Тогда
				Контрагент = ПолучитьОбъектПоЗначениюСвойства("Syn_IDКонтрагента", IDКонтрагента);
			Иначе 
				Контрагент = ПолучитьОбъектПоЗначениюСвойстваБГУ("Syn_IDКонтрагента", IDКонтрагента, НЕОПРЕДЕЛЕНО);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Контрагент) Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ
				                      |	Контрагенты.Ссылка
				                      |ИЗ
				                      |	Справочник.Контрагенты КАК Контрагенты
				                      |ГДЕ
				                      |	Контрагенты.ИНН = &ИНН
				                      |	И ВЫБОР
				                      |			КОГДА &КПП <> НЕОПРЕДЕЛЕНО
				                      |				ТОГДА Контрагенты.КПП = &КПП
				                      |			ИНАЧЕ ИСТИНА
				                      |		КОНЕЦ");
				Запрос.УстановитьПараметр("ИНН", ContactSearchItem.ContragentInn);
				Запрос.УстановитьПараметр("КПП", ContactSearchItem.ContragentKpp);
				Выборка = Запрос.Выполнить().Выбрать();
				Контрагент = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Контрагенты.ПустаяСсылка());
				Если ЗначениеЗаполнено(Контрагент) Тогда
					//создаем запись в РСВ с id
					Если НЕ ЭтоБГУ Тогда
						УстановитьЗначениеСвойства(Контрагент, "Syn_IDКонтрагента", IDКонтрагента);
					Иначе
						УстановитьЗначениеСвойстваБГУ(Контрагент, "Syn_IDКонтрагента", IDКонтрагента);
						УстановитьЗначениеСвойстваБГУ(Контрагент, "Syn_ЯщикКонтрагента", ContactSearchItem.BoxAddress);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = Контрагенты_Авторизованные.Добавить();
			НоваяСтрока.Контрагент = Контрагент;
			НоваяСтрока.КонтрагентПредставление = ContactSearchItem.ContragentName;
			НоваяСтрока.ИНН_КПП = ContactSearchItem.ContragentInn + "/" + ContactSearchItem.ContragentKpp;
			НоваяСтрока.ИНН = ContactSearchItem.ContragentInn;
			НоваяСтрока.КПП = ContactSearchItem.ContragentKpp;
			НоваяСтрока.УчтенВ1С = ЗначениеЗаполнено(Контрагент);
			НоваяСтрока.Адрес = ПредставлениеАдреса(ContactSearchItem.ContragentAddress, ContactSearchItem.ContragentIsForeignCompany);
			НоваяСтрока.Дата = ContactSearchItem.Date;
			НоваяСтрока.IDКонтрагента = IDКонтрагента;
			НоваяСтрока.Ящик = ContactSearchItem.BoxAddress;
			
			// Проверяем ящик контрагента в 1С
			Если ЗначениеЗаполнено(Контрагент) Тогда
				Если НЕ ЭтоБГУ Тогда
					УстановитьЗначениеСвойства(Контрагент, "Syn_IDКонтрагента", IDКонтрагента);
					УстановитьЗначениеСвойства(Контрагент, "Syn_ЯщикКонтрагента",  ContactSearchItem.BoxAddress);
				Иначе
					УстановитьЗначениеСвойстваБГУ(Контрагент, "Syn_IDКонтрагента", IDКонтрагента);
					УстановитьЗначениеСвойстваБГУ(Контрагент, "Syn_ЯщикКонтрагента", ContactSearchItem.BoxAddress);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Позиция = Позиция + ContactSearchItems.Количество();
		
		Если Позиция >= ContactSearchResult.TotalCount Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	
	//Обновим список исходящих запросов авторизации
	ContactSearchOptions.ContactStatus = "OutgoingAuthRequest"; //Отправлено приглашение к обмену. Ожидается подтверждение или отклонение контрагентом
	
	Позиция = 0;
	
	Пока Истина Цикл
		
		ContactSearchOptions.From = Позиция;
		
		Попытка
			ContactSearchResult = ExchangeService.SearchContacts(Токен, ContactSearchOptions);
			ContactSearchItems = ContactSearchResult.Items.ПолучитьСписок("ContactSearchItem");
			
			//Очистим таблицу исходящих запросов
			Контрагенты_ОжидаетсяОтвет.Очистить();		
			
			//Заполним таблицу исх. запросов
			Для Каждого Элемент Из ContactSearchItems Цикл
				НовСтр = Контрагенты_ОжидаетсяОтвет.Добавить();
				НовСтр.КонтрагентПредставление = Элемент.ContragentName;
				НовСтр.Адрес = ПредставлениеАдреса(Элемент.ContragentAddress, Элемент.ContragentIsForeignCompany); 
				НовСтр.Комментарий = Элемент.Comment;
				НовСтр.ИНН_КПП = ?(ЗначениеЗаполнено(Элемент.ContragentInn), "ИНН: " + Элемент.ContragentInn, "") +
								?(ЗначениеЗаполнено(Элемент.ContragentKpp), Символы.ПС + "КПП: " + Элемент.ContragentKpp, "");
				НовСтр.IDКонтрагента = Элемент.ContragentId;			
				НовСтр.Ящик = Элемент.BoxAddress;
			КонецЦикла;
				
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			ОтправитьУведомлениеПользователю("Ошибка получения контактов: " + ТекстОшибкиSynerdocs);
			Возврат;
		КонецПопытки;
		
		Позиция = Позиция + ContactSearchItems.Количество();
		
		Если Позиция >= ContactSearchResult.TotalCount Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	//Обновим список входящих запросов авторизации
	ContactSearchOptions.ContactStatus = "IncomingAuthRequest"; //Получено приглашения к обмену. Необходимо подтвердить или отклонить приглашение
	
	Позиция = 0;
	
	Пока Истина Цикл
		
		ContactSearchOptions.From = Позиция;
	
		Попытка
			ContactSearchResult = ExchangeService.SearchContacts(Токен, ContactSearchOptions);
			ContactSearchItems = ContactSearchResult.Items.ПолучитьСписок("ContactSearchItem");
			
			//Очистим таблицу входящих запросов
			Контрагенты_ТребуетсяОтвет.Очистить();		
			
			//Заполним таблицу вх. запросов
			Для Каждого Элемент Из ContactSearchItems Цикл
				НовСтр = Контрагенты_ТребуетсяОтвет.Добавить();
				НовСтр.КонтрагентПредставление = Элемент.ContragentName;
				НовСтр.Адрес = ПредставлениеАдреса(Элемент.ContragentAddress, Элемент.ContragentIsForeignCompany);
				НовСтр.Комментарий = Элемент.Comment;
				НовСтр.ИНН_КПП = ?(ЗначениеЗаполнено(Элемент.ContragentInn), "ИНН: " + Элемент.ContragentInn, "") +
								?(ЗначениеЗаполнено(Элемент.ContragentKpp), Символы.ПС + "КПП: " + Элемент.ContragentKpp, "");
				НовСтр.IDКонтрагента = Элемент.ContragentId;			
				НовСтр.Ящик = Элемент.BoxAddress;
			КонецЦикла;
				
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			ОтправитьУведомлениеПользователю("Ошибка получения контактов: " + ТекстОшибкиSynerdocs);
			Возврат;
		КонецПопытки;

		Позиция = Позиция + ContactSearchItems.Количество();
		
		Если Позиция >= ContactSearchResult.TotalCount Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	//Обновим список заблокированных контрагентов (вх. приглашения)
    ContactSearchOptions.ContactStatus = "AuthRejected"; //Отклонено полученное приглашение к обмену. Обмен невозможен
	
	Позиция = 0;
	
	Пока Истина Цикл
		
		ContactSearchOptions.From = Позиция;
	
		Попытка
			ContactSearchResult = ExchangeService.SearchContacts(Токен, ContactSearchOptions);
			ContactSearchItems = ContactSearchResult.Items.ПолучитьСписок("ContactSearchItem");
			
			//Очистим таблицу входящих запросов
			Контрагенты_Заблокированные.Очистить();		
			
			//Заполним таблицу вх. запросов
			Для Каждого Элемент Из ContactSearchItems Цикл
				НовСтр = Контрагенты_Заблокированные.Добавить();
				НовСтр.КонтрагентПредставление = Элемент.ContragentName;
				НовСтр.Адрес = ПредставлениеАдреса(Элемент.ContragentAddress, Элемент.ContragentIsForeignCompany);
				НовСтр.Комментарий = Элемент.Comment;
				НовСтр.ИНН_КПП = ?(ЗначениеЗаполнено(Элемент.ContragentInn), "ИНН: " + Элемент.ContragentInn, "") +
								?(ЗначениеЗаполнено(Элемент.ContragentKpp), Символы.ПС + "КПП: " + Элемент.ContragentKpp, "");
				НовСтр.IDКонтрагента = Элемент.ContragentId;
				НовСтр.Ящик = Элемент.BoxAddress;
			КонецЦикла;
				
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			ОтправитьУведомлениеПользователю("Ошибка получения контактов: " + ТекстОшибкиSynerdocs);
			Возврат;
		КонецПопытки;

		Позиция = Позиция + ContactSearchItems.Количество();
		
		Если Позиция >= ContactSearchResult.TotalCount Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	//Обновим список контрагентов, заблокировааших нас (исх. приглашения)
    ContactSearchOptions.ContactStatus = "OutgoingAuthRejected"; //Исходящее приглашение отклонено контрагентом. Обмен и отправка повторных приглашений невозможны
	
	Позиция = 0;
	
	Пока Истина Цикл
		
		ContactSearchOptions.From = Позиция;
	
		Попытка
			ContactSearchResult = ExchangeService.SearchContacts(Токен, ContactSearchOptions);
			ContactSearchItems = ContactSearchResult.Items.ПолучитьСписок("ContactSearchItem");
			
			//Очистим таблицу входящих запросов
			Контрагенты_Заблокировавшие.Очистить();		
			
			//Заполним таблицу вх. запросов
			Для Каждого Элемент Из ContactSearchItems Цикл
				НовСтр = Контрагенты_Заблокировавшие.Добавить();
				НовСтр.КонтрагентПредставление = Элемент.ContragentName;
				НовСтр.Адрес = ПредставлениеАдреса(Элемент.ContragentAddress, Элемент.ContragentIsForeignCompany);
				НовСтр.Комментарий = Элемент.Comment;
				НовСтр.ИНН_КПП = ?(ЗначениеЗаполнено(Элемент.ContragentInn), "ИНН: " + Элемент.ContragentInn, "") +
								?(ЗначениеЗаполнено(Элемент.ContragentKpp), Символы.ПС + "КПП: " + Элемент.ContragentKpp, "");
				НовСтр.IDКонтрагента = Элемент.ContragentId;
				НовСтр.Ящик = Элемент.BoxAddress;
			КонецЦикла;
				
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			ОтправитьУведомлениеПользователю("Ошибка получения контактов: " + ТекстОшибкиSynerdocs);
			Возврат;
		КонецПопытки;

		Позиция = Позиция + ContactSearchItems.Количество();
		
		Если Позиция >= ContactSearchResult.TotalCount Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

    	
	//Список доступных контрагентов для отправки
	СписокАвторизованных = Новый СписокЗначений;
	
	Для Каждого ТекСтрока Из Контрагенты_Авторизованные Цикл
		СписокАвторизованных.Добавить(ТекСтрока.Ящик, ТекСтрока.КонтрагентПредставление);
	КонецЦикла;	
	
	ПолучателиПакета.ДоступныеЗначения = СписокАвторизованных;
	
	АвторизованныеКонтрагенты	= Контрагенты_Авторизованные.Количество();
	ВходящихПриглашений 		= Контрагенты_ТребуетсяОтвет.Количество();
	ИсходящихПриглашений 		= Контрагенты_ОжидаетсяОтвет.Количество();
	ВходящихБлокировок			= Контрагенты_Заблокированные.Количество();
	ИсходящихБлокировок			= Контрагенты_Заблокировавшие.Количество();
	
	ВсегоПриглашений 			= ВходящихПриглашений + ИсходящихПриглашений;
	ВсегоБлокировок 			= ВходящихБлокировок + ИсходящихБлокировок;
	
	ТекстАвторизованные = "";
	ТекстАвторизованные = "Действующие контрагенты " + ?(АвторизованныеКонтрагенты > 0, " (" + АвторизованныеКонтрагенты + ")", "");
	ЭлементыФормы.ПанельКонтрагенты.Страницы.СтраницаАвторизованные.Заголовок = ТекстАвторизованные;
	
	ТекстВх = "";
	ТекстВх = "Входящие " + ?(ВходящихПриглашений > 0, " (" + ВходящихПриглашений + ")", "");
	ЭлементыФормы.ПанельПриглашения.Страницы.СтраницаВходящиеПриглашения.Заголовок = ТекстВх;
	
	ТекстИсх = "";															
	ТекстИсх = "Исходящие " + ?(ИсходящихПриглашений > 0, " (" + ИсходящихПриглашений + ")", "");
	ЭлементыФормы.ПанельПриглашения.Страницы.СтраницаИсходящиеПриглашения.Заголовок = ТекстИсх;
	
	ТекстВсегоПриглашений = "";															
	ТекстВсегоПриглашений = "Приглашения к обмену " + ?(ВсегоПриглашений > 0, " (" + ВходящихПриглашений + "/" + ИсходящихПриглашений + ")", "");
	ЭлементыФормы.ПанельКонтрагенты.Страницы.СтраницаПриглашения.Заголовок = ТекстВсегоПриглашений;
	
	ТекстВхБлок = "";
	ТекстВхБлок = "Входящие " + ?(ВходящихБлокировок > 0, " (" + ВходящихБлокировок + ")", "");
	ЭлементыФормы.ПанельЗаблокированные.Страницы.СтраницаВходящие.Заголовок = ТекстВхБлок;
	
	ТекстИсхБлок = "";
	ТекстИсхБлок = "Исходящие " + ?(ИсходящихБлокировок > 0, " (" + ИсходящихБлокировок + ")", "");
	ЭлементыФормы.ПанельЗаблокированные.Страницы.СтраницаИсходящие.Заголовок = ТекстИсхБлок;
	
	ТекстВсегоБлок = "";
	ТекстВсегоБлок = "Отклоненные приглашения " + ?(ВсегоБлокировок > 0, " (" + ВходящихБлокировок + "/" + ИсходящихБлокировок + ")", "");
	ЭлементыФормы.ПанельКонтрагенты.Страницы.СтраницаЗаблокированные.Заголовок = ТекстВсегоБлок;
	
КонецПроцедуры

// Получатели

Процедура УстановитьПолучателей(СтрокаСпискаДокументов, НовыеПолучатели)
		
	КоличествоПолучателей = НовыеПолучатели.Количество();
	Если КоличествоПолучателей = 0 Тогда
		ПредставлениеПолучателей = "";
	ИначеЕсли КоличествоПолучателей = 1 Тогда 
		ПредставлениеПолучателей = НовыеПолучатели[0].Наименование;
	Иначе
		ПредставлениеПолучателей = ФормаМнЧисла(КоличествоПолучателей, "получатель", "получателя", "получателей");
	КонецЕсли;
	
	СтрокаСпискаДокументов.ПолучателиПредставление = ПредставлениеПолучателей;
	
	Получатели = Новый Массив;
	Для Каждого Получатель Из НовыеПолучатели Цикл
		Получатели.Добавить(Получатель.Наименование);
	КонецЦикла;
	
	СтрокаСпискаДокументов.Получатели = СтрСоединить2(Получатели, Символы.ПС);
	
КонецПроцедуры

Функция ВыводитьПолучателей(СтрокаСпискаДокументов)
	
	//: СтрокаСпискаДокументов = ВходящиеДокументы[0];
	
	КоличествоПолучателей = СтрЧислоСтрок(СтрокаСпискаДокументов.Получатели);
	
	Результат = (КоличествоПолучателей > 1);
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиСписокПолучателей(СтрокаСпискаДокументов)
	
	Если ВыводитьПолучателей(СтрокаСпискаДокументов) Тогда
		Получатели = СтрокаСпискаДокументов.Получатели;
		Предупреждение(Получатели,, "Получатели");
	КонецЕсли;
	
КонецПроцедуры

// Действия с документами

Процедура Подписать(ВыбранныеСтроки, ЭтоВходящий = Истина, БезПодписи = Ложь)
	
	ЕстьДокументыНаПодпись = Ложь;
	
	Для Каждого Элемент Из ВыбранныеСтроки Цикл
		Если Элемент.Статус = "Требуется подпись" Тогда
			ЕстьДокументыНаПодпись = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьДокументыНаПодпись Тогда
		Сообщить("Подписание выбранных документов не требуется.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = ?(ВыбранныеСтроки.Количество() > 1, "Подписать все отмеченные документы?", "Подписать документ " + ВыбранныеСтроки[0].ДокументПредставление + "?") + "
		|Будет использован сертификат " + ПолучитьПредставлениеСертификата();
	
	ЕстьПодписанныеДокументы = Ложь;
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Подтверждение");	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
		
		Для Каждого ТекущаяСтрока Из ВыбранныеСтроки Цикл //: ВыбранныеСтроки = ВходящиеДокументы;
			Статус = Неопределено;
			
			Если ТекущаяСтрока.ТипДокумента = ТипыДокумента.Неформализованный
				ИЛИ ТекущаяСтрока.ТипДокумента = ТипыДокумента.СоглашениеОбАннулировании Тогда
				
				FullDocumentInfo = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, ТекущаяСтрока.IDДокумента,);
				ЯщикОтправителя = FullDocumentInfo.From;
				Syn_Документ = FullDocumentInfo.Document;
				Статус = СоответствиеСтатусовПодписания_1С_Synerdocs.Получить(FullDocumentInfo.Status.SignStatus)
			КонецЕсли;	
			
			Если ТекущаяСтрока.Статус = "Требуется подпись" ИЛИ Статус = "Требуется подпись" Тогда
				
				Если ТекущаяСтрока.ТипДокумента = ТипыДокумента.ТитулПродавцаТОРГ12 ИЛИ ТекущаяСтрока.ТипДокумента = ТипыДокумента.ТитулИсполнителяАкт Тогда
					
					ЭД_Структура = Новый Структура;
					ЭД_Структура.Вставить("Syn_IDДокумента", ТекущаяСтрока.IDДокумента);
					ЭД_Структура.Вставить("ТипЭД", ТекущаяСтрока.Тип);
					ЭД_Структура.Вставить("ПредставлениеЭД", ТекущаяСтрока.ДокументПредставление);
					ЭД_Структура.Вставить("Комментарий", "");
					ЭД_Структура.Вставить("Статус", ТекущаяСтрока.Статус);
					ЭД_Структура.Вставить("Документ1С", ТекущаяСтрока.Документ);
					
					Форма_ПодписьИОтправкаВходящегоДокумента = ПолучитьФорму("Форма_ПодписьИОтправкаВходящегоДокумента");
					Форма_ПодписьИОтправкаВходящегоДокумента.ЭД_Структура = ЭД_Структура;	
					
					Если Форма_ПодписьИОтправкаВходящегоДокумента.ОткрытьМодально() <> НЕОПРЕДЕЛЕНО Тогда
						ЕстьПодписанныеДокументы = Истина;
					КонецЕсли;
					
				ИначеЕсли ТекущаяСтрока.Тип = "Акт об установленном расхождении" Тогда
					
					ЭД_Структура = Новый Структура;
					ЭД_Структура.Вставить("Syn_IDДокумента", ТекущаяСтрока.IDДокумента);
					ЭД_Структура.Вставить("ТипЭД", ТекущаяСтрока.Тип);
					ЭД_Структура.Вставить("ПредставлениеЭД", ТекущаяСтрока.ДокументПредставление);
					ЭД_Структура.Вставить("Комментарий", "");
					ЭД_Структура.Вставить("Статус", ТекущаяСтрока.Статус);
					ЭД_Структура.Вставить("Документ1С", ТекущаяСтрока.Документ);
					
					Форма_ПодписьИОтправкаВходящегоДокумента = ПолучитьФорму("Форма_ПодписьИОтправкаВходящегоАктаОРасхождении");
					Форма_ПодписьИОтправкаВходящегоДокумента.ЭД_Структура = ЭД_Структура;	
					
					Если Форма_ПодписьИОтправкаВходящегоДокумента.ОткрытьМодально() <> НЕОПРЕДЕЛЕНО Тогда
						ЕстьПодписанныеДокументы = Истина;
					КонецЕсли;
					
				ИначеЕсли ТекущаяСтрока.ТипДокумента = ТипыДокумента.Неформализованный
					ИЛИ ТекущаяСтрока.ТипДокумента = ТипыДокумента.СоглашениеОбАннулировании Тогда
					
					Контент = ?(Syn_Документ.Content = Неопределено, ExchangeService.GetDocumentContent(Токен, Syn_ЯщикОрганизации, ТекущаяСтрока.IDДокумента), Syn_Документ.Content);
					ЭЦП_ДвоичныеДанные = СформироватьЭЦПДокумента(, Контент, ТекущаяСтрока.ДокументПредставление);
					Syn_ЭЦП = СоздатьОбъект_Sign(Syn_Документ.Id, ЭЦП_ДвоичныеДанные);
					
					Если НЕ ТекущаяСтрока.Переслан Тогда
						
						//Создаем массив документов
						Тип_ArrayOfDocument = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfDocument");
						ArrayOfDocument = ExchangeService.ФабрикаXDTO.Создать(Тип_ArrayOfDocument);
						
						//Создаем массив ЭЦП
						Тип_ArrayOfSign = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfSign");
						ArrayOfSign = ExchangeService.ФабрикаXDTO.Создать(Тип_ArrayOfSign);
						ArrayOfSign.Sign.Добавить(Syn_ЭЦП);
						
						//Создаем сообщение и отправляем его
						Тип_Message = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "Message");
						Message = ExchangeService.ФабрикаXDTO.Создать(Тип_Message);
						Message.Documents = ArrayOfDocument;
						Message.From = Syn_ЯщикОрганизации;
						Message.Signs = ArrayOfSign;
						Message.To = ЯщикОтправителя;	
						Message.Id = Строка(Новый УникальныйИдентификатор());
						
						Попытка
							Рез = ОтправитьСообщениеВСервисОбмена(Message);
							ЕстьПодписанныеДокументы = Истина;
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;
						
					Иначе
						
						Попытка
							ExchangeService.SignDocument(Токен, "SentForward", Syn_ЭЦП);
							ЕстьПодписанныеДокументы = Истина;
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;
						
					КонецЕсли;
					
				Иначе
					
					//: ТекущаяСтрока = ВходящиеДокументы[0];
					ОперацииСДокументами.Подписать(ТекущаяСтрока.IDДокумента);
					
				КонецЕсли;
				
			Иначе
				
				Сообщить("Подписание документа " + ТекущаяСтрока.ДокументПредставление + " не требуется.");
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьПодписанныеДокументы Тогда
			
			Обновить_ВходящиеДокументы();
			// FIXME: Метод написан отвратительно, нет возможности определить, что нужно обновить
			Обновить_ИсходящиеДокументы();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтказатьВПодписании(ВыбранныеСтроки, ЭтоВходящий, БезПодписи)
	
	Если ВыбранныеСтроки.Количество() > 1 Тогда
		ЕстьОтказанныеДокументы = Ложь;
		//оказываем в подписи всем отмеченным строкам
		Ответ = Вопрос("Отказать в подписи по всем отмеченным документам?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "ВНИМАНИЕ!!!");	
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для Каждого ТекущаяСтрока Из ВыбранныеСтроки Цикл
				// TODO: Разобраться с переменной Статус, не понятно её предназначение.
				Статус = Неопределено;
				Если ТекущаяСтрока.Тип = "Неформализованный" Тогда
					Попытка
						FullDocumentInfo = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, ТекущаяСтрока.IDДокумента, );
					Исключение
						ОписаниеОшибкиСтрокой = ОписаниеОшибки();
						ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
						
						ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
												
						Возврат;
						
					КонецПопытки;
					
					Статус = СоответствиеСтатусовПодписания_1С_Synerdocs.Получить(FullDocumentInfo.Status.SignStatus);
				КонецЕсли;
				
				Если ТекущаяСтрока.Статус = "Выставлен" Или ТекущаяСтрока.Статус = "Требуется подпись" Или Статус = "Требуется подпись" Тогда
					Попытка
						FullDocumentInfo = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, ТекущаяСтрока.IDДокумента, );
					Исключение
						ОписаниеОшибкиСтрокой = ОписаниеОшибки();
						ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
						
						ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
												
						Возврат;
						
					КонецПопытки;
					
					//открываем форму уточнения (отказа от подписи)
					Форма_Комментарий = ПолучитьФорму("Форма_Комментарий");
					
					ЭД_Структура = Новый Структура;
					ЭД_Структура.Вставить("Syn_Документ", FullDocumentInfo.Document);
					ЭД_Структура.Вставить("ТипЭД", ТекущаяСтрока.Тип);
					ЭД_Структура.Вставить("ПредставлениеЭД", ТекущаяСтрока.ДокументПредставление);
					ЭД_Структура.Вставить("Комментарий", "");
					ЭД_Структура.Вставить("Пересланный", ТекущаяСтрока.Переслан);
					
					Форма_Комментарий.ЭД_Структура = ЭД_Структура;
					
					Если Форма_Комментарий.ОткрытьМодально() <> НЕОПРЕДЕЛЕНО Тогда
						ЕстьОтказанныеДокументы = Истина;
					КонецЕсли;
					
				Иначе
					Сообщить("Отказ в подписаниии документа [" + ТекущаяСтрока.ДокументПредставление + 
					"] со статусом [" + ТекущаяСтрока.Статус + "] не возможен");	
				КонецЕсли;	
			КонецЦикла;
			
			Если ЕстьОтказанныеДокументы Тогда
				Обновить_ВходящиеДокументы();
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		//отказываем в подписи только для текущей строки
		ТекущаяСтрока = ЭлементыФормы.ВходящиеДокументы.ТекущаяСтрока;
		
		Статус = Неопределено;
		
		Если ТекущаяСтрока <> НЕОПРЕДЕЛЕНО Тогда
			
			Попытка
				FullDocumentInfo = ExchangeService.GetFlowDocumentInfo(Токен, Syn_ЯщикОрганизации, ТекущаяСтрока.IDДокумента, );
			Исключение
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
				
				ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
								
				Возврат;
				
			КонецПопытки;
						
			Если НЕ FullDocumentInfo.Flows.DocumentFlow.Количество() = 0 Тогда
				Для Каждого Элем Из FullDocumentInfo.Entries.DocumentEntry Цикл
					Если Элем.FlowType = "SentForward" Тогда
						FlowType = Элем.FlowType;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого Получатель Из FullDocumentInfo.Flows.DocumentFlow Цикл
					// отправлен без подписи
					Если Получатель.FlowType = "SentUnsigned" И Получатель.RecipientOrganization.BoxAddress = Syn_ЯщикОрганизации Тогда
						БезПодписи = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
 
				Статус = Неопределено;
				
				Если БезПодписи Тогда
					Статус = "[Отправлен без подписи] " + Статус;
				КонецЕсли;	
			КонецЕсли;
					
			Если ТекущаяСтрока.Статус = "Выставлен" Или ТекущаяСтрока.Статус = "Требуется подпись"  Или Статус = "Требуется подпись" Тогда
				
				//открываем форму уточнения (отказа от подписи)
				Форма_Комментарий = ПолучитьФорму("Форма_Комментарий");
				
				ЭД_Структура = Новый Структура;
				ЭД_Структура.Вставить("Syn_Документ", FullDocumentInfo.Document);
				ЭД_Структура.Вставить("ТипЭД", ТекущаяСтрока.Тип);
				ЭД_Структура.Вставить("ПредставлениеЭД", ТекущаяСтрока.ДокументПредставление);
				ЭД_Структура.Вставить("Комментарий", "");
				ЭД_Структура.Вставить("Пересланный", ТекущаяСтрока.Переслан);
				
				Форма_Комментарий.ЭД_Структура = ЭД_Структура;
				
				Если Форма_Комментарий.ОткрытьМодально() <> НЕОПРЕДЕЛЕНО Тогда
					Обновить_ВходящиеДокументы();
				КонецЕсли;
			Иначе
				Сообщить("Отказ в подписаниии документа [" + ТекущаяСтрока.ДокументПредставление + 
				"] со статусом [" + ТекущаяСтрока.Статус + "] не возможен");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПереслатьДокументы(МассивСтрок) Экспорт
	
	ВыбранныеСтроки = МассивСтрок;
	
	Для Каждого ТекСтрока Из ВыбранныеСтроки Цикл
		
		ДобавитьДокументВПакет(ТекСтрока);
		
	КонецЦикла;
	
	ОткрытьПакетДокументов();
		
КонецПроцедуры

Процедура СогласованиеДокумента(ВыбранныеСтроки, ЭтоСогласование = Истина)
	
	Если ЭтоСогласование Тогда
		ТекстВопроса = ?(ВыбранныеСтроки.Количество() > 1, "Согласовать все отмеченные документы?", "Согласовать документ " + ВыбранныеСтроки[0].ДокументПредставление + "?");
	Иначе
		ТекстВопроса = ?(ВыбранныеСтроки.Количество() > 1, "Отказать в согласовании по всем отмеченныем документам?", "Отказать в согласовании по документу " + ВыбранныеСтроки[0].ДокументПредставление + "?");
	КонецЕсли;
	
	ЕстьСогласованные = Ложь;
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Подтверждение");
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекущаяСтрока Из ВыбранныеСтроки Цикл
									
			СтруктураСогласования = Новый Структура;
			СтруктураСогласования.Вставить("ИД", ТекущаяСтрока.IDДокумента);
			СтруктураСогласования.Вставить("ЭтоСогласование", ЭтоСогласование);
			СтруктураСогласования.Вставить("ПредставлениеЭД", ТекущаяСтрока.ДокументПредставление);
						
			Форма_Коммментарий = ПолучитьФорму("Форма_Комментарий");
			Форма_Коммментарий.СтруктураСогласования = СтруктураСогласования;	
			
			Если Форма_Коммментарий.ОткрытьМодально() <> НЕОПРЕДЕЛЕНО Тогда
				ЕстьСогласованные = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьСогласованные Тогда
			Обновить_ВходящиеДокументы();
			Обновить_ИсходящиеДокументы();	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура Аннулировать(МассивСтрок, ЭтоВходящий)
	
	ЕстьАннулированныеДокументы = Ложь;
	Подсказка = "Остальным участникам обмена будет предложено аннулирование документа по следующим причинам:";
	ПричинаАннулирования = "";
	
	ТекстВопрос = "Аннулировать " + ?(МассивСтрок.Количество() > 1, "все выбранные документы?", "выбранный документ");
	Если Вопрос(ТекстВопрос, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Подтверждение") = КодВозвратаДиалога.Да Тогда
		Для Каждого СтрокаТЧ Из МассивСтрок Цикл
			Если Не ВвестиСтроку(ПричинаАннулирования, "Документ [" + СтрокаТЧ.ДокументПредставление + "]" + Символы.ПС + Подсказка, , Истина) Тогда
				Телеметрия.ОтправитьАналитику(
					СобытияТелеметрии.Аннулирование.Отмена,
					ЭтаФорма
				);
				Продолжить;
			КонецЕсли;
			
			ЕстьАннулированныеДокументы = ЕстьАннулированныеДокументы Или АннулироватьДокумент(СтрокаТЧ.IDДокумента, ЭтоВходящий, ПричинаАннулирования);
		КонецЦикла;
		
		Если ЕстьАннулированныеДокументы Тогда
			Если ЭтоВходящий Тогда
				Обновить_ВходящиеДокументы();
			КонецЕсли;
			Обновить_ИсходящиеДокументы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//========================================================================
// ПАДЖИНАЦИЯ
//========================================================================

// Текущая страница

Процедура УстановитьПараметрыСпискаВходящих(НомерСтраницы = Неопределено, НастройкиОтбора = Неопределено)
	
	Если НомерСтраницы <> Неопределено Тогда
		ТекущаяСтраницаВходящие = НомерСтраницы;
	КонецЕсли;
		
	Если НастройкиОтбора <> Неопределено Тогда
		НастройкиОтбораВх = НастройкиОтбора;
	КонецЕсли;
	
	Если НастройкиОтбораВх = Неопределено Тогда
		НастройкиОтбораВх = СпискиДокументов.НастройкиОтбораПоУмолчанию();
	КонецЕсли;
		
	Обновить_ВходящиеДокументы();
	
КонецПроцедуры

Процедура УстановитьПараметрыСпискаИсходящих(НомерСтраницы = Неопределено, НастройкиОтбора = Неопределено)
	
	Если НомерСтраницы <> Неопределено Тогда
		ТекущаяСтраницаИсходящие = НомерСтраницы;
	КонецЕсли;
		
	Если НастройкиОтбора <> Неопределено Тогда
		НастройкиОтбораИсх = НастройкиОтбора;
	КонецЕсли;
	
	Если НастройкиОтбораИсх = Неопределено Тогда
		НастройкиОтбораИсх = СпискиДокументов.НастройкиОтбораПоУмолчанию();
	КонецЕсли;
		
	Обновить_ИсходящиеДокументы();
	
КонецПроцедуры

// Отображение элементов

Процедура УстановитьОтображениеЭлементовПаджинации(КнопкаПредыдущаяСтраница, КнопкаСледующаяСтраница, ТекущаяСтраница, СписокВыбораСтраницы)
	
	ЭтоПерваяСтраница		= (ТекущаяСтраница = ПерваяСтраница(СписокВыбораСтраницы));
	ЭтоПоследняяСтраница	= (ТекущаяСтраница = ПоследняяСтраница(СписокВыбораСтраницы));
	
	КнопкаПредыдущаяСтраница.Доступность	= НЕ ЭтоПерваяСтраница;
	КнопкаСледующаяСтраница.Доступность		= НЕ ЭтоПоследняяСтраница;
	
КонецПроцедуры

// Обработчики элементов управления

// Окончание ввода текста текущей страницы
Процедура ПодобратьТекущуюСтраницу(ПолеВыбораСтраницы, Текст, Значение, СтандартнаяОбработка)
	
	//: ПолеВыбораСтраницы = ЭлементыФормы.ТекущаяСтраницаВходящие;
	
	Попытка
		ВыбраннаяСтраница = Число(СокрЛП(Текст));
	Исключение
		ВыбраннаяСтраница = Неопределено;
	КонецПопытки;
	
	Если ВыбраннаяСтраница <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
	
		СписокВыбора = ПолеВыбораСтраницы.СписокВыбора;
		
		Значение = ДопустимаяСтраница(ВыбраннаяСтраница, СписокВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Список выбора страницы

Процедура УстановитьСписокВыбораСтраницы(ПолеВыбораСтраницы, СодержимоеСпискаДокументов, ТекущаяСтраница, РазмерСтраницы)
	
	//: ПолеВыбораСтраницы = ЭлементыФормы.ТекущаяСтраницаВходящие;
	
	СписокВыбора = Новый_СписокВыбораСтраницы(СодержимоеСпискаДокументов.ВсегоДокументов, РазмерСтраницы);
	
	ПолеВыбораСтраницы.СписокВыбора	= СписокВыбора;
	ПолеВыбораСтраницы.Значение		= ТекущаяСтраница; // установка представления
	
КонецПроцедуры

Функция Новый_СписокВыбораСтраницы(ВсегоДокументов, РазмерСтраницы)
	
	СписокСтраниц = Новый СписокЗначений;
	
	ВсегоСтраниц = ОкрБол(ВсегоДокументов / РазмерСтраницы);
	Если ВсегоСтраниц < 1 Тогда
		ВсегоСтраниц = 1;
	КонецЕсли;
	
	Для НомерСтраницы = 1 По ВсегоСтраниц Цикл
		СписокСтраниц.Добавить(
			НомерСтраницы, 
			"стр. " + Формат(НомерСтраницы, "ЧГ=")
		);
	КонецЦикла;
	
	Возврат СписокСтраниц;
	
КонецФункции

Функция ПерваяСтраница(СписокВыбораСтраницы)
	
	Результат = 1;
	
	Возврат Результат;
	
КонецФункции

Функция ПоследняяСтраница(СписокВыбораСтраницы)
	
	Результат = СписокВыбораСтраницы[СписокВыбораСтраницы.Количество() - 1].Значение;
	
	Возврат Результат;
	
КонецФункции

Функция ДопустимаяСтраница(НомерСтраницы, СписокВыбораСтраницы)
	
	Минимум		= ПерваяСтраница(СписокВыбораСтраницы);
	Максимум	= ПоследняяСтраница(СписокВыбораСтраницы);
	
	Результат = НомерСтраницы;
	
	Если Результат < Минимум Тогда
		Результат = Минимум;
	КонецЕсли;
	
	Если Результат > Максимум Тогда
		Результат = Максимум;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Фильтрация

Процедура НастроитьОтбор(Настройки, Источник)
	
	ФормаНастройки = ПолучитьФорму("Форма_ФильтрСпискаДокументов", Источник);
	
	Параметры = ФормаНастройки.Параметры();
	ЗаполнитьЗначенияСвойств(Параметры, Настройки);
	
	ФормаНастройки.УстановитьПараметры(Параметры);
	
	ФормаНастройки.ОткрытьМодально();
	
КонецПроцедуры

Процедура СброситьОтборВходящих()
	
	Настройки = СпискиДокументов.НастройкиОтбораПоУмолчанию();
	
	УстановитьПараметрыСпискаВходящих(1, Настройки);
	
КонецПроцедуры

Процедура СброситьОтборИсходящих()
	
	Настройки = СпискиДокументов.НастройкиОтбораПоУмолчанию();
	
	УстановитьПараметрыСпискаИсходящих(1, Настройки);
	
КонецПроцедуры

//========================================================================
// ПАКЕТ ДОКУМЕНТОВ
//========================================================================

Функция ПакетПустой()
	
	Результат = (ОтправкаВыбранных.Количество() = 0);
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьФормализованныеВПакете(ТолькоДокументы1С = Ложь)
	
	Найдено = Ложь;
	
	ТипыФормализованныхДокументов = ОбъектнаяМодель.ФормализованныеДокументы();
	Для Каждого ТипДокумента Из ТипыФормализованныхДокументов Цикл
		
		СтрокаПакета = ОтправкаВыбранных.Найти(ТипДокумента, "ТипДокумента");
		Если СтрокаПакета <> Неопределено Тогда
			
			Если ТолькоДокументы1С Тогда
				Найдено = (ТипЗнч(СтрокаПакета.Документ) <> Тип("Строка"));
			Иначе
				Найдено = Истина;
			КонецЕсли;
			
			Если Найдено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Найдено;
	
КонецФункции

Функция ЕстьПересылаемыеВПакете()
	
	СтрокаПакета = ОтправкаВыбранных.Найти(Истина, "ЭтоПересылка");
	Найдено = (СтрокаПакета <> Неопределено);
	
	Возврат Найдено;
	
КонецФункции

Процедура ДобавитьПолучателяВПакет(Получатель)
	
	Если НЕ ЗначениеЕстьВСписке(ПолучателиПакета, Получатель) Тогда
		ПолучателиПакета.Добавить(Получатель);
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьДокумент1СВПакет(СтрокаТЧ)
	
	//: СтрокаТЧ = ОтправитьДокументы[0];
	
	СтрокаПакета = ОтправкаВыбранных.Найти(СтрокаТЧ.Документ, "Документ");
	Если СтрокаПакета <> Неопределено Тогда
		Возврат СтрокаПакета;
	КонецЕсли;
	
	ПолучательДокумента = ЯщикКонтрагента(СтрокаТЧ.Контрагент);
	ПолучательПакета = ПервоеЗначениеИзСписка(ПолучателиПакета);
	
	МожноДобавитьДокумент = Ложь
		ИЛИ ПолучательПакета = Неопределено
		ИЛИ ПолучательПакета = ПолучательДокумента;
		
	Если НЕ МожноДобавитьДокумент Тогда
		
		ТекстСообщения = ?(ПолучателиПакета.Количество() = 1,
			НСтр("ru = 'Документ [%1] для получателя %2 не может быть добавлен в пакет,
                  |т.к. для пакета установлен получатель %3.'"),
			НСтр("ru = 'Документ [%1] не может быть отправлен нескольким получателям.'")
		);
		ТекстСообщения = СтрШаблон2(ТекстСообщения,
			СтрокаТЧ.Документ,
			СтрокаТЧ.Контрагент,
			Строка(ПолучателиПакета)
		);
		
		Сообщить(ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДобавитьПолучателяВПакет(ПолучательДокумента);
	
	НоваяСтрока = ОтправкаВыбранных.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, "Документ, Тип, Дата, Сумма, ТипДокумента, ВидДокумента");
	
	НоваяСтрока.ДокументПредставление	= Строка(НоваяСтрока.Документ);
	НоваяСтрока.ТребуетсяПодпись		= ОбъектнаяМодель.ТребуетсяПодписьПолучателя(СтрокаТЧ.ТипДокумента, СтрокаТЧ.ВидДокумента);
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ДобавитьФайлВПакет(ИмяФайла)
	
	СтрокаПакета = ОтправкаВыбранных.Найти(ИмяФайла, "Документ");
	Если СтрокаПакета <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
	
	ТипДокумента = ТипыДокумента.Неформализованный;
	
	ЭтоXML = СтрЗаканчиваетсяНа2(НРег(ИмяФайла), ".xml");
	Если ЭтоXML Тогда
		ТипДокумента = ОпределитьТипДокументаВФайле(ИмяФайла);
	КонецЕсли;
	
	НоваяСтрока = ОтправкаВыбранных.Добавить();
	НоваяСтрока.Документ				= ИмяФайла;
	НоваяСтрока.ДокументПредставление	= ИмяФайла;
	НоваяСтрока.ТипДокумента			= ТипДокумента;
	НоваяСтрока.Тип						= ПредставлениеПеречисления(ТипыДокумента, ТипДокумента);
	НоваяСтрока.ТребуетсяПодпись		= ОбъектнаяМодель.ТребуетсяПодписьПолучателя(ТипДокумента);
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ДобавитьДокументВПакет(СтрокаТЧ)
	
	//: СтрокаТЧ = ВходящиеДокументы[0];
	
	СтрокаПакета = ОтправкаВыбранных.Найти(СтрокаТЧ.IDДокумента, "IDДокумента");
	Если СтрокаПакета <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = ОтправкаВыбранных.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, "IDДокумента, Тип, Дата, Сумма, ТипДокумента, ВидДокумента");
	
	НоваяСтрока.ЭтоПересылка			= Истина;
	НоваяСтрока.Документ				= СтрокаТЧ.IDДокумента;
	НоваяСтрока.ДокументПредставление	= СтрокаТЧ.ДокументПредставление;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ОтменитьФормированиеПакета()
	
	ОтправкаВыбранных.Очистить();
	ПолучателиПакета.Очистить();
	
	СодержимоеДокументовПакета = Неопределено;
	
	ФлагСвязатьДокументыВПакете = Ложь;
	ФлагФакторинг = Ложь;
	ЭлементыФормы.ОтправкаВыбранных.Колонки.Фактор.Видимость = Ложь;

	ОткрытьДокументыДляОтправки();
  	
КонецПроцедуры

Процедура РедактироватьДокументПакета(СтрокаТЧ)
	
	//: СтрокаТЧ = ОтправкаВыбранных[0];
	
	Если ТипЗнч(СтрокаТЧ.Документ) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ФормированиеДокументов.ДоступноРедактированиеДокумента(СтрокаТЧ.Документ) Тогда
		Возврат;
	КонецЕсли;
	
	ФормированиеДокументов.НачатьРедактированиеДокумента(СтрокаТЧ.Документ, СтрокаТЧ.Фактор, СодержимоеДокументовПакета, ЭлементыФормы.ОтправкаВыбранных);
	
КонецПроцедуры

Процедура РедактироватьДокументПакета_Завершение(ОтредактированныйДокумент)
	
	ФормированиеДокументов.ЗакончитьРедактированиеДокумента(ОтредактированныйДокумент, СодержимоеДокументовПакета);
	
	СтрокаПакета = ОтправкаВыбранных.Найти(ОтредактированныйДокумент.Ссылка, "Документ");
	Если СтрокаПакета <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаПакета, ОтредактированныйДокумент, "ТипДокумента, ВидДокумента");
		
		ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
		СтрокаПакета.Тип = ?(СтрокаПакета.ТипДокумента = ТипыДокумента.Неформализованный И ЗначениеЗаполнено(СтрокаПакета.ВидДокумента),
			СтрокаПакета.ВидДокумента,
			ПредставлениеПеречисления(ТипыДокумента, СтрокаПакета.ТипДокумента)
		);
		
	КонецЕсли;

КонецПроцедуры

//========================================================================
// КОМАНДЫ СПИСКОВ СЕРВИСА
//========================================================================

Функция РазорватьСвязьСДокументами(ВыбранныеСтроки)
	
	//: ВыбранныеСтроки = ВходящиеДокументы;
	
	Удалено = 0;
	
	Если ВыбранныеСтроки = Неопределено ИЛИ ВыбранныеСтроки.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Не выбран ни один документ!'"));
		Возврат Удалено;
	КонецЕсли;
	
	ЕстьСозданныйДокумент = Ложь;
	
	Для Каждого ТекСтр Из ВыбранныеСтроки Цикл
		Если ТекСтр.УчтенВ1С Тогда
			ЕстьСозданныйДокумент = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьСозданныйДокумент Тогда
		Сообщить(НСтр("ru = 'Среди выбранных документов нет ни одного, отправленного из текущей БД 1С.'"));
		Возврат Удалено;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = НСтр("ru = 'Удалить отметку об отправке выбранных документов?'");
	Ответ = Вопрос(Текст, Режим, 0);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		УдаляемыеСвязи = Новый Массив;
		
		Для Каждого СтрокаТЧ Из ВыбранныеСтроки Цикл
			
			Если СтрокаТЧ.УчтенВ1С Тогда
				
				УдаляемыеСвязи.Добавить(СтрокаТЧ.IDДокумента);
				
				// TODO: Нормальная поддержка БГУ
				Если ЭтоБГУ Тогда
					УдалитьОтметкуБГУ(СтрокаТЧ.IDДокумента);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОперацииСДокументами.РазорватьСвязьСДокументами(УдаляемыеСвязи);
		
		// TODO: Нормальная поддержка БГУ
		Если ЭтоБГУ Тогда
			Оповестить(ОперацииСДокументами.События().РазорванаСвязь, УдаляемыеСвязи);
		КонецЕсли;
		
		Удалено = УдаляемыеСвязи.Количество();
	
	КонецЕсли;
	
	Возврат Удалено;
	
КонецФункции

//========================================================================
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//========================================================================

Процедура ПроверитьСлужебныеДокументы()
	
	ОбработкаПрерыванияПользователя();
	ОтключитьОбработчикОжидания("ОбработкаВходящихСообщений");
	
	Состояние("Проверка служебных документов");
	МассивСлужебныхДокументов = ExchangeService.GetRequiredNotices(Токен, Syn_ЯщикОрганизации, СтрЗаменить(Строка(Сертификат.Отпечаток), " ", "")).ServiceNotice;
	
	СчетчикСообщений =  МассивСлужебныхДокументов.Количество();
	СчетчикУспешных = 0;
	
	Если СчетчикСообщений = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СлужебныйДокумент Из МассивСлужебныхДокументов Цикл
		Док = СформироватьСлужебноеСообщение(СлужебныйДокумент);
		Если Не Док = Неопределено Тогда
			Результат = ОтправитьСообщениеВСервисОбмена(Док);
			СчетчикУспешных = СчетчикУспешных + ?(Результат = Неопределено, 0, 1);
		КонецЕсли;
	КонецЦикла;
	
	Сообщить("Подписано служебных документов: " + СчетчикУспешных + " из " + СчетчикСообщений);
	Если СчетчикУспешных > 0 Тогда
		Сообщить("Использована подпись: [" + ПолучитьПредставлениеСертификата() + "]");
	КонецЕсли;
	
	АвтоматическиПолучатьВходящиеДокументы = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("АвтоматическиПолучатьВходящиеДокументы");
	Если АвтоматическиПолучатьВходящиеДокументы Тогда
		ИнтервалПолученияДокументовИзСервиса = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("ИнтервалПолученияДокументовИзСервиса");
		ПодключитьОбработчикОжидания("ОбработкаВходящихСообщений", ИнтервалПолученияДокументовИзСервиса * 60);
	КонецЕсли;
  	
КонецПроцедуры

Функция СформироватьСлужебноеСообщение(СлужебныйДокумент)
	
	ФабрикаСервиса = ExchangeService.ФабрикаXDTO;
	Тип_Message			= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "Message");
	Тип_ArrayOfDocument	= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfDocument");
	Тип_ArrayOfSign		= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfSign");
	Тип_Document		= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "Document");
	
	ArrayOfDocument		= ФабрикаСервиса.Создать(Тип_ArrayOfDocument);
	ArrayOfSign			= ФабрикаСервиса.Создать(Тип_ArrayOfSign);
	Document			= ФабрикаСервиса.Создать(Тип_Document);
	
	Document.Comment				= "";
	Document.Content				= СлужебныйДокумент.Content;
	Document.DocumentType			= СлужебныйДокумент.DocumentType;
	Document.FileName				= СлужебныйДокумент.Name + ".xml";
	Document.Id						= Строка(Новый УникальныйИдентификатор());
	Document.Name					= СлужебныйДокумент.Name;
	Document.NeedSign				= Ложь;
	Document.ParentDocumentId		= СлужебныйДокумент.ParentDocumentId;
	
	ЭП_ДвоичныеДанные = СформироватьЭЦПДокумента(, СлужебныйДокумент.Content, СлужебныйДокумент.Name + ".xml");
	Если ЭП_ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ArrayOfDocument.Document.Добавить(Document);
	ArrayOfSign.Sign.Добавить(СоздатьОбъект_Sign(Document.Id, ЭП_ДвоичныеДанные));
	
	Message = ФабрикаСервиса.Создать(Тип_Message);
	Message.Id = Строка(Новый УникальныйИдентификатор());
	Message.Documents = ArrayOfDocument;
	Message.Signs = ArrayOfSign;
	Message.From = Syn_ЯщикОрганизации;
	Message.To = СлужебныйДокумент.Recipients.MessageRecipient[0].OrganizationBoxId;
	Возврат Message;
	
КонецФункции

Процедура ОбновитьКолонкуДокументУчтенВ1С(Входящие)
	
	Для Каждого ТекСтрока Из ?(Входящие, ВходящиеДокументы, ИсходящиеДокументы) Цикл
		Если ЭтоБГУ Тогда
			ТекСтрока.Документ = ПолучитьДокумент1С("Syn_IDДокумента", ТекСтрока.IdДокумента, ПолучитьТипДокумента(ТекСтрока.Тип)); 
		Иначе
			ТекСтрока.Документ = ПолучитьОбъектПоЗначениюСвойства("Syn_IDДокумента", ТекСтрока.IdДокумента);
		КонецЕсли;
		ТекСтрока.УчтенВ1С = ЗначениеЗаполнено(ТекСтрока.Документ);
	КонецЦикла;
	
КонецПроцедуры



Функция ПолучитьСписокДоступныхКонтрагентов()
	
	СписокКонтрагентов = Новый СписокЗначений;
	
	Для Каждого ТекСтрока Из Контрагенты_Авторизованные Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
			СписокКонтрагентов.Добавить(ТекСтрока.Контрагент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокКонтрагентов;
	
КонецФункции

// Процедура устанавливает видимость и доступность элементов управления
// в зависимости от способа авторизации
//
// Параметры:
//  Нет
//
Процедура УстановитьВидимостьДоступность()

	ЭлементыФормы.КоманднаяПанельВходящиеДокументы.Кнопки.Отказать.Доступность = Не Сертификат = Неопределено;
	ЭлементыФормы.КоманднаяПанельВходящиеДокументы.Кнопки.Подписать.Доступность = Не Сертификат = Неопределено;
	ЭлементыФормы.КоманднаяПанельВходящиеДокументы.Кнопки.Переслать.Доступность = Не Сертификат = Неопределено;
	ЭлементыФормы.КоманднаяПанельВходящиеДокументы.Кнопки.Аннулировать.Доступность = Не Сертификат = Неопределено;
	
	ЭлементыФормы.КоманднаяПанельИсходящиеДокументы.Кнопки.Переслать.Доступность = Не Сертификат = Неопределено;
	ЭлементыФормы.КоманднаяПанельИсходящиеДокументы.Кнопки.Аннулировать.Доступность = Не Сертификат = Неопределено;
	
	ЭлементыФормы.Кнопка_СменитьЯщик.Доступность = СписокДоступныхЯщиков.Количество() > 1;	
	
	ЭлементыФормы.Контрагенты_Авторизованные.Колонки.IDКонтрагента.Видимость = Ложь;
	ЭлементыФормы.Контрагенты_Авторизованные.Колонки.Сертификат.Видимость = Ложь;
	ЭлементыФормы.Контрагенты_Авторизованные.Колонки.Дата.Видимость = Ложь;
	ЭлементыФормы.Контрагенты_Авторизованные.Колонки.Контрагент.Видимость = Ложь;
	ЭлементыФормы.Контрагенты_Авторизованные.Колонки.ИНН.Видимость = Ложь;
	ЭлементыФормы.Контрагенты_Авторизованные.Колонки.КПП.Видимость = Ложь;
	
КонецПроцедуры

// Процедура обработчика ожиданий по автоматическому получению входящих сообщений.
// Обновляет список входящих документов по заданному в настройках интервалу
//
Процедура ОбработкаВходящихСообщений()
	Если Сертификат <> Неопределено Тогда
		Обновить_ВходящиеДокументы();
	КонецЕсли;
КонецПроцедуры

Функция ОпределитьТипДокументаВФайле(ИмяФайла)
	
	ТипыДокумента = ОбъектнаяМодель.ТипыДокументов();
	
	ТипДокумента = ТипыДокумента.Неформализованный;
	
	ВариантыКНД = Новый Соответствие;
	ВариантыКНД["1175004"] = ТипыДокумента.ТитулПродавцаТОРГ12;
	ВариантыКНД["1175006"] = ТипыДокумента.ТитулИсполнителяАкт;
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
	
	ТипДокументаПоКНД = Неопределено;
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Если ЧтениеХМЛ.Имя = "Документ" Тогда
			
			Пока ЧтениеХМЛ.ПрочитатьАтрибут() Цикл
				
				Если ЧтениеХМЛ.Имя = "КНД" Тогда
					
					КНД = ЧтениеХМЛ.Значение;
					ТипДокументаПоКНД = ВариантыКНД[КНД];
					Если ТипДокументаПоКНД <> Неопределено Тогда
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТипДокументаПоКНД <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеХМЛ.Закрыть();
	
	Если ТипДокументаПоКНД <> Неопределено Тогда
		ТипДокумента = ТипДокументаПоКНД;
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

Функция ЯщикКонтрагента(Ссылка)
	
	Результат = СпискиДокументов.ЯщикКонтрагента(Ссылка);
	
	Возврат Результат;
	
КонецФункции


Процедура УдалитьОтметкуБГУ(Syn_IDДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) КАК ЛокальныйИД,
		|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 38, 36) КАК СервисныйИД,
		|	ЗначенияСвойств.Ссылка
		|ИЗ
		|	Справочник.ЗначенияСвойств КАК ЗначенияСвойств
		|ГДЕ
		|	ЗначенияСвойств.ПометкаУдаления = ЛОЖЬ
		|	И ПОДСТРОКА(ЗначенияСвойств.Наименование, 38, 36) = &ИдДокумента";
	Запрос.УстановитьПараметр("ИдДокумента", Syn_IDДокумента);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		СправочникОбъект = Результат.Ссылка.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина, Истина);
		СправочникОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры


Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияДокументов = ОперацииСДокументами.События();
	СобытияНастроек = МенеджерНастроек.События();
	
	Если ИмяСобытия = СобытияДокументов.ДокументПодписан Тогда
		
		ИдДокумента = Параметр;
		
		Обновить_ВходящиеИсходящиеЕслиНадо(ИдДокумента);
		
	ИначеЕсли ИмяСобытия = СобытияДокументов.ДокументыОтправлены Тогда
		
		Обновить_ВходящиеДокументы();
		Обновить_ИсходящиеДокументы();
		
		Если НЕ ЭтоБГУ Тогда
			Обновить_ОтправитьДокументы();
		Иначе
			Обновить_ОтправитьДокументыБГУ();
		КонецЕсли;
		
		ОтменитьФормированиеПакета();
		
	ИначеЕсли ИмяСобытия = СобытияДокументов.РазорванаСвязь Тогда
		
		ИдИзменившихсяДокументов = Параметр;
		
		Обновить_ВходящиеИсходящиеЕслиНадо(ИдИзменившихсяДокументов);
		
		Если НЕ ЭтоБГУ Тогда
			Обновить_ОтправитьДокументы();
		Иначе
			Обновить_ОтправитьДокументыБГУ();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = СобытияНастроек.НастройкиИзменились Тогда
		
		Если НЕ ЭтоБГУ Тогда
			Обновить_ОтправитьДокументы();
		Иначе
			Обновить_ОтправитьДокументыБГУ();
		КонецЕсли;
		
		УстановитьОтображение_ДокументыДляОтправки();
		УстановитьОтображение_ПакетДокументов();
		
	КонецЕсли;
	
КонецПроцедуры







