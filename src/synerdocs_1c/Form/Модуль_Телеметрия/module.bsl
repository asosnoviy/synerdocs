
Перем _Соединение;
Перем _Токен;

Перем МенеджерНастроек;

// Включить отправку аналитики
Перем Отправлять;				
// Отключить сбор аналитики на время текущего сеанса
Перем ОтключитьВТекущемСеансе;

Процедура Инициализировать() Экспорт
	
	Модули = ТребуютсяМодули("Модуль_МенеджерНастроек");
	МенеджерНастроек = Модули.Модуль_МенеджерНастроек;
	
	ОтключитьВТекущемСеансе = Ложь;
	
КонецПроцедуры


Процедура ОтправитьАналитику_Экран(Форма) Экспорт
	
	//: Форма = ПолучитьФорму();
	
	Параметры = Новый Соответствие;
	Параметры["cd"]	= Форма.ИмяФормы();
	
	ОтправитьДанные(ТипыОбращения().Экран, Параметры);
	
КонецПроцедуры

Процедура ОтправитьАналитику(Событие, Форма, Элемент = Неопределено, Страница = Неопределено, Значение = 1) Экспорт
	
	Параметры = Новый Соответствие;
	Параметры["cd3"]	= Форма.ИмяФормы();
	Параметры["cd"]		= Форма.ИмяФормы(); // FIXME: Проверка
	Параметры["ec"]		= Событие.Тип;
	Параметры["ea"]		= Событие.Действие;
	
	Если Элемент <> Неопределено Тогда
		Параметры["el"]	= Элемент.Имя;
	КонецЕсли;
	
	Если Страница <> Неопределено Тогда
		Параметры["cd4"] = Страница.Имя;
	КонецЕсли;
	
	Параметры["ev"] = Значение;
	
	ОтправитьДанные(ТипыОбращения().Событие, Параметры);
	
КонецПроцедуры


Функция ОписаниеСобытий() Экспорт
	
	ТипыСобытий = Новый Структура(
		"Криптография,
		|Авторизация,
		|ОбновлениеСписка,
		|Подписание,
		|Согласование,
		|Аннулирование,
		|ОтправкаПакета,
		|Отправка,
		|Экспорт,
		|Просмотр,
		|ПриглашениеКОбмену,
		|ОбновлениеИР,
		|Синхронизация,
		|Фильтрация"
	);

	ТипыСобытий.Криптография		= СобытияКриптографии();
	ТипыСобытий.Авторизация			= СобытияАвторизации();
	ТипыСобытий.ОбновлениеСписка	= СобытияОбновленияСписка();
	ТипыСобытий.Подписание			= СобытияПодписания();
	ТипыСобытий.Согласование		= СобытияСогласования();
	ТипыСобытий.Аннулирование		= СобытияАннулирования();
	ТипыСобытий.ОтправкаПакета		= СобытияОтправкиПакета();
	ТипыСобытий.Отправка			= СобытияОтправки();
	ТипыСобытий.Экспорт				= СобытияЭкспорта();
	ТипыСобытий.Просмотр			= СобытияПросмотра();
	ТипыСобытий.ПриглашениеКОбмену	= СобытияПриглашенияКОбмену();
	ТипыСобытий.ОбновлениеИР		= СобытияОбновленияИР();
	ТипыСобытий.Синхронизация		= СобытияСинхронизации();
	ТипыСобытий.Фильтрация			= СобытияФильтрации();
	
	ТипыСобытий = ФиксированныеДанные(ТипыСобытий);
	Возврат ТипыСобытий;
	
КонецФункции

Функция СобытияКриптографии()
	
	ТипСобытия = "Криптография";
	
	Действия = Новый Структура(
		"ПолучениеДоступа,
		|Ошибка,
		|Отмена"
	);
	
	Действия.ПолучениеДоступа	= "Получение доступа";
	Действия.Ошибка				= "Ошибка";
	Действия.Отмена				= "Отмена";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияАвторизации()
	
	ТипСобытия = "Авторизация";
	
	Действия = Новый Структура(
		"Вход,
		|СменаПользователя,
		|ВыборЯщика"
	);
	
	Действия.Вход				= "Вход";
	Действия.СменаПользователя	= "Смена пользователя";
	Действия.ВыборЯщика			= "Выбор ящика";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияОбновленияСписка()
	
	ТипСобытия = "Обновление списка";
	
	Действия = Новый Структура(
		"Обновление,
		|ВыборСтраницы,
		|СтраницаВперед,
		|СтраницаНазад"
	);
	
	Действия.Обновление		= "Обновление";
	Действия.ВыборСтраницы	= "Выбор страницы";
	Действия.СтраницаВперед	= "Страница вперед";
	Действия.СтраницаНазад	= "Страница назад";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияПодписания()
	
	ТипСобытия = "Подписание документа";
	
	Действия = Новый Структура(
		"Подписание,
		|Отказ,
		|Отмена"
	);
	
	Действия.Подписание	= "Подписание";
	Действия.Отказ		= "Отказ в подписании";
	Действия.Отмена		= "Отмена";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияСогласования()
	
	ТипСобытия = "Согласование документа";
	
	Действия = Новый Структура(
		"Согласование,
		|Отказ,
		|Отмена"
	);
	
	Действия.Согласование	= "Согласование";
	Действия.Отказ			= "Отказ в согласовании";
	Действия.Отмена			= "Отмена";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияАннулирования()
	
	ТипСобытия = "Аннулирование документа";
	
	Действия = Новый Структура(
		"Аннулирование,
		|Отмена"
	);
	
	Действия.Аннулирование	= "Аннулирование";
	Действия.Отмена			= "Отмена";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияОтправкиПакета()
	
	ТипСобытия = "Отправка пакета документов";
	
	Действия = Новый Структура(
		"Формирование,
		|Пересылка,
		|Добавление,
		|Удаление,
		|Отправка,
		|Отмена"
	);
	
	Действия.Формирование	= "Формирование пакета";
	Действия.Пересылка		= "Пересылка документа";
	Действия.Добавление		= "Добавление документа";
	Действия.Удаление		= "Удаление документа";
	Действия.Отправка		= "Отправка пакета";
	Действия.Отмена			= "Отмена";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияОтправки()
	
	ТипСобытия = "Отправка документа";
	
	Действия = Новый Структура(
		"Единичная,
		|Массовая,
		|Отмена"
	);
	
	Действия.Единичная	= "Единичная отправка";
	Действия.Массовая	= "Массовая отправка";
	Действия.Отмена		= "Отмена";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияЭкспорта()
	
	ТипСобытия = "Экспорт документа";
	
	Действия = Новый Структура(
		"ЭкспортЭД,
		|Экспорт1С,
		|Отмена"
	);
	
	Действия.ЭкспортЭД	= "Экспорт из сервиса";
	Действия.Экспорт1С	= "Экспорт из 1С";
	Действия.Отмена		= "Отмена";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияПросмотра()
	
	ТипСобытия = "Просмотр";
	
	Действия = Новый Структура(
		"ПросмотрЭД,
		|ПросмотрСвязи,
		|Предпросмотр,
		|Просмотр1С"
	);
	
	Действия.ПросмотрЭД		= "Просмотр ЭД";
	Действия.ПросмотрСвязи	= "Просмотр связанного ЭД";
	Действия.Предпросмотр	= "Предпросмотр";
	Действия.Просмотр1С		= "Просмотр в 1С";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияПриглашенияКОбмену()
	
	ТипСобытия = "Приглашение к обмену";
	
	Действия = Новый Структура(
		"Отправка,
		|Возобновление,
		|Прекращение,
		|Принято,
		|Отклонено"
	);
	
	Действия.Отправка		= "Отправка приглашения";
	Действия.Возобновление	= "Возобновление обмена";
	Действия.Прекращение	= "Прекращение обмена";
	Действия.Принято		= "Принятие приглашения";
	Действия.Отклонено		= "Отклонение приглашения";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияОбновленияИР()
	
	ТипСобытия = "Обновление ИР";
	
	Действия = Новый Структура(
		"Обновление,
		|Отмена"
	);
	
	Действия.Обновление = "Обновление";
	Действия.Отмена = "Отмена";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияСинхронизации()
	
	ТипСобытия = "Синхронизация данных";
	
	Действия = Новый Структура(
		"СозданиеДокумента,
		|СопоставлениеДокумента,
		|ОтменаСопоставленияДокумента,
		|СозданиеОрганизации,
		|ОтменаСозданияОрганизации,
		|СозданиеКонтрагента,
		|ОтменаСозданияКонтрагента,
		|Синхронизация"
	);
	
	Действия.СозданиеДокумента				= "Создание документа";
	Действия.СопоставлениеДокумента			= "Сопоставление документа";
	Действия.ОтменаСопоставленияДокумента	= "Отмена сопоставления документа";
	Действия.СозданиеОрганизации			= "Создание организации";
	Действия.ОтменаСозданияОрганизации		= "Отмена создания организации";
	Действия.СозданиеКонтрагента			= "Создание контрагента";
	Действия.ОтменаСозданияКонтрагента		= "Отмена создания контрагента";
	Действия.Синхронизация					= "Синхронизация реквизитов";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияФильтрации()
	
	ТипСобытия = "Фильтрация";
	
	Действия = Новый Структура(
		"Настройка,
		|Сброс,
		|Отмена"
	);
	
	Действия.Настройка	= "Настройка фильтра";
	Действия.Сброс		= "Сброс фильтра";
	Действия.Отмена		= "Отмена";
	
	Результат = События(ТипСобытия, Действия);
	
	Возврат Результат;
	
КонецФункции


Функция Новый_Событие()
	
	Событие = Новый Структура(
		"Тип, Действие"
	);
	
	Возврат Событие;
	
КонецФункции

Функция События(ТипСобытия, Действия)
	
	События = Новый Структура;
	
	Для Каждого Действие Из Действия Цикл
		
		Событие = Новый_Событие();
		Событие.Тип			= ТипСобытия;
		Событие.Действие	= Действие.Значение;
		
		События.Вставить(Действие.Ключ, Событие);
		
	КонецЦикла;
	
	Возврат События;
	
КонецФункции


Функция ОбщиеПараметрыАналитики()
	
	ВерсияПротокола = 1;
	
	Конфигурация = ИнформацияОКонфигурации();
	
	Параметры = Новый Соответствие;
	
	Параметры["v"]		= ВерсияПротокола;
	
	Параметры["tid"]	= Токен();
	Параметры["cid"]	= Конфигурация.ИдентификаторПользователя;
	
	Параметры["an"]		= Конфигурация.Имя;
	Параметры["av"]		= Конфигурация.Версия;
	Параметры["cd1"]	= Конфигурация.ВерсияПлатформы;
	Параметры["cd2"]	= ВерсияИР();
	
	Параметры = ФиксированныеДанные(Параметры);
	
	Возврат Параметры;
	
КонецФункции

Функция ТипыОбращения()
	
	ТипыОбращения = Новый Структура(
		"Экран, Событие"
	);
	
	ТипыОбращения.Экран		= "screenview";
	ТипыОбращения.Событие	= "event";
	
	ТипыОбращения = ФиксированныеДанные(ТипыОбращения);
	
	Возврат ТипыОбращения;
	
КонецФункции

Функция Отправлять()
	
	Если Отправлять = Неопределено Тогда
		Настройки = МенеджерНастроек.НастройкиИР();
		Отправлять = ОтправкаВключена(Настройки);
	КонецЕсли;
	
	Результат = НЕ ОтключитьВТекущемСеансе И Отправлять;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправитьДанные(ТипОбращения, ПараметрыОбращения)
	
	Если НЕ Отправлять() Тогда
		Возврат;
	КонецЕсли;
	
	Хост		= "www.google-analytics.com";
	Ресурс		= "/collect";
	Защищенное	= Истина;
	
	Соединение = Соединение(Хост, Защищенное); //: Соединение = Новый HTTPСоединение;
	Запрос = Новый HTTPЗапрос(Ресурс);
	
	ПараметрыАналитики = Новый Соответствие;
	
	ДополнитьСоответствие(ПараметрыАналитики, ОбщиеПараметрыАналитики());
	ДополнитьСоответствие(ПараметрыАналитики, ПараметрыОбращения);
	
	ПараметрыАналитики["t"] = ТипОбращения;
	
	ТелоЗапроса = СтрПараметрыUrl(ПараметрыАналитики);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8);
	
	Попытка
		Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ОтключитьВТекущемСеансе = Истина;
	КонецПопытки;
	
КонецПроцедуры

Функция СтрПараметрыUrl(Параметры)
	
	//: ПараметрыАналитики = Новый Соответствие;
	
	ПараметрыUrl = Новый Массив;
	Для Каждого Параметр Из Параметры Цикл
		
		Ключ		= Параметр.Ключ;
		Значение	= Параметр.Значение;
		
		Значение = Формат(Значение, "ЧН=; ЧГ=");
		Значение = СокрЛП(Значение);
		
		Значение = Ключ + "=" + Значение;
		
		ПараметрыUrl.Добавить(Значение);
		
	КонецЦикла;
	
	ПараметрыUrlСтр = СтрСоединить2(ПараметрыUrl, "&");
	
	Возврат ПараметрыUrlСтр;
	
КонецФункции

Функция Соединение(Хост, Защищенное)
	
	Если _Соединение = Неопределено Тогда
		
		Шифрование = (Защищенное = Истина);
		
		Соединение = Новый HTTPСоединение(Хост,,,,, Шифрование);
		
		_Соединение = Соединение;
		
	КонецЕсли;
	
	Возврат _Соединение;
	
КонецФункции


Функция ТокеныGA()
	
	Токены = Новый Структура(
		"Продуктив, Тестовый"
	);
	
	Токены.Продуктив	= "UA-74590205-2";
	Токены.Тестовый		= "UA-74265424-2";
	
	Токены = ФиксированныеДанные(Токены);
	
	Возврат Токены;
	
КонецФункции

Функция ПолучитьТокенИзНастроекИР(Настройки)
	
	Перем Токен;
	
	Токены = ТокеныGA();
	Токен = ?(МенеджерНастроек.ЭтоПродуктив(Настройки),
		Токены.Продуктив,
		Токены.Тестовый
	);
	
	Возврат Токен;
	
КонецФункции

Функция Токен()
	
	Если _Токен = Неопределено Тогда
		
		Настройки = МенеджерНастроек.НастройкиИР();
		_Токен = ПолучитьТокенИзНастроекИР(Настройки);
		
	КонецЕсли;
	
	Возврат _Токен;
	
КонецФункции

Функция УстановитьТокен(Токен)
	
	_Токен = Токен;
	
КонецФункции


Функция ОтправкаВключена(Настройки)
	
	ОтправкаВключена = Настройки.ОтправлятьДанныеАналитики;
	
	Возврат ОтправкаВключена;
	
КонецФункции


Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Перем Токен;
	
	СобытияМенеджераНастроек = МенеджерНастроек.События();
	
	Если ИмяСобытия = СобытияМенеджераНастроек.НастройкиИзменились Тогда
		
		Настройки = МенеджерНастроек.НастройкиИР();
		
		Токен = ПолучитьТокенИзНастроекИР(Настройки);
		УстановитьТокен(Токен);
		
		Отправлять = ОтправкаВключена(Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

