
Перем _Параметры;

Перем _ИмяФормы;

Перем Сертификат;

// Модули
Перем Телеметрия, ОперацииСДокументами, ОбъектнаяМодель;
Перем СобытияТелеметрии;

Процедура ПодключитьМодули()
	
	Модули = ТребуютсяМодули("Модуль_Телеметрия, Модуль_ОперацииСДокументами, Модуль_ОбъектнаяМодель");
	Телеметрия				= Модули.Модуль_Телеметрия;
	ОперацииСДокументами	= Модули.Модуль_ОперацииСДокументами;
	ОбъектнаяМодель			= Модули.Модуль_ОбъектнаяМодель;
	
	СобытияТелеметрии = Телеметрия.ОписаниеСобытий();
	
КонецПроцедуры

Процедура ИнициализироватьФорму()
	
	ПодключитьМодули();
	
	Сертификат = ТекущийСертификат();
	
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

Функция ИмяФормы() Экспорт
	
	Если _ИмяФормы = Неопределено Тогда
		_ИмяФормы = ПолучитьИмяФормы(ЭтаФорма);
	КонецЕсли;
	
	Возврат _ИмяФормы;
	
КонецФункции

//========================================================================
// ФОРМА
//========================================================================

// События формы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьФорму();
	ИзвлечьПараметры();
	
КонецПроцедуры

Процедура ПриОткрытии() Экспорт
	
	ФабрикаСервиса = ExchangeService.ФабрикаXDTO;
	
	Попытка					
		FullDocumentInfo = ExchangeService.GetFlowDocumentInfo(Токен, Syn_ЯщикОрганизации, ИдДокумента, ); 
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
		Возврат;
	КонецПопытки;
	
	Syn_Документ = FullDocumentInfo.Document;
	//Попробуем найти док в 1С если есть
	Если ЭтоБГУ Тогда
		ТипДокумента = Syn_Документ.DocumentTypeEnum.Name;
		Документ1С = ПолучитьДокумент1С("Syn_IDДокумента", ИдДокумента, ТипДокумента);
	Иначе
		Документ1С = ПолучитьОбъектПоЗначениюСвойства("Syn_IDДокумента", ИдДокумента);
	КонецЕсли;
	
	ТипЭД			= FullDocumentInfo.Document.DocumentTypeEnum.Description;
	ВидЭД			= FullDocumentInfo.Document.UntypedKind;
	ПредставлениеЭД	= FullDocumentInfo.Document.Name;
	Статус			= FullDocumentInfo.DocumentFlowStatusDescription.Status;
	
	УстановитьЗаголовокОкна(ЭтаФорма, ПредставлениеЭД);
	
	ЭлементыФормы.Надпись_Документ1.Заголовок = ПредставлениеЭД;
	
	ЭлементыФормы.ПолеHTMLДокумента.Видимость				= (ТипЭД = "Неформализованный");
	ЭлементыФормы.ПолеТабличногоДокументаДанныеЭД.Видимость	= НЕ ЭлементыФормы.ПолеHTMLДокумента.Видимость;
		
	// Запонение связанных документов
	ТЗ_СвязанныеДокументы = Новый ТаблицаЗначений;
	ТЗ_СвязанныеДокументы.Колонки.Добавить("ДокументПредставление");
	ТЗ_СвязанныеДокументы.Колонки.Добавить("Тип");
	ТЗ_СвязанныеДокументы.Колонки.Добавить("IDДокумента");
	ТЗ_СвязанныеДокументы.Колонки.Добавить("Статус");
	ТЗ_СвязанныеДокументы.Колонки.Добавить("ИмяКнопки");
	ТЗ_СвязанныеДокументы = ЗаполнитьТаблицуСвязанныхДокументов(FullDocumentInfo);
	
	// Установка досутпности действий с документом
	ДоступныеОперации = FullDocumentInfo.AvailableOperations;
	ЭлементыФормы.ДействияФормы.Кнопки.Переслать.Доступность										= ПроверитьДоступностьОперации(ДоступныеОперации, "Переслать");
	ЭлементыФормы.ДействияФормы.Кнопки.Аннулировать.Доступность										= ПроверитьДоступностьОперации(ДоступныеОперации, "Аннулировать");
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюСогласовать.Кнопки.Согласовать.Доступность			= ПроверитьДоступностьОперации(ДоступныеОперации, "Согласовать");
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюСогласовать.Кнопки.ОтказатьСогласование.Доступность	= ПроверитьДоступностьОперации(ДоступныеОперации, "ОтказатьВСогласовании");
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюПодписать.Кнопки.Подписать.Доступность				= ПроверитьДоступностьОперации(ДоступныеОперации, "Подписать");
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюПодписать.Кнопки.Отказать.Доступность					= ПроверитьДоступностьОперации(ДоступныеОперации, "Отказать");
	
	ЭлементыФормы.ДействияФормы.Кнопки.УдалитьОтметкуОтправки.Доступность							= ЗначениеЗаполнено(Документ1С);
	
	Если ЭтоВходящий Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.УдалитьОтметкуОтправки.Текст = "Удалить отметку о создании документа в 1С";
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.УдалитьОтметкуОтправки.Текст = "Удалить отметку об отправке документа";
	КонецЕсли;
	
	Если (ТипЭД = "Неформализованный" И ВидЭД <> "Счет на оплату")
			ИЛИ ТипЭД = "Соглашение об аннулировании"
			// FIXME: Пока новые форматы не будут сделаны полностью
			ИЛИ (
				ОбъектнаяМодель.ЭтоНовыйФормат(FullDocumentInfo.Document.DocumentTypeEnum.Code)
				И НЕ ЗначениеЗаполнено(Документ1С)
			) Тогда
		Документ1ССоздать = "Не может быть создан";
		ЭлементыФормы.Надпись_Документ1ССоздать.Гиперссылка = Ложь;
		ЭлементыФормы.Надпись_Документ1ССоздать.ЦветТекста = Новый Цвет;
	Иначе
		Если ЗначениеЗаполнено(Документ1С) Тогда
			Документ1ССоздать = Документ1С;
		Иначе
			Документ1ССоздать = ?(ЭтоВходящий, "Создать", "");
		КонецЕсли;
		ЭлементыФормы.Надпись_Документ1ССоздать.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
	КонецЕсли;
	
	// Получим все акты о расхождении если это ТОРГ-12 и они есть
	Если FullDocumentInfo.Document.DocumentType = "WaybillSeller" Тогда
		СписокАктов = Новый СписокЗначений;
		Для Каждого Элемент Из FullDocumentInfo.RelatedDocuments.Document Цикл
			Если Элемент.UntypedKind = "Акт об установленном расхождении" Тогда 
				СписокАктов.Добавить(Элемент.Name + " от " + Элемент.SentDate);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СписокАктов = Неопределено;
	КонецЕсли;
	
	Пересланный = Ложь;
	БезПодписи  = Ложь;
	Если НЕ FullDocumentInfo.Flows = Неопределено Тогда
		Для Каждого Получатель Из FullDocumentInfo.Flows.DocumentFlow Цикл
			Если Получатель.RecipientOrganization.BoxAddress = Syn_ЯщикОрганизации Тогда
				Пересланный = Пересланный Или Получатель.FlowType = "SentForward";
				БезПодписи = БезПодписи Или Получатель.FlowType = "SentUnsigned";
				Если Пересланный И БезПодписи Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьДокументооборот(FullDocumentInfo);
	
	Если ТипЭД = "Неформализованный" Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		Контент = FullDocumentInfo.Document.Content;
		Если Контент = Неопределено Тогда
			Попытка
				Контент = ExchangeService.GetDocumentContent(Токен, Syn_ЯщикОрганизации, ИдДокумента);
			Исключение
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				Сообщить("Ошибка при отображении содержимого документа: " + ОписаниеОшибкиСтрокой);
				Возврат;
			КонецПопытки;
		КонецЕсли;
		Контент.Записать(ИмяФайла);
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст("<html><body style=""margin:0;padding:0;""><iframe width=100% height=100% src=""file:///" + ИмяФайла + """>Нет фреймам!</iframe></body></html>");
	Иначе
		ЭлементыФормы.ПолеТабличногоДокументаДанныеЭД.Очистить();
		ПечатьЭД(FullDocumentInfo, ЭлементыФормы.ПолеТабличногоДокументаДанныеЭД, СписокАктов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

// События эелементов формы

Процедура ДействияФормыПодписать(Кнопка)

	ТекстВопроса = "Подписать документ " + ПредставлениеЭД + "?
					|Будет использован сертификат " + ПолучитьПредставлениеСертификата();
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Подтверждение");	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Подписание.Подписание,
			ЭтаФорма,
			Кнопка
		);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Syn_IDДокумента", ИдДокумента);
		ПараметрыФормы.Вставить("ТипЭД", ТипЭД);
		ПараметрыФормы.Вставить("ПредставлениеЭД", ПредставлениеЭД);
		ПараметрыФормы.Вставить("Комментарий", "");
		ПараметрыФормы.Вставить("Статус", Статус);
		ПараметрыФормы.Вставить("Документ1С", Документ1С);
		
		// TODO: Вместо литералов использовать "перечисления"
		Если ТипЭД = "Товарная накладная" Или ТипЭД = "Акт выполненных работ" Тогда
			
			Форма_ПодписьИОтправкаВходящегоДокумента = ПолучитьФорму("Форма_ПодписьИОтправкаВходящегоДокумента");
			Форма_ПодписьИОтправкаВходящегоДокумента.ЭД_Структура = ПараметрыФормы;
			Форма_ПодписьИОтправкаВходящегоДокумента.ВладелецФормы = ЭтаФорма;
			
			Если Форма_ПодписьИОтправкаВходящегоДокумента.ОткрытьМодально() = Истина Тогда
				ПриОткрытии();
				ОсновнаяФорма = ПолучитьФорму("ОсновнаяФорма",, КлючУникальности_ОсновнаяФорма);
				ОсновнаяФорма.Обновить_ВходящиеДокументы();
				ОсновнаяФорма.Обновить_ИсходящиеДокументы();
			КонецЕсли;
			
		ИначеЕсли ВидЭД = "Акт об установленном расхождении" Тогда
			
			Форма_ПодписьИОтправкаВходящегоДокумента = ПолучитьФорму("Форма_ПодписьИОтправкаВходящегоАктаОРасхождении");
			Форма_ПодписьИОтправкаВходящегоДокумента.ЭД_Структура = ПараметрыФормы;
			Форма_ПодписьИОтправкаВходящегоДокумента.ЭД_Структура.ТипЭД = ВидЭД;
			Форма_ПодписьИОтправкаВходящегоДокумента.ВладелецФормы = ЭтаФорма;
			
			Если Форма_ПодписьИОтправкаВходящегоДокумента.ОткрытьМодально() = Истина Тогда
				ПриОткрытии();
				ОсновнаяФорма = ПолучитьФорму("ОсновнаяФорма",, КлючУникальности_ОсновнаяФорма);
				ОсновнаяФорма.Обновить_ВходящиеДокументы();
				ОсновнаяФорма.Обновить_ИсходящиеДокументы();
			КонецЕсли;
        		
		ИначеЕсли ТипЭД = "Неформализованный" ИЛИ ТипЭД = "Соглашение об аннулировании" тогда
			
			FullDocumentInfo = ExchangeService.GetFlowDocumentInfo(Токен, Syn_ЯщикОрганизации, ИдДокумента, );
			ЯщикОтправителя = FullDocumentInfo.From;
			Syn_Документ = FullDocumentInfo.Document;
			Контент = ?(Syn_Документ.Content = Неопределено, ExchangeService.GetDocumentContent(Токен, Syn_ЯщикОрганизации, ИдДокумента), Syn_Документ.Content);
			ЭЦП_ДвоичныеДанные = СформироватьЭЦПДокумента(, Контент, ПредставлениеЭД);
			Syn_ЭЦП = СоздатьОбъект_Sign(Syn_Документ.Id, ЭЦП_ДвоичныеДанные);
			
			Пересланный = Ложь;  
			
			Для Каждого Элем Из FullDocumentInfo.Flows.DocumentFlow Цикл
				Если Элем.FlowType = "SentForward" И Элем.RecipientOrganization.BoxAddress = Syn_ЯщикОрганизации Тогда
					Пересланный = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
						
			Если НЕ Пересланный Тогда
				
				//Создаем массив документов
				Тип_ArrayOfDocument = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfDocument");
				ArrayOfDocument = ExchangeService.ФабрикаXDTO.Создать(Тип_ArrayOfDocument);
				
				//Создаем массив ЭЦП
				Тип_ArrayOfSign = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfSign");
				ArrayOfSign = ExchangeService.ФабрикаXDTO.Создать(Тип_ArrayOfSign);
				ArrayOfSign.Sign.Добавить(Syn_ЭЦП);
				
				//Создаем сообщение и отправляем его
				Тип_Message = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "Message");
				Message = ExchangeService.ФабрикаXDTO.Создать(Тип_Message);
				Message.Documents = ArrayOfDocument;
				Message.From = Syn_ЯщикОрганизации;
				Message.Signs = ArrayOfSign;
				Message.To = ЯщикОтправителя;	
				Message.Id = Строка(Новый УникальныйИдентификатор());
				
				Попытка
					Результат = ОтправитьСообщениеВСервисОбмена(Message);
					Если Результат <> Неопределено Тогда
						ОсновнаяФорма = ПолучитьФорму("ОсновнаяФорма",, КлючУникальности_ОсновнаяФорма);
						ОсновнаяФорма.Обновить_ВходящиеДокументы();
						ОсновнаяФорма.Обновить_ИсходящиеДокументы();
                        ПриОткрытии();
					КонецЕсли;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
			Иначе
				
				//Подписываем пересланный	
				Попытка
					ExchangeService.SignDocument(Токен, "SentForward", Syn_ЭЦП);
					ПриОткрытии();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				 
			КонецЕсли;
			
		Иначе
			
			ОперацииСДокументами.Подписать(ИдДокумента);
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры
 
Процедура ДействияФормыОтказать(Кнопка)
		
	Попытка
		FullDocumentInfo = ExchangeService.GetFlowDocumentInfo(Токен, Syn_ЯщикОрганизации, ИдДокумента, );
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
		
		Возврат;
		
	КонецПопытки;
	
	Если НЕ FullDocumentInfo.Flows.DocumentFlow.Количество() = 0 Тогда
		Для Каждого Элем Из FullDocumentInfo.Entries.DocumentEntry Цикл
			Если Элем.FlowType = "SentForward" Тогда
				FlowType = Элем.FlowType;
			КонецЕсли;
		КонецЦикла;
		
		БезПодписи = Ложь;
		
		Для Каждого Получатель Из FullDocumentInfo.Flows.DocumentFlow Цикл
			// отправлен без подписи
			Если Получатель.FlowType = "SentUnsigned" И Получатель.RecipientOrganization.BoxAddress = Syn_ЯщикОрганизации Тогда
				БезПодписи = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Статус = "Выставлен" Или Статус = "Требуется подпись" Тогда
		
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Подписание.Отказ,
			ЭтаФорма,
			Кнопка
		);
		
		//открываем форму уточнения (отказа от подписи)
		Форма_Комментарий = ПолучитьФорму("Форма_Комментарий");
		
		ЭД_СтруктураКомментарий = Новый Структура;
		ЭД_СтруктураКомментарий.Вставить("Syn_Документ", FullDocumentInfo.Document);
		ЭД_СтруктураКомментарий.Вставить("ТипЭД", ТипЭД);
		ЭД_СтруктураКомментарий.Вставить("ПредставлениеЭД", ПредставлениеЭД);
		ЭД_СтруктураКомментарий.Вставить("Комментарий", "");
		ЭД_СтруктураКомментарий.Вставить("Пересланный", Переслан);
		
		Форма_Комментарий.ЭД_Структура = ЭД_СтруктураКомментарий;
		
		Если Форма_Комментарий.ОткрытьМодально() <> НЕОПРЕДЕЛЕНО Тогда
			ОсновнаяФорма = ПолучитьФорму("ОсновнаяФорма",, КлючУникальности_ОсновнаяФорма);
			ОсновнаяФорма.Обновить_ВходящиеДокументы();
		КонецЕсли;
	Иначе
		Сообщить("Отказ в подписаниии документа [" + ПредставлениеЭД + 
			"] со статусом [" + Статус + "] не возможен");
	КонецЕсли;
 	
	ПриОткрытии();
	
КонецПроцедуры

Процедура ДействияФормыСогласовать(Кнопка)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Согласование.Согласование,
		ЭтаФорма,
		Кнопка
	);

	СтруктураСогласования = Новый Структура;
	СтруктураСогласования.Вставить("ИД", ИдДокумента);
	СтруктураСогласования.Вставить("ЭтоСогласование", Истина);
	СтруктураСогласования.Вставить("ПредставлениеЭД", ПредставлениеЭД);
	
	Форма_Коммментарий = ПолучитьФорму("Форма_Комментарий");
	Форма_Коммментарий.СтруктураСогласования = СтруктураСогласования;	
	
	Если Форма_Коммментарий.ОткрытьМодально() <> НЕОПРЕДЕЛЕНО Тогда
		ПриОткрытии();
		
		ОсновнаяФорма = ПолучитьФорму("ОсновнаяФорма",, КлючУникальности_ОсновнаяФорма);
		Если ЭтоВходящий Тогда
			
			ОсновнаяФорма.Обновить_ВходящиеДокументы();
		Иначе
			ОсновнаяФорма.Обновить_ИсходящиеДокументы();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыОтказатьСогласование(Кнопка)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Согласование.Отказ,
		ЭтаФорма,
		Кнопка
	);

	СтруктураСогласования = Новый Структура;
	СтруктураСогласования.Вставить("ИД", ИдДокумента);
	СтруктураСогласования.Вставить("ЭтоСогласование", Ложь);
	СтруктураСогласования.Вставить("ПредставлениеЭД", ПредставлениеЭД);
	
	Форма_Коммментарий = ПолучитьФорму("Форма_Комментарий");
	Форма_Коммментарий.СтруктураСогласования = СтруктураСогласования;	
	
	Если Форма_Коммментарий.ОткрытьМодально() <> НЕОПРЕДЕЛЕНО Тогда
		ПриОткрытии();
		
		ОсновнаяФорма = ПолучитьФорму("ОсновнаяФорма",, КлючУникальности_ОсновнаяФорма);
		Если ЭтоВходящий Тогда
			
			ОсновнаяФорма.Обновить_ВходящиеДокументы();
		Иначе
			ОсновнаяФорма.Обновить_ИсходящиеДокументы();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыПереслать(Кнопка)

	Отбор = Новый Структура;
	Отбор.Вставить("IDДокумента", ИдДокумента);
	
	МассивСтрок = ?(ЭтоВходящий, ВходящиеДокументы.НайтиСтроки(Отбор), ИсходящиеДокументы.НайтиСтроки(Отбор));
	
	ОсновнаяФорма = ЭтотОбъект.ПолучитьФорму("ОсновнаяФорма", , КлючУникальности_ОсновнаяФорма);
	ОсновнаяФорма.ПереслатьДокументы(МассивСтрок);
	ОсновнаяФорма.ЭлементыФормы.Панель_РабочаяОбласть.ТекущаяСтраница 	= ОсновнаяФорма.ЭлементыФормы.Панель_РабочаяОбласть.Страницы.ОтправитьДокументы;
	ОсновнаяФорма.ЭлементыФормы.ПанельОтправка.ТекущаяСтраница 			= ОсновнаяФорма.ЭлементыФормы.ПанельОтправка.Страницы.СтраницаОтправка;
	
	ОсновнаяФорма.Активизировать();
	ЭтаФорма.Закрыть();
		
КонецПроцедуры

Процедура ДействияФормыУдалитьОтметкуОтправки(Кнопка)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = Строка(ЭлементыФормы.ДействияФормы.Кнопки.УдалитьОтметкуОтправки.Текст) + "?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ1С) Тогда
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Синхронизация.ОтменаСопоставленияДокумента,
		ЭтаФорма,
		Кнопка
	);

	// TODO: Нормальная поддержка БГУ
	Если ЭтоБГУ Тогда
		
		УдалитьОтметкуБГУ();
		
		Оповестить(ОперацииСДокументами.События().РазорванаСвязь, ЗначениеВМассиве(ИдДокумента));
		
	Иначе
		
		ОперацииСДокументами.РазорватьСвязьСДокументом(ИдДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыАннулировать(Кнопка)
	
	Если Сертификат = Неопределено Тогда
		// Авторизация по паролю
		Сообщить("Для выполнения данной операции необходимо авторизоваться по сертификату");
		Возврат;
	КонецЕсли;
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Аннулирование.Аннулирование,
		ЭтаФорма, 
		Кнопка
	);
	
	ЕстьАннулированныеДокументы = Ложь;
	Подсказка = "Остальным участникам обмена будет предложено аннулирование документа по следующим причинам:";
	ПричинаАннулирования = "";
	Если ВвестиСтроку(ПричинаАннулирования, "Документ [" + ПредставлениеЭД + "]" + Символы.ПС + Подсказка, , Истина) Тогда
		Если АннулироватьДокумент(ИдДокумента, ЭтоВходящий, ПричинаАннулирования) Тогда
			Если ЭтоВходящий Тогда
				ВладелецФормы.Обновить_ВходящиеДокументы();
			КонецЕсли;
			ВладелецФормы.Обновить_ИсходящиеДокументы();
		КонецЕсли;
	Иначе
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Аннулирование.Отмена,
			ЭтаФорма
		);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВ1СНажатие(Элемент)
	
	
	Если Документ1ССоздать <> "Создать" Тогда
		
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Просмотр.Просмотр1С,
			ЭтаФорма,
			Элемент
		);
		
		ОткрытьЗначение(Документ1ССоздать);
		
	Иначе
		
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Синхронизация.СозданиеДокумента,
			ЭтаФорма,
			Элемент
		);
		
		Попытка
			FullDocumentInfo = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, ИдДокумента,);
			//Получаем связанные документы: если там есть хатя бы 1 не созданный, то выводим форму связанных документов, иначе сразу создаем этот документ
			Syn_Документ = FullDocumentInfo.Document;
			ТЗ_СвязанныеДокументыSynerdocs = ПолучитьСвязанныеДокументыSynerdocs(Syn_Документ);
			
			Если ТЗ_СвязанныеДокументыSynerdocs.Количество() > 0 И
				ТЗ_СвязанныеДокументыSynerdocs.Найти(НЕОПРЕДЕЛЕНО, "Документ1С") <> НЕОПРЕДЕЛЕНО Тогда
			
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Syn_IDДокумента", ИдДокумента);
				ПараметрыФормы.Вставить("ТипЭД", ТипЭД);
				ПараметрыФормы.Вставить("ПредставлениеЭД", ПредставлениеЭД);
				ПараметрыФормы.Вставить("Входящий", ЭтоВходящий);
				
				//открываем связанные документы
				Форма_СвязанныеДокументы = ПолучитьФорму("Форма_СвязанныеДокументы");
				
				Форма_СвязанныеДокументы.ЭД_Структура = ПараметрыФормы;
				Форма_СвязанныеДокументы.РежимСозданияДокументов1С = Истина;
				
				Документ1С = Форма_СвязанныеДокументы.ОткрытьМодально();
				
			Иначе
				
				Отбор = Новый Структура;
				Отбор.Вставить("Ящик", FullDocumentInfo.From);
				Контрагенты =  Контрагенты_Авторизованные.НайтиСтроки(Отбор);
				ПредставлениеКонтрагента = ?(Контрагенты.Количество() > 0, Контрагенты.Получить(0).КонтрагентПредставление, Неопределено);
				
				//создание документа 1С
				СтруктураИнформации = Новый Структура;
				СтруктураИнформации.Вставить("Контрагент", ПредставлениеКонтрагента);
				СтруктураИнформации.Вставить("Документ", ПредставлениеЭД);
				Документ1С = СоздатьДокумент1С(Syn_Документ, СтруктураИнформации);
				
			КонецЕсли;
			
			Документ1ССоздать = ?(Документ1С <> НЕОПРЕДЕЛЕНО, Документ1С, "Создать");
			
			
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			
			ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры
   
Процедура ТабДокументооборотОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	//Откроем карточку ЭД по клику на строку таб. поля
	Если ЗначениеЗаполнено(Элемент.ТекущаяОбласть.Расшифровка) Тогда
		Попытка
			СвязанныйДокументИнфо = ExchangeService.GetFlowDocumentInfo(Токен, Syn_ЯщикОрганизации, Элемент.ТекущаяОбласть.Расшифровка,);
			Syn_Документ = СвязанныйДокументИнфо.Document;
		Исключение
			Сообщить("Не удалось получить данные документа " + Элемент.ТекущаяОбласть.Расшифровка);
			Возврат;			
		КонецПопытки;
		
		Телеметрия.ОтправитьАналитику(
			СобытияТелеметрии.Просмотр.ПросмотрСвязи,
			ЭтаФорма,
			Элемент
		);
				
		Форма_КарточкаЭД = ПолучитьФорму("Форма_КарточкаЭД", , Syn_Документ.Id);
		
		ПараметрыФормы = Форма_КарточкаЭД.Новый_Параметрыформы(
			Syn_Документ.Id, 
			(СвязанныйДокументИнфо.To = Syn_ЯщикОрганизации)
		);
		Форма_КарточкаЭД.УстановитьПараметрыФормы(ПараметрыФормы);
		
		Форма_КарточкаЭД.Открыть();
		
	КонецЕсли;
 	
КонецПроцедуры


Функция ЭтоСтартДокументооборота(DocumentEntry)
	
	СтартовыеТипыДокументооборота = Новый Соответствие;
	СтартовыеТипыДокументооборота.Вставить("SentSigned", Истина);
	СтартовыеТипыДокументооборота.Вставить("SentUnsigned", Истина);
	СтартовыеТипыДокументооборота.Вставить("SentInternal", Истина);
	
	Результат = ?(
		СтартовыеТипыДокументооборота[DocumentEntry.FlowType] = Истина,
		Истина,
		Ложь
	);
	
	Возврат Результат;
	
КонецФункции

// TODO: Переписать метод полностью, выделить вывод блока истории и покраску статусов
Процедура ЗаполнитьДокументооборот(ДанныеЭД, Пересланный = Ложь)
	
	Тип_OrganizationByCriteria = ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "OrganizationByCriteria");
	Тип_OrganizationByCriteriaValues = ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "OrganizationByCriteriaValues");
	OrganizationByCriteria = Тип_OrganizationByCriteria.Фасеты[2].Значение; 
	OrganizationByCriteriaValues = ФабрикаСервиса.Создать(Тип_OrganizationByCriteriaValues);

	OrganizationByCriteriaValues.BoxAddress = ДанныеЭД.From;
	ОтправительПредставление = ExchangeService.GetOrganizationBy(Токен, Syn_ЯщикОрганизации, OrganizationByCriteria, OrganizationByCriteriaValues);
	
	ТабДок = ЭлементыФормы.ТабДокументооборот;
	ТабДок.Очистить();
	
	Макет 							= ПолучитьМакет("Документооборот");
	ОбластьЗаголовокОтправитель		= Макет.ПолучитьОбласть("ОбластьЗаголовокОтправитель");
	ОбластьЗаголовокПолучатель		= Макет.ПолучитьОбласть("ОбластьЗаголовокПолучатель");
	ОбластьСтрокаОтправитель		= Макет.ПолучитьОбласть("ОбластьСтрокаОтправитель");
	ОбластьСтрокаПолучатель			= Макет.ПолучитьОбласть("ОбластьСтрокаПолучатель");
	ОбластьКомментарийОтправитель	= Макет.ПолучитьОбласть("ОбластьКомментарийОтправитель");
	ОбластьКомментарийПолучатель	= Макет.ПолучитьОбласть("ОбластьКомментарийПолучатель");
	ОбластьСтатусДокумента			= Макет.ПолучитьОбласть("ОбластьСтатусДокумента");
	ОбластьДопСтатусДокумента		= Макет.ПолучитьОбласть("ОбластьДопСтатусДокумента");
	ОбластьСвязанные				= Макет.ПолучитьОбласть("СвязанныеДокументы");
	ОбластьСтрокаСвяз				= Макет.ПолучитьОбласть("СтрокаСвязанные");

	
	ТЗ_Получатели = Новый ТаблицаЗначений;
	ТЗ_Получатели.Колонки.Добавить("СтатусПолучатель");
	ТЗ_Получатели.Колонки.Добавить("ЗначениеПолучатель");
	ТЗ_Получатели.Колонки.Добавить("КомментарийПолучатель"); 
	
	//Выводим получателей
	ОбластьЗаголовокОтправитель.Параметры.ЗаголовокОтправитель = "Отправлен";
	ТабДок.Вывести(ОбластьЗаголовокОтправитель);
	
	Для Каждого Вхождение Из ДанныеЭД.Entries.DocumentEntry Цикл
		Если Вхождение.OrganizationBox = ОтправительПредставление.BoxAddress Тогда
			СтатусОтправитель = СоответствиеСтатусовПодписанияСимволу.Получить(Вхождение.FlowType); 
		КонецЕсли;
	КонецЦикла;
	
	ОбластьСтрокаОтправитель.Параметры.СтатусОтправитель 	= СтатусОтправитель;
	ОбластьСтрокаОтправитель.Параметры.ЗначениеОтправитель 	= ОтправительПредставление.LegalName;
	
	//Красим статусы
	Если СтатусОтправитель = "[x]" Тогда
		ОбластьСтрокаОтправитель.Области.СтатусОтправителя.ЦветТекста = WebЦвета.Красный;
	ИначеЕсли СтатусОтправитель = "[v]" Тогда
		ОбластьСтрокаОтправитель.Области.СтатусОтправителя.ЦветТекста = WebЦвета.Зеленый;
	ИначеЕсли СтатусОтправитель = "[?]" Тогда
		ОбластьСтрокаОтправитель.Области.СтатусОтправителя.ЦветТекста = WebЦвета.Синий;
	Иначе
		ОбластьСтрокаОтправитель.Области.СтатусОтправителя.ЦветТекста = WebЦвета.Черный;				
	КонецЕсли;         
	
	ТабДок.Вывести(ОбластьСтрокаОтправитель);
	
	// Комментарий к первой отправке
	Для Каждого Элем Из ДанныеЭД.Entries.DocumentEntry Цикл
		Если (Элем.FlowType = "SentSigned" ИЛИ Элем.FlowType = "SentUnsigned") Тогда
			ОбластьКомментарийОтправитель.Параметры.КомментарийОтправитель = Элем.Comment;
			ТабДок.Вывести(ОбластьКомментарийОтправитель);
        	Прервать;	
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ДанныеЭД.Recipients = Неопределено Тогда
		
		ОбластьЗаголовокПолучатель.Параметры.ЗаголовокПолучатель = ?(ДанныеЭД.Recipients.MessageRecipientWithStatus.Количество() > 1, "Получатели", "Получатель");
		ТабДок.Вывести(ОбластьЗаголовокПолучатель);
		
		Для Каждого Получатель Из ДанныеЭД.Recipients.MessageRecipientWithStatus Цикл
			НовСтр = ТЗ_Получатели.Добавить();
			
			Если НЕ ТипЭД = "Неформализованный" Тогда
				// TODO: Разобраться с переменной СтатусПолучателя и СтатусПолучатель, не понятно её назначение.
				СтатусПолучателя = Неопределено;
				СтатусПолучатель = СоответствиеСтатусовПодписанияСимволу.Получить(СтатусПолучателя);
			Иначе
				СтатусПолучателя = СоответствиеСтатусовПодписания_1С_Synerdocs.Получить(Получатель.Status.SignStatus);  
				СтатусПолучатель = СоответствиеСтатусовПодписанияСимволу.Получить(СтатусПолучателя);
			КонецЕсли;
			
			//Комментарий при отказе
			Для Каждого СервисныйДокумент Из ДанныеЭД.ServiceDocuments.ServiceDocument Цикл
				Если СервисныйДокумент.DocumentType	= "ServiceAmendmentRequest"
						ИЛИ СервисныйДокумент.DocumentType = "ServiceInvoiceAmendmentRequest"
						ИЛИ ОбъектнаяМодель.ЭтоТитулПокупателя(СервисныйДокумент.DocumentTypeEnum.Code) Тогда
					
					Если Получатель.OrganizationBoxId = СервисныйДокумент.From Тогда
						Если ЗначениеЗаполнено(СервисныйДокумент.Comment) Тогда
							НовСтр.КомментарийПолучатель = СервисныйДокумент.Comment;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
						
			OrganizationByCriteriaValues.BoxAddress = Получатель.OrganizationBoxId;
			ПолучательПредставление = ExchangeService.GetOrganizationBy(Токен, Syn_ЯщикОрганизации, OrganizationByCriteria, OrganizationByCriteriaValues);
			
			НовСтр.СтатусПолучатель = СтатусПолучатель;
			Если ПолучательПредставление.OrganizationType = "Individual" Тогда
				НовСтр.ЗначениеПолучатель = ПолучательПредставление.Name;
			Иначе
				НовСтр.ЗначениеПолучатель = ПолучательПредставление.LegalName;
			КонецЕсли;
			
			ОбластьСтрокаПолучатель.Параметры.Заполнить(НовСтр);
			
			//Красим статусы
			Если НовСтр.СтатусПолучатель = "[x]" Тогда
				ОбластьСтрокаПолучатель.Области.СтатусПолучателя.ЦветТекста = WebЦвета.Красный;
			ИначеЕсли НовСтр.СтатусПолучатель = "[v]" Тогда
				ОбластьСтрокаПолучатель.Области.СтатусПолучателя.ЦветТекста = WebЦвета.Зеленый;
			ИначеЕсли НовСтр.СтатусПолучатель = "[?]" Тогда
				ОбластьСтрокаПолучатель.Области.СтатусПолучателя.ЦветТекста = WebЦвета.Синий;
			Иначе
				ОбластьСтрокаПолучатель.Области.СтатусПолучателя.ЦветТекста = WebЦвета.Черный;				
			КонецЕсли;
						
			ТабДок.Вывести(ОбластьСтрокаПолучатель);
			
			Если ЗначениеЗаполнено(НовСтр.КомментарийПолучатель) Тогда
				ОбластьКомментарийПолучатель.Параметры.Заполнить(НовСтр);
				ТабДок.Вывести(ОбластьКомментарийПолучатель);
			КонецЕсли;
									
		КонецЦикла;
	Иначе //отправлен док. без подписи
		ОбластьЗаголовокПолучатель.Параметры.ЗаголовокПолучатель = ?(ДанныеЭД.Flows.DocumentFlow.Количество() > 1, "Получатели", "Получатель");
		ТабДок.Вывести(ОбластьЗаголовокПолучатель);
		
		Для Каждого Получатель Из ДанныеЭД.Flows.DocumentFlow Цикл
			СтатусПолучатель = СоответствиеСтатусовПодписания_1С_Synerdocs.Получить(Получатель.RecipientStatus);
			СтатусПолучатель = СоответствиеСтатусовПодписанияСимволу.Получить(СтатусПолучатель);
			
			OrganizationByCriteriaValues.BoxAddress = Получатель.RecipientOrganization.BoxAddress;
			ПолучательПредставление = ExchangeService.GetOrganizationBy(Токен, Syn_ЯщикОрганизации, OrganizationByCriteria, OrganizationByCriteriaValues);
			
			ОбластьСтрокаПолучатель.Параметры.СтатусПолучатель 		= СтатусПолучатель;
			ОбластьСтрокаПолучатель.Параметры.ЗначениеПолучатель	= ПолучательПредставление.LegalName;
			
			//Красим статусы
			Если СтатусПолучатель = "[x]" Тогда
				ОбластьСтрокаПолучатель.Области.СтатусПолучателя.ЦветТекста = WebЦвета.Красный;
			ИначеЕсли СтатусПолучатель = "[v]" Тогда
				ОбластьСтрокаПолучатель.Области.СтатусПолучателя.ЦветТекста = WebЦвета.Зеленый;
			ИначеЕсли СтатусПолучатель = "[?]" Тогда
				ОбластьСтрокаПолучатель.Области.СтатусПолучателя.ЦветТекста = WebЦвета.Синий;
			Иначе
				ОбластьСтрокаПолучатель.Области.СтатусПолучателя.ЦветТекста = WebЦвета.Черный;				
			КонецЕсли;
			
			ТабДок.Вывести(ОбластьСтрокаПолучатель);
           			
		КонецЦикла;
	КонецЕсли;
	
	ЭтоСФ = Найти(ДанныеЭД.Document.DocumentType, "Invoice") > 0;
		
	// FIXME: Временное решение проблемы с выводом статуса
	СтатусПервойОтправки = "";
	Для Каждого Вхождение Из ДанныеЭД.Entries.DocumentEntry Цикл
		
		Если ЭтоСтартДокументооборота(Вхождение) Тогда
			СтатусПервойОтправки = Вхождение.DocumentFlowStatusDescription.Status;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ОбластьСтатусДокумента.Параметры.СтатусДокумента 	= СтатусПервойОтправки;
     	
	//Покрасим статус
	Если Найти(СтатусПервойОтправки, "Подписан") > 0 Тогда
		ОбластьСтатусДокумента.Области.СтатусДокумента.ЦветТекста = WebЦвета.Зеленый;
	ИначеЕсли СтатусПервойОтправки = "Отказано" ИЛИ Найти(СтатусПервойОтправки, "уточнение") > 0 Тогда
		ОбластьСтатусДокумента.Области.СтатусДокумента.ЦветТекста = WebЦвета.Красный;
	ИначеЕсли СтатусПервойОтправки = "Требуется подпись" Тогда
		ОбластьСтатусДокумента.Области.СтатусДокумента.ЦветТекста = WebЦвета.Синий;
	Иначе
		ОбластьСтатусДокумента.Области.ОбластьСтатусДокумента.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;		
		
	ТабДок.Вывести(ОбластьСтатусДокумента);
	
	ОбластьДопСтатусДокумента.Параметры.ДопСтатусДокумента = ДанныеЭД.DocumentFlowStatusDescription.AdditionalStatus;
	ТабДок.Вывести(ОбластьДопСтатусДокумента);
	
	// История согласований
	Если ДанныеЭД.Tags.DocumentTag.Количество() > 0 Тогда
		ОбластьЗаголовокСогласование 	= Макет.ПолучитьОбласть("ОбластьЗаголовокСогласование");
		ОбластьСтрокаСогласование 		= Макет.ПолучитьОбласть("ОбластьСтрокаСогласование");
		
		ТабДок.Вывести(ОбластьЗаголовокСогласование);
		
		Для Каждого Тег Из  ДанныеЭД.Tags.DocumentTag Цикл
			//  TODO: ждем когда запилят в API, пока выводим логин согласующего
			//	СогласущаяОрганизация = ExchangeService.GetOrganizationBy(Токен, Тег.OrganizationBoxId, OrganizationByCriteria, OrganizationByCriteriaValues);
			СогласущаяОрганизация = Тег.Login;
			
			ОбластьСтрокаСогласование.Параметры.СтатусСогласование 		= СоответствиеСтатусовСогласования_Synerdocs.Получить(Тег.TagType);
			ОбластьСтрокаСогласование.Параметры.КемСогласование			= СогласущаяОрганизация;
			ОбластьСтрокаСогласование.Параметры.ДатаСобытия				= ДатаВремяUTC(Тег.CreateDate);
			ОбластьСтрокаСогласование.Параметры.КомментарийСогласование = Тег.Comment;
			
			ОбластьСтрокаСогласование.Области.СтатусСогласование.ЦветТекста = ?(Тег.TagType = "Approved", WebЦвета.Зеленый, WebЦвета.Красный);
			
			ТабДок.Вывести(ОбластьСтрокаСогласование);
						
		КонецЦикла;
	КонецЕсли;
	
	//Пересылка 
	Для Каждого Вхождение Из ДанныеЭД.Entries.DocumentEntry Цикл
		Если Вхождение.FlowType = "SentForward" Тогда
			
			ОбластьЗаголовокОтправитель.Параметры.ЗаголовокОтправитель = "Переслан";
			ТабДок.Вывести(ОбластьЗаголовокОтправитель);
			
			СтатусОтправитель = СоответствиеСтатусовПодписанияСимволу.Получить(Вхождение.FlowType);
			
			ОбластьСтрокаОтправитель.Параметры.СтатусОтправитель 	= СтатусОтправитель;
			ОбластьСтрокаОтправитель.Параметры.ЗначениеОтправитель 	= Вхождение.Flows.DocumentFlow[0].SenderOrganization.LegalName;
			
			//Красим статусы
			Если СтатусОтправитель = "[x]" Тогда
				ОбластьСтрокаОтправитель.Области.СтатусОтправителя.ЦветТекста = WebЦвета.Красный;
			ИначеЕсли СтатусОтправитель = "[v]" Тогда
				ОбластьСтрокаОтправитель.Области.СтатусОтправителя.ЦветТекста = WebЦвета.Зеленый;
			ИначеЕсли СтатусОтправитель = "[?]" Тогда
				ОбластьСтрокаОтправитель.Области.СтатусОтправителя.ЦветТекста = WebЦвета.Синий;
			Иначе
				ОбластьСтрокаОтправитель.Области.СтатусОтправителя.ЦветТекста = WebЦвета.Черный;				
			КонецЕсли;
            			
			ТабДок.Вывести(ОбластьСтрокаОтправитель);
			
			Если ЗначениеЗаполнено(Вхождение.Comment) Тогда
				ОбластьКомментарийОтправитель.Параметры.КомментарийОтправитель = Вхождение.Comment;
				ТабДок.Вывести(ОбластьКомментарийОтправитель);
            КонецЕсли;
						
			ОбластьЗаголовокПолучатель.Параметры.ЗаголовокПолучатель = ?(Вхождение.Flows.DocumentFlow.Количество() > 1, "Получатели", "Получатель");
			
			ТабДок.Вывести(ОбластьЗаголовокПолучатель);
			
			МассивСтатусов = Новый Массив;
						
			Для Каждого Получатель Из Вхождение.Flows.DocumentFlow Цикл
				
				СтатусПолучателяДляДокументаоборота = СоответствиеСтатусовПодписания_1С_Synerdocs.Получить(Получатель.RecipientStatus);
				
				СтатусПолучатель 					= СоответствиеСтатусовПодписанияСимволу.Получить(СтатусПолучателяДляДокументаоборота);
				ЗначениеПолучатель 					= Получатель.RecipientOrganization.LegalName;
				
				ОбластьСтрокаПолучатель.Параметры.СтатусПолучатель = СтатусПолучатель;
				ОбластьСтрокаПолучатель.Параметры.ЗначениеПолучатель = ЗначениеПолучатель;
				
				//Красим статусы
				Если СтатусПолучатель = "[x]" Тогда
					ОбластьСтрокаПолучатель.Области.СтатусПолучателя.ЦветТекста = WebЦвета.Красный;
				ИначеЕсли СтатусПолучатель = "[v]" Тогда
					ОбластьСтрокаПолучатель.Области.СтатусПолучателя.ЦветТекста = WebЦвета.Зеленый;
				ИначеЕсли СтатусПолучатель = "[?]" Тогда
					ОбластьСтрокаПолучатель.Области.СтатусПолучателя.ЦветТекста = WebЦвета.Синий;
				Иначе
					ОбластьСтрокаПолучатель.Области.СтатусПолучателя.ЦветТекста = WebЦвета.Черный;				
				КонецЕсли;

				ТабДок.Вывести(ОбластьСтрокаПолучатель);
				
				Если ЗначениеЗаполнено(Получатель.Comment) Тогда
					ОбластьКомментарийПолучатель.Параметры.КомментарийПолучатель = Получатель.Comment;
					ТабДок.Вывести(ОбластьКомментарийПолучатель);
				КонецЕсли;
								
				МассивСтатусов.Добавить(СтатусПолучателяДляДокументаоборота);
				
			КонецЦикла;
			
			СтатусДокументооборота = "";
			//Определим статус при множ. пересылке
			Если МассивСтатусов.Количество() = 1 Тогда
				СтатусДокументооборота = МассивСтатусов[0];
			Иначе
				Если НЕ МассивСтатусов.Найти("Отказано") = Неопределено Тогда
					СтатусДокументооборота = "Отказано";
				Иначе
					Если НЕ МассивСтатусов.Найти("Требуется подпись") = Неопределено И
						НЕ МассивСтатусов.Найти("Подписан") = Неопределено Тогда
						
						КоличествоПодписавших 	= 0;
						КоличествоОжидается		= 0;
						
						Для Каждого ЭлементМассива Из МассивСтатусов Цикл
							Если ЭлементМассива = "Подписан" Тогда
								КоличествоПодписавших = КоличествоПодписавших + 1;
							ИначеЕсли ЭлементМассива = "Требуется подпись" Тогда
								КоличествоОжидается = КоличествоОжидается + 1;
							КонецЕсли;
						КонецЦикла;
						
						Если КоличествоПодписавших = МассивСтатусов.Количество() Тогда
							СтатусДокументооборота = "Подписан";
						ИначеЕсли КоличествоОжидается = МассивСтатусов.Количество() Тогда
							СтатусДокументооборота = "Требуется подпись";
						Иначе
							СтатусДокументооборота = "Подписан " + КоличествоПодписавших + " из " + МассивСтатусов.Количество();
						КонецЕсли;
					ИначеЕсли МассивСтатусов.Найти("Подписан") = Неопределено И 
						НЕ МассивСтатусов.Найти("Требуется подпись") = Неопределено Тогда
						СтатусДокументооборота = "Требуется подпись";	
					Иначе
						СтатусДокументооборота = "Подпись не требуется";
					КонецЕсли;						
				КонецЕсли;
			КонецЕсли;
			
			ОбластьСтатусДокумента.Параметры.СтатусДокумента = СтатусДокументооборота;
			
			//Покрасим статус
			Если Найти(СтатусДокументооборота, "Подписан") > 0 Тогда
				ОбластьСтатусДокумента.Области.СтатусДокумента.ЦветТекста = WebЦвета.Зеленый;
			ИначеЕсли СтатусДокументооборота = "Отказано" ИЛИ Найти(СтатусДокументооборота, "уточнение") > 0 Тогда
				ОбластьСтатусДокумента.Области.СтатусДокумента.ЦветТекста = WebЦвета.Красный;
			ИначеЕсли СтатусДокументооборота = "Требуется подпись" Тогда
				ОбластьСтатусДокумента.Области.СтатусДокумента.ЦветТекста = WebЦвета.Синий;
			Иначе
				ОбластьСтатусДокумента.Области.СтатусДокумента.ЦветТекста = WebЦвета.Черный;
			КонецЕсли;		
             			
			ТабДок.Вывести(ОбластьСтатусДокумента);
									
		КонецЕсли;
	КонецЦикла;
	
	Если ТЗ_СвязанныеДокументы.Количество() > 0 Тогда
		ТабДок.Вывести(ОбластьСвязанные);
		
		Для Каждого ТекСтрока Из ТЗ_СвязанныеДокументы Цикл
			ОбластьСтрокаСвяз.Параметры.Заполнить(ТекСтрока);
			ТабДок.Вывести(ОбластьСтрокаСвяз);
		КонецЦикла;	
	КонецЕсли;
		
КонецПроцедуры

Процедура УдалитьОтметкуБГУ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) КАК ЛокальныйИД,
		|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 38, 36) КАК СервисныйИД,
		|	ЗначенияСвойств.Ссылка
		|ИЗ
		|	Справочник.ЗначенияСвойств КАК ЗначенияСвойств
		|ГДЕ
		|	ЗначенияСвойств.ПометкаУдаления = ЛОЖЬ
		|	И ПОДСТРОКА(ЗначенияСвойств.Наименование, 38, 36) = &ИдДокумента";
	Запрос.УстановитьПараметр("ИдДокумента", ИдДокумента);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		СправочникОбъект = Результат.Ссылка.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина, Истина);
		СправочникОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры


Процедура ИзвлечьПараметры()
	
	Если _Параметры = Неопределено Тогда
		ВызватьИсключение "Ошибка инициализации формы, не указаны параметры!";
	КонецЕсли;
	
	ИдДокумента	= _Параметры.ИдДокумента;
	ЭтоВходящий	= _Параметры.ЭтоВходящий;
	
КонецПроцедуры

Процедура УстановитьПараметрыФормы(Параметры) Экспорт
	
	_Параметры = Параметры;
	
КонецПроцедуры

Функция Новый_ПараметрыФормы(ИдДокумента, ЭтоВходящий) Экспорт
	
	Параметры = Новый Структура(
		"ИдДокумента, ЭтоВходящий"
	);
	
	Параметры.ИдДокумента	= ИдДокумента;
	Параметры.ЭтоВходящий	= ЭтоВходящий;
	
	Параметры = Новый ФиксированнаяСтруктура(Параметры);
	
	Возврат Параметры;
	
КонецФункции

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбновитьСодержимое = Ложь;
	
	События = ОперацииСДокументами.События();
	Если ИмяСобытия = События.ДокументПодписан Тогда
		
		ИдПодписанногоДокумента = Параметр;
		
		ОбновитьСодержимое = (ИдДокумента = ИдПодписанногоДокумента);
		
	ИначеЕсли ИмяСобытия = События.РазорванаСвязь Тогда
		
		ИдИзменившихсяДокументов = Параметр; //: ИдДокументов = Новый Массив;
		
		ОбновитьСодержимое = (ИдИзменившихсяДокументов.Найти(ИдДокумента) <> Неопределено);
		
	КонецЕсли;
	
	Если ОбновитьСодержимое Тогда
		ПриОткрытии();
	КонецЕсли;
	
КонецПроцедуры
