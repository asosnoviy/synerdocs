
// Модули
Перем ОбъектнаяМодель;
Перем Сервис, Криптография, МенеджерНастроек;


Процедура ПодключитьМодули()
	
	ОбъектнаяМодель		= Модуль("Модуль_ОбъектнаяМодель");
	Сервис				= Модуль("Модуль_Сервис");
	Криптография		= Модуль("Модуль_Криптография");
	МенеджерНастроек	= Модуль("Модуль_МенеджерНастроек");
	
КонецПроцедуры

Процедура Инициализировать() Экспорт
	
	ПодключитьМодули();
	
КонецПроцедуры

//{ TODO: Заменить на что-нибудь более пристойное

Процедура Печать_Врем(ПолеТабличногоДокумента, FullDocumentInfo) Экспорт
	
	ТипыДокументов = ОбъектнаяМодель.ТипыДокументов();
	
	ТипДокумента = ЗначениеПеречисления(FullDocumentInfo.Document.DocumentTypeEnum);
	
	Подписи = Новый Массив;
	Для Каждого Sign Из FullDocumentInfo.Signs.Sign Цикл
		
		Подпись = Новый_Подпись();
		
		Подпись.Дата = Sign.SentDate;
		Подпись.ЭтоОтказ = Ложь;
		
		Попытка
			Сертификат = Криптография.СертификатПодписи(Sign.Raw);
		Исключение
			Сертификат = Неопределено;
		КонецПопытки;
		Подпись.Сертификат = Сертификат;
		
		Подписи.Добавить(Подпись);
		
	КонецЦикла;
	
	ТипТитулаПокупателя = ОбъектнаяМодель.ТипТитулаПокупателя(ТипДокумента);
	ТипОтказа = ТипОтказа(ТипДокумента);
	
	DocumentBuyer = Неопределено;
	
	Для Каждого ServiceDocument Из FullDocumentInfo.ServiceDocuments.ServiceDocument Цикл
		
		ТипСлужебногоДокумента = ЗначениеПеречисления(ServiceDocument.DocumentTypeEnum);
		Если ТипСлужебногоДокумента = ТипТитулаПокупателя ИЛИ ТипСлужебногоДокумента = ТипОтказа Тогда
			
			Подпись = Новый_Подпись();
			
			Подпись.Дата = ServiceDocument.SignDate;
			Подпись.ЭтоОтказ = (ТипСлужебногоДокумента = ТипОтказа);
			
			// TODO: Возможно стоит перенести обработку исключения в модуль криптографии
			Попытка
				Сертификат = Криптография.СертификатПодписи(ServiceDocument.SignRaw);
			Исключение
				Сертификат = Неопределено;
			КонецПопытки;
			Подпись.Сертификат = Сертификат;
			
			Подписи.Добавить(Подпись);
			
		КонецЕсли;
		
		Если ТипСлужебногоДокумента = ТипТитулаПокупателя Тогда
			DocumentBuyer = ServiceDocument;
		КонецЕсли;
		
	КонецЦикла;
	
	ИдентификацияДокумента = Новый_ИдентификацияДокумента();
	ИдентификацияДокумента.ИД = FullDocumentInfo.Document.Id;
	ИдентификацияДокумента.ДатаОтправки = FullDocumentInfo.Document.SentDate;
	ИдентификацияДокумента.Подписи = Подписи;
	
	ТитулПродавца = Сервис.ДокументВМодель(ТипДокумента, FullDocumentInfo.Document.Content);
	Если DocumentBuyer <> Неопределено Тогда
		ТитулПокупателя = Сервис.ДокументВМодель(ТипТитулаПокупателя, DocumentBuyer.Content);
	КонецЕсли;
	
	//: ПолеТабличногоДокумента = Новый ТабличныйДокумент;
	Если ОбъектнаяМодель.ЭтоТитулПродавцаУПД(ТипДокумента) Тогда
		ПечатныйДокумент = Печать_УПД(ТитулПродавца, ТитулПокупателя);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПродавцаУКД(ТипДокумента) Тогда
		ПечатныйДокумент = Печать_УКД(ТитулПродавца, ТитулПокупателя);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулПродавцаДПТ(ТипДокумента) Тогда
		ПечатныйДокумент = Печать_ДПТ(ТитулПродавца, ТитулПокупателя);
	ИначеЕсли ОбъектнаяМодель.ЭтоТитулИсполнителяДПРР(ТипДокумента) Тогда
		ПечатныйДокумент = Печать_ДПРР(ТитулПродавца, ТитулПокупателя);
	Иначе
		ВызватьИсключение "Не реализовано";
	КонецЕсли;
	
	//: ПечатныйДокумент = Новый ТабличныйДокумент;
	ВывестиИдентификаторыДокумента(ПечатныйДокумент, ИдентификацияДокумента);
	
	ЗаполнитьЗначенияСвойств(
		ПолеТабличногоДокумента, ПечатныйДокумент,
		"ПолеСверху, ПолеСнизу, ПолеСлева, ПолеСправа,
		|ОриентацияСтраницы,
		|АвтоМасштаб,
		|РазмерКолонтитулаСнизу, РазмерКолонтитулаСверху"
	);
	
	ПолеТабличногоДокумента.ВставитьОбласть(ПечатныйДокумент.Область());
	ПолеТабличногоДокумента.КлючПараметровПечати = ПечатныйДокумент.КлючПараметровПечати;
	
КонецПроцедуры

Функция Новый_Подпись()
	
	Подпись = Новый Структура(
		"Дата, Сертификат, ЭтоОтказ"
	);
	
	Возврат Подпись;
	
КонецФункции

Функция ЗначениеПеречисления(EnumValue)
	
	Если EnumValue = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = EnumValue.Code;
	
	Возврат Значение;
	
КонецФункции

Функция ТипОтказа(ТипТитулаПродавца)
	
	ТипыДокументов = ОбъектнаяМодель.ТипыДокументов();
	
	Отказы = Новый Соответствие;
	
	Отказы[ТипыДокументов.ТитулПродавцаУПД]					= ТипыДокументов.УОУРегламентСФ;
	Отказы[ТипыДокументов.ИсправленныйТитулПродавцаУПД]		= ТипыДокументов.УОУРегламентСФ;
	
	Отказы[ТипыДокументов.ТитулПродавцаУКД]					= ТипыДокументов.УОУРегламентСФ;
	Отказы[ТипыДокументов.ИсправленныйТитулПродавцаУКД]		= ТипыДокументов.УОУРегламентСФ;
	
	Отказы[ТипыДокументов.ТитулИсполнителяДПРР]				= ТипыДокументов.УОУОбщийРегламент;
	Отказы[ТипыДокументов.ИсправленныйТитулИсполнителяДПРР]	= ТипыДокументов.УОУОбщийРегламент;
	
	Отказы[ТипыДокументов.ТитулПродавцаДПТ]					= ТипыДокументов.УОУОбщийРегламент;
	Отказы[ТипыДокументов.ИсправленныйТитулПродавцаДПТ]		= ТипыДокументов.УОУОбщийРегламент;
	
	Результат = Отказы[ТипТитулаПродавца];
	
	Возврат Результат;
	
КонецФункции

//}

//========================================================================
// Формирование печатных форм
//========================================================================

Функция Печать_УПД(ТитулПродавца, ТитулПокупателя = Неопределено)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.ПолеСверху	= 0;
	ТабДок.ПолеСнизу	= 0;
	ТабДок.ПолеСлева	= 0;
	ТабДок.ПолеСправа	= 0;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Synerdocs_УПД";
	
	Макет = ПолучитьМакет("УПД");
	
	ИнформацияПродавца = ТитулПродавца.ИнформацияПродавца;
	ИнформацияПокупателя = ?(ТитулПокупателя <> Неопределено, ТитулПокупателя.ИнформацияПокупателя, Неопределено);
	
	ВывестиУступочнуюНадпись(ТабДок, Макет, ТитулПродавца.Фактор);
	
	//{ Шапка
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	Параметры = ОбластьШапка.Параметры;
	
	Параметры.ЗаголовокДокумента = ТитулПродавца.Описание.Наименование;
	
	ВидыУПД = ОбъектнаяМодель.ВидыУПД();
	Параметры.ВидДокумента = ПредставлениеПеречисления(ВидыУПД, ТитулПродавца.ВидДокумента);
	
	Параметры.Номер				= ТитулПродавца.Описание.Номер;
	Параметры.Дата				= ТитулПродавца.Описание.Дата;
	Параметры.НомерИсправления	= ТитулПродавца.Описание.ИсправлениеНомер;
	Параметры.ДатаИсправления	= ТитулПродавца.Описание.ИсправлениеДата;
	ЗаполнитьПустыеПараметрыПрочерками(Параметры, "НомерИсправления, ДатаИсправления");
	
	ПоляУчастниковСделки	= "Наименование, СвидетельствоОРегистрацииИП, КонтактнаяИнформация, БанковскийСчет, ДопИнфо, Подразделение, ИнформацияДляУчастников, ОКПО";
	ПоляГрузообработчиков	= "Наименование, ИннКпп, СвидетельствоОРегистрацииИП, Адрес, КонтактнаяИнформация, БанковскийСчет, ДопИнфо, Подразделение, ИнформацияДляУчастников, ОКПО";
	
	Параметры.ПродавецПредставление	= Контрагент(ТитулПродавца.Продавец, ПоляУчастниковСделки);
	Параметры.ПродавецАдрес			= АдресКонтрагента(ТитулПродавца.Продавец);
	Параметры.ПродавецИннКпп		= ИннКппКонтрагента(ТитулПродавца.Продавец);
	
	Параметры.ПокупательПредставление	= Контрагент(ТитулПродавца.Покупатель, ПоляУчастниковСделки);
	Параметры.ПокупательАдрес			= АдресКонтрагента(ТитулПродавца.Покупатель);
	Параметры.ПокупательИннКпп			= ИннКппКонтрагента(ТитулПродавца.Покупатель);
	
	Параметры.ГрузоотправительПредставление	= Контрагент(ТитулПродавца.Грузоотправитель, ПоляГрузообработчиков);
	Параметры.ГрузополучательПредставление	= Контрагент(ТитулПродавца.Грузополучатель, ПоляГрузообработчиков);
	
	Параметры.ПлатежныйДокумент		= ПлатежноРасчетныеДокументы(ТитулПродавца.ПлатежноРасчетныеДокументы);
	Параметры.ВалютаПредставление	= Валюта(ТитулПродавца.Валюта, "Наименование, Код");
	Параметры.ИдГосКонтракта		= ТитулПродавца.ИдГосКонтракта;
	
	Параметры.ДопИнфо = ИнфПоле(ТитулПродавца.ИнфПоле);
	
	ТабДок.Вывести(ОбластьШапка);
	
	//}
	
	//{ Табличная часть
	
	ПризнакиТМЦ = ОбъектнаяМодель.ПризнакиТМЦ();
	СтавкиНДС = ОбъектнаяМодель.СтавкиНДС();
	
	Нпп = 0;
	Для Каждого СтрокаТЧ Из ТитулПродавца.ТМЦ.ТабличнаяЧасть Цикл
	
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТЧ");
		Параметры = ОбластьСтрока.Параметры;
		
		Нпп = Нпп + 1;
		
		Параметры.НомерСтр = Нпп;
		
		Параметры.Признак				= ПредставлениеПеречисления(ПризнакиТМЦ, СтрокаТЧ.Признак);
		Параметры.Код					= СтрокаТЧ.Код;
		Параметры.Наименование			= СтрокаТЧ.Наименование;
		
		Параметры.КодЕИ					= СтрокаТЧ.ЕИКод;
		Параметры.ЕИ					= СтрокаТЧ.ЕИНаименование;
		
		Параметры.КоличествоОтгрузить	= СтрокаТЧ.КоличествоОтпустить;
		Параметры.Количество			= СтрокаТЧ.Количество;
		
		Параметры.Цена					= СтрокаТЧ.Цена;
		Параметры.СтавкаНДС				= ПредставлениеПеречисления(СтавкиНДС, СтрокаТЧ.СтавкаНДС);
		Параметры.СуммаБезНДС			= СтрокаТЧ.СуммаБезНДС;
		Параметры.СуммаНДС				= СтрокаТЧ.СуммаНДС;
		Параметры.СуммаСНДС				= СтрокаТЧ.СуммаСНДС;
		Параметры.Акциз					= Акциз(СтрокаТЧ.Акциз);
		
		Параметры.КодСтраны				= СтрокаТЧ.КодСтраны;
		Параметры.Страна				= СтрокаТЧ.СтранаПроисхождения;
		Параметры.НомерГТД				= СтрокаТЧ.НомерГТД;
		
		Параметры.ДопИнфо				= ИнфПоле(СтрокаТЧ.ИнфПоле);
		
		ЗаполнитьПустыеПараметрыПрочерками(Параметры);
		
		ТабДок.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	//}
	
	//{ Подвал счет-фактуры
	
	ОбластьПодвалСФ = Макет.ПолучитьОбласть("ПодвалСФ");
	Параметры = ОбластьПодвалСФ.Параметры;
	
	Итого = ТитулПродавца.ТМЦ.Итого;
	Параметры.ИтогоБезНДС	= Итого.СуммаБезНДС;
	Параметры.ИтогоНДС		= Итого.СуммаНДС;
	Параметры.ИтогоСНДС		= Итого.СуммаСНДС;
	
	ЗаполнитьПустыеПараметрыПрочерками(Параметры, "ИтогоБезНДС, ИтогоНДС, ИтогоСНДС");
	
	Руководитель	= ОбъектнаяМодель.Руководитель(ИнформацияПродавца.Подписанты);
	ИП				= ОбъектнаяМодель.ИндивидуальныйПредприниматель(ИнформацияПродавца.Подписанты);
	
	Если Руководитель <> Неопределено Тогда
		Параметры.ФИОРуководителя = ФИО(Руководитель.ФИО);
	КонецЕсли;
	
	Если ИП <> Неопределено Тогда
		Параметры.ФИОИП		= ФИО(ИП.ФИО);
		Параметры.РегСведИП	= ИП.СвидетельствоОРегистрацииИП;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьПодвалСФ);
	
	//}
	
	//{ Подвал документа передачи товаров
	
	ОбластьПодвалТН = Макет.ПолучитьОбласть("ПодвалТН");
	Параметры = ОбластьПодвалТН.Параметры;
	
	Параметры.ОснованиеСделки = ДокументыОснования(ТитулПродавца.Основание);
	
	Перевозчик = Контрагент(ТитулПродавца.Перевозчик, ПоляГрузообработчиков);
	ИнформацияОТранспортировке = СтрПредставление(", ",
		ТитулПродавца.СведенияОТранспортировке,,
		Перевозчик,,
		ТранспортныеНакладные(ТитулПродавца.ТранспортныеНакладные)
	);
	Параметры.ИнформацияОТранспортировке = ИнформацияОТранспортировке;
	
	Параметры.СведенияОПередаче	= ТитулПродавца.СведенияОПередачеВещи.Описание;
	Параметры.ДатаПередачи		= ТитулПродавца.СведенияОПередачеВещи.Дата;
	
	Параметры.ПродавецСодержаниеОперации	= ИнформацияПродавца.СведенияОбОперации.Описание;
	Параметры.ДатаОтгрузки					= ИнформацияПродавца.СведенияОбОперации.Дата;
	
	ЛицоПередавшееТовар = ИнформацияПродавца.ЛицоПередавшееТовар;
	Если ЛицоПередавшееТовар <> Неопределено Тогда
		Параметры.ПередалДолжность	= ЛицоПередавшееТовар.Должность;
		Параметры.ПередалФИО		= ФИО(ЛицоПередавшееТовар.ФИО);
		Параметры.ПередалДопИнфо	= ОтветственноеЛицоДопИнфо(ЛицоПередавшееТовар);
	КонецЕсли;
	
	Параметры.ПродавецПриложение = ИнфПоле(ИнформацияПродавца.ИнфПоле);
	
	Если ИнформацияПокупателя <> Неопределено Тогда
		
		Параметры.ПокупательСодержаниеОперации	= ИнформацияПокупателя.СведенияОбОперации.Описание;
		Параметры.ДатаПринятия					= ИнформацияПокупателя.СведенияОбОперации.Дата;
		
		ЛицоПринявшееТовар = ИнформацияПокупателя.ЛицоПринявшееТовар;
		Если ЛицоПринявшееТовар <> Неопределено Тогда
			Параметры.ПринялДолжность	= ЛицоПринявшееТовар.Должность;
			Параметры.ПринялФИО			= ФИО(ЛицоПринявшееТовар.ФИО);
			Параметры.ПринялДопИнфо		= ОтветственноеЛицоДопИнфо(ЛицоПринявшееТовар);
		КонецЕсли;
		
		Параметры.ПокупательПриложение = ИнфПоле(ИнформацияПокупателя.ИнфПоле);
		
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьПодвалТН);
	
	//}
	
	//{ Подписанты
	
	ВывестиПодписантовУПДУКД(ТабДок, Макет, ИнформацияПродавца, ИнформацияПокупателя);
	
	//}
	
	//{ Составитель
	
	ОбластьСоставитель = Макет.ПолучитьОбласть("Составитель");
	Параметры = ОбластьСоставитель.Параметры;
	
	Параметры.ПродавецСоставитель = Составитель(ИнформацияПродавца.Составитель);
	Если ИнформацияПокупателя <> Неопределено Тогда
		Параметры.ПокупательСоставитель = Составитель(ИнформацияПокупателя.Составитель);
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьСоставитель);
	
	//}
	
	Возврат ТабДок;
	
КонецФункции

Функция Печать_УКД(ТитулПродавца, ТитулПокупателя = Неопределено)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.ПолеСверху	= 0;
	ТабДок.ПолеСнизу	= 0;
	ТабДок.ПолеСлева	= 0;
	ТабДок.ПолеСправа	= 0;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Synerdocs_УКД";
	
	Макет = ПолучитьМакет("УКД");
	
	ИнформацияПродавца = ТитулПродавца.ИнформацияПродавца;
	ИнформацияПокупателя = ?(ТитулПокупателя <> Неопределено, ТитулПокупателя.ИнформацияПокупателя, Неопределено);
	
	ВывестиУступочнуюНадпись(ТабДок, Макет, ТитулПродавца.Фактор);
	
	//{ Шапка
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	Параметры = ОбластьШапка.Параметры;
	
	Параметры.ЗаголовокДокумента = ТитулПродавца.Описание.Наименование;
	
	ВидыУКД = ОбъектнаяМодель.ВидыУКД();
	Параметры.ВидДокумента = ПредставлениеПеречисления(ВидыУКД, ТитулПродавца.ВидДокумента);
	
	Параметры.Номер				= ТитулПродавца.Описание.Номер;
	Параметры.Дата				= ТитулПродавца.Описание.Дата;
	Параметры.НомерИсправления	= ТитулПродавца.Описание.ИсправлениеНомер;
	Параметры.ДатаИсправления	= ТитулПродавца.Описание.ИсправлениеДата;
	ЗаполнитьПустыеПараметрыПрочерками(Параметры, "НомерИсправления, ДатаИсправления");
	
	Параметры.ИсходныеСФ = ИсходныеДокументыКорректировки(ТитулПродавца.ИсходныеДокументы);
	
	ПоляУчастниковСделки = "Наименование, СвидетельствоОРегистрацииИП, КонтактнаяИнформация, БанковскийСчет, ДопИнфо, Подразделение, ИнформацияДляУчастников, ОКПО";
	
	Параметры.ПродавецПредставление	= Контрагент(ТитулПродавца.Продавец, ПоляУчастниковСделки);
	Параметры.ПродавецАдрес			= АдресКонтрагента(ТитулПродавца.Продавец);
	Параметры.ПродавецИннКпп		= ИннКппКонтрагента(ТитулПродавца.Продавец);
	
	Параметры.ПокупательПредставление	= Контрагент(ТитулПродавца.Покупатель, ПоляУчастниковСделки);
	Параметры.ПокупательАдрес			= АдресКонтрагента(ТитулПродавца.Покупатель);
	Параметры.ПокупательИннКпп			= ИннКппКонтрагента(ТитулПродавца.Покупатель);
	
	Параметры.ВалютаПредставление	= Валюта(ТитулПродавца.Валюта, "Наименование, Код");
	Параметры.ИдГосКонтракта		= ТитулПродавца.ИдГосКонтракта;
	
	Параметры.ДопИнфо = ИнфПоле(ТитулПродавца.ИнфПоле);
	
	ТабДок.Вывести(ОбластьШапка);
	
	//}
	
	// До, После, Увел, Умен
	
	ДоПосле = ПоляССуффиксами(
		"СтавкаНДС, Цена, Количество, СуммаБезНДС, СуммаНДС, СуммаСНДС, ЕИКод, ЕИНаименование, Акциз",
		"До, После"
	);
	ДоПослеПФ = ПоляССуффиксами(
		"СтавкаНДС, Цена, Количество, СуммаБезНДС, СуммаНДС, СуммаСНДС, КодЕИ, ЕИ, Акциз",
		"До, После"
	);
	
	УвелУмен = ПоляССуффиксами(
		"СуммаБезНДС, СуммаНДС, СуммаСНДС, Акциз",
		"Увеличение, Уменьшение"
	);
	УвелУменПФ = ПоляССуффиксами(
		"СуммаБезНДС, СуммаНДС, СуммаСНДС, Акциз",
		"Увел, Умен"
	);
	ИтогоУвелУменПФ = ПоляССуффиксами(
		"ИтогоБезНДС, ИтогоНДС, ИтогоСНДС",
		"Увел, Умен"
	);
	
	СуффиксыПФ = Новый Структура(
		"До,	После,		Увеличение,	Уменьшение",
		"До",	"После",	"Увел",		"Умен"
	);
	
	//{ Табличная часть
	
	СтавкиНДС = ОбъектнаяМодель.СтавкиНДС();
	
	Нпп = 0;
	Для Каждого СтрокаТЧ Из ТитулПродавца.ИзмененияТМЦ.ТабличнаяЧасть Цикл
		
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТЧ");
		Параметры = ОбластьСтрока.Параметры;
		
		Нпп = Нпп + 1;
		
		Параметры.НомерСтр = Нпп;
		
		Параметры.Наименование	= СтрокаТЧ.Наименование;
		Параметры.ДопИнфо		= ИнфПоле(СтрокаТЧ.ИнфПоле);
		
		Для Каждого Суффикс Из ДоПосле Цикл
			
			СуффиксПФ = СуффиксыПФ[Суффикс.Ключ];
			
			Поля = Суффикс.Значение;
			ПоляПФ = ДоПослеПФ[СуффиксПФ];
			
			Параметры[ПоляПФ.КодЕИ]			= СтрокаТЧ[Поля.ЕИКод];
			Параметры[ПоляПФ.ЕИ]			= СтрокаТЧ[Поля.ЕИНаименование];
			
			Параметры[ПоляПФ.Количество]	= СтрокаТЧ[Поля.Количество];
			
			Параметры[ПоляПФ.Цена]			= СтрокаТЧ[Поля.Цена];
			Параметры[ПоляПФ.СтавкаНДС]		= ПредставлениеПеречисления(СтавкиНДС, СтрокаТЧ[Поля.СтавкаНДС]);
			Параметры[ПоляПФ.СуммаБезНДС]	= СтрокаТЧ[Поля.СуммаБезНДС];
			Параметры[ПоляПФ.СуммаНДС]		= СтрокаТЧ[Поля.СуммаНДС];
			Параметры[ПоляПФ.СуммаСНДС]		= СтрокаТЧ[Поля.СуммаСНДС];
			Параметры[ПоляПФ.Акциз]			= Акциз(СтрокаТЧ[Поля.Акциз]);
			
		КонецЦикла;
		
		Для Каждого Суффикс Из УвелУмен Цикл
			
			СуффиксПФ = СуффиксыПФ[Суффикс.Ключ];
			
			Поля = Суффикс.Значение;
			ПоляПФ = УвелУменПФ[СуффиксПФ];
			
			Параметры[ПоляПФ.СуммаБезНДС]	= СтрокаТЧ[Поля.СуммаБезНДС];
			Параметры[ПоляПФ.СуммаНДС]		= СтрокаТЧ[Поля.СуммаНДС];
			Параметры[ПоляПФ.СуммаСНДС]		= СтрокаТЧ[Поля.СуммаСНДС];
			Параметры[ПоляПФ.Акциз]			= СтрокаТЧ[Поля.Акциз];
			
		КонецЦикла;
		
		ЗаполнитьПустыеПараметрыПрочерками(Параметры);
		
		ТабДок.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	//}
	
	//{ Подвал корректировочной счет-фактуры
	
	ОбластьПодвалКСФ = Макет.ПолучитьОбласть("ПодвалКСФ");
	Параметры = ОбластьПодвалКСФ.Параметры;
	
	Итого = ТитулПродавца.ИзмененияТМЦ.Итого;
	
	Для Каждого Суффикс Из УвелУмен Цикл
		
		СуффиксПФ = СуффиксыПФ[Суффикс.Ключ];
		
		Поля = Суффикс.Значение;
		ПоляПФ = ИтогоУвелУменПФ[СуффиксПФ];
		
		Параметры[ПоляПФ.ИтогоБезНДС]	= Итого[Поля.СуммаБезНДС];
		Параметры[ПоляПФ.ИтогоНДС]		= Итого[Поля.СуммаНДС];
		Параметры[ПоляПФ.ИтогоСНДС]		= Итого[Поля.СуммаСНДС];
		
		ЗаполнитьПустыеПараметрыПрочерками(
			Параметры, 
			ЗначенияВМассиве(
				ПоляПФ.ИтогоБезНДС, ПоляПФ.ИтогоНДС, ПоляПФ.ИтогоСНДС
			)
		);
		
	КонецЦикла;
	
	Руководитель	= ОбъектнаяМодель.Руководитель(ИнформацияПродавца.Подписанты);
	ИП				= ОбъектнаяМодель.ИндивидуальныйПредприниматель(ИнформацияПродавца.Подписанты);
	
	Если Руководитель <> Неопределено Тогда
		Параметры.ФИОРуководителя = ФИО(Руководитель.ФИО);
	КонецЕсли;
	
	Если ИП <> Неопределено Тогда
		Параметры.ФИОИП		= ФИО(ИП.ФИО);
		Параметры.РегСведИП	= ИП.СвидетельствоОРегистрацииИП;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьПодвалКСФ);
	
	//}
	
	//{ Подвал корректировочного документа
	
	ОбластьПодвалТН = Макет.ПолучитьОбласть("ПодвалТН");
	Параметры = ОбластьПодвалТН.Параметры;
	
	Параметры.ПередаточныеДокументы	= ТитулПродавца.ПередаточныеДокументы;
	Параметры.ОснованиеИзменений	= ДокументыОснования(ТитулПродавца.Основание);
	Параметры.ИныеСведения			= ТитулПродавца.ДопИнфо;
	
	Параметры.ПродавецСодержаниеОперации = ИнформацияПродавца.СведенияОбОперации.Описание;
	
	Если ИнформацияПокупателя <> Неопределено Тогда
		
		Параметры.ПокупательСодержаниеОперации	= ИнформацияПокупателя.СведенияОбОперации.Описание;
		Параметры.ДатаСогласования				= ИнформацияПокупателя.СведенияОбОперации.Дата;
		
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьПодвалТН);
	
	//}
	
	//{ Подписанты
	
	ВывестиПодписантовУПДУКД(ТабДок, Макет, ИнформацияПродавца, ИнформацияПокупателя);
	
	//}
	
	//{ Составитель
	
	ОбластьСоставитель = Макет.ПолучитьОбласть("Составитель");
	Параметры = ОбластьСоставитель.Параметры;
	
	Параметры.ПродавецСоставитель = Составитель(ИнформацияПродавца.Составитель);
	Если ИнформацияПокупателя <> Неопределено Тогда
		Параметры.ПокупательСоставитель = Составитель(ИнформацияПокупателя.Составитель);
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьСоставитель);
	
	//}
	
	Возврат ТабДок;
	
КонецФункции

Процедура ВывестиПодписантовУПДУКД(ТабДок, Макет, ИнформацияПродавца, ИнформацияПокупателя)
	
	ОбластиПолномочий = ОбъектнаяМодель.ОбластиПолномочий();
	СтатусыПодписанта = ОбъектнаяМодель.СтатусыПодписанта();
	
	КоличествоПодписантовПродавца	= ИнформацияПродавца.Подписанты.Количество();
	КоличествоПодписантовПокупателя	= ?(ИнформацияПокупателя <> Неопределено, ИнформацияПокупателя.Подписанты.Количество(), 0);
	
	МаксПодписантов = Макс(КоличествоПодписантовПродавца, КоличествоПодписантовПокупателя);
	
	Для Сч = 0 По МаксПодписантов - 1 Цикл
		
		// Есть чем заполнить левую часть
		ЕстьПодписантПродавца	= Сч < КоличествоПодписантовПродавца; 
		// Есть чем заполнить правую часть
		ЕстьПодписантПокупателя	= Сч < КоличествоПодписантовПокупателя;
		
		Если ЕстьПодписантПродавца Тогда
			
			ПодписантПродавца = ИнформацияПродавца.Подписанты[Сч];
			
			ОбластьПодписант = Макет.ПолучитьОбласть("Подписант|ТитулПродавца");
			Параметры = ОбластьПодписант.Параметры;
			
			Параметры.ОбластьПолномочий	= ПредставлениеПеречисления(ОбластиПолномочий, ПодписантПродавца.ОбластьПолномочий);
			Параметры.Статус			= ПредставлениеПеречисления(СтатусыПодписанта, ПодписантПродавца.Статус);
			
			Параметры.Должность	= ПодписантПродавца.Должность;
			Параметры.ФИО		= ФИО(ПодписантПродавца.ФИО);
			Параметры.ДопИнфо	= ПодписантДопИнфо(ПодписантПродавца);
			
		Иначе
			
			ОбластьПодписант = Макет.ПолучитьОбласть("ПодписантПусто|ТитулПродавца");
			
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьПодписант);
		
		Если ЕстьПодписантПокупателя Тогда
			
			ПодписантПокупателя = ИнформацияПокупателя.Подписанты[Сч];
			
			ОбластьПодписант = Макет.ПолучитьОбласть("Подписант|ТитулПокупателя");
			Параметры = ОбластьПодписант.Параметры;
			
			Параметры.ОбластьПолномочий	= ПредставлениеПеречисления(ОбластиПолномочий, ПодписантПокупателя.ОбластьПолномочий);
			Параметры.Статус			= ПредставлениеПеречисления(СтатусыПодписанта, ПодписантПокупателя.Статус);
			
			Параметры.Должность	= ПодписантПокупателя.Должность;
			Параметры.ФИО		= ФИО(ПодписантПокупателя.ФИО);
			Параметры.ДопИнфо	= ПодписантДопИнфо(ПодписантПокупателя);
			
			ТабДок.Присоединить(ОбластьПодписант);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция Печать_ДПТ(ТитулПродавца, ТитулПокупателя = Неопределено)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.ПолеСверху	= 0;
	ТабДок.ПолеСнизу	= 0;
	ТабДок.ПолеСлева	= 0;
	ТабДок.ПолеСправа	= 0;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Synerdocs_ДПТ";
	
	Макет = ПолучитьМакет("ДПТ");
	
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	ИнформацияПродавца = ТитулПродавца.ИнформацияПродавца;
	ИнформацияПокупателя = ?(ТитулПокупателя <> Неопределено, ТитулПокупателя.ИнформацияПокупателя, Неопределено);
	
	ВывестиУступочнуюНадпись(ТабДок, Макет, ТитулПродавца.Фактор);
	
	//{ Шапка
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	Параметры = ОбластьШапка.Параметры;
	
	Параметры.ЗаголовокДокумента = ТитулПродавца.Описание.Наименование;
	
	Параметры.Номер				= ТитулПродавца.Описание.Номер;
	Параметры.Дата				= ТитулПродавца.Описание.Дата;
	Параметры.НомерИсправления	= ТитулПродавца.Описание.ИсправлениеНомер;
	Параметры.ДатаИсправления	= ТитулПродавца.Описание.ИсправлениеДата;
	ЗаполнитьПустыеПараметрыПрочерками(Параметры, "НомерИсправления, ДатаИсправления");
	
	ПоляКонтрагента	= "Наименование, ИннКпп, СвидетельствоОРегистрацииИП, Адрес, КонтактнаяИнформация, БанковскийСчет, Подразделение, ИнформацияДляУчастников";
	
	Параметры.ПродавецПредставление			= Контрагент(ТитулПродавца.Продавец, ПоляКонтрагента);
	Параметры.ПокупательПредставление		= Контрагент(ТитулПродавца.Покупатель, ПоляКонтрагента);
	
	Параметры.ГрузоотправительПредставление	= Контрагент(ТитулПродавца.Грузоотправитель, ПоляКонтрагента);
	Параметры.ГрузополучательПредставление	= Контрагент(ТитулПродавца.Грузополучатель, ПоляКонтрагента);
	
	Параметры.ПеревозчикПредставление		= Контрагент(ТитулПродавца.Перевозчик, ПоляКонтрагента);
	
	ПоляОКПО = "ОКПО";
	Параметры.ПродавецОКПО			= Контрагент(ТитулПродавца.Продавец, ПоляОКПО);
	Параметры.ПокупательОКПО		= Контрагент(ТитулПродавца.Покупатель, ПоляОКПО);
	Параметры.ГрузоотправительОКПО	= Контрагент(ТитулПродавца.Грузоотправитель, ПоляОКПО);
	Параметры.ГрузополучательОКПО	= Контрагент(ТитулПродавца.Грузополучатель, ПоляОКПО);
	Параметры.ПеревозчикОКПО		= Контрагент(ТитулПродавца.Перевозчик, ПоляОКПО);
	ЗаполнитьПустыеПараметрыПрочерками(
		Параметры, 
		"ПродавецОКПО, ПокупательОКПО,
		|ГрузоотправительОКПО, ГрузополучательОКПО,
		|ПеревозчикОКПО"
	);
	
	Параметры.Основание				= ДокументыОснования(ТитулПродавца.Основание);
	Параметры.ТранспортнаяНакладная	= ТранспортныеНакладные(ТитулПродавца.ТранспортныеНакладные);
	
	Параметры.ВалютаПредставление	= Валюта(ТитулПродавца.Валюта, "Наименование, Курс");
	Параметры.ВалютаКод				= Валюта(ТитулПродавца.Валюта, "Код");
	ЗаполнитьПустыеПараметрыПрочерками(Параметры, "ВалютаКод");
	
	Параметры.ИдГосКонтракта = ТитулПродавца.ИдГосКонтракта;
	
	Параметры.ДопИнфо = ИнфПоле(ТитулПродавца.ИнфПоле);
	
	ТабДок.Вывести(ОбластьШапка);
	
	//}
	
	//{ Табличная часть
	
	СтавкиНДС = ОбъектнаяМодель.СтавкиНДС();
	
	Нпп = 0;
	Для Каждого СтрокаТЧ Из ТитулПродавца.ТМЦ.ТабличнаяЧасть Цикл
	
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТЧ");
		Параметры = ОбластьСтрока.Параметры;
		
		Нпп = Нпп + 1;
		
		Параметры.НомерСтр = Нпп;
		
		Параметры.Товар = СтрПредставление(", ",
			СтрокаТЧ.Наименование,,
			СтрокаТЧ.Характеристика,,
			СтрокаТЧ.Сорт,,
			СтрокаТЧ.Артикул
		);
		
		Параметры.Код					= СтрокаТЧ.Код;
		
		Параметры.КодЕИ					= СтрокаТЧ.ЕИКод;
		Параметры.ЕИ					= СтрокаТЧ.ЕИНаименование;
		
		Параметры.ВидУпаковки			= СтрокаТЧ.ВидУпаковки;
		Параметры.КоличествоВОдномМесте	= СтрокаТЧ.КоличествоВУпаковке;
		Параметры.КоличествоМест		= СтрокаТЧ.КоличествоУпаковок;
		
		Параметры.МассаБрутто			= СтрокаТЧ.МассаБрутто;
		
		Параметры.КоличествоОтгрузить	= СтрокаТЧ.КоличествоОтпустить;
		Параметры.Количество			= СтрокаТЧ.Количество;
		
		Параметры.Цена					= СтрокаТЧ.Цена;
		Параметры.СтавкаНДС				= ПредставлениеПеречисления(СтавкиНДС, СтрокаТЧ.СтавкаНДС);
		Параметры.СуммаБезНДС			= СтрокаТЧ.СуммаБезНДС;
		Параметры.СуммаНДС				= СтрокаТЧ.СуммаНДС;
		Параметры.СуммаСНДС				= СтрокаТЧ.СуммаСНДС;
		
		Параметры.СчетДт				= СтрокаТЧ.СчетДт;
		Параметры.СчетКт				= СтрокаТЧ.СчетКт;
		
		Параметры.ДопИнфо				= ИнфПоле(СтрокаТЧ.ИнфПоле);
		
		ЗаполнитьПустыеПараметрыПрочерками(Параметры);
		
		ТабДок.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	//}
	
	//{ Подвал
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	Параметры = ОбластьПодвал.Параметры;
	
	Итого = ТитулПродавца.ТМЦ.Итого;
	
	Параметры.ИтогоМест			= Итого.КоличествоМест;
	Параметры.ИтогоБрутто		= Итого.МассаБрутто;
	Параметры.ИтогоКоличество	= Итого.Количество;
	
	Параметры.ИтогоБезНДС		= Итого.СуммаБезНДС;
	Параметры.ИтогоНДС			= Итого.СуммаНДС;
	Параметры.ИтогоСНДС			= Итого.СуммаСНДС;
	
	ЗаполнитьПустыеПараметрыПрочерками(
		Параметры, 
		"ИтогоМест, ИтогоБрутто, ИтогоКоличество,
		|ИтогоБезНДС, ИтогоНДС, ИтогоСНДС"
	);
	
	Параметры.КоличествоЛистовПриложений = ТитулПродавца.КоличествоПриложений;
	
	Параметры.ПродавецВидОперации			= ИнформацияПродавца.ВидОперации;
	Параметры.ПродавецСодержаниеОперации	= ИнформацияПродавца.СведенияОбОперации.Описание;
	Параметры.ДатаОтгрузки					= ИнформацияПродавца.СведенияОбОперации.Дата;
	Параметры.ПродавецДопИнфо				= ИнфПоле(ИнформацияПродавца.ИнфПоле);
	
	Если ИнформацияПокупателя <> Неопределено Тогда
		
		Параметры.ПокупательВидОперации			= ИнформацияПокупателя.ВидОперации;
		Параметры.ПокупательСодержаниеОперации	= ИнформацияПокупателя.СведенияОбОперации.Описание;
		Параметры.ДатаПринятия					= ИнформацияПокупателя.СведенияОбОперации.Дата;
		Параметры.ПокупательДопИнфо				= ИнфПоле(ИнформацияПокупателя.ИнфПоле);
		
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьПодвал);
	
	//}
	
	//{ Передал/принял
	
	ЛицоПередавшееТовар = ИнформацияПродавца.ЛицоПередавшееТовар;
	ЛицоПринявшееТовар = ?(ИнформацияПокупателя <> Неопределено, ИнформацияПокупателя.ЛицоПринявшееТовар, Неопределено);
	
	ВыводитьОбластьПередалПринял = Ложь
		ИЛИ ЛицоПередавшееТовар <> Неопределено
		ИЛИ ЛицоПринявшееТовар <> Неопределено;
		
	Если ВыводитьОбластьПередалПринял Тогда

		ТабДок.Вывести(ОбластьРазделитель);
	
		ВидыЛица = ОбъектнаяМодель.ВидыОтветственногоЛица();
		
		Области = Новый Соответствие;
		Области[ВидыЛица.СотрудникОрганизации]					= "ПередалПринялРаботник";
		Области[ВидыЛица.ПредставительДовереннойОрганизации]	= "ПередалПринялПредставитель";
		Области[ВидыЛица.ФизЛицо]								= "ПередалПринялФизЛицо";
		
		Если ЛицоПередавшееТовар <> Неопределено Тогда
			
			ОбластьПередал = ОбластьПередалПринялДПТ(
				ЛицоПередавшееТовар,
				Макет,
				Области[ЛицоПередавшееТовар.Вид] + "|ТитулПродавца"
			);
			
		Иначе
			
			ОбластьПередал = Макет.ПолучитьОбласть("ПередалПринялПусто|ТитулПродавца");
			
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьПередал);
		
		Если ЛицоПринявшееТовар <> Неопределено Тогда
			
			ОбластьПринял = ОбластьПередалПринялДПТ(
				ЛицоПринявшееТовар,
				Макет,
				Области[ЛицоПринявшееТовар.Вид] + "|ТитулПокупателя"
			);
			
			ТабДок.Присоединить(ОбластьПринял);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//}
	
	//{ Подписанты
	
	ВывестиПодписантовДПТДПРР(ТабДок, Макет, ИнформацияПродавца, ИнформацияПокупателя);
	
	//}
	
	//{ Составитель
	
	ТабДок.Вывести(ОбластьРазделитель);
	
	ОбластьСоставитель = Макет.ПолучитьОбласть("Составитель");
	Параметры = ОбластьСоставитель.Параметры;
	
	Составитель = ИнформацияПродавца.Составитель;
	Параметры.ПродавецОрганизация			= Составитель.НаименованиеОрганизации;
	Параметры.ПродавецОснованиеПолномочий	= Составитель.ОснованиеПолномочий;
	
	Если ИнформацияПокупателя <> Неопределено Тогда
		Составитель = ИнформацияПокупателя.Составитель;
		Параметры.ПокупательОрганизация			= Составитель.НаименованиеОрганизации;
		Параметры.ПокупательОснованиеПолномочий	= Составитель.ОснованиеПолномочий;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьСоставитель);
	
	//}
	
	Возврат ТабДок;
	
КонецФункции

Функция ОбластьПередалПринялДПТ(ПередалПринял, Макет, ИмяОбластьПередалПринял)
	
	ОбластьПередалПринял = Макет.ПолучитьОбласть(ИмяОбластьПередалПринял);
	
	Параметры = Новый Структура(
		"Должность, ФИО, ДопИнфо,
		|Организация,
		|ОснованиеДоверия,
		|ОснованиеПолномочий"
	);
	
	Параметры.Должность				= ПередалПринял.Должность;
	Параметры.ФИО					= ФИО(ПередалПринял.ФИО);
	Параметры.ДопИнфо				= ПередалПринял.ДопИнфо;
	Параметры.Организация			= ПередалПринял.НаименованиеОрганизации;
	Параметры.ОснованиеДоверия		= ПередалПринял.ОснованиеДоверия;
	Параметры.ОснованиеПолномочий	= ПередалПринял.ОснованиеПолномочий;
	
	ОбластьПередалПринял.Параметры.Заполнить(Параметры);
	
	Возврат ОбластьПередалПринял;
	
КонецФункции

Функция Печать_ДПРР(ТитулПродавца, ТитулПокупателя = Неопределено)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.ПолеСверху	= 0;
	ТабДок.ПолеСнизу	= 0;
	ТабДок.ПолеСлева	= 0;
	ТабДок.ПолеСправа	= 0;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Synerdocs_ДПРР";
	
	Макет = ПолучитьМакет("ДПРР");
	
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	ИнформацияПродавца = ТитулПродавца.ИнформацияПродавца;
	ИнформацияПокупателя = ?(ТитулПокупателя <> Неопределено, ТитулПокупателя.ИнформацияПокупателя, Неопределено);
	
	ВывестиУступочнуюНадпись(ТабДок, Макет, ТитулПродавца.Фактор);
	
	//{ Шапка
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	Параметры = ОбластьШапка.Параметры;
	
	Параметры.ЗаголовокДокумента = ТитулПродавца.Описание.Наименование;
	
	Параметры.Номер				= ТитулПродавца.Описание.Номер;
	Параметры.Дата				= ТитулПродавца.Описание.Дата;
	Параметры.НомерИсправления	= ТитулПродавца.Описание.ИсправлениеНомер;
	Параметры.ДатаИсправления	= ТитулПродавца.Описание.ИсправлениеДата;
	ЗаполнитьПустыеПараметрыПрочерками(Параметры, "НомерИсправления, ДатаИсправления");
	
	ПоляКонтрагента	= "Наименование, ИннКпп, СвидетельствоОРегистрацииИП, Адрес, КонтактнаяИнформация, БанковскийСчет, Подразделение, ИнформацияДляУчастников";
	
	Параметры.ИсполнительПредставление	= Контрагент(ТитулПродавца.Исполнитель, ПоляКонтрагента);
	Параметры.ЗаказчикПредставление		= Контрагент(ТитулПродавца.Заказчик, ПоляКонтрагента);
	
	ПоляОКПО = "ОКПО";
	Параметры.ИсполнительОКПО	= Контрагент(ТитулПродавца.Исполнитель, ПоляОКПО);
	Параметры.ЗаказчикОКПО		= Контрагент(ТитулПродавца.Заказчик, ПоляОКПО);
	ЗаполнитьПустыеПараметрыПрочерками(
		Параметры, 
		"ИсполнительОКПО, ЗаказчикОКПО"
	);
	
	Параметры.Основание				= ДокументыОснования(ТитулПродавца.Основание);
	
	Параметры.ВалютаПредставление	= Валюта(ТитулПродавца.Валюта, "Наименование, Курс");
	Параметры.ВалютаКод				= Валюта(ТитулПродавца.Валюта, "Код");
	ЗаполнитьПустыеПараметрыПрочерками(Параметры, "ВалютаКод");
	
	Параметры.ИдГосКонтракта = ТитулПродавца.ИдГосКонтракта;
	
	Параметры.ДопИнфо = ИнфПоле(ТитулПродавца.ИнфПоле);
	
	Параметры.ЗаголовокСодержимогоОперации = ТитулПродавца.ЗаголовокОперации;
	
	ТабДок.Вывести(ОбластьШапка);
	
	//}
	
	//{ Работы
	
	СтавкиНДС = ОбъектнаяМодель.СтавкиНДС();
	
	Для Каждого Работа Из ТитулПродавца.Работы Цикл
		
		ОбластьШапкаТЧ = Макет.ПолучитьОбласть("ШапкаТЧ");
		Параметры = ОбластьШапкаТЧ.Параметры;
		
		Если ЗначениеЗаполнено(Работа.ДатаНачала) И ЗначениеЗаполнено(Работа.ДатаКонца) Тогда
			
			ВыполненныеРаботы = СтрШаблон2(
				"Работы выполнены (услуги оказаны) в период с %1 по %2",
				ПредставлениеДаты(Работа.ДатаНачала),
				ПредставлениеДаты(Работа.ДатаКонца)
			);
			Параметры.ЗаголовокТЧ = ВыполненныеРаботы;
			
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьШапкаТЧ);
		
		//{ Табличная часть
		
		Нпп = 0;
		Для Каждого СтрокаТЧ Из Работа.ТабличнаяЧасть Цикл
		
			ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТЧ");
			Параметры = ОбластьСтрока.Параметры;
			
			Нпп = Нпп + 1;
			
			Параметры.НомерСтр = Нпп;
			
			Параметры.Работа = СтрПредставление(", ",
				СтрокаТЧ.Наименование,,
				СтрокаТЧ.Описание
			);
			
			Параметры.КодЕИ					= СтрокаТЧ.ЕИКод;
			Параметры.ЕИ					= СтрокаТЧ.ЕИНаименование;
			
			Параметры.Количество			= СтрокаТЧ.Количество;
			
			Параметры.Цена					= СтрокаТЧ.Цена;
			Параметры.СтавкаНДС				= ПредставлениеПеречисления(СтавкиНДС, СтрокаТЧ.СтавкаНДС);
			Параметры.СуммаБезНДС			= СтрокаТЧ.СуммаБезНДС;
			Параметры.СуммаНДС				= СтрокаТЧ.СуммаНДС;
			Параметры.СуммаСНДС				= СтрокаТЧ.СуммаСНДС;
			
			Параметры.СчетДт				= СтрокаТЧ.СчетДт;
			Параметры.СчетКт				= СтрокаТЧ.СчетКт;
			
			Параметры.ДопИнфо				= ИнфПоле(СтрокаТЧ.ИнфПоле);
			
			ЗаполнитьПустыеПараметрыПрочерками(Параметры);
			
			ТабДок.Вывести(ОбластьСтрока);
		
		КонецЦикла;
	
		//}
		
		//{ Итого
		
		ОбластьИтого = Макет.ПолучитьОбласть("ПодвалТЧ");
		Параметры = ОбластьИтого.Параметры;
		
		Итого = Работа.Итого;
		
		Параметры.ИтогоБезНДС		= Итого.СуммаБезНДС;
		Параметры.ИтогоНДС			= Итого.СуммаНДС;
		Параметры.ИтогоСНДС			= Итого.СуммаСНДС;
		
		ЗаполнитьПустыеПараметрыПрочерками(
			Параметры, 
			"ИтогоБезНДС, ИтогоНДС, ИтогоСНДС"
		);
		
		ТабДок.Вывести(ОбластьИтого);
	
		//}
		
	КонецЦикла;
	
	//}
	
	//{ Подвал
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	Параметры = ОбластьПодвал.Параметры;
	
	Параметры.ИсполнительСведенияОПередачеВещи	= ТитулПродавца.СведенияОПередачеВещи.Описание;
	Параметры.ДатаПередачиВещи					= ТитулПродавца.СведенияОПередачеВещи.Дата;
	
	Если ТитулПокупателя <> Неопределено Тогда
		Параметры.ЗаказчикСведенияОПолученииВещи	= ТитулПокупателя.СведенияОПолученииВещи.Описание;
		Параметры.ДатаПолученияВещи					= ТитулПокупателя.СведенияОПолученииВещи.Дата;
	КонецЕсли;
	
	Параметры.ИсполнительВидОперации		= ИнформацияПродавца.ВидОперации;
	Параметры.ИсполнительСодержаниеОперации	= ИнформацияПродавца.СведенияОбОперации.Описание;
	Параметры.ДатаПередачи					= ИнформацияПродавца.СведенияОбОперации.Дата;
	Параметры.ИсполнительДопИнфо			= ИнфПоле(ИнформацияПродавца.ИнфПоле);
	
	Если ИнформацияПокупателя <> Неопределено Тогда
		
		Параметры.ЗаказчикВидОперации			= ИнформацияПокупателя.ВидОперации;
		Параметры.ЗаказчикСодержаниеОперации	= ИнформацияПокупателя.СведенияОбОперации.Описание;
		Параметры.ДатаПриема					= ИнформацияПокупателя.СведенияОбОперации.Дата;
		Параметры.ЗаказчикДопИнфо				= ИнфПоле(ИнформацияПокупателя.ИнфПоле);
		
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьПодвал);
	
	//}
	
	//{ Подписанты
	
	ВывестиПодписантовДПТДПРР(ТабДок, Макет, ИнформацияПродавца, ИнформацияПокупателя);
	
	//}

	//{ Составитель
	
	ТабДок.Вывести(ОбластьРазделитель);
	
	ОбластьСоставитель = Макет.ПолучитьОбласть("Составитель");
	Параметры = ОбластьСоставитель.Параметры;
	
	Составитель = ИнформацияПродавца.Составитель;
	Параметры.ИсполнительОрганизация			= Составитель.НаименованиеОрганизации;
	Параметры.ИсполнительОснованиеПолномочий	= Составитель.ОснованиеПолномочий;
	
	Если ИнформацияПокупателя <> Неопределено Тогда
		Составитель = ИнформацияПокупателя.Составитель;
		Параметры.ЗаказчикОрганизация			= Составитель.НаименованиеОрганизации;
		Параметры.ЗаказчикОснованиеПолномочий	= Составитель.ОснованиеПолномочий;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьСоставитель);
	
	//}
	
	Возврат ТабДок;
	
КонецФункции

Процедура ВывестиПодписантовДПТДПРР(ТабДок, Макет, ИнформацияПродавца, ИнформацияПокупателя)
	
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	ТипыОрганизации = ОбъектнаяМодель.ТипыОрганизации();
	СтатусыПодписанта = ОбъектнаяМодель.СтатусыПодписанта();
	ОбластиПолномочий = ОбъектнаяМодель.ОбластиПолномочий();
	
	ОбластиПодписантов = Новый Соответствие;
	ОбластиПодписантов[ТипыОрганизации.ЮрЛицо]	= "ПодписантЮЛ";
	ОбластиПодписантов[ТипыОрганизации.ИП]		= "ПодписантИП";
	ОбластиПодписантов[ТипыОрганизации.ФизЛицо]	= "ПодписантФЛ";
	
	КоличествоПодписантовПродавца	= ИнформацияПродавца.Подписанты.Количество();
	КоличествоПодписантовПокупателя	= ?(ИнформацияПокупателя <> Неопределено, ИнформацияПокупателя.Подписанты.Количество(), 0);
	
	МаксПодписантов = Макс(КоличествоПодписантовПродавца, КоличествоПодписантовПокупателя);
	
	Для Сч = 0 По МаксПодписантов - 1 Цикл
		
		ТабДок.Вывести(ОбластьРазделитель);
		
		// Есть чем заполнить левую часть
		ЕстьПодписантПродавца	= Сч < КоличествоПодписантовПродавца; 
		// Есть чем заполнить правую часть
		ЕстьПодписантПокупателя	= Сч < КоличествоПодписантовПокупателя;
		
		Если ЕстьПодписантПродавца Тогда
			
			Подписант = ИнформацияПродавца.Подписанты[Сч];
			
			ОбластьПодписант = ОбластьПодписантДПТДПРР(
				Подписант,
				Макет,
				"СведенияОПодписанте|ТитулПродавца",
				ОбластиПодписантов[Подписант.ТипОрганизации] + "|ТитулПродавца"
			);
			
		Иначе
			
			ОбластьПодписант = Макет.ПолучитьОбласть("ПодписантПусто|ТитулПродавца");
			
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьПодписант);
		
		Если ЕстьПодписантПокупателя Тогда
			
			Подписант = ИнформацияПокупателя.Подписанты[Сч];
			
			ОбластьПодписант = ОбластьПодписантДПТДПРР(
				Подписант,
				Макет,
				"СведенияОПодписанте|ТитулПокупателя",
				ОбластиПодписантов[Подписант.ТипОрганизации] + "|ТитулПокупателя"
			);
			
			ТабДок.Присоединить(ОбластьПодписант);
			
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Функция ОбластьПодписантДПТДПРР(Подписант, Макет, ИмяОбластьСведения, ИмяОбластьПодписант)
	
	Результат = Новый ТабличныйДокумент;
	
	СтатусыПодписанта = ОбъектнаяМодель.СтатусыПодписанта();
	ОбластиПолномочий = ОбъектнаяМодель.ОбластиПолномочий();
	
	// Сведения подписанта
	
	ОбластьСведения = Макет.ПолучитьОбласть(ИмяОбластьСведения);
	Параметры = ОбластьСведения.Параметры;
	
	Параметры.ОбластьПолномочий					= ПредставлениеПеречисления(ОбластиПолномочий, Подписант.ОбластьПолномочий);
	Параметры.Статус							= ПредставлениеПеречисления(СтатусыПодписанта, Подписант.Статус);
	Параметры.ОснованиеПолномочий				= Подписант.ОснованиеПолномочий;
	Параметры.ОснованиеПолномочийОрганизации	= Подписант.ОснованиеПолномочийОрганизации;
	
	Результат.Вывести(ОбластьСведения);
	
	// Подписант
	
	ОбластьПодписант = Макет.ПолучитьОбласть(ИмяОбластьПодписант);
	
	Параметры = Новый Структура(
		"Должность, ФИО, ДопИнфо,
		|ИНН, Организация, СведРегИП"
	);
	
	Параметры.Должность	= Подписант.Должность;
	Параметры.ФИО		= ФИО(Подписант.ФИО);
	Параметры.ДопИнфо	= Подписант.ДопИнфо;
	
	Параметры.ИНН		= Подписант.ИНН;
	Параметры.СведРегИП	= Подписант.СвидетельствоОРегистрацииИП;
	
	Параметры.Организация = СтрПредставление(", ",
		Подписант.НаименованиеОрганизации,,
		Подписант.ИНН
	);
	
	ОбластьПодписант.Параметры.Заполнить(Параметры);
	
	Результат.Вывести(ОбластьПодписант);
	
	// Каштылик, чтобы ТабДок.Вывести() и ТабДок.Присоединить() работало как надо
	Результат = Результат.ПолучитьОбласть(1, 1, Результат.ВысотаТаблицы, Результат.ШиринаТаблицы);
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиУступочнуюНадпись(ТабДок, Макет, Фактор)
	
	Если Фактор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьУступочнаяНадпись = Макет.ПолучитьОбласть("УступочнаяНадпись");
	
	Параметры = ОбластьУступочнаяНадпись.Параметры;
	Параметры.Фактор = Фактор(Фактор);
	
	ТабДок.Вывести(ОбластьУступочнаяНадпись);
	
КонецПроцедуры


//========================================================================
// Перечисления
//========================================================================

Функция ПоляФактора()
	
	Поля = Новый Структура(
		"Наименование,
		|ИНН,
		|КПП,
		|
		|НаименованиеБанка,
		|БИК,
		|РасчетныйСчет,
		|КоррСчет,
		|
		|Адрес,
		|Телефон"
	);
	
	Поля.Наименование		= "@ФакторНаим";
	Поля.ИНН				= "@ФакторИНН";
	Поля.КПП				= "@ФакторКПП";
	
	Поля.НаименованиеБанка	= "@ФакторНаимБанк";
	Поля.БИК				= "@ФакторБИК";
	Поля.РасчетныйСчет		= "@ФакторНомерСчет";
	Поля.КоррСчет			= "@ФакторКоррСчет";
	
	Поля.Адрес				= "@ФакторАдрес";
	Поля.Телефон			= "@ФакторТел";
	
	Поля = Новый ФиксированнаяСтруктура(Поля);
	Возврат Поля;
	
КонецФункции


//========================================================================
// Формирование представлений объектов
//========================================================================

// Представление контрагента.
//
// Параметры:
//  Контрагент		 - Контаргент	 - контрагент, представление которого необходимо сформировать, см. Модуль_ОбъектнаяМодель.Новый_Контрагент().
//  ВыводимыеПоля	 - Строка		 - список полей, выводимых в представлении, допустимые имена полей - см. ПоляКонтрагента().
// 
// Возвращаемое значение:
//  Строка - представление контрагента для печатной формы.
//
Функция Контрагент(Контрагент, Знач ВыводимыеПоля)
	
	Представление = ОбъектнаяМодель.КонтрагентПредставление(Контрагент, ВыводимыеПоля);
	
	Возврат Представление;
	
КонецФункции

Функция ИннКппКонтрагента(Контрагент, ВыводитьПрефикс = Ложь)
	
	Представление = ОбъектнаяМодель.ИннКппКонтрагента(Контрагент, ВыводитьПрефикс);
	
	Возврат Представление;
	
КонецФункции

Функция АдресКонтрагента(Контрагент)
	
	Если Контрагент = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Представление = ОбъектнаяМодель.АдресПредставление(Контрагент.Адрес);
	
	Возврат Представление;
	
КонецФункции

Функция Фактор(Фактор)
	
	Если Фактор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Представление = "";
	
	Шаблон = МенеджерНастроек.НастройкиИР().ШаблонУступочнойНадписи;
	ДопустимыеПоля = ПоляФактора();
	
	Представление = Шаблон;
	
	ПоляФактора = СтрРазделить2("Наименование, ИНН, КПП, Адрес, Телефон", ",",, Истина);
	Для Каждого Поле Из ПоляФактора Цикл
		ИмяВШаблоне = ДопустимыеПоля[Поле];
		Представление = СтрЗаменить(Представление, ИмяВШаблоне, Фактор[Поле]);
	КонецЦикла;
	
	ПоляСчета = СтрРазделить2("НаименованиеБанка, БИК, РасчетныйСчет, КоррСчет", ",",, Истина);
	Для Каждого Поле Из ПоляСчета Цикл
		ИмяВШаблоне = ДопустимыеПоля[Поле];
		Представление = СтрЗаменить(Представление, ИмяВШаблоне, Фактор.БанковскийСчет[Поле]);
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции


Функция Валюта(Валюта, Знач ВыводимыеПоля)
	
	Представление = ОбъектнаяМодель.ВалютаПредставление(Валюта, ВыводимыеПоля);
	
	Возврат Представление;
	
КонецФункции

Функция ФИО(ФИО)
	
	Представление = ОбъектнаяМодель.ФИОПредставление(ФИО);
	
	Возврат Представление;
	
КонецФункции

Функция ПодписантДопИнфо(Подписант)
	
	Разделитель = ", ";
	
	ТипыОрганизации = ОбъектнаяМодель.ТипыОрганизации();
		
	Представление = "";
	
	Если Подписант.ТипОрганизации = ТипыОрганизации.ЮрЛицо Тогда
		
		Представление = СтрПредставление(Разделитель,
			Представление,,
			Подписант.НаименованиеОрганизации,,
		);
		
	КонецЕсли;
	
	Представление = СтрПредставление(Разделитель,
		Представление,,
		Подписант.ИНН
	);
		
	Если Подписант.ТипОрганизации = ТипыОрганизации.ИП Тогда
		
		Представление = СтрПредставление(Разделитель,
			Представление,,
			Подписант.СвидетельствоОРегистрацииИП,,
		);
		
	Иначе
		
	КонецЕсли;
	
	Представление = СтрПредставление(Разделитель,
		Представление,,
		Подписант.ОснованиеПолномочий,,
		Подписант.ОснованиеПолномочийОрганизации,,
		Подписант.ДопИнфо
	);
	
	Возврат Представление;
	
КонецФункции

Функция ОтветственноеЛицоДопИнфо(ОтветственноеЛицо)
	
	Если ОтветственноеЛицо = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Разделитель = ", ";
	
	ВидОЛ = ОбъектнаяМодель.ВидыОтветственногоЛица();
	
	Если ОтветственноеЛицо.Вид = ВидОЛ.СотрудникОрганизации Тогда
		
		Представление = СтрПредставление(Разделитель,
			ОтветственноеЛицо.ОснованиеПолномочий
		);
		
	ИначеЕсли ОтветственноеЛицо.Вид = ВидОЛ.ПредставительДовереннойОрганизации Тогда
		
		Представление = СтрПредставление(Разделитель,
			ОтветственноеЛицо.НаименованиеОрганизации,,
			ОтветственноеЛицо.ОснованиеДоверия,,
			ОтветственноеЛицо.ОснованиеПолномочий
		);
		
	ИначеЕсли ОтветственноеЛицо.Вид = ВидОЛ.ФизЛицо Тогда
		
		Представление = СтрПредставление(Разделитель,
			ОтветственноеЛицо.ОснованиеДоверия
		);
		
	КонецЕсли;
	
	Представление = СтрПредставление(Разделитель, 
		Представление,,
		ОтветственноеЛицо.ДопИнфо
	);
	
	Возврат Представление;
	
КонецФункции

Функция Составитель(Составитель)
	
	Представление = ОбъектнаяМодель.СоставительДокументаПредставление(Составитель);
	
	Возврат Представление;
	
КонецФункции

Функция ПлатежноРасчетныеДокументы(ПлатежноРасчетныеДокументы)
	
	Представление = ОбъектнаяМодель.ПлатежноРасчетныеДокументыПредставление(ПлатежноРасчетныеДокументы);
	
	Возврат Представление;
	
КонецФункции

Функция ИнфПоле(ИнфПоле)
	
	Представление = ОбъектнаяМодель.ИнфПолеПредставление(ИнфПоле);
	
	Возврат Представление;
	
КонецФункции

Функция ИсходныеДокументыКорректировки(ИсходныеДокументы)
	
	Шаблон = "№ %1 от %2, с учетом исправления № %3 от %4";
	Разделитель = Символы.ПС;
	
	ИсходныеСФ = Новый Массив;
	Для Каждого Документ Из ИсходныеДокументы Цикл
		
		НомерИсправления = Документ.ИсправлениеНомер;
		ДатаИсправления = Документ.ИсправлениеДата;
		
		ЕстьИсправление = ЗначениеЗаполнено(НомерИсправления) И ЗначениеЗаполнено(ДатаИсправления);
		Если НЕ ЕстьИсправление Тогда
			НомерИсправления = "-";
			ДатаИсправления = "-";
		КонецЕсли;
		
		ТекстИсходнаяСФ = СтрШаблон2(
			Шаблон, 
			Документ.Номер,
			ПредставлениеДаты(Документ.Дата),
			НомерИсправления,
			ПредставлениеДаты(ДатаИсправления)
		);
		ИсходныеСФ.Добавить(ТекстИсходнаяСФ);
		
	КонецЦикла;
	
	Результат = СтрСоединить2(ИсходныеСФ, Разделитель);
	
	Возврат Результат;
	
КонецФункции

Функция ДокументыОснования(Основание)
	
	Разделитель = "; ";
	
	Представление = Новый Массив;
	Для Каждого Документ Из Основание Цикл
		ТекстОснование = ОбъектнаяМодель.ОснованиеПредставление(Документ);
		Представление.Добавить(ТекстОснование);
	КонецЦикла;
	
	Результат = СтрСоединить2(Представление, Разделитель);
	
	Возврат Результат;
	
КонецФункции

Функция ТранспортныеНакладные(ТранспортныеНакладные)
	
	Результат = ОбъектнаяМодель.ТранспортныеНакладныеПредставление(ТранспортныеНакладные);
	
	Возврат Результат;
	
КонецФункции


//========================================================================
// Формирование представлений значений
//========================================================================

Функция Акциз(Акциз)
	
	БезАкциза = "без акциза";
	
	Представление = ?(Акциз = Неопределено, БезАкциза, Акциз);
	
	Возврат Представление;
	
КонецФункции


//========================================================================
// Вспомогательные методы заполнения ПФ
//========================================================================

Процедура ЗаполнитьПустыеПараметрыПрочерками(ПараметрыТД, СтрСписокПараметров = Неопределено)
	
	Прочерк = "—";
	
	ВсеПараметры = (СтрСписокПараметров = Неопределено);
	//: ТД = Новый ТабличныйДокумент; ПараметрыТД = ТД.Параметры;
	
	Если ВсеПараметры Тогда
		
		Для Сч = 0 По ПараметрыТД.Количество() - 1 Цикл
			
			ЗначениеПараметра = ПараметрыТД.Получить(Сч);
			
			Если ЗначениеПараметра = Неопределено Тогда
				ПараметрыТД.Установить(Сч, Прочерк);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СписокПараметров = ?(ТипЗнч(СтрСписокПараметров) = Тип("Массив"), 
			СтрСписокПараметров, 
			СтрРазделить2(СтрСписокПараметров, ",", Ложь, Истина)
		);
		
		Для Каждого Параметр Из СписокПараметров Цикл
			
			ЗначениеПараметра = ПараметрыТД[Параметр];
			
			Если ЗначениеПараметра = Неопределено Тогда
				ПараметрыТД[Параметр] = Прочерк;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//========================================================================
// Идентификаторы документа
//========================================================================

Функция Новый_ИдентификацияДокумента()
	
	Идентификаторы = Новый Структура(
		"Подписи, ИД, ДатаОтправки"
	);
	
	Возврат Идентификаторы;
	
КонецФункции

Процедура ВывестиИдентификаторыДокумента(ТабДок, ИдентификацияДокумента)
	
	//: ТабДок = Новый ТабличныйДокумент;
	
	Штамп = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Штамп");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	Параметры = ОбластьШапка.Параметры;
	
	Параметры.ИдДокумента = ИдентификацияДокумента.ИД;
	
	Штамп.Вывести(ОбластьШапка);
	
	Для Каждого Подпись Из ИдентификацияДокумента.Подписи Цикл
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		Параметры = ОбластьСтрока.Параметры;
		
		Сертификат = Подпись.Сертификат;
		Если Сертификат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Параметры.Организация = Сертификат.Субъект.НаименованиеОрганизации;
		
		Параметры.ФИО			= ФИО(Сертификат.Субъект.ФИО);
		Параметры.Должность		= Сертификат.Субъект.Должность;
		Параметры.СерийныйНомер	= Сертификат.СерийныйНомер;
		Параметры.Издатель		= Сертификат.Издатель.НаименованиеОрганизации;
		
		Параметры.Статус		= ?(НЕ Подпись.ЭтоОтказ, "Подписан квалифицированной ЭП", "Отказано");
		Параметры.ДатаПодписи	= ПредставлениеДатыUTC(Подпись.Дата);
		
		Штамп.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	Штамп.Вывести(ОбластьПодвал);
	
	ТабДок.ВставитьОбласть(
		Штамп.Область(1,, Штамп.ВысотаТаблицы), 
		ТабДок.Область(1,, Штамп.ВысотаТаблицы), 
		ТипСмещенияТабличногоДокумента.ПоВертикали, 
		Ложь
	);
	
	ТекстКолонтитула = 
		"ИД оригинального документа в Synerdocs:
		|" + ИдентификацияДокумента.ИД + "
		|Отправлен " + ПредставлениеДатыUTC(ИдентификацияДокумента.ДатаОтправки) + "
		|Страница [&НомерСтраницы] из [&СтраницВсего]";
	
	ТабДок.НижнийКолонтитул.Выводить = Истина;
	ТабДок.НижнийКолонтитул.НачальнаяСтраница = 2;
	ТабДок.НижнийКолонтитул.ТекстСправа = ТекстКолонтитула;
		
	ТабДок.РазмерКолонтитулаСнизу = 16;
	ТабДок.ПолеСнизу = 20;
	
КонецПроцедуры

Функция ПредставлениеДатыUTC(Дата)
	
	ШаблонUTC = "%1 (UTC%2%3)";
	
	ДатаПоМестномуВремени = МестноеВремя(Дата);
	
	Смещение = СмещениеСтандартногоВремени() + СмещениеЛетнегоВремени(, Дата);
	
	Если Смещение > 0 Тогда
		Знак = "+";
	ИначеЕсли Смещение < 0 Тогда
		Знак = "-";
	Иначе
		Знак = "±";
	КонецЕсли;
	
	// Из (Пустая дата + |смещение|) получается дата, в которой есть только время, равное часовому поясу
	ЧасовойПояс = Дата(1, 1, 1) + ?(Смещение < 0, -Смещение, Смещение);
	// Полученная дата выводится примерно так 04:30
	ЧасовойПояс = Формат(ЧасовойПояс, "ДФ=ЧЧ:мм; ДП=");
	
	Представление = СтрШаблон2(
		ШаблонUTC,
		Формат(ДатаПоМестномуВремени, "ДЛФ=DT"),
		Знак,
		ЧасовойПояс
	);
	
	Возврат Представление;
	
КонецФункции
