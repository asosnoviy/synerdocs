
Перем _ИмяФормы;

Перем Сертификат;

// Модули
Перем Телеметрия;
Перем СобытияТелеметрии;

Процедура ПодключитьМодули()
	
	Модули = ТребуютсяМодули("Модуль_Телеметрия");
	Телеметрия = Модули.Модуль_Телеметрия;
	
	СобытияТелеметрии = Телеметрия.ОписаниеСобытий();
	
КонецПроцедуры

Процедура ИнициализироватьФорму()
	
	ПодключитьМодули();
	
	Сертификат = ТекущийСертификат();
	
КонецПроцедуры

//========================================================================
// ЭКСПОРТНЫЙ ИНТЕРФЕЙС
//========================================================================

Функция ИмяФормы() Экспорт
	
	Если _ИмяФормы = Неопределено Тогда
		_ИмяФормы = ПолучитьИмяФормы(ЭтаФорма);
	КонецЕсли;
	
	Возврат _ИмяФормы;
	
КонецФункции


Процедура СформироватьПревьюДокументаТОРГ12() 
	
	СтруктураДокумента 	= СоздатьЭДТОРГ12ПродавецПревью(СтруктураПараметров.ДокументСсылка, Сертификат, СтруктураПараметров.СтруктураУступочнойНадписи);
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(СтруктураДокумента.Документ_Файл);
	СтрокаПоиска = Текст.ПолучитьТекст();
	
	// Заменим/добавим наше пространство имен
	НачалоПрИмен		= Найти(СтрокаПоиска, "<Файл") + 5;
	КонецПрИмен			= Найти(СтрокаПоиска, "ИдФайл=");
	УдаляемаяСтрока 	= Сред(СтрокаПоиска, НачалоПрИмен, КонецПрИмен - НачалоПрИмен);
	
	Если НЕ Найти(СтрокаПоиска, "СвОЭДОтпрСФ") = 0 Тогда
		//Парсим по новой схеме
		ПрИмен 				= """OTORG12""";
		СтрокаПодстановки 	= " xmlns=" + ПрИмен + " xmlns:xs=" + """http://www.w3.org/2001/XMLSchema""" +
		" xmlns:xsi=" + """http://www.w3.org/2001/XMLSchema-instance"" ";
		
		Если НЕ УдаляемаяСтрока = " " Тогда
			// Заменяем пространство имен в xml на наше
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, УдаляемаяСтрока, СтрокаПодстановки);	
		Иначе
			// Нет пространства имен в xml, подставляем наше
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "<Файл", "<Файл" + СтрокаПодстановки);
		КонецЕсли;
		
		ЭтоНовыйФормат = Истина;
	Иначе
		//Парсим по старой схеме
		ПрИмен 				= """OTORG12""";
		СтрокаПодстановки 	= " xmlns=" + ПрИмен + " xmlns:xs=" + """http://www.w3.org/2001/XMLSchema""" +
		" xmlns:xsi=" + """http://www.w3.org/2001/XMLSchema-instance"" ";
		
		Если НЕ УдаляемаяСтрока = " " Тогда
			// Заменяем пространство имен в xml на наше
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, УдаляемаяСтрока, СтрокаПодстановки);	
		Иначе
			// Нет пространства имен в xml, подставляем наше
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "<Файл", "<Файл" + СтрокаПодстановки);
		КонецЕсли;
		
		ЭтоНовыйФормат = Ложь;
	КонецЕсли;
	
	Текст.УстановитьТекст(СтрокаПоиска);
	Текст.Записать(СтруктураДокумента.Документ_Файл, КодировкаТекста.ANSI);
	
	ДанныеДляПечати = РазобратьЭД_ТОРГ12_02(СтруктураДокумента.Документ_Файл, Неопределено, ЭтоНовыйФормат); 
	
	ПечатьТОРГ12(ДанныеДляПечати, ЭлементыФормы.ПолеТабДок, Неопределено, Неопределено, СтруктураДокумента.СтруктураДанных);
	
КонецПроцедуры

Процедура СформироватьПревьюДокументаАкт()
	
	СтруктураДокумента 	= СоздатьЭДАктПродавецПревью(СтруктураПараметров.ДокументСсылка, Сертификат = Неопределено, СтруктураПараметров.СтруктураУступочнойНадписи);
	
	Текст 				= Новый ТекстовыйДокумент;
	Текст.Прочитать(СтруктураДокумента.Документ_Файл);
	СтрокаПоиска 		= Текст.ПолучитьТекст();
	
	// Заменим/добавим наше пространство имен
	НачалоПрИмен		= Найти(СтрокаПоиска, "<Файл") + 5;
	КонецПрИмен			= Найти(СтрокаПоиска, "ИдФайл=");
	УдаляемаяСтрока 	= Сред(СтрокаПоиска, НачалоПрИмен, КонецПрИмен - НачалоПрИмен);
	ПрИмен 				= """IAKTPRM""";
	СтрокаПодстановки 	= " xmlns=" + ПрИмен + " xmlns:xs=" + """http://www.w3.org/2001/XMLSchema""" +
	" xmlns:xsi=" + """http://www.w3.org/2001/XMLSchema-instance"" ";
	
	Если НЕ Найти(СтрокаПоиска, "СвОЭДОтпрСФ") = 0 Тогда
		ЭтоНовыйФормат = Истина;
	Иначе
		ЭтоНовыйФормат = Ложь;
	КонецЕсли;
	
	Если НЕ УдаляемаяСтрока = " " Тогда
		// Заменяем пространство имен в xml на наше
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска, УдаляемаяСтрока, СтрокаПодстановки);	
	Иначе
		// Нет пространства имен в xml, подставляем наше
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "<Файл", "<Файл" + СтрокаПодстановки);
	КонецЕсли;
	
	Текст.УстановитьТекст(СтрокаПоиска);
	Текст.Записать(СтруктураДокумента.Документ_Файл, КодировкаТекста.ANSI);
	
	Если НЕ ЭтоНовыйФормат Тогда
		Сообщить("Устаревший формат документа. Обновите обработку.");
	Иначе
		ДанныеДляПечати = РазобратьЭД_АктПродавецПревью(СтруктураДокумента.Документ_Файл);
	КонецЕсли;
	
	ПечатьАкт(ДанныеДляПечати, ЭлементыФормы.ПолеТабДок, СтруктураДокумента.СтруктураДанных);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЭлементыФормы.ПолеТабДок.Очистить();
	
	//Формируем данные для печати документа
	Если НЕ СтруктураПараметров = Неопределено Тогда
		Если СтруктураПараметров.ТипДокумента = "Торг12" Тогда
			СформироватьПревьюДокументаТОРГ12();
		ИначеЕсли СтруктураПараметров.ТипДокумента = "Акт" Тогда
			СформироватьПревьюДокументаАкт();			
		КонецЕсли;
	Иначе
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьТОРГ12(ДанныеДляПечати, ТабДокумент, СписокАктов = Неопределено, СтруктураШтампа, СтруктураДанных)
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 20;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = ПолучитьМакет("ТОРГ12");
	
	СведенияОГрузоотправителе = Новый Структура;
	
	СведенияОГрузоотправителе.Вставить("НаименованиеДляПечатныхФорм", ?(СтруктураДанных.Свойство("ГрузОтФИООшибка"), СтруктураДанных.ГрузОтФИООшибка, СокрЛП(ДанныеДляПечати.Грузоотправитель)));
	СведенияОГрузоотправителе.Вставить("ИНН",              ?(НЕ СтруктураДанных.Свойство("ГрузОтИННОшибка"), ДанныеДляПечати.Грузоотправитель_ИНН, СтруктураДанных.ГрузОтИННОшибка));
	СведенияОГрузоотправителе.Вставить("КПП",              ?(НЕ СтруктураДанных.Свойство("ГрузОтКППОшибка"), ДанныеДляПечати.Грузоотправитель_КПП, СтруктураДанных.ГрузОтКППОшибка));
	СведенияОГрузоотправителе.Вставить("Телефоны",         ?(НЕ СтруктураДанных.Свойство("ГрузОтТлфОшибка"), ДанныеДляПечати.Грузоотправитель_Телефон, СтруктураДанных.ГрузОтТлфОшибка));
	СведенияОГрузоотправителе.Вставить("Факсы",            ?(НЕ СтруктураДанных.Свойство("ГрузОтФаксОшибка"), ДанныеДляПечати.Грузоотправитель_Факс, СтруктураДанных.ГрузОтФаксОшибка));
	СведенияОГрузоотправителе.Вставить("НомерСчета",       ?(НЕ	СтруктураДанных.Свойство("ГрузОтСчетОшибка"), ДанныеДляПечати.Грузоотправитель_БанковскийСчет, СтруктураДанных.ГрузОтСчетОшибка));
	СведенияОГрузоотправителе.Вставить("Банк",             ?(НЕ СтруктураДанных.Свойство("ГрузОтСчетОшибка"), ДанныеДляПечати.Грузоотправитель_Банк, СтруктураДанных.ГрузОтСчетОшибка));
	СведенияОГрузоотправителе.Вставить("БИК",              ?(НЕ СтруктураДанных.Свойство("ГрузОтСчетОшибка"), ДанныеДляПечати.Грузоотправитель_БИКБанка, СтруктураДанных.ГрузОтСчетОшибка));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес", ?(НЕ СтруктураДанных.Свойство("ГрузОтАдресОшибка"), ?(СтруктураДанных.АдресГрузоотправителя.АдресНайден, 
	ДанныеДляПечати.Грузоотправитель_Адрес, ""), СтруктураДанных.ГрузОтАдресОшибка.Представление));
	
	СведенияОГрузополучателе = Новый Структура;
	
	СведенияОГрузополучателе.Вставить("НаименованиеДляПечатныхФорм", ?(СтруктураДанных.Свойство("ГрузПолучФИООшибка"), СтруктураДанных.ГрузПолучФИООшибка, СокрЛП(ДанныеДляПечати.Грузополучатель)));
	СведенияОГрузополучателе.Вставить("ИНН",              ?(НЕ СтруктураДанных.Свойство("ГрузПолучИННОшибка"), ДанныеДляПечати.Грузополучатель_ИНН, СтруктураДанных.ГрузПолучИННОшибка));
	СведенияОГрузополучателе.Вставить("КПП",              ?(НЕ СтруктураДанных.Свойство("ГрузПолучКППОшибка"), ДанныеДляПечати.Грузополучатель_КПП, СтруктураДанных.ГрузПолучКППОшибка));
	СведенияОГрузополучателе.Вставить("Телефоны",         ?(НЕ СтруктураДанных.Свойство("ГрузПолучТлфОшибка"), ДанныеДляПечати.Грузополучатель_Телефон, СтруктураДанных.ГрузПолучТлфОшибка));
	СведенияОГрузополучателе.Вставить("Факсы",            ?(НЕ СтруктураДанных.Свойство("ГрузПолучФаксОшибка"), ДанныеДляПечати.Грузополучатель_Факс, СтруктураДанных.ГрузПолучФаксОшибка));
	СведенияОГрузополучателе.Вставить("НомерСчета",       ?(НЕ СтруктураДанных.Свойство("ГрузПолучСчетОшибка"), ДанныеДляПечати.Грузополучатель_БанковскийСчет, СтруктураДанных.ГрузПолучСчетОшибка));
	СведенияОГрузополучателе.Вставить("Банк",             ?(НЕ СтруктураДанных.Свойство("ГрузПолучСчетОшибка"), ДанныеДляПечати.Грузополучатель_Банк, СтруктураДанных.ГрузПолучСчетОшибка));
	СведенияОГрузополучателе.Вставить("БИК",              ?(НЕ СтруктураДанных.Свойство("ГрузПолучСчетОшибка"), ДанныеДляПечати.Грузополучатель_БИКБанка, СтруктураДанных.ГрузПолучСчетОшибка));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес", ?(НЕ СтруктураДанных.Свойство("ГрузПолучАдресОшибка"), ?(СтруктураДанных.АдресГрузополучателя.АдресНайден, 
	ДанныеДляПечати.Грузополучатель_Адрес, ""), СтруктураДанных.ГрузПолучАдресОшибка.Представление));
	
	СведенияОПоставщике = Новый Структура;
	
	СведенияОПоставщике.Вставить("НаименованиеДляПечатныхФорм", ?(СтруктураДанных.Свойство("ПоставщикФИООшибка"), СтруктураДанных.ПоставщикФИООшибка, СокрЛП(ДанныеДляПечати.Поставщик)));
	СведенияОПоставщике.Вставить("ИНН",              ?(НЕ СтруктураДанных.Свойство("ПоставщикИННОшибка"), ДанныеДляПечати.Поставщик_ИНН, СтруктураДанных.ПоставщикИННОшибка));         
	СведенияОПоставщике.Вставить("КПП",              ?(НЕ СтруктураДанных.Свойство("ПоставщикКППОшибка"), ДанныеДляПечати.Поставщик_КПП, СтруктураДанных.ПоставщикКППОшибка));
	СведенияОПоставщике.Вставить("Телефоны",         ?(НЕ СтруктураДанных.Свойство("ПоставщикТлфОшибка"), ДанныеДляПечати.Поставщик_Телефон, СтруктураДанных.ПоставщикТлфОшибка));
	СведенияОПоставщике.Вставить("Факсы",            ?(НЕ СтруктураДанных.Свойство("ПоставщикФаксОшибка"), ДанныеДляПечати.Поставщик_Факс, СтруктураДанных.ПоставщикФаксОшибка));
	СведенияОПоставщике.Вставить("НомерСчета",       ?(НЕ СтруктураДанных.Свойство("ПоставщикСчетОшибка"), ДанныеДляПечати.Поставщик_БанковскийСчет, СтруктураДанных.ПоставщикСчетОшибка));
	СведенияОПоставщике.Вставить("Банк",             ?(НЕ СтруктураДанных.Свойство("ПоставщикСчетОшибка"), ДанныеДляПечати.Поставщик_Банк, СтруктураДанных.ПоставщикСчетОшибка));
	СведенияОПоставщике.Вставить("БИК",              ?(НЕ СтруктураДанных.Свойство("ПоставщикСчетОшибка"), ДанныеДляПечати.Поставщик_БИКБанка, СтруктураДанных.ПоставщикСчетОшибка));
	СведенияОПоставщике.Вставить("ФактическийАдрес", ?(НЕ СтруктураДанных.Свойство("ПоставщикАдресОшибка"), ?(СтруктураДанных.АдресОрганизации.АдресНайден, 
	ДанныеДляПечати.Поставщик_Адрес, ""), СтруктураДанных.ПоставщикАдресОшибка.Представление));
	
	СведенияОПокупателе = Новый Структура;
	
	СведенияОПокупателе.Вставить("НаименованиеДляПечатныхФорм", ?(СтруктураДанных.Свойство("ПлательщикФИООшибка"), СтруктураДанных.ПлательщикФИООшибка, СокрЛП(ДанныеДляПечати.Плательщик)));
	СведенияОПокупателе.Вставить("ИНН",              ?(НЕ СтруктураДанных.Свойство("ПлательщикИННОшибка"), ДанныеДляПечати.Плательщик_ИНН, СтруктураДанных.ПлательщикИННОшибка));
	СведенияОПокупателе.Вставить("КПП",              ?(НЕ СтруктураДанных.Свойство("ПлательщикКППОшибка"), ДанныеДляПечати.Плательщик_КПП, СтруктураДанных.ПлательщикКППОшибка));
	СведенияОПокупателе.Вставить("Телефоны",         ?(НЕ СтруктураДанных.Свойство("ПлательщикТлфОшибка"), ДанныеДляПечати.Плательщик_Телефон, СтруктураДанных.ПлательщикТлфОшибка));
	СведенияОПокупателе.Вставить("Факсы",            ?(НЕ СтруктураДанных.Свойство("ПлательщикФаксОшибка"), ДанныеДляПечати.Плательщик_Факс, СтруктураДанных.ПлательщикФаксОшибка));
	СведенияОПокупателе.Вставить("НомерСчета",       ?(НЕ СтруктураДанных.Свойство("ПлательщикСчетОшибка"), ДанныеДляПечати.Плательщик_БанковскийСчет, СтруктураДанных.ПлательщикСчетОшибка));
	СведенияОПокупателе.Вставить("Банк",             ?(НЕ СтруктураДанных.Свойство("ПлательщикСчетОшибка"), ДанныеДляПечати.Плательщик_Банк, СтруктураДанных.ПлательщикСчетОшибка));
	СведенияОПокупателе.Вставить("БИК",              ?(НЕ СтруктураДанных.Свойство("ПлательщикСчетОшибка"), ДанныеДляПечати.Плательщик_БИКБанка, СтруктураДанных.ПлательщикСчетОшибка));
	СведенияОПокупателе.Вставить("ФактическийАдрес", ?(НЕ СтруктураДанных.Свойство("ПлательщикАдресОшибка"), ?(СтруктураДанных.АдресКонтрагента.АдресНайден, 
	ДанныеДляПечати.Плательщик_Адрес, ""),СтруктураДанных.ПлательщикАдресОшибка.Представление));
	
	ОбластьМакетаШапка            	= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы 	= Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           	= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  	= Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            	= Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           	= Макет.ПолучитьОбласть("Подвал");
	ОбластьДанныеАкта			  	= Макет.ПолучитьОбласть("ДанныеАкта");
	ОбластьМакетаШтампШапка			= Макет.ПолучитьОбласть("ШтампШапка");
	ОбластьМакетаШтампСтрока		= Макет.ПолучитьОбласть("ШтампСтрока");
	ОбластьМакетаШтампПодвал		= Макет.ПолучитьОбласть("ШтампПодвал");
	ОбластьМакетаУстНадпись			= Макет.ПолучитьОбласть("УступочнаяНадпись");
	
	ГрузПринял  = СтрЗаменить(ДанныеДляПечати.Покупатель_ФИОГрузПринял, " ", "");
	ГрузПолучил = СтрЗаменить(ДанныеДляПечати.Покупатель_ФИОГрузПолучил, " ", "");
	
	// Выводим уступочную надпись
	Если НЕ ДанныеДляПечати.УступочнаяНадпись = Неопределено Тогда
		ОбластьМакетаУстНадпись.Параметры.УстНадпись = ДанныеДляПечати.УступочнаяНадпись;
		Если СтруктураДанных.Свойство("ОшибкиУступочнойНадписи") Тогда
			ОбластьМакетаУстНадпись.Области.ОблУстНадписьОшибки.ЦветФона 			= WebЦвета.Розовый;
			
			ЕстьОшибкиУстнадписи = Ложь;
			
			Если СтруктураДанных.ОшибкиУступочнойНадписи.Количество() > 0 Тогда
				СтрокаОшибки = "";
				Для Каждого ТекСтрока Из СтруктураДанных.ОшибкиУступочнойНадписи Цикл
					СтрокаОшибки = ?(ЗначениеЗаполнено(СтрокаОшибки), СтрокаОшибки + Символы.ПС + ТекСтрока.ОписаниеОшибки, ТекСтрока.ОписаниеОшибки);	
				КонецЦикла;
			КонецЕсли;
						
			ОбластьМакетаУстНадпись.Области.ОблУстНадписьОшибки.Примечание.Текст = СтрокаОшибки;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаУстНадпись);
	КонецЕсли;
	
	// Выводим общие реквизиты шапки
	ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(
		СведенияОГрузоотправителе,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны,Факсы,НомерСчета,Банк,БИК"
	);
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПодразделения = ДанныеДляПечати.Грузоотправитель_СтруктурноеПодразделение;
	
	ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ОписаниеОрганизации(
		СведенияОГрузополучателе,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны,Факсы,НомерСчета,Банк,БИК"
	);
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(
		СведенияОПоставщике,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны,Факсы,НомерСчета,Банк,БИК"
	);
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ОписаниеОрганизации(
		СведенияОПокупателе,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны,Факсы,НомерСчета,Банк,БИК"
	);
	
	ОбластьМакетаШапка.Параметры.Основание = ДанныеДляПечати.Основание;
	
	ОбластьМакетаШапка.Параметры.НомерДокумента = ДанныеДляПечати.НомерТН;
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = ДанныеДляПечати.ДатаТН;
	
	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = ?(НЕ СтруктураДанных.Свойство("ОблОргОКПООшибки"), ДанныеДляПечати.Грузоотправитель_ОКПО, СтруктураДанных.ОблОргОКПООшибки.ТекущееЗначение);
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = ДанныеДляПечати.Грузоотправитель_ОКДП;
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = ?(НЕ СтруктураДанных.Свойство("ОблГрузПолучОКПООшибки"), ДанныеДляПечати.Грузополучатель_ОКПО, СтруктураДанных.ОблГрузПолучОКПООшибки.ТекущееЗначение);
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = ?(НЕ СтруктураДанных.Свойство("ОблПоставщикОКПООшибки"), ДанныеДляПечати.Поставщик_ОКПО, СтруктураДанных.ОблПоставщикОКПООшибки.ТекущееЗначение);
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = ?(НЕ СтруктураДанных.Свойство("ОблПлательщикОКПООшибки"), ДанныеДляПечати.Плательщик_ОКПО, СтруктураДанных.ОблПлательщикОКПООшибки.ТекущееЗначение);
	ОбластьМакетаШапка.Параметры.ОснованиеНомер             = ДанныеДляПечати.Основание_Номер;
	ОбластьМакетаШапка.Параметры.ОснованиеДата              = ДанныеДляПечати.Основание_Дата;
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = ДанныеДляПечати.ТранспортнаяНакладная_Номер;
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = ДанныеДляПечати.ТранспортнаяНакладная_Дата;
	
	Если ДанныеДляПечати.Свойство("ВидОперации") Тогда
		ОбластьМакетаШапка.Параметры.ВидОперации = ДанныеДляПечати.ВидОперации;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОблОргОКПООшибки") Тогда
		ОбластьМакетаШапка.Области.ОблОргОКПООшибки.ЦветФона 					= WebЦвета.Розовый;
		ОбластьМакетаШапка.Области.ОблОргОКПООшибки.Примечание.Текст			= СтруктураДанных.ОблОргОКПООшибки.ОписаниеОшибки;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОблГрузПолучОКПООшибки") Тогда
		ОбластьМакетаШапка.Области.ОблГрузПолучОКПООшибки.ЦветФона 			= WebЦвета.Розовый;
		ОбластьМакетаШапка.Области.ОблГрузПолучОКПООшибки.Примечание.Текст  = СтруктураДанных.ОблГрузПолучОКПООшибки.ОписаниеОшибки;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОблПоставщикОКПООшибки") Тогда
		ОбластьМакетаШапка.Области.ОблПоставщикОКПООшибки.ЦветФона 			= WebЦвета.Розовый;
		ОбластьМакетаШапка.Области.ОблПоставщикОКПООшибки.Примечание.Текст  = СтруктураДанных.ОблПоставщикОКПООшибки.ОписаниеОшибки;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОблПлательщикОКПООшибки") Тогда
		ОбластьМакетаШапка.Области.ОблПлательщикОКПООшибки.ЦветФона 		= WebЦвета.Розовый;
		ОбластьМакетаШапка.Области.ОблПлательщикОКПООшибки.Примечание.Текст = СтруктураДанных.ОблПлательщикОКПООшибки.ОписаниеОшибки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляПечати.Основание_Номер) Тогда
		ОбластьМакетаШапка.Области.ОблОснованиеНомерОшибки.ЦветФона 		= WebЦвета.Хаки;
		ОбластьМакетаШапка.Области.ОблОснованиеНомерОшибки.Примечание.Текст = СтруктураДанных.ОблОснованиеОшибка.ОписаниеОшибки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляПечати.Основание_Дата) Тогда
		ОбластьМакетаШапка.Области.ОблОснованиеДатаОшибки.ЦветФона 			= WebЦвета.Хаки;
		ОбластьМакетаШапка.Области.ОблОснованиеДатаОшибки.Примечание.Текст 	= СтруктураДанных.ОблОснованиеОшибка.ОписаниеОшибки;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОблПредставлениеГрузОтпрОшибки") Тогда
		ОбластьМакетаШапка.Области.ОблПредставлениеГрузОтпрОшибки.ЦветФона 			= ?(СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
		ОбластьМакетаШапка.Области.ОблПредставлениеГрузОтпрОшибки.Примечание.Текст	= СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОблПредставлениеГрузПолучОшибки") Тогда
		ОбластьМакетаШапка.Области.ОблПредставлениеГрузПолучОшибки.ЦветФона 		= ?(СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
		ОбластьМакетаШапка.Области.ОблПредставлениеГрузПолучОшибки.Примечание.Текст	= СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОблПредставлениеПоставщикОшибки") Тогда
		ОбластьМакетаШапка.Области.ОблПредставлениеПоставщикОшибки.ЦветФона 		= ?(СтруктураДанных.ОблПредставлениеПоставщикОшибки.ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
		ОбластьМакетаШапка.Области.ОблПредставлениеПоставщикОшибки.Примечание.Текст	= СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
		ОбластьМакетаШапка.Области.ОблПредставлениеПлательщикОшибки.ЦветФона 			= ?(СтруктураДанных.ОблПредставлениеПлательщикОшибки.ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
		ОбластьМакетаШапка.Области.ОблПредставлениеПлательщикОшибки.Примечание.Текст	= СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки;
	КонецЕсли;	
	
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	// Инициализация счетчика страниц
	НомерСтраницы = 1;
	
	// Инициализация итогов по странице
	ИтогоМестНаСтранице       	= 0;
	ИтогоКоличествоНаСтранице 	= 0;
	ИтогоСуммаНаСтранице      	= 0;
	ИтогоНДСНаСтранице        	= 0;
	ИтогоСуммаСНДСНаСтранице  	= 0;
	ИтогоМассаБруттоПоСтранице 	= 0;
	
	// Инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ДанныеДляПечати.ТЗ_Товары.Количество();
	
	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ДанныеДляПечати.ТЗ_Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.НаимТов) + 
		?(ЗначениеЗаполнено(ВыборкаСтрок.ХарактерТов), ", " + СокрЛП(ВыборкаСтрок.ХарактерТов), "") +
		?(ЗначениеЗаполнено(ВыборкаСтрок.СортТов), ", " + СокрЛП(ВыборкаСтрок.СортТов), "") +
		?(ЗначениеЗаполнено(ВыборкаСтрок.АртикулТов), ", " + СокрЛП(ВыборкаСтрок.АртикулТов), "");
		                                                            
		ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаНаименование = ВыборкаСтрок.НаимЕдИзм;
		
		
		// Код единицы измерения (обязательный реквизит)
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблЕдИзмОшибка");
		ПараметрыОтбора.Вставить("НомерСтроки", ВыборкаСтрок.НомТов);
		СтрокаОшибки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокаОшибки.Количество() > 0 Тогда
			ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаКодПоОКЕИ = СтрокаОшибки[0].ТекущееЗначение;
			ОбластьМакетаСтрока.Области.ОблЕдИзмОшибка.ЦветФона 		= WebЦвета.Розовый;
			ОбластьМакетаСтрока.Области.ОблЕдИзмОшибка.Примечание.Текст = СтрокаОшибки[0].ОписаниеОшибки;
		Иначе
			ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаКодПоОКЕИ 		= ВыборкаСтрок.ОКЕИ_Тов;
			ОбластьМакетаСтрока.Области.ОблЕдИзмОшибка.ЦветФона 		= WebЦвета.Белый;
			ОбластьМакетаСтрока.Области.ОблЕдИзмОшибка.Примечание.Текст = "";
		КонецЕсли;
		
		// Код товара/штрих-код
		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблКодТовОшибка");
		ПараметрыОтбора.Вставить("НомерСтроки", ВыборкаСтрок.НомТов);
		СтрокаОшибки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);

		Если СтрокаОшибки.Количество() > 0 Тогда
			ОбластьМакетаСтрока.Параметры.ТоварКод							= СтрокаОшибки[0].ТекущееЗначение;
			ОбластьМакетаСтрока.Области.ОблКодТовОшибка.ЦветФона 			= WebЦвета.Желтый;
			ОбластьМакетаСтрока.Области.ОблКодТовОшибка.Примечание.Текст 	= СтрокаОшибки[0].ОписаниеОшибки;
		Иначе
			ОбластьМакетаСтрока.Параметры.ТоварКод 							= ВыборкаСтрок.КодТов;
			ОбластьМакетаСтрока.Области.ОблКодТовОшибка.ЦветФона 			= WebЦвета.Белый;
			ОбластьМакетаСтрока.Области.ОблКодТовОшибка.Примечание.Текст 	= "";
		КонецЕсли;
        	
		// Количество
		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблКоличествоОшибка");
		ПараметрыОтбора.Вставить("НомерСтроки", ВыборкаСтрок.НомТов);
		СтрокаОшибки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокаОшибки.Количество() > 0 Тогда
			ОбластьМакетаСтрока.Параметры.Количество 							= СтрокаОшибки[0].ТекущееЗначение;
			ОбластьМакетаСтрока.Области.ОблКоличествоОшибка.ЦветФона 			= WebЦвета.Желтый;
			ОбластьМакетаСтрока.Области.ОблКоличествоОшибка.Примечание.Текст 	= СтрокаОшибки[0].ОписаниеОшибки;
		Иначе
			ОбластьМакетаСтрока.Параметры.Количество 							= ВыборкаСтрок.Нетто;
			ОбластьМакетаСтрока.Области.ОблКоличествоОшибка.ЦветФона 			= WebЦвета.Белый;
			ОбластьМакетаСтрока.Области.ОблКоличествоОшибка.Примечание.Текст 	= "";
		КонецЕсли;
		
		// Цена товара (необязательный реквизит)
		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблЦенаОшибка");
		ПараметрыОтбора.Вставить("НомерСтроки", ВыборкаСтрок.НомТов);
		СтрокаОшибки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокаОшибки.Количество() > 0 Тогда
			ОбластьМакетаСтрока.Параметры.Цена 							= СтрокаОшибки[0].ТекущееЗначение;
			ОбластьМакетаСтрока.Области.ОблЦенаОшибка.ЦветФона 			= WebЦвета.Хаки;
			ОбластьМакетаСтрока.Области.ОблЦенаОшибка.Примечание.Текст 	= СтрокаОшибки[0].ОписаниеОшибки;
		Иначе 
			ОбластьМакетаСтрока.Параметры.Цена 							= ВыборкаСтрок.Цена;
			ОбластьМакетаСтрока.Области.ОблЦенаОшибка.ЦветФона 			= WebЦвета.Белый;
			ОбластьМакетаСтрока.Области.ОблЦенаОшибка.Примечание.Текст 	= "";
		КонецЕсли;
		
		// Стоимость товара с учетом НДС (необязательный реквизит)
		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблСуммаОшибка");
		ПараметрыОтбора.Вставить("НомерСтроки", ВыборкаСтрок.НомТов);
		СтрокаОшибки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокаОшибки.Количество() > 0 Тогда
			ОбластьМакетаСтрока.Параметры.СуммаСНДС 					= СтрокаОшибки[0].ТекущееЗначение;
			ОбластьМакетаСтрока.Области.ОблСуммаОшибка.ЦветФона 		= WebЦвета.Хаки;
			ОбластьМакетаСтрока.Области.ОблСуммаОшибка.Примечание.Текст = СтрокаОшибки[0].ОписаниеОшибки;
		Иначе 
			ОбластьМакетаСтрока.Параметры.СуммаСНДС = ВыборкаСтрок.СумУчНДС;
			ОбластьМакетаСтрока.Области.ОблСуммаОшибка.ЦветФона 		= WebЦвета.Белый;
			ОбластьМакетаСтрока.Области.ОблСуммаОшибка.Примечание.Текст = "";
		КонецЕсли;
		
		// Стоимость товара без НДС (необязательный реквизит)
		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблСуммаБезНДСОшибка");
		ПараметрыОтбора.Вставить("НомерСтроки", ВыборкаСтрок.НомТов);
		СтрокаОшибки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокаОшибки.Количество() > 0 Тогда
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС 							= СтрокаОшибки[0].ТекущееЗначение;
			ОбластьМакетаСтрока.Области.ОблСуммаБезНДСОшибка.ЦветФона 			= WebЦвета.Хаки;
			ОбластьМакетаСтрока.Области.ОблСуммаБезНДСОшибка.Примечание.Текст 	= СтрокаОшибки[0].ОписаниеОшибки;
		Иначе 
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС = ВыборкаСтрок.СумБезНДС;
			ОбластьМакетаСтрока.Области.ОблСуммаБезНДСОшибка.ЦветФона 			= WebЦвета.Белый;
			ОбластьМакетаСтрока.Области.ОблСуммаБезНДСОшибка.Примечание.Текст 	= "";
		КонецЕсли;
		
		// Сумма НДС
		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблСуммаНДСОшибка");
		ПараметрыОтбора.Вставить("НомерСтроки", ВыборкаСтрок.НомТов);
		СтрокаОшибки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокаОшибки.Количество() > 0 Тогда
			ОбластьМакетаСтрока.Параметры.СуммаНДС 							= СтрокаОшибки[0].ТекущееЗначение;
			ОбластьМакетаСтрока.Области.ОблСуммаНДСОшибка.ЦветФона 			= WebЦвета.Хаки;
			ОбластьМакетаСтрока.Области.ОблСуммаНДСОшибка.Примечание.Текст 	= СтрокаОшибки[0].ОписаниеОшибки;
		Иначе 
			ОбластьМакетаСтрока.Параметры.СуммаНДС 							= ?(НЕ ВыборкаСтрок.СтавкаНДС = Неопределено, ВыборкаСтрок.СумНДС, "без НДС");
			ОбластьМакетаСтрока.Области.ОблСуммаНДСОшибка.ЦветФона 			= WebЦвета.Белый;
			ОбластьМакетаСтрока.Области.ОблСуммаНДСОшибка.Примечание.Текст 	= "";
		КонецЕсли;
		
		
		ОбластьМакетаСтрока.Параметры.ВидУпаковки = ВыборкаСтрок.ВидУпак;
		ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = ВыборкаСтрок.Место;
		ОбластьМакетаСтрока.Параметры.КоличествоМест = ВыборкаСтрок.КолМест;
		ОбластьМакетаСтрока.Параметры.МассаБрутто = ВыборкаСтрок.Брутто;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС = ?(НЕ ВыборкаСтрок.СтавкаНДС = Неопределено, Строка(ВыборкаСтрок.СтавкаНДС) + "%", "без НДС");
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КолМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		
		// Увеличим итоги по странице
		ИтогоМестНаСтранице       	= ИтогоМестНаСтранице       + ?(ЗначениеЗаполнено(ВыборкаСтрок.КолМест), ВыборкаСтрок.КолМест, 0);
		ИтогоКоличествоНаСтранице 	= ИтогоКоличествоНаСтранице + ?(ЗначениеЗаполнено(ВыборкаСтрок.Нетто), ВыборкаСтрок.Нетто, 0);
		ИтогоСуммаНаСтранице      	= ИтогоСуммаНаСтранице      + ?(ЗначениеЗаполнено(ВыборкаСтрок.СумБезНДС), ВыборкаСтрок.СумБезНДС, 0);
		ИтогоНДСНаСтранице        	= ИтогоНДСНаСтранице        + ?(ЗначениеЗаполнено(ВыборкаСтрок.СумНДС), ВыборкаСтрок.СумНДС, 0);
		ИтогоСуммаСНДСНаСтранице  	= ИтогоСуммаСНДСНаСтранице  + ?(ЗначениеЗаполнено(ВыборкаСтрок.СумУчНДС), ВыборкаСтрок.СумУчНДС, 0);
		ИтогоМассаБруттоПоСтранице 	= ИтогоМассаБруттоПоСтранице + ?(ЗначениеЗаполнено(ВыборкаСтрок.Брутто), ВыборкаСтрок.Брутто, 0);
		
		// Увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + ?(ЗначениеЗаполнено(ВыборкаСтрок.КолМест), ВыборкаСтрок.КолМест, 0);
		ИтогоКоличество = ИтогоКоличество + ?(ЗначениеЗаполнено(ВыборкаСтрок.Нетто), ВыборкаСтрок.Нетто, 0);
		ИтогоСумма      = ИтогоСумма      + ?(ЗначениеЗаполнено(ВыборкаСтрок.СумБезНДС), ВыборкаСтрок.СумБезНДС, 0);
		ИтогоНДС        = ИтогоНДС        + ?(ЗначениеЗаполнено(ВыборкаСтрок.СумНДС), ВыборкаСтрок.СумНДС, 0);
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + ?(ЗначениеЗаполнено(ВыборкаСтрок.СумУчНДС), ВыборкаСтрок.СумУчНДС, 0);
		
	КонецЦикла;
	
	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       	= ИтогоМестНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице 	= ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      	= ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        	= ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  	= ИтогоСуммаСНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогоМассаБруттоПоСтранице;
	
	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогМест       	= ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогКоличество 	= ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      	= ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        	= ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  	= ИтогоСуммаСНДС;
	ОбластьМакетаВсего.Параметры.ИтогМассаБрутто	= ДанныеДляПечати.Брутто;
	
	ТабДокумент.Вывести(ОбластьМакетаВсего);
	
	// Выводим подвал документа
	Если НЕ СтруктураДанных.Свойство("ОблОтпускРазрешилФИООшибка") Тогда
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя   = ДанныеДляПечати.ОтпускРазрешил;
	Иначе
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя 							= ДанныеДляПечати.ОтпускРазрешил;
		ОбластьМакетаПодвал.Области.ОблОтпускРазрешилФИООшибка.Примечание.Текст = СтруктураДанных.ОблОтпускРазрешилФИООшибка.ОписаниеОшибки;
		ОбластьМакетаПодвал.Области.ОблОтпускРазрешилФИООшибка.ЦветФона			= ?(СтруктураДанных.ОблОтпускРазрешилФИООшибка.ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляПечати.Бухгалтер) Тогда
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера = ДанныеДляПечати.Бухгалтер;
	Иначе
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера 					= ДанныеДляПечати.Бухгалтер;
		ОбластьМакетаПодвал.Области.ОблБухгалтерФИООшибка.Примечание.Текст 	= "Не указаны ФИО бухгалтера.";
		ОбластьМакетаПодвал.Области.ОблБухгалтерФИООшибка.ЦветФона			= WebЦвета.Хаки;
	КонецЕсли;
	
	Если НЕ СтруктураДанных.Свойство("ОблОтпускРазрешилДолжностьОшибка") Тогда
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = ДанныеДляПечати.ОтпускРазрешил_Должность;
	Иначе
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя 							= ДанныеДляПечати.ОтпускРазрешил_Должность;
		ОбластьМакетаПодвал.Области.ОблОтпускРазрешилДолжностьОшибка.Примечание.Текст 	= СтруктураДанных.ОблОтпускРазрешилДолжностьОшибка.ОписаниеОшибки;
		ОбластьМакетаПодвал.Области.ОблОтпускРазрешилДолжностьОшибка.ЦветФона			= ?(СтруктураДанных.ОблОтпускРазрешилДолжностьОшибка.ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
	КонецЕсли;
	
	Если НЕ СтруктураДанных.Свойство("ОблОтпускПроизвелФИООшибка") Тогда 
		ОбластьМакетаПодвал.Параметры.ФИОКладовщика			= ДанныеДляПечати.ОтпускПроизвел;
	Иначе
		ОбластьМакетаПодвал.Параметры.ФИОКладовщика								= ДанныеДляПечати.ОтпускПроизвел;
		ОбластьМакетаПодвал.Области.ОблОтпускПроизвелФИООшибка.Примечание.Текст = СтруктураДанных.ОблОтпускПроизвелФИООшибка.ОписаниеОшибки;
		ОбластьМакетаПодвал.Области.ОблОтпускПроизвелФИООшибка.ЦветФона			= ?(СтруктураДанных.ОблОтпускПроизвелФИООшибка.ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
	КонецЕсли;
	
	ОбластьМакетаПодвал.Параметры.ДолжностьКладовщика	= ДанныеДляПечати.ОтпускПроизвел_Должность;
	
	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ?(ЗначениеЗаполнено(ИтогоСуммаСНДС), ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета), "");
	
	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ?(ЗначениеЗаполнено(ДанныеДляПечати.КоличествоЗаписейПрописью), ДанныеДляПечати.КоличествоЗаписейПрописью, ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0"));
	ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью = ?(ЗначениеЗаполнено(ДанныеДляПечати.КоличествоМестОбщПрописью), ДанныеДляПечати.КоличествоМестОбщПрописью, ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")));
	ОбластьМакетаПодвал.Параметры.СуммаПрописью = ?(ЗначениеЗаполнено(ДанныеДляПечати.СуммаОтпускаПрописью), ДанныеДляПечати.СуммаОтпускаПрописью, ?(ЗначениеЗаполнено(ИтогоСуммаСНДС), ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета), ""));
	
	Если ЗначениеЗаполнено(ДанныеДляПечати.НеттоОбщПрописью) Тогда
		ОбластьМакетаПодвал.Параметры.МассаНеттоПрописью = ДанныеДляПечати.НеттоОбщПрописью;
	ИначеЕсли ЗначениеЗаполнено(ДанныеДляПечати.НеттоОбщ) Тогда
		ОбластьМакетаПодвал.Параметры.МассаНеттоПрописью = ЧислоПрописью(Число(ДанныеДляПечати.НеттоОбщ), ,",,,,,,,,0");
	Иначе
		ОбластьМакетаПодвал.Параметры.МассаНеттоПрописью = "";
	КонецЕсли;
	
	Попытка
		ОбластьМакетаПодвал.Параметры.МассаНеттоПрописью = ?(ЗначениеЗаполнено(ДанныеДляПечати.НеттоОбщ), ЧислоПрописью(Число(ДанныеДляПечати.НеттоОбщ), ,",,,,,,,,0"), "");
	Исключение
		ОбластьМакетаПодвал.Параметры.МассаНеттоПрописью = "";
	КонецПопытки;
	
	
	Если ЗначениеЗаполнено(ДанныеДляПечати.Брутто) Тогда
		ОбластьМакетаПодвал.Параметры.МассаГрузаПрописью = ЧислоПрописью(Число(ДанныеДляПечати.Брутто), ,",,,,,,,,0");
	ИначеЕсли ЗначениеЗаполнено(ДанныеДляПечати.Брутто) Тогда
		ОбластьМакетаПодвал.Параметры.МассаГрузаПрописью = ЧислоПрописью(Число(ДанныеДляПечати.Брутто), ,",,,,,,,,0");
	Иначе
		ОбластьМакетаПодвал.Параметры.МассаГрузаПрописью = "";
	КонецЕсли;
	
	Попытка
		ОбластьМакетаПодвал.Параметры.МассаГрузаПрописью = ?(ЗначениеЗаполнено(ДанныеДляПечати.БруттоОбщ), ЧислоПрописью(Число(ДанныеДляПечати.БруттоОбщ), ,",,,,,,,,0"), "");
	Исключение
		ОбластьМакетаПодвал.Параметры.МассаГрузаПрописью = "";
	КонецПопытки;
	
	ОбластьМакетаПодвал.Параметры.МассаНетто = ДанныеДляПечати.НеттоОбщ;
	ОбластьМакетаПодвал.Параметры.МассаГруза = ДанныеДляПечати.БруттоОбщ;
	
	МассивДатаДок = РазложитьСтрокуВМассивПодстрок(ДанныеДляПечати.ДатаТН, ".");
	ПолнаяДатаДокумента = Формат(Дата(МассивДатаДок[2], МассивДатаДок[1], МассивДатаДок[0]), "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
	ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
	
	// Количество приложений прописью
	Если ДанныеДляПечати.Свойство("КолПрилПр") Тогда
		ОбластьМакетаПодвал.Параметры.КолПрилПр = ДанныеДляПечати.КолПрилПр;
	КонецЕсли;
	
	ПодписантПредставление = СтрЗаменить(?(ЗначениеЗаполнено(ДанныеДляПечати.ПодписантЮЛ), ДанныеДляПечати.ПодписантЮЛ, ДанныеДляПечати.ПодписантИП), " ", "");
	
	Разрешил = СтрЗаменить(ДанныеДляПечати.ОтпускРазрешил, " ", "");
	Произвел = СтрЗаменить(ДанныеДляПечати.ОтпускПроизвел, " ", "");
	Бух		 = СтрЗаменить(ДанныеДляПечати.Бухгалтер, " ", "");
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	ТабДокумент.НижнийКолонтитул.Выводить = Истина;
	ТабДокумент.РазмерКолонтитулаСнизу = 20;
	ТабДокумент.НижнийКолонтитул.НачальнаяСтраница = 2;
	
КонецПроцедуры

Процедура ПечатьАкт(ДанныеДляПечати, ТабДокумент, СтруктураДанных)
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет = ПолучитьМакет("Акт");
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         	= 0;
	ТабДокумент.ПолеСлева          	= 0;
	ТабДокумент.ПолеСнизу          	= 20;
	ТабДокумент.ПолеСправа         	= 0;
	ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
			
	ОбластьМакетаЗаголовок			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаШапка				= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаСтрока				= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьМакетаПодвалТаблицы		= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьМакетаПодвал				= Макет.ПолучитьОбласть("Подвал");
					
	// Выводим шапку
	ОбластьМакета = ОбластьМакетаЗаголовок;
	
		// Уступочная надпись
	Если ДанныеДляПечати.Свойство("УступочнаяНадпись") Тогда
		Если НЕ ДанныеДляПечати.УступочнаяНадпись = Неопределено Тогда
			ОбластьМакета.Параметры.УступочнаяНадпись = ДанныеДляПечати.УступочнаяНадпись;
			
			Если СтруктураДанных.Свойство("ОшибкиУступочнойНадписи") Тогда
				Если СтруктураДанных.ОшибкиУступочнойНадписи.Количество() > 0 Тогда
					ОбластьМакета.Области.ОблУстНадписьОшибки.ЦветФона 			= WebЦвета.Розовый;
					
					Для Каждого ТекСтрока Из СтруктураДанных.ОшибкиУступочнойНадписи Цикл 
						ОписаниеОшибкиСтрокой = ?(ЗначениеЗаполнено(ОписаниеОшибкиСтрокой), ОписаниеОшибкиСтрокой + Символы.ПС + ТекСтрока.ОписаниеОшибки, ТекСтрока.ОписаниеОшибки);
					КонецЦикла;
					ОбластьМакета.Области.ОблУстНадписьОшибки.Примечание.Текст		= ОписаниеОшибкиСтрокой;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    	
	ОбластьМакета.Параметры.АктНомер 					= ДанныеДляПечати.НомерАкта;
	ОбластьМакета.Параметры.АктДата 					= Формат(ДанныеДляПечати.ДатаАкта, "ДФ='дд ММММ гггг'") + " г.";	
	
	СведенияОбИсполнителе = Новый Структура;
	СведенияОбИсполнителе.Вставить("НаименованиеДляПечатныхФорм", СокрЛП(ДанныеДляПечати.Исполнитель));
	СведенияОбИсполнителе.Вставить("ИНН",				ДанныеДляПечати.Исполнитель_ИНН);
	СведенияОбИсполнителе.Вставить("КПП",				ДанныеДляПечати.Исполнитель_КПП);
	СведенияОбИсполнителе.Вставить("Телефоны",			ДанныеДляПечати.Исполнитель_Телефон);
	СведенияОбИсполнителе.Вставить("НомерСчета",		ДанныеДляПечати.Исполнитель_БанковскийСчет);
	СведенияОбИсполнителе.Вставить("Банк",				ДанныеДляПечати.Исполнитель_Банк);
	СведенияОбИсполнителе.Вставить("БИК",				ДанныеДляПечати.Исполнитель_БИКБанка);
	СведенияОбИсполнителе.Вставить("ФактическийАдрес",	ДанныеДляПечати.Исполнитель_Адрес);
	СведенияОбИсполнителе.Вставить("Факсы",				ДанныеДляПечати.Исполнитель_Факс);
		
	ОбластьМакета.Параметры.ПредставлениеИсполнителя 	= ОписаниеОрганизации(
		СведенияОбИсполнителе, 
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны,Факсы,НомерСчета,Банк,БИК"
	);
	ОбластьМакета.Параметры.Заголовок 					= ДанныеДляПечати.Заголовок;
	
	Если СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
		ОбластьМакета.Области.ОблПредставлениеИсполнительОшибки.ЦветФона 			= ?(СтруктураДанных.ОблПредставлениеИсполнительОшибки.ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
		ОбластьМакета.Области.ОблПредставлениеИсполнительОшибки.Примечание.Текст 	= СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки;
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = ОбластьМакетаШапка;
	ОбластьМакета.Параметры.НачРабот = ДанныеДляПечати.НачалоРабот;
	ОбластьМакета.Параметры.КонРабот = ДанныеДляПечати.КонецРабот;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = ОбластьМакетаСтрока;
	
	НомерСтроки = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеДляПечати.ТЗ_Работы Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.НомСтр = НомерСтроки;
		
		// Если описание заполнено, выводим его. 
		Если НЕ СокрЛП(СтрокаТабличнойЧасти.Описание) = "" Тогда
			ОбластьМакета.Параметры.ПредставлениеУслуги = СокрЛП(СтрокаТабличнойЧасти.НаимРабот) + " (" + СокрЛП(СтрокаТабличнойЧасти.Описание) + ")";
		Иначе 
			ОбластьМакета.Параметры.ПредставлениеУслуги = СокрЛП(СтрокаТабличнойЧасти.НаимРабот);
		КонецЕсли;
		
		// Наименование
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблПредставлениеУслугиОшибки");
		ПараметрыОтбора.Вставить("НомерСтроки", НомерСтроки);
		
		НайденныеСтроки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбластьМакета.Области.ОблПредставлениеУслугиОшибки.ЦветФона 			= ?(НайденныеСтроки[0].ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
			ОбластьМакета.Области.ОблПредставлениеУслугиОшибки.Примечание.Текст 	= НайденныеСтроки[0].ОписаниеОшибки;
		Иначе
			ОбластьМакета.Области.ОблПредставлениеУслугиОшибки.ЦветФона 			= WebЦвета.Белый;
			ОбластьМакета.Области.ОблПредставлениеУслугиОшибки.Примечание.Текст 	= "";
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблКодЕИОшибки");
		НайденныеСтроки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбластьМакета.Параметры.КодЕИ							= НайденныеСтроки[0].ТекущееЗначение;
			ОбластьМакета.Области.ОблКодЕИОшибки.ЦветФона 			= ?(НайденныеСтроки[0].ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
			ОбластьМакета.Области.ОблКодЕИОшибки.Примечание.Текст 	= НайденныеСтроки[0].ОписаниеОшибки;
		Иначе
			ОбластьМакета.Параметры.КодЕИ							= СтрокаТабличнойЧасти.ОКЕИ;
			ОбластьМакета.Области.ОблКодЕИОшибки.ЦветФона 			= WebЦвета.Белый;
			ОбластьМакета.Области.ОблКодЕИОшибки.Примечание.Текст 	= "";
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблНаимЕИОшибки");
		НайденныеСтроки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);

		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбластьМакета.Параметры.КодЕИ							= НайденныеСтроки[0].ТекущееЗначение;
			ОбластьМакета.Области.ОблНаимЕИОшибки.ЦветФона 			= ?(НайденныеСтроки[0].ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
			ОбластьМакета.Области.ОблНаимЕИОшибки.Примечание.Текст 	= НайденныеСтроки[0].ОписаниеОшибки;
		Иначе
			ОбластьМакета.Параметры.НаимЕИ 							= СтрокаТабличнойЧасти.НаимЕдИзм;
			ОбластьМакета.Области.ОблНаимЕИОшибки.ЦветФона 			= WebЦвета.Белый;
			ОбластьМакета.Области.ОблНаимЕИОшибки.Примечание.Текст 	= "";
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблЦенаОшибки");
		НайденныеСтроки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);

		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбластьМакета.Параметры.Цена							= НайденныеСтроки[0].ТекущееЗначение;
			ОбластьМакета.Области.ОблЦенаОшибки.ЦветФона 			= ?(НайденныеСтроки[0].ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
			ОбластьМакета.Области.ОблЦенаОшибки.Примечание.Текст 	= НайденныеСтроки[0].ОписаниеОшибки;
		Иначе
			ОбластьМакета.Параметры.Цена 							= СтрокаТабличнойЧасти.Цена;
			ОбластьМакета.Области.ОблЦенаОшибки.ЦветФона 			= WebЦвета.Белый;
			ОбластьМакета.Области.ОблЦенаОшибки.Примечание.Текст 	= "";
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблКоличествоОшибки");
		НайденныеСтроки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);

		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбластьМакета.Параметры.Количество							= НайденныеСтроки[0].ТекущееЗначение;
			ОбластьМакета.Области.ОблКоличествоОшибки.ЦветФона 			= ?(НайденныеСтроки[0].ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
			ОбластьМакета.Области.ОблКоличествоОшибки.Примечание.Текст 	= НайденныеСтроки[0].ОписаниеОшибки;
		Иначе
			ОбластьМакета.Параметры.Количество 							= СтрокаТабличнойЧасти.Количество;
			ОбластьМакета.Области.ОблКоличествоОшибки.ЦветФона 			= WebЦвета.Белый;
			ОбластьМакета.Области.ОблКоличествоОшибки.Примечание.Текст 	= "";
		КонецЕсли;

		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблСтоимБезНДСОшибки");
		НайденныеСтроки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);

		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбластьМакета.Параметры.СтоимБезНДС							= НайденныеСтроки[0].ТекущееЗначение;
			ОбластьМакета.Области.ОблСтоимБезНДСОшибки.ЦветФона 		= ?(НайденныеСтроки[0].ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
			ОбластьМакета.Области.ОблСтоимБезНДСОшибки.Примечание.Текст = НайденныеСтроки[0].ОписаниеОшибки;
		Иначе
			ОбластьМакета.Параметры.СтоимБезНДС							= СтрокаТабличнойЧасти.СумБезНДС;
			ОбластьМакета.Области.ОблСтоимБезНДСОшибки.ЦветФона 		= WebЦвета.Белый;
			ОбластьМакета.Области.ОблСтоимБезНДСОшибки.Примечание.Текст = "";
		КонецЕсли;

		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблСуммаНДСОшибки");
		НайденныеСтроки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);

		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбластьМакета.Параметры.СуммаНДС							= НайденныеСтроки[0].ТекущееЗначение;
			ОбластьМакета.Области.ОблСуммаНДСОшибки.ЦветФона 			= ?(НайденныеСтроки[0].ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
			ОбластьМакета.Области.ОблСуммаНДСОшибки.Примечание.Текст 	= НайденныеСтроки[0].ОписаниеОшибки;
		Иначе
			ОбластьМакета.Параметры.СуммаНДС							= СтрокаТабличнойЧасти.СумНДС;
            ОбластьМакета.Области.ОблСуммаНДСОшибки.ЦветФона 			= WebЦвета.Белый;
			ОбластьМакета.Области.ОблСуммаНДСОшибки.Примечание.Текст 	= "";
		КонецЕсли;

		ПараметрыОтбора.Вставить("ИмяЭлемента", "ОблСтоимУчНДСОшибки");
		НайденныеСтроки = СтруктураДанных.ТЗ_ОшибкиТабЧастиТовары.НайтиСтроки(ПараметрыОтбора);

		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбластьМакета.Параметры.СтоимУчНДС							= НайденныеСтроки[0].ТекущееЗначение;
			ОбластьМакета.Области.ОблСтоимУчНДСОшибки.ЦветФона 			= ?(НайденныеСтроки[0].ЭтоОшибка, WebЦвета.Розовый, WebЦвета.Хаки);
			ОбластьМакета.Области.ОблСтоимУчНДСОшибки.Примечание.Текст 	= НайденныеСтроки[0].ОписаниеОшибки;
		Иначе
			ОбластьМакета.Параметры.СтоимУчНДС							= СтрокаТабличнойЧасти.СумУчНДС;
            ОбластьМакета.Области.ОблСтоимУчНДСОшибки.ЦветФона 			= WebЦвета.Белый;
			ОбластьМакета.Области.ОблСтоимУчНДСОшибки.Примечание.Текст 	= "";
		КонецЕсли;
 		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ОбластьМакета = ОбластьМакетаПодвалТаблицы;
	
	ОбластьМакета.Параметры.ВсегоБезНДС	= ОбщегоНазначения.ФорматСумм(ДанныеДляПечати.СуммаБезНДС);
	ОбластьМакета.Параметры.ВсегоНДС	= ОбщегоНазначения.ФорматСумм(ДанныеДляПечати.СуммаНДС);
	ОбластьМакета.Параметры.ВсегоСНДС 	= ОбщегоНазначения.ФорматСумм(ДанныеДляПечати.СуммаСНДС);
		
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = ОбластьМакетаПодвал;
	
	ОбластьМакета.Параметры.ИтогоСуммаСНДС 	= ?(ЗначениеЗаполнено(ДанныеДляПечати.СуммаСНДС), ОбщегоНазначения.СформироватьСуммуПрописью(ДанныеДляПечати.СуммаСНДС, мВалютаРегламентированногоУчета), "");;
	ОбластьМакета.Параметры.ИтогоСуммаНДС 	= ?(ЗначениеЗаполнено(ДанныеДляПечати.СуммаНДС), ОбщегоНазначения.СформироватьСуммуПрописью(ДанныеДляПечати.СуммаНДС, мВалютаРегламентированногоУчета), "");;
	
	ОбластьМакета.Параметры.СдалДолжность 	= ДанныеДляПечати.ДоверенноЛицо_Должность;
	ОбластьМакета.Параметры.СдалФИО			= ДанныеДляПечати.ДоверенноеЛицо;
				
	ТабДокумент.Вывести(ОбластьМакета);
 		
	ТабДокумент.НижнийКолонтитул.Выводить = Истина;
	ТабДокумент.РазмерКолонтитулаСнизу = 20;
	ТабДокумент.НижнийКолонтитул.НачальнаяСтраница = 2;
		
КонецПроцедуры

Процедура ОсновныеДействияФормыОсновныеДействияФормыВыполнить(Кнопка)
	
	ПередОткрытием(Ложь, Истина);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОткрытьВ1С(Кнопка)
	
	Телеметрия.ОтправитьАналитику(
		СобытияТелеметрии.Просмотр.Просмотр1С,
		ЭтаФорма,
		Кнопка
	);
	
	ОткрытьЗначение(СтруктураПараметров.ДокументСсылка);
	
КонецПроцедуры

Функция РазобратьЭД_АктПродавецПревью(Syn_Документ)
	
	НовыйЧтениеXML = Новый ЧтениеXML;
	
	НовыйЧтениеXML.ОткрытьФайл(Syn_Документ);
	
	Фабрика 	= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_IAKTPRM_1_987_00_05_01_02").ПолучитьТекст());
	
	ТипОбъектаXDTO 	= Фабрика.Тип("IAKTPRM", "Файл");
	ОбъектXDTO 		= Фабрика.ПрочитатьXML(НовыйЧтениеXML, ТипОбъектаXDTO);
	НовыйЧтениеXML.Закрыть();
	УдалитьФайлы(Syn_Документ);
	
	
	ТЗ_Работы = новый ТаблицаЗначений;
	ТЗ_Работы.Колонки.Добавить("Номер");
	ТЗ_Работы.Колонки.Добавить("НаимРабот");
	ТЗ_Работы.Колонки.Добавить("НаимЕдИзм");
	ТЗ_Работы.Колонки.Добавить("ОКЕИ");
	ТЗ_Работы.Колонки.Добавить("Цена");
	ТЗ_Работы.Колонки.Добавить("Количество");
	ТЗ_Работы.Колонки.Добавить("СумБезНДС");
	ТЗ_Работы.Колонки.Добавить("СумНДС");
	ТЗ_Работы.Колонки.Добавить("СумУчНДС");
	ТЗ_Работы.Колонки.Добавить("ИнфПолСтр");
	ТЗ_Работы.Колонки.Добавить("Описание");
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("НомерАкта");
	ДанныеДляПечати.Вставить("ДатаАкта");
	ДанныеДляПечати.Вставить("Заголовок");
	
	ДанныеДляПечати.Вставить("Исполнитель");
	ДанныеДляПечати.Вставить("Исполнитель_ОКПО");
	ДанныеДляПечати.Вставить("Исполнитель_ОКОПФ");
	ДанныеДляПечати.Вставить("Исполнитель_ИНН");
	ДанныеДляПечати.Вставить("Исполнитель_КПП");
	ДанныеДляПечати.Вставить("Исполнитель_Адрес");
	ДанныеДляПечати.Вставить("Исполнитель_Телефон");
	ДанныеДляПечати.Вставить("Исполнитель_Факс");
	ДанныеДляПечати.Вставить("Исполнитель_БанковскийСчет");
	ДанныеДляПечати.Вставить("Исполнитель_Банк");
	ДанныеДляПечати.Вставить("Исполнитель_БИКБанка");
	
	ДанныеДляПечати.Вставить("ТЗ_Работы", ТЗ_Работы);
	
	ДанныеДляПечати.Вставить("НачалоРабот");
	ДанныеДляПечати.Вставить("КонецРабот");
	ДанныеДляПечати.Вставить("СуммаБезНДС");
	ДанныеДляПечати.Вставить("СуммаНДС");
	ДанныеДляПечати.Вставить("СуммаСНДС");
	
	ДанныеДляПечати.Вставить("ДатаПодписиИсполнителем");
	ДанныеДляПечати.Вставить("ДоверенноеЛицо");
	ДанныеДляПечати.Вставить("ДоверенноЛицо_Должность");
	ДанныеДляПечати.Вставить("Доверенность_Номер");
	ДанныеДляПечати.Вставить("Доверенность_Дата");
	ДанныеДляПечати.Вставить("Доверенность_ВыданаОрганизацией");
	ДанныеДляПечати.Вставить("Доверенность_ДолжностьВыданаКем");
	ДанныеДляПечати.Вставить("Доверенность_ВыданаКемДопСведения");
	ДанныеДляПечати.Вставить("Доверенность_ВыданаКем");
	ДанныеДляПечати.Вставить("Доверенность_ДолжностьВыданаКому");
	ДанныеДляПечати.Вставить("Доверенность_ВыданаКомуДопСведения");
	ДанныеДляПечати.Вставить("Доверенность_ВыданаКому");
	
	ДанныеДляПечати.Вставить("ПодписантЮЛ");
	ДанныеДляПечати.Вставить("ПодписантИП");
	ДанныеДляПечати.Вставить("Подписант_ИНН");
	ДанныеДляПечати.Вставить("Подписант_Должность");
	ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации");
	
	ДанныеДляПечати.Вставить("Заказчик");
	
	ДанныеДляПечати.Вставить("УступочнаяНадпись");
	
	Док 		= ОбъектXDTO.Документ;
	СвАктИ  	= Док.СвАктИ;
	Исполнитель = СвАктИ.Исполнитель;
	ОписРабот	= СвАктИ.ОписРабот;
	Сдал		= СвАктИ.Сдал;
	Подписант	= Док.Подписант;
	ИнфПол		= СвАктИ.ИнфПол;	
	
	ДанныеДляПечати.Вставить("НомерАкта", СвАктИ.НомАкт);
	ДанныеДляПечати.Вставить("ДатаАкта", СвАктИ.ДатаАкт);
	ДанныеДляПечати.Вставить("Заголовок", СвАктИ.Заголовок);
	
	ДанныеДляПечати.Вставить("Исполнитель_ОКПО", Исполнитель.ОКПО);
	ИдСв = Исполнитель.ИдСв;
	Если НЕ ИдСв.СвЮЛ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Исполнитель", ИдСв.СвЮЛ.НаимОрг);
		ДанныеДляПечати.Вставить("Исполнитель_ОКОПФ", ИдСв.СвЮЛ.ОКОПФ);
		ДанныеДляПечати.Вставить("Исполнитель_ИНН", ИдСв.СвЮЛ.ИННЮЛ);
		ДанныеДляПечати.Вставить("Исполнитель_КПП", ИдСв.СвЮЛ.КПП);
	Иначе
		ДанныеДляПечати.Вставить("Исполнитель", ИдСв.СвФЛ.ФИОИП.Фамилия + " " + ИдСв.СвФЛ.ФИОИП.Имя + " " + ИдСв.СвФЛ.ФИОИП.Отчество);
		ДанныеДляПечати.Вставить("Исполнитель_ИНН", ИдСв.СвФЛ.ИННФЛ);
	КонецЕсли;
	
	Если НЕ Исполнитель.Адрес = Неопределено Тогда
		//адрес РФ
		Если НЕ Исполнитель.Адрес.АдрРФ = Неопределено Тогда
			АдрРФ 	= Исполнитель.Адрес.АдрРФ; 
			Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
			Представление = "" + "Россия" +
			?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
			?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
			?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
			?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
			?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
			ДанныеДляПечати.Вставить("Исполнитель_Адрес", Представление);
			//адрес Ино
		ИначеЕсли НЕ Исполнитель.Адрес.АдрИно = Неопределено Тогда 
			ДанныеДляПечати.Вставить("Исполнитель_Адрес",  Исполнитель.Адрес.АдрИно.АдрТекст);
			// не структурированный	
		Иначе
			ДанныеДляПечати.Вставить("Исполнитель_Адрес",  Исполнитель.Адрес.АдрТекст);
		КонецЕсли;
	КонецЕсли;
	
	// контакты
	Если НЕ Исполнитель.Контакт = Неопределено Тогда
		ДанныеДляПечати.Вставить("Исполнитель_Телефон", Исполнитель.Контакт.Тлф);
		ДанныеДляПечати.Вставить("Исполнитель_Факс", Исполнитель.Контакт.Факс);
	КонецЕсли;
	//банк. ревкизиты
	Если НЕ Исполнитель.БанкРекв = Неопределено Тогда
		ДанныеДляПечати.Вставить("Исполнитель_БанковскийСчет", Исполнитель.БанкРекв.НомерСчета);
		ДанныеДляПечати.Вставить("Исполнитель_Банк", Исполнитель.БанкРекв.СвБанк.НаимБанк);
		ДанныеДляПечати.Вставить("Исполнитель_БИКБанка", Исполнитель.БанкРекв.СвБанк.БИК);
	КонецЕсли;
	
	Для Каждого Элемент Из ОписРабот Цикл
		ДанныеДляПечати.Вставить("НачалоРабот", Элемент.НачРабот);	
		ДанныеДляПечати.Вставить("КонецРабот", Элемент.КонРабот);
		ДанныеДляПечати.Вставить("СуммаБезНДС", Элемент.СумБезНДСИт);
		ДанныеДляПечати.Вставить("СуммаНДС", Элемент.СумНДСИт);
		ДанныеДляПечати.Вставить("СуммаСНДС", Элемент.СумУчНДСИт);
		
		Для Каждого Элемент Из Элемент.Работа Цикл
			НовСтр = ТЗ_Работы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Элемент);
		КонецЦикла;
	КонецЦикла;
	
	//Сдал
	Если НЕ Сдал = Неопределено Тогда
		ДанныеДляПечати.Вставить("ДатаПодписиИсполнителем", Сдал.ДатаИсполн);
		Если НЕ Сдал.ПодписьИсполн = Неопределено Тогда
			ДанныеДляПечати.Вставить("ДоверенноеЛицо", Сдал.ПодписьИсполн.ФИО.Фамилия + " " + Сдал.ПодписьИсполн.ФИО.Имя + " " + Сдал.ПодписьИсполн.ФИО.Отчество);
			ДанныеДляПечати.Вставить("ДоверенноЛицо_Должность", Сдал.ПодписьИсполн.Должность);
		КонецЕсли;
		
		Если НЕ Сдал.ДоверенИсполн = Неопределено Тогда
			ДанныеДляПечати.Вставить("Доверенность_Номер", Сдал.ДоверенИсполн.НомДоверен);
			ДанныеДляПечати.Вставить("Доверенность_Дата", Сдал.ДоверенИсполн.ДатаДоверен);
			
			Если НЕ Сдал.ДоверенИсполн.ВыданаКем = Неопределено Тогда
				ДанныеДляПечати.Вставить("Доверенность_ВыданаОрганизацией", Сдал.ДоверенИсполн.ВыданаКем.НаимОргКем);
				ДанныеДляПечати.Вставить("Доверенность_ДолжностьВыданаКем", Сдал.ДоверенИсполн.ВыданаКем.ДолжнКем);
				ДанныеДляПечати.Вставить("Доверенность_ВыданаКемДопСведения", Сдал.ДоверенИсполн.ВыданаКем.ДопСведКем);
				Если НЕ Сдал.ДоверенИсполн.ВыданаКем.ФИО = Неопределено Тогда
					ДанныеДляПечати.Вставить("Доверенность_ВыданаКем", Сдал.ДоверенИсполн.ВыданаКем.ФИО.Фамилия + " " + Сдал.ДоверенИсполн.ВыданаКем.ФИО.Имя + " " + Сдал.ДоверенИсполн.ВыданаКем.ФИО.Отчество);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Сдал.ДоверенИсполн.ВыданаКому = Неопределено Тогда
				ДанныеДляПечати.Вставить("Доверенность_ДолжностьВыданаКому", Сдал.ДоверенИсполн.ВыданаКому.Должн);
				ДанныеДляПечати.Вставить("Доверенность_ВыданаКомуДопСведения", Сдал.ДоверенИсполн.ВыданаКому.ДопСведКому);
				Если НЕ Сдал.ДоверенИсполн.ВыданаКому.ФИО = Неопределено Тогда
					ДанныеДляПечати.Вставить("Доверенность_ВыданаКому", Сдал.ДоверенИсполн.ВыданаКому.ФИО.Фамилия + " " + Сдал.ДоверенИсполн.ВыданаКому.ФИО.Имя + " " + Сдал.ДоверенИсполн.ВыданаКому.ФИО.Отчество);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИнфПол = Неопределено Тогда
		УступочнаяНадпись = ИнфПол.ТекстИнф;
		ДанныеДляПечати.Вставить("УступочнаяНадпись", УступочнаяНадпись);
	КонецЕсли;
	
	НовыйЧтениеXML.Закрыть();
	УдалитьФайлы(Syn_Документ);
	
	//титул покупателя
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьНомер");
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьДата");
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКемОрганизация");
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКемДолжность");
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКемФИО");
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКомуДолжность");
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКомуФИО");
	ДанныеДляПечати.Вставить("Заказчик_ДолжностьДолжностногоЛица");
	ДанныеДляПечати.Вставить("Заказчик_ФИОДолжностногоЛица");
	ДанныеДляПечати.Вставить("Заказчик_ДатаПодписанияАкта");
	ДанныеДляПечати.Вставить("Заказчик_Претензии");
	
	//находим титул покупателя в случае если акт подписан
	Syn_СлужебныеДокументы = Неопределено;
	
	Если НЕ Syn_СлужебныеДокументы = Неопределено Тогда
		Для Каждого СервисныйДокумент Из Syn_СлужебныеДокументы.ServiceDocument Цикл
			Если СервисныйДокумент.DocumentType = "ActOfWorkBuyer" Тогда
				
				Попытка
					ТитулПокупателя_ДвоичныеДанные = ?(СервисныйДокумент.FileSize > 1000000, 
					ExchangeService.GetDocumentContent(Токен, Syn_ЯщикОрганизации, СервисныйДокумент.Id),
					СервисныйДокумент.Content);
				Исключение
					ОписаниеОшибкиСтрокой = ОписаниеОшибки();
					ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
					ОтправитьУведомлениеПользователю("Ошибка получения контента (содержимого) ЭД: " + ТекстОшибкиSynerdocs);
					Возврат НЕОПРЕДЕЛЕНО;
				КонецПопытки;							
				
				ВрФайлТитул = ПолучитьИмяВременногоФайла("xml");
				ТитулПокупателя_ДвоичныеДанные.Записать(ВрФайлТитул);
				
				Текст 				= Новый ТекстовыйДокумент;
				Текст.Прочитать(ВрФайлТитул);
				СтрокаПоиска 		= Текст.ПолучитьТекст();
				
				Если НЕ Найти(СтрокаПоиска, "СвОЭДОтпрСФ") = 0 Тогда
					ЭтоНовыйФормат = Истина;
				Иначе
					ЭтоНовыйФормат = Ложь;
				КонецЕсли;
				
				// Заменим/добавим наше пространство имен
				НачалоПрИмен		= Найти(СтрокаПоиска, "<Файл") + 5;
				КонецПрИмен			= Найти(СтрокаПоиска, "ИдФайл=");
				УдаляемаяСтрока 	= Сред(СтрокаПоиска, НачалоПрИмен, КонецПрИмен - НачалоПрИмен);
				ПрИмен 				= """synerdocs_zakt502""";
				СтрокаПодстановки 	= " xmlns=" + ПрИмен + " xmlns:xs=" + """http://www.w3.org/2001/XMLSchema""" +
				" xmlns:xsi=" + """http://www.w3.org/2001/XMLSchema-instance"" ";
				
				Если НЕ УдаляемаяСтрока = " " Тогда
					// Заменяем пространство имен в xml на наше
					СтрокаПоиска = СтрЗаменить(СтрокаПоиска, УдаляемаяСтрока, СтрокаПодстановки);	
				Иначе
					// Нет пространства имен в xml, подставляем наше
					СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "<Файл", "<Файл" + СтрокаПодстановки);
				КонецЕсли;
				
				Текст.УстановитьТекст(СтрокаПоиска);
				Текст.Записать(ВрФайлТитул, КодировкаТекста.ANSI);
				
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВрФайлТитул = Неопределено;
	КонецЕсли;
	
	Если НЕ ВрФайлТитул = Неопределено Тогда
		
		НовыйЧтениеXML 	= Новый ЧтениеXML;
		НовыйЧтениеXML.ОткрытьФайл(ВрФайлТитул);
		
		//Создаем объект и закрываем xml
		Если НЕ ЭтоНовыйФормат Тогда
			Фабрика 	= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_ZAKTPRM_1_990_00_05_01_01").ПолучитьТекст());
		Иначе
			Фабрика 	= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_ZAKTPRM_1_990_00_05_01_02").ПолучитьТекст());
		КонецЕсли;
		
		ТипОбъектаXDTO 	= Фабрика.Тип("synerdocs_zakt502", "Файл");
		ОбъектXDTO 		= Фабрика.ПрочитатьXML(НовыйЧтениеXML, ТипОбъектаXDTO);
		
		НовыйЧтениеXML.Закрыть();
		УдалитьФайлы(ВрФайлТитул);
		
		Принял = ОбъектXDTO.Документ.СвАктИ.Принял;
		
		//Приняд
		Если НЕ Принял = Неопределено Тогда
			ДанныеДляПечати.Вставить("Заказчик_ДатаПодписанияАкта", Принял.ДатаЗаказ);
			ДанныеДляПечати.Вставить("Заказчик_Претензии", Принял.Претенз);
			Если НЕ Принял.ПодписьЗаказ = Неопределено Тогда
				ДанныеДляПечати.Вставить("Заказчик_ДолжностьДолжностногоЛица", Принял.ПодписьЗаказ.Должность);
				Если НЕ Принял.ПодписьЗаказ.ФИО = Неопределено Тогда 
					ДанныеДляПечати.Вставить("Заказчик_ФИОДолжностногоЛица", Принял.ПодписьЗаказ.ФИО.Фамилия + " " + Принял.ПодписьЗаказ.ФИО.Имя + " " + Принял.ПодписьЗаказ.ФИО.Отчество);
				КонецЕсли;
			КонецЕсли;
			//доверенность
			Если НЕ Принял.ДоверенЗаказ = Неопределено Тогда
				ДанныеДляПечати.Вставить("Заказчик_ДоверенностьНомер", Принял.ДоверенЗаказ.НомДоверен);
				ДанныеДляПечати.Вставить("Заказчик_ДоверенностьДата", Принял.ДоверенЗаказ.ДатаДоверен);
				Если НЕ Принял.ДоверенЗаказ.ВыданаКем = Неопределено Тогда
					ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКемОрганизация", Принял.ДоверенЗаказ.ВыданаКем.НаимОргКем);
					ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКемДолжность", Принял.ДоверенЗаказ.ВыданаКем.ДолжнКем);
					Если НЕ Принял.ДоверенЗаказ.ВыданаКем.ФИО = Неопределено Тогда 
						ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКемФИО", Принял.ДоверенЗаказ.ВыданаКем.ФИО.Фамилия + " " + Принял.ДоверенЗаказ.ВыданаКем.ФИО.Имя + " " + Принял.ДоверенЗаказ.ВыданаКем.ФИО.Отчество); 
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ Принял.ДоверенЗаказ.ВыданаКому = Неопределено Тогда
					ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКомуДолжность", Принял.ДоверенЗаказ.ВыданаКому.Должн);
					Если НЕ Принял.ДоверенЗаказ.ВыданаКому.ФИО = Неопределено Тогда
						ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКомуФИО", Принял.ДоверенЗаказ.ВыданаКому.ФИО.Фамилия + " " + Принял.ДоверенЗаказ.ВыданаКому.ФИО.Имя + " " + Принял.ДоверенЗаказ.ВыданаКому.ФИО.Отчество);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Организация.ИНН = ДанныеДляПечати.Исполнитель_ИНН Тогда
		// Исходящий
		ДанныеДляПечати.Вставить("флВходящийДок", Ложь);
	Иначе
		// Входящий
		ДанныеДляПечати.Вставить("флВходящийДок", Истина);
	КонецЕсли;
	ДанныеДляПечати.Вставить("ВидДокумента", "Акт");
	
	НовыйЧтениеXML.Закрыть();
	УдалитьФайлы(Syn_Документ);
	
	Возврат ДанныеДляПечати;
	
КонецФункции



ИнициализироватьФорму();
