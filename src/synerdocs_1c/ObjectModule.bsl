
// TODO: Выделить работу с сервисом в отдельные методы, чтобы снизить зависимость от изменений в нем.
// TODO: Сделать единый обработчик на каждое типовое действие с ЭД (Подписать, Отказать и т.п),
//			так как для основной формы и для карточки ЭД назначены разные обработчики для этих действий.
// TODO: При просмотре формализованного документа должна использоваться одна процедура для вывода печатной формы документа,
//			независимо от того, выводится ЭД или документ из БД.
// TODO: Если создается объект с определенной структурой или определенным набором колонок, то использовать метод-конструктор
// TODO: Сократить размер методов, формирующих ЭД. Разбить на логические блоки.
// TODO: Проверить соответсвие выводимых сумм в печатных формах данным ЭД.
// TODO: Понизить сопряжение (coupling) методов формирования xml и методов получения данных.
// TODO: Выпилить остатки автотестирования, все равно не работает.

// Служебная переменная, для кеширования данных
Перем _Кеш;

//Определение конфигурации
Перем ЭтоБГУ Экспорт;

//Текущий текст, который выходит в заголовке формы по умолчанию
Перем ЗаголовокПоУмолчанию Экспорт;

//Текущий авторизационный токен, полученный из сервиса
Перем Токен Экспорт;
Перем КА_Токен Экспорт;
Перем КА_Идентификатор Экспорт;

//Текущий сертификат работы с сервисом
Перем Сертификат;

//Список сертификатов, доступных пользователю
Перем СписокСертификатов Экспорт;

// Объекты WS-прокси, посредством которых осуществляется работа с сервисом
Перем ExchangeService Экспорт;
Перем KalugaAstralService Экспорт;

//Текущий менеджер криптографии для работы с сертификатами и ЭЦП
Перем МенеджерКриптографии Экспорт;

//Хранилище сертификатов, используется при авторизации
Перем ХранилищеСертификатов Экспорт;

//ID текущей организации, с которой идет работа с сервисом
Перем Syn_IDОрганизации Экспорт;

//Ящик текущей организации, с которой идет работа с сервисом
Перем Syn_ЯщикОрганизации Экспорт;

//Текущий ящик оператора документооборота
Перем Syn_ЯщикОператораЭДО Экспорт;

//Флаг работы модуля в демо-режиме
Перем ДемоРежим Экспорт;

//Валюта регламентированного учета, используемая при формировании 
//XML документа и создании учетного документа 1С
Перем мВалютаРегламентированногоУчета Экспорт;

//Соответствие между названиями типов документов в 1С (на рус. языке)
//и их аналогами в сервисе (на англ. языке)
Перем СоответствиеТиповЭД_1С_Synerdocs Экспорт;

//Обратное соответствие между названиями типов документов в сервисе (на англ. языке)
//и их аналогами в 1С (на рус. языке)
Перем СоответствиеТиповЭД_Synerdocs_1C Экспорт;

//Соответствие между названиями статусов счет-фактуры в сервисе (на англ. языке)
//и их аналогами в 1С (на рус. языке)
Перем СоответствиеСтатусовСФ_1С_Synerdocs Экспорт;

//Соответствие между названиями статусов подписания документов в сервисе (на англ. языке)
//и их аналогами в 1С (на рус. языке)
Перем СоответствиеСтатусовПодписания_1С_Synerdocs Экспорт;
Перем СоответствиеСтатусовМножественногоПодписания_1С_Synerdocs Экспорт;

//Соответсвие межде параметрами шаблона уступочной надписи и их описанием
Перем СоответсвиеПараметровУступочнойНадписиОписанию Экспорт;

//Соответсвие статусов подписания символьному представлению
Перем СоответствиеСтатусовПодписанияСимволу Экспорт;

//Текущее расширение файлов подписи, используемое по умолчанию
Перем РасширениеФайлаЭЦП Экспорт;

//Количество попыток при отправке сообщения в сервис (например, в случае транспортных проблем)
Перем КоличествоПовторныхОтправокСообщения Экспорт;

//Текущее расширение файла архива, используемое по умолчанию при экспорте документов
Перем РасширениеФайлаАрхива Экспорт;

// Параметры подключения
Перем URIПространстваИменСервиса Экспорт;
Перем ИмяСервиса Экспорт;
Перем ИмяТочкиПодключения Экспорт;

// Флаг облачной ЭП
Перем ОблачнаяЭП Экспорт;

Перем СоответствиеСтатусовСогласования_Synerdocs Экспорт;

Перем КлючУникальности_ОсновнаяФорма Экспорт;

Перем ТЗ_ЕдИзм Экспорт; // Классификатор единиц измерения
Перем ТЗ_Страны Экспорт; // Классификатор стран мира

// Список ящиков, доступных пользователю
Перем СписокДоступныхЯщиков Экспорт;

// Модули
Перем Телеметрия;
Перем МенеджерНастроек;
Перем Криптография;
Перем Печать;

Процедура ИнициализироватьОбщийМодуль() Экспорт
	
	Модули = ТребуютсяМодули("Модуль_Телеметрия, Модуль_МенеджерНастроек, Модуль_Криптография, Модуль_Печать");
	Телеметрия			= Модули.Модуль_Телеметрия;
	МенеджерНастроек	= Модули.Модуль_МенеджерНастроек;
	Криптография		= Модули.Модуль_Криптография;
	Печать				= Модули.Модуль_Печать;
	
	ЗаголовокПоУмолчанию = "Интеграционное решение Synerdocs и 1С";
	Токен = НЕОПРЕДЕЛЕНО;
	Сертификат = НЕОПРЕДЕЛЕНО;
	ExchangeService = НЕОПРЕДЕЛЕНО;
	IDОрганизации = НЕОПРЕДЕЛЕНО;

	МенеджерКриптографии = НЕОПРЕДЕЛЕНО;
	ХранилищеСертификатов = Неопределено;

	ДемоРежим = Ложь;

	мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();

	Syn_ЯщикОператораЭДО = "service@synerdocs.ru";
	РасширениеФайлаЭЦП = "p7s";
	РасширениеФайлаАрхива = "zip";
	КоличествоПовторныхОтправокСообщения = 5;

	// TODO: Проверить используется ли и добавить калугу
	// Параметры подключения к сервису
	URIПространстваИменСервиса = "http://synerdocs.ru";
	ИмяСервиса = "ExchangeService";
	ИмяТочкиПодключения = "BasicHttpBindingSecure_IExchangeService";
	
КонецПроцедуры

// FIXME: Выяснить где возникают циклические ссылки
Процедура УничтожитьМодули() Экспорт
	
	Модули = _Кеш["Модули"];
	
	Для Каждого Модуль Из Модули Цикл
		//Модуль.Значение.Уничтожить();
		Модули[Модуль.Ключ] = Неопределено;
	КонецЦикла;
	
	Телеметрия = Неопределено;
	МенеджерНастроек = Неопределено;
	Криптография = Неопределено;
	Печать = Неопределено;
	
	Оповестить("УничтожитьМодули");
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////                     
//Вспомогательные процедуры и функции                    

//Работа со стилями
Процедура УстановитьСтиль(ЭлементыФормы) Экспорт 
	SD_Стиль = Новый Стиль;
КонецПроцедуры

Функция Новый_ФИО(Фамилия = "", Имя = "", Отчество = "")
	
	ФизЛицо = Новый Структура(
		"Фамилия, Имя, Отчество,
		|Источник"
	);
	
	ФизЛицо.Фамилия		= СокрЛП(Фамилия);
	ФизЛицо.Имя			= СокрЛП(Имя);
	ФизЛицо.Отчество	= СокрЛП(Отчество);
	
	ФамилияИмяОтчество = Новый Массив;
	ФамилияИмяОтчество.Добавить(Фамилия);
	ФамилияИмяОтчество.Добавить(Имя);
	ФамилияИмяОтчество.Добавить(Отчество);
	
	ФизЛицо.Источник = СтрСоединить2(ФамилияИмяОтчество, " ");
	
	Возврат ФизЛицо;
	
КонецФункции

// Раскладывает полное имя в структуру.
//
// Параметры:
//  ФамилияИмяОтчество - Строка - полное имя.
//
// Возвращаемое значение:
//  Структура - см. Новый_ФИО()
//
Функция ЧастиИмени(ФамилияИмяОтчество) Экспорт
	
	ЧастиИмени = СтрРазделить2(ФамилияИмяОтчество, " ", Ложь);
	
	Фамилия		= "";
	Имя			= "";
	Отчество	= "";
	
	Если ЧастиИмени.Количество() >= 1 Тогда
		Фамилия = ЧастиИмени[0];
	КонецЕсли;
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		Имя = ЧастиИмени[1];
	КонецЕсли;
	
	Если ЧастиИмени.Количество() >= 3 Тогда
		Отчество = ЧастиИмени[2];
	КонецЕсли;
	
	//Если ЧастиИмени.Количество() > 3 Тогда
	//	ДополнительныеЧастиОтчества = Новый Массив;
	//	ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'оглы'"));
	//	ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'улы'"));
	//	ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'уулу'"));
	//	ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'кызы'"));
	//	ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'гызы'"));
	//	
	//	Если ДополнительныеЧастиОтчества.Найти(НРег(ЧастиИмени[3])) <> Неопределено Тогда
	//		Отчество = Отчество + " " + ЧастиИмени[3];
	//	КонецЕсли;
	//КонецЕсли;
	
	Результат = Новый_ФИО(
		Фамилия,
		Имя,
		Отчество
	);
	
	Результат.Источник = ФамилияИмяОтчество;
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

// Извлекает ФИО из строкового представления, например из наименования справочника Контрагенты
//
// Параметры:
//  Представление	 - Строка	 - строковое представление, из которого требуется извлеч ФИО
// 
// Возвращаемое значение:
//  Структура - см. Новый_ФИО()
//
// Пример:
//  ФИО = ИзвлечьФИОИзПредставления("ИП Иванов П. С.");
//  На выходе будет получено ФИО с видом:
//		ФИО.Фамилия		= "Иванов";
//		ФИО.Имя			= "П";
//		ФИО.Отчество	= "С";
//
Функция ИзвлечьФИОИзПредставления(Представление)
	
	ФамилияИМяОтчество = Представление;
	
	ФамилияИМяОтчество = СтрЗаменить(ФамилияИМяОтчество, "ИП ", "");
	
	ФамилияИМяОтчество = НРег(ФамилияИМяОтчество);
	ФамилияИМяОтчество = СтрЗаменить(ФамилияИМяОтчество, ".", " ");
	ФамилияИМяОтчество = СтрЗаменить(ФамилияИМяОтчество, """", " ");
	ФамилияИМяОтчество = СтрЗаменить(ФамилияИМяОтчество, "индивидуальный предприниматель", "");
	
	ФамилияИМяОтчество = ТРег(ФамилияИМяОтчество);
	
	ФИО = ЧастиИмени(ФамилияИМяОтчество);
	
	Возврат ФИО;
	
КонецФункции

// Возвращает последнюю информацию о ФИО физ. лица.
// Если ФИО не удалось получить, возвращает Неопределено
//
// Параметры:
//  ФизЛицо	 - СправочникСсылка.ФизическиеЛица	 - физ. лицо
// 
// Возвращаемое значение:
//  Структура, Неопределено - см. Новый_ФИО() 
//
Функция ФИОФизЛица(ФизЛицо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ПоследнееФИО = РезультатЗапроса.Выбрать();
		ПоследнееФИО.Следующий();
		
		Результат = Новый_ФИО(
			ПоследнееФИО.Фамилия,
			ПоследнееФИО.Имя,
			ПоследнееФИО.Отчество
		);
		
		Результат.Источник = ФизЛицо;
	
		Результат = Новый ФиксированнаяСтруктура(Результат);
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает ФИО из ИП или его строкового представления
//
// Параметры:
//  ИП	 - СправочникСсылка.Контрагенты, Строка	 - индивидуальный предприниматель
// 
// Возвращаемое значение:
//  Структура - см. Новый_ФИО()
//
Функция ФИОИндивидуальногоПредпринимателяБГУ(ИП)
	
	Если ТипЗнч(ИП) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ФИО = Новый_ФИО(
			ИП.Фамилия,
			ИП.Имя,
			ИП.Отчество
		);
		
		ФИО.Источник = ИП;
		
	Иначе
		
		ПредставлениеИП = Строка(ИП);
		ФИО = ИзвлечьФИОИзПредставления(ПредставлениеИП);
		
	КонецЕсли;
	
	Возврат ФИО;
	
КонецФункции

// TODO: Перенести в модуль работы с конфигурациями и специализировать
// Получает ФИО из ИП или его строкового представления
//
// Параметры:
//  ИП	 - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты, СправочникСсылка.Организации, Строка	 - индивидуальный предприниматель
// 
// Возвращаемое значение:
//  Структура - см. Новый_ФИО()
//
Функция ФИОИндивидуальногоПредпринимателя(ИП) Экспорт
	
	//: ИП = Справочники.Организации.ПустаяСсылка();
	
	ФизЛицо = Неопределено;
	Если ТипЗнч(ИП) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ФизЛицо = ИП;
		
	ИначеЕсли ТипЗнч(ИП) = Тип("СправочникСсылка.Организации")
			И ЕстьРеквизитОбъекта("ИндивидуальныйПредприниматель", ИП.Метаданные()) Тогда
			
		ФизЛицо = ИП.ИндивидуальныйПредприниматель;
		
	КонецЕсли;
	
	ФИОФизЛица = Неопределено;
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		ФИОФизЛица = ФИОФизЛица(ФизЛицо);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФИОФизЛица) Тогда
		
		Результат = Новый_ФИО(
			ФИОФизЛица.Фамилия,
			ФИОФизЛица.Имя,
			ФИОФизЛица.Отчество
		);
		
		Результат.Источник = ИП;
		
	Иначе
		
		СПолнымНаименованием = Новый Соответствие;
		СПолнымНаименованием.Вставить(Тип("СправочникСсылка.Организации"), Истина);
		СПолнымНаименованием.Вставить(Тип("СправочникСсылка.Контрагенты"), Истина);
		
		ЕстьПолноеНаименование = (СПолнымНаименованием[ТипЗнч(ИП)] = Истина);
		
		Если ЕстьПолноеНаименование Тогда
			
			ПредставлениеИП = ИП.НаименованиеПолное;
			
		Иначе
			
			ПредставлениеИП = Строка(ИП);
			
		КонецЕсли;
		
		Результат = ИзвлечьФИОИзПредставления(ПредставлениеИП);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает ФИО из должностного лица или его стркового представления
//
// Параметры:
//  ДолжностноеЛицо	 - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Сотрудники, Строка, Структура	 - подписант (см. ПодписантСтруктура()) или должностное лицо
// 
// Возвращаемое значение:
//  Структура - см. Новый_ФИО()
//
Функция ФИОДолжностногоЛица(ДолжностноеЛицо)
	
	ФИО = Неопределено;
	
	ЭтоПодписант = (ТипЗнч(ДолжностноеЛицо) = Тип("Структура"));
	Если ЭтоПодписант Тогда
		
		ФИО = ДолжностноеЛицо.ФИО;
		
	Иначе
		
		Если НЕ ЭтоБГУ Тогда
			
			Если ТипЗнч(ДолжностноеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ФИО = ФИОФизЛица(ДолжностноеЛицо);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФИО = Неопределено Тогда
		
		ПредставлениеДолжностногоЛица = Строка(ДолжностноеЛицо);
		ФИО = ИзвлечьФИОИзПредставления(ПредставлениеДолжностногоЛица);
		
	КонецЕсли;
	
	Возврат ФИО;
	
КонецФункции

//Функция возвращает структурированный адрес контрагента из регистра контактной информации
//
// Параметры: 
//  Контрагент: элемент справочника "Контрагенты"
//
// Возвращаемое значение:
//  Структура с адресом
//
Функция ПолучитьАдресКонтрагента(Контрагент, мОрганизация = Неопределено, ВидАдреса = Неопределено) Экспорт
	
	Если НЕ мОрганизация = Неопределено Тогда
		Если НЕ ЭтоБГУ Тогда
			Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				ТипАдреса = ?(мОрганизация = Неопределено, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
				ФизЛицо = ?(ЕстьРеквизитСправочника("ИндивидуальныйПредприниматель", Контрагент.Метаданные()), Контрагент.ИндивидуальныйПредприниматель, Контрагент);
			Иначе
				ТипАдреса = ВидАдреса;
			КонецЕсли;
		Иначе
			// В БГУ нет организации ИП
			ТипАдреса = ВидАдреса;
		КонецЕсли;
	Иначе 
		ТипАдреса = ВидАдреса;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КонтактнаяИнформация.Поле1 КАК Индекс,
	                      |	КонтактнаяИнформация.Поле2 КАК Регион,
	                      |	КонтактнаяИнформация.Поле3 КАК Район,
	                      |	КонтактнаяИнформация.Поле4 КАК Город,
	                      |	КонтактнаяИнформация.Поле5 КАК НаселенныйПункт,
	                      |	КонтактнаяИнформация.Поле6 КАК Улица,
	                      |	КонтактнаяИнформация.Поле7 КАК Дом,
	                      |	КонтактнаяИнформация.Поле8 КАК Корпус,
	                      |	КонтактнаяИнформация.Поле9 КАК Квартира,
	                      |	КонтактнаяИнформация.Представление
	                      |ИЗ
	                      |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |ГДЕ
	                      |	КонтактнаяИнформация.Объект = &Объект
	                      |	И КонтактнаяИнформация.Тип = &Тип_Адрес
	                      |	И КонтактнаяИнформация.Вид = &Вид_ЮрАдресКонтрагента");
	
	Если НЕ ЭтоБГУ Тогда
		Запрос.УстановитьПараметр("Объект", ?((НЕ мОрганизация = Неопределено) И (Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо), ФизЛицо, Контрагент));
	Иначе
		Запрос.УстановитьПараметр("Объект", Контрагент);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Тип_Адрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид_ЮрАдресКонтрагента", ?((ЕстьРеквизитСправочника("ИндивидуальныйПредприниматель", Контрагент.Метаданные()) И Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо), ВидАдреса, ТипАдреса));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда                                                      
		АдресСтруктура = Новый Структура;
		
		Если НЕ ЗначениеЗаполнено(Выборка.Регион) Тогда
			
			Страна		= Справочники.КлассификаторСтранМира.НайтиПоНаименованию(Выборка.Индекс);
			КодСтраны 	= Страна.Код;
			
			АдресСтруктура.Вставить("АдресРФ", Ложь);
			
			Если ЗначениеЗаполнено(Выборка.Представление) Тогда
				АдресСтруктура.Вставить("АдрТекст", СтрЗаменить(Выборка.Представление, Страна.Наименование + ",", ""));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КодСтраны) Тогда  
				АдресСтруктура.Вставить("КодСтр",КодСтраны);
			КонецЕсли;
			
			Возврат АдресСтруктура;
			
		КонецЕсли;
		
		АдресСтруктура.Вставить("АдресРФ", Истина);
		
		Если ЗначениеЗаполнено(Выборка.Индекс) Тогда 
			АдресСтруктура.Вставить("Индекс", Выборка.Индекс);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Регион) Тогда 
			АдресСтруктура.Вставить("Регион", Выборка.Регион);
			Регион = СокрЛП(Выборка.Регион);
			РегионБезСокращения = ПолучитьИмяИАдресноеСокращение(Регион, "");
			
			ЗапросКодРегиона = Новый Запрос("ВЫБРАТЬ
			|	АдресныйКлассификатор.КодРегионаВКоде
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
			|ГДЕ
			|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1
			|	И АдресныйКлассификатор.Наименование = &Регион");
			ЗапросКодРегиона.УстановитьПараметр("Регион", РегионБезСокращения);
			ВыборкаКодРегиона = ЗапросКодРегиона.Выполнить().Выгрузить();
			
			Если ВыборкаКодРегиона.Количество() > 0 Тогда
				АдресСтруктура.Вставить("КодРегион", ?(СтрДлина(ВыборкаКодРегиона[0].КодРегионаВКоде) = 1, "0" + Строка(ВыборкаКодРегиона[0].КодРегионаВКоде), Строка(ВыборкаКодРегиона[0].КодРегионаВКоде)))	 
			Иначе
				АдресСтруктура.Вставить("КодРегион", Неопределено);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Район) Тогда
			АдресСтруктура.Вставить("Район",  Выборка.Район);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Город) Тогда
			АдресСтруктура.Вставить("Город", Выборка.Город);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.НаселенныйПункт) Тогда 
			АдресСтруктура.Вставить("НаселПункт", Выборка.НаселенныйПункт);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Улица) Тогда 
			АдресСтруктура.Вставить("Улица", Выборка.Улица);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Дом) Тогда 
			АдресСтруктура.Вставить("Дом", Выборка.Дом);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Корпус) Тогда
			АдресСтруктура.Вставить("Корпус", Выборка.Корпус);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Квартира) Тогда 
			АдресСтруктура.Вставить("Кварт", Выборка.Квартира);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Представление) Тогда
			АдресСтруктура.Вставить("Представление", Выборка.Представление);
		КонецЕсли;
		
		АдресСтруктура.Вставить("КодСтраны", "643");
		
		Возврат АдресСтруктура;
	Иначе
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
КонецФункции

// Функция возвращает структурированный адрес контрагента из регистра контактной информации а так же в случае некорректных данных структру
// с описаним ощибок и эталонными значениями для возможности сформировать xml файл
//
// Параметры: 
//  Контрагент: элемент справочника "Контрагенты" или элемент справочника "Организации"
//
// Возвращаемое значение:
//  Структура с адресом 1С и структура с описанием ошибок
//
Функция ПолучитьАдресКонтрагентаДляПревью(Контрагент, мОрганизация = Неопределено, ВидАдреса = Неопределено) Экспорт
	
	//Структура адреса, данные 1С
	АдресСтруктура = Новый Структура;
		
	АдресЭталон = Новый Структура;
	АдресЭталон.Вставить("АдресРФ", Истина);
	АдресЭталон.Вставить("Индекс", "127000");
	АдресЭталон.Вставить("Регион", "Регион");
	АдресЭталон.Вставить("КодРегион", "99");
	АдресЭталон.Вставить("Район",  "Район");
	АдресЭталон.Вставить("Город", "Город");
	АдресЭталон.Вставить("НаселПункт", "Населенный пункт");
	АдресЭталон.Вставить("Улица", "Улица");
	АдресЭталон.Вставить("Дом", "1");
	АдресЭталон.Вставить("Корпус", "1");
	АдресЭталон.Вставить("Кварт", "1");
	АдресЭталон.Вставить("Кварт", "1");
	АдресЭталон.Вставить("КодСтр", "643");
	АдресЭталон.Вставить("КодСтраны", "643");
	АдресЭталон.Вставить("Представление", "127000, Регион, Район, Город, Населенный пункт, Улица, д. 1, кв. 1");

	//Структура возвращаемого значения. Содержит АдресСтруктура, сведения найден ли адрес в 1С и есть ли в нем ошибки заполнения
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("АдресСтруктура");
	СтруктураОтвета.Вставить("ЕстьОшибкиЗаполнения");
	СтруктураОтвета.Вставить("АдресНайден");
	
	АдресНайден			 = Ложь;	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Если НЕ мОрганизация = Неопределено Тогда
		Если НЕ ЭтоБГУ Тогда
			Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				ТипАдреса 	= ?(мОрганизация = Неопределено, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
				ФизЛицо 	= ?(ЕстьРеквизитСправочника("ИндивидуальныйПредприниматель", Контрагент.Метаданные()), Контрагент.ИндивидуальныйПредприниматель, Контрагент);
			Иначе
				ТипАдреса = ВидАдреса;
			КонецЕсли;
		Иначе
			// В БГУ нет организации ИП
			ТипАдреса = ВидАдреса;
		КонецЕсли;
	Иначе 
		ТипАдреса = ВидАдреса;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КонтактнаяИнформация.Поле1 КАК Индекс,
	|	КонтактнаяИнформация.Поле2 КАК Регион,
	|	КонтактнаяИнформация.Поле3 КАК Район,
	|	КонтактнаяИнформация.Поле4 КАК Город,
	|	КонтактнаяИнформация.Поле5 КАК НаселенныйПункт,
	|	КонтактнаяИнформация.Поле6 КАК Улица,
	|	КонтактнаяИнформация.Поле7 КАК Дом,
	|	КонтактнаяИнформация.Поле8 КАК Корпус,
	|	КонтактнаяИнформация.Поле9 КАК Квартира,
	|	ВЗ_Регионы.КодРегионаВКоде КАК КодРегиона,
	|	КонтактнаяИнформация.Представление,
	|	КлассификаторСтранМира.Код КАК КодСтраны
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АдресныйКлассификатор.КодРегионаВКоде КАК КодРегионаВКоде,
	|			АдресныйКлассификатор.Наименование КАК Наименование
	|		ИЗ
	|			РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|		ГДЕ
	|			АдресныйКлассификатор.ТипАдресногоЭлемента = 1) КАК ВЗ_Регионы
	|		ПО (КонтактнаяИнформация.Поле2 ПОДОБНО ""%"" + ВЗ_Регионы.Наименование + ""%"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|		ПО (КонтактнаяИнформация.Поле1 ПОДОБНО ""%"" + КлассификаторСтранМира.Наименование + ""%"")
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип_Адрес
	|	И КонтактнаяИнформация.Вид = &Вид_ЮрАдресКонтрагента");
	
	Если НЕ ЭтоБГУ Тогда
		Запрос.УстановитьПараметр("Объект", ?((НЕ мОрганизация = Неопределено) И (Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо), ФизЛицо, Контрагент));
	Иначе
		Запрос.УстановитьПараметр("Объект", Контрагент);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Тип_Адрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид_ЮрАдресКонтрагента", ?((ЕстьРеквизитСправочника("ИндивидуальныйПредприниматель", Контрагент.Метаданные()) И Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо), ВидАдреса, ТипАдреса));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда                                                      
		Если ЗначениеЗаполнено(Выборка.КодСтраны) Тогда
			
			Представление = "";
			
			АдресСтруктура.Вставить("АдресРФ", Ложь);
			
			Если ЗначениеЗаполнено(Выборка.Представление) Тогда
				Если НЕ СтрДлина(Выборка.Представление) > 255 Тогда				
					АдресСтруктура.Вставить("АдрТекст", Выборка.Представление);
				Иначе
					ОписаниеОшибкиСтрокой 	= "Адрес не должен превышать 255 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.Представление, "Адрес за пределами РФ, не более 255 символов.", ОписаниеОшибкиСтрокой, Истина); 
					АдресСтруктура.Вставить("АдрТекст", СтруктураИсключения);					
					ЕстьОшибкиЗаполнения 	= Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.КодСтраны) Тогда  
				АдресСтруктура.Вставить("КодСтр", Выборка.КодСтраны);
				
				СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Выборка.КодСтраны);
				
				Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
					ОписаниеОшибкиСтрокой 	= "Код страны должен состоять только из цифр и содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".";
					СтруктураИсключения		= ЗаполнитьСтруктуруИсключения(Выборка.КодСтраны, "752", ОписаниеОшибкиСтрокой, Истина);
					АдресСтруктура.Вставить("КодСтр", СтруктураИсключения);
					ЕстьОшибкиЗаполнения 	= Истина;
				КонецЕсли;
				
				Если СтрДлина(Выборка.КодСтраны) <> 3 Тогда
					Если НЕ ТипЗнч(АдресСтруктура.КодСтр) = Тип("Структура") Тогда
						ОписаниеОшибкиСтрокой 	= "Код страны должен состоять из 3-х символов.";
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.КодСтраны, "752", ОписаниеОшибкиСтрокой, Истина);
                        АдресСтруктура.Вставить("КодСтр", СтруктураИсключения);
					Иначе
						АдресСтруктура.КодСтр.ОписаниеОшибки = АдресСтруктура.КодСтр.ОписаниеОшибки + " Так же код страны должен состоять из 3-х символов."
					КонецЕсли;
					ЕстьОшибкиЗаполнения = Истина;
				КонецЕсли;
			Иначе                       
				ОписаниеОшибкиСтрокой 	= "Не удалось определить код страны.";
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "752", ОписаниеОшибкиСтрокой, Истина);
                АдресСтруктура.Вставить("КодСтр", СтруктураИсключения);
				ЕстьОшибкиЗаполнения 	= Истина;
			КонецЕсли;
		Иначе
			АдресСтруктура.Вставить("АдресРФ", Истина);
						
			Если ЗначениеЗаполнено(Выборка.Индекс) Тогда 
				
				АдресСтруктура.Вставить("Индекс", Выборка.Индекс);
				
				СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Выборка.Индекс);
				
				Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
					ОписаниеОшибкиСтрокой 	= "Индекс должен содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + "."; 
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.Индекс, "127000", ОписаниеОшибкиСтрокой, Истина);
                    АдресСтруктура.Вставить("Индекс", СтруктураИсключения);
					ЕстьОшибкиЗаполнения 	= Истина;
				КонецЕсли;
				
				Если СтрДлина(Выборка.Индекс) <> 6 Тогда
					Если НЕ ТипЗнч(АдресСтруктура.Индекс) = Тип("Структура") Тогда
						ОписаниеОшибкиСтрокой 	= "Индекс должен состоять из 6-и символов.";
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.Индекс, "127000", ОписаниеОшибкиСтрокой, Истина);
						АдресСтруктура.Вставить("Индекс", СтруктураИсключения);
 					Иначе
						АдресСтруктура.Индекс.ОписаниеОшибки = АдресСтруктура.Индекс.ОписаниеОшибки + " Так же индекс должен состоять из 6-и символов."
					КонецЕсли;
					ЕстьОшибкиЗаполнения = Истина;
				КонецЕсли;
			Иначе
				ОписаниеОшибкиСтрокой 	= "Не заполнен индекс.";
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "127000", ОписаниеОшибкиСтрокой, Истина);
 				АдресСтруктура.Вставить("Индекс", СтруктураИсключения);
				ЕстьОшибкиЗаполнения 	= Истина;
  			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Регион) Тогда 
				АдресСтруктура.Вставить("Регион", Выборка.Регион);
			Иначе
				ОписаниеОшибкиСтрокой 	= "Не заполнен регион.";
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "Наименование региона", ОписаниеОшибкиСтрокой, Истина);
                АдресСтруктура.Вставить("Регион", СтруктураИсключения);
 				ЕстьОшибкиЗаполнения 	= Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.КодРегиона) Тогда
				КодРегиона = ?(СтрДлина(Выборка.КодРегиона) = 1, "0" + Строка(Выборка.КодРегиона), Строка(Выборка.КодРегиона));
				АдресСтруктура.Вставить("КодРегион", КодРегиона);
				
				СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", КодРегиона);

				Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
					ОписаниеОшибкиСтрокой 	= "Код региона должен содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.КодРегиона, "99", ОписаниеОшибкиСтрокой, Истина);
                    АдресСтруктура.Вставить("КодРегион", СтруктураИсключения);
 					ЕстьОшибкиЗаполнения 	= Истина;
				КонецЕсли;
				
				Если СтрДлина(КодРегиона) <> 2 Тогда
					Если НЕ ТипЗнч(АдресСтруктура.КодРегион) = Тип("Структура") Тогда
						ОписаниеОшибкиСтрокой 	= "Код региона должен состоять из 2-х символов"; 
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.КодРегиона, "99", ОписаниеОшибкиСтрокой, Истина);
                        АдресСтруктура.Вставить("КодРегион", СтруктураИсключения);
 					Иначе
						АдресСтруктура.КодРегион.ОписаниеОшибки = АдресСтруктура.КодРегион.ОписаниеОшибки + " Так же код региона должен содержать 2 символа."
					КонецЕсли;
					ЕстьОшибкиЗаполнения = Истина;
				КонецЕсли;
			Иначе
				ОписаниеОшибкиСтрокой 	= "Не удалось получить код региона. Проверьте заполнение адреса."; 
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "99", ОписаниеОшибкиСтрокой, Истина);
				АдресСтруктура.Вставить("КодРегион", СтруктураИсключения);
				ЕстьОшибкиЗаполнения 	= Истина;
 			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Район) Тогда
				АдресСтруктура.Вставить("Район",  Выборка.Район);
				Если СтрДлина(Выборка.Район) > 50 Тогда
					ОписаниеОшибкиСтрокой 	= "Наименование района не должно превышать 50 символов. Проверьте заполнение адреса.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.Район, "Наименование района по КЛАДР", ОписаниеОшибкиСтрокой, Истина);
					АдресСтруктура.Вставить("Район", СтруктураИсключения);
					ЕстьОшибкиЗаполнения 	= Истина;
	            КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Город) Тогда
				АдресСтруктура.Вставить("Город", Выборка.Город);
				Если СтрДлина(Выборка.Город) > 50 Тогда
					ОписаниеОшибкиСтрокой 	= "Наименование города не должно превышать 50 символов. Проверьте заполнение адреса.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.Город, "Наименование города по КЛАДР", ОписаниеОшибкиСтрокой, Истина);
                    АдресСтруктура.Вставить("Город", СтруктураИсключения);
					ЕстьОшибкиЗаполнения 	= Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.НаселенныйПункт) Тогда 
				АдресСтруктура.Вставить("НаселПункт", Выборка.НаселенныйПункт);
				Если СтрДлина(Выборка.НаселенныйПункт) > 50 Тогда
					ОписаниеОшибкиСтрокой 	= "Наименование насел. пункта не должно превышать 50 символов. Проверьте заполнение адреса.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.НаселенныйПункт, "Наменование насел. пункта по КЛАДР", ОписаниеОшибкиСтрокой, Истина); 
                    АдресСтруктура.Вставить("НаселПункт", СтруктураИсключения);
					ЕстьОшибкиЗаполнения 	= Истина;
 				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Улица) Тогда 
				АдресСтруктура.Вставить("Улица", Выборка.Улица);
				Если СтрДлина(Выборка.Улица) > 50 Тогда
					ОписаниеОшибкиСтрокой 	= "Наименование улицы не должно превышать 50 символов. Проверьте заполнение адреса."; 
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.Улица, "Наменование улицы по КЛАДР", ОписаниеОшибкиСтрокой, Истина); 
                    АдресСтруктура.Вставить("Улица", СтруктураИсключения);
					ЕстьОшибкиЗаполнения 	= Истина;
 				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Дом) Тогда 
				АдресСтруктура.Вставить("Дом", Выборка.Дом);
				Если СтрДлина(Выборка.Дом) > 20 Тогда
					ОписаниеОшибкиСтрокой 	= "Номер дома не должен превышать 20 символов. Проверьте заполнение адреса."; 
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.Дом, "Номер дома по КЛАДР", ОписаниеОшибкиСтрокой, Истина);
                    АдресСтруктура.Вставить("Дом", СтруктураИсключения);
					ЕстьОшибкиЗаполнения 	= Истина;
 				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Корпус) Тогда
				АдресСтруктура.Вставить("Корпус", Выборка.Корпус);
				Если СтрДлина(Выборка.Корпус) > 20 Тогда
					ОписаниеОшибкиСтрокой 	= "Номер корпуса не должен превышать 20 символов. Проверьте заполнение адреса.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.Корпус, "Номер корпуса по КЛАДР", ОписаниеОшибкиСтрокой, Истина); 
                    АдресСтруктура.Вставить("Корпус", СтруктураИсключения);
					ЕстьОшибкиЗаполнения 	= Истина;
 				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Квартира) Тогда 
				АдресСтруктура.Вставить("Кварт", Выборка.Квартира);
				Если СтрДлина(Выборка.Квартира) > 20 Тогда
					ОписаниеОшибкиСтрокой 	= "Номер квартиры не должен превышать 20 символов. Проверьте заполнение адреса.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Выборка.Квартира, "Номер квартиры по КЛАДР", ОписаниеОшибкиСтрокой, Истина);
                    АдресСтруктура.Вставить("Кварт", СтруктураИсключения);
					ЕстьОшибкиЗаполнения 	= Истина;
 				КонецЕсли;
			КонецЕсли;
			
			Представление = ?(ЗначениеЗаполнено(Выборка.Индекс), Выборка.Индекс, "") +
				?(ЗначениеЗаполнено(Выборка.Регион), ", " + Выборка.Регион, "") +		
				?(ЗначениеЗаполнено(Выборка.Район), ", " + Выборка.Район, "") +
				?(ЗначениеЗаполнено(Выборка.Город), ", " + Выборка.Город, "") +
				?(ЗначениеЗаполнено(Выборка.НаселенныйПункт), ", " + Выборка.НаселенныйПункт, "") +
				?(ЗначениеЗаполнено(Выборка.Улица), ", " + Выборка.Улица, "") + 
				?(ЗначениеЗаполнено(Выборка.Дом), ", " + Выборка.Дом, "") +
				?(ЗначениеЗаполнено(Выборка.Корпус), ", " + Выборка.Корпус, "") +
				?(ЗначениеЗаполнено(Выборка.Квартира), ", " + Выборка.Квартира, "");
            			
			Если ЗначениеЗаполнено(Выборка.Представление) Тогда
				АдресСтруктура.Вставить("Представление", Выборка.Представление);
			Иначе
				АдресСтруктура.Вставить("Представление", Представление);
			КонецЕсли;
			АдресСтруктура.Вставить("КодСтраны", "643");
		КонецЕсли;
		
		АдресНайден = Истина;
		
		Если ЕстьОшибкиЗаполнения Тогда
			
			// FIXME: Временное решение проблемы с адресом, формирование превью и обработку ошибок надо бы переписать
			АдресОшибки = АдресСтруктура;
			
			АдресСтруктура = Новый Структура;
			Для Каждого ЭлементАдреса Из АдресОшибки Цикл
				
				Если ТипЗнч(ЭлементАдреса.Значение) <> Тип("Структура") Тогда
					АдресСтруктура.Вставить(ЭлементАдреса.Ключ, ЭлементАдреса.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураИсключения = ЗаполнитьСтруктуруИсключения(АдресСтруктура, АдресЭталон, "Ошибки заполнения адреса в 1С.", Истина);
			
			СтруктураОтвета.Вставить("АдресСтруктура", СтруктураИсключения);
			СтруктураОтвета.Вставить("АдресОшибки", АдресОшибки);
			
		Иначе
			
			СтруктураОтвета.Вставить("АдресСтруктура", АдресСтруктура);
			
		КонецЕсли;
		
		СтруктураОтвета.Вставить("ЕстьОшибкиЗаполнения", ЕстьОшибкиЗаполнения);
		СтруктураОтвета.Вставить("АдресНайден", АдресНайден);
		
		Если НЕ АдресСтруктура.Свойство("КодРегион") Тогда
			АдресСтруктура.Вставить("КодРегион", АдресЭталон.КодРегион);
		КонецЕсли;                   
		
	Иначе // Адрес в 1С не заполнен
		ЕстьОшибкиЗаполнения = Истина;
		
		АдресСтруктура = Новый Структура;
		СтруктураИсключения = ЗаполнитьСтруктуруИсключения(АдресСтруктура, АдресЭталон, "Не заполнен адрес в 1С.", Истина);
		
		СтруктураОтвета.Вставить("АдресСтруктура", СтруктураИсключения);
		СтруктураОтвета.Вставить("ЕстьОшибкиЗаполнения", ЕстьОшибкиЗаполнения);
		СтруктураОтвета.Вставить("АдресНайден", АдресНайден);
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции

//Функция возвращает телефон контрагента или организации из регистра контактной информации
//
// Параметры: 
//  Объект: элемент справочника "Контрагенты" или "Организации"
//
// Возвращаемое значение:
//  Строковое представление телефона
//
Функция ПолучитьТелефон(Объект, ЭтоФакс = Ложь) Экспорт
	
	ЭтоБух = Метаданные.Имя = "БухгалтерияПредприятия" ИЛИ Метаданные.Имя = "БухгалтерияПредприятияКОРП";
				
	Если Объект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип_Телефон
	|	И КонтактнаяИнформация.Вид = &Вид_Телефон");
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип_Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Если НЕ ЭтоФакс Тогда
			Запрос.УстановитьПараметр("Вид_Телефон", ?(ЭтоБГУ,Справочники.ВидыКонтактнойИнформации.ТелефонУчреждения,Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации));
		Иначе
			Запрос.УстановитьПараметр("Вид_Телефон", ?(ЭтоБГУ,Справочники.ВидыКонтактнойИнформации.ФаксУчреждения,Справочники.ВидыКонтактнойИнформации.ФаксОрганизации));
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если ЭтоБух и ЭтоФакс Тогда // нету факса
			Возврат Неопределено;
		КонецЕсли;
    	
		Если НЕ ЭтоФакс Тогда
			Запрос.УстановитьПараметр("Вид_Телефон", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		Иначе
			Запрос.УстановитьПараметр("Вид_Телефон", Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента);  
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Представление, НЕОПРЕДЕЛЕНО);
	
КонецФункции

//Функция возвращает должность сотрудника
//
// Параметры: 
//  Человек: элемент справочника "Пользователи", "Физические лица" или "Сотрудники организаций"
//
// Возвращаемое значение:
//  Должность сотрудника: строка или справочник "ДолжностиОрганизаций"
//
// Примечение:
//	Применимо для конфигураций, в которых есть справочник "Сотрудники организаций" 
//	(например, Бухгалтерия, Комплексная Автоматизация и др.)
//
Функция ОпределитьДолжностьСотрудника(Человек) Экспорт
	//Для Бух и КА
	Если Метаданные.Справочники.Найти("СотрудникиОрганизаций") <> НЕОПРЕДЕЛЕНО Тогда
		//Определим сотрудника
		Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
		Если ТипЗнч(Человек) = Тип("СправочникСсылка.Пользователи") Тогда
			ФизЛицо = Человек.ФизЛицо;
			//по физ лицу ищем сотрудника
			Если ЗначениеЗаполнено(ФизЛицо) Тогда
				Сотрудник = Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("Физлицо", Физлицо);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Человек) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			//по физ лицу ищем сотрудника
			Сотрудник = Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("Физлицо", Человек);
		Иначе
			Сотрудник = Человек;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			//Ищем должность в РСВ "Работники организаций"
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	РаботникиОрганизацийСрезПоследних.Должность
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|			&Период,
			|			Сотрудник = &Сотрудник
			|				И Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних");
			Запрос.УстановитьПараметр("Период", ТекущаяДата());
			Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
			Запрос.УстановитьПараметр("Организация", Организация);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() И
				ЗначениеЗаполнено(Выборка.Должность) Тогда
				Возврат Выборка.Должность.Наименование
			Иначе
				//берем из спр-ка Сотрудник из реквизита в зависимости от конфы
				МетаданныеСправочникаСотрудники = Метаданные.Справочники.СотрудникиОрганизаций;
				Если ЕстьРеквизитСправочника("ТекущаяДолжностьОрганизации", МетаданныеСправочникаСотрудники) Тогда
					//Бух
					Возврат ?(ЗначениеЗаполнено(Сотрудник.ТекущаяДолжностьОрганизации), 
					Сотрудник.ТекущаяДолжностьОрганизации.Наименование,
					"");
				ИначеЕсли ЕстьРеквизитСправочника("Должность", МетаданныеСправочникаСотрудники) Тогда
					//КА
					Возврат ?(ЗначениеЗаполнено(Сотрудник.Должность),
					Сотрудник.Должность.Наименование,
					"");
				Иначе
					Возврат "";
				КонецЕсли;
			КонецЕсли;
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

//Функция возвращает должность сотрудника
//
// Параметры: 
//  Человек: элемент справочника "Пользователи", "Физические лица" или "Сотрудники организаций"
//
// Возвращаемое значение:
//  Должность сотрудника: строка или справочник "ДолжностиОрганизаций"
//
// Примечение:
//	Применимо для конфигураций, в которых есть справочник "Сотрудники организаций" 
//	(например, Бухгалтерия, Комплексная Автоматизация и др.)
//
Функция ОпределитьДолжностьСотрудникаБГУ(Человек) Экспорт
	
	Если Метаданные.Справочники.Найти("Сотрудники") <> НЕОПРЕДЕЛЕНО Тогда
		//Определим сотрудника
		Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
		Если ТипЗнч(Человек) = Тип("СправочникСсылка.Пользователи") Тогда
			ФизЛицо = Человек.ФизЛицо;
			//по физ лицу ищем сотрудника
			Если ЗначениеЗаполнено(ФизЛицо) Тогда
				Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("Физлицо", Физлицо);
			КонецЕсли;
			
			Сотрудник = Человек;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			//Ищем должность в РСВ "Работники организаций"
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	РаботникиОрганизацийСрезПоследних.Должность
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|			&Период,
			|			Сотрудник = &Сотрудник
			|				И Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних");
			Запрос.УстановитьПараметр("Период", ТекущаяДата());
			Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
			Запрос.УстановитьПараметр("Организация", Организация);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() И
				ЗначениеЗаполнено(Выборка.Должность) Тогда
				Возврат Выборка.Должность.Наименование
			Иначе
				//берем из спр-ка Сотрудник из реквизита в зависимости от конфы
				МетаданныеСправочникаСотрудники = Метаданные.Справочники.СотрудникиОрганизаций;
				Если ЕстьРеквизитСправочника("ТекущаяДолжностьОрганизации", МетаданныеСправочникаСотрудники) Тогда
					//Бух
					Возврат ?(ЗначениеЗаполнено(Сотрудник.ТекущаяДолжностьОрганизации), 
					Сотрудник.ТекущаяДолжностьОрганизации.Наименование,
					"");
				ИначеЕсли ЕстьРеквизитСправочника("Должность", МетаданныеСправочникаСотрудники) Тогда
					//КА
					Возврат ?(ЗначениеЗаполнено(Сотрудник.Должность),
					Сотрудник.Должность.Наименование,
					"");
				Иначе
					Возврат "";
				КонецЕсли;
			КонецЕсли;
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
	
	
	
КонецФункции

//Функция возвращает данные по ответственным лицам организации (руководитель, гл. бухгалтер)
//
// Параметры: 
//  Организация: элемент справочника "Организации"
//  ДатаСреза: дата, на которую опредяются ответственные лица
//
// Возвращаемое значение:
//  Структура с данными по ФИО, должности руководителя и главного бухгалтера
//
Функция ПолучитьОтветственныхЛицОрганизации(Организация, ДатаСреза) Экспорт
	
	Результат = Новый Структура("Руководитель, РуководительДолжность, РуководительФИО, РуководительПредставление, 
	|ГлавныйБухгалтер, ГлавныйБухгалтерДолжность, ГлавныйБухгалтерФИО, ГлавныйБухгалтерПредставление");
	
	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	
	// Для БГУ
	Если ЭтоБГУ Тогда
		
		ЗапросПоЛицам.Текст = 	
		"ВЫБРАТЬ
		|	ОтветственныеЛицаУчрежденийСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаУчрежденийСрезПоследних.ВидОтветственногоЛица,
		|	ОтветственныеЛицаУчрежденийСрезПоследних.ОтветственноеЛицо.Контрагент.Фамилия КАК Фамилия,
		|	ОтветственныеЛицаУчрежденийСрезПоследних.ОтветственноеЛицо.Контрагент.Имя КАК Имя,
		|	ОтветственныеЛицаУчрежденийСрезПоследних.ОтветственноеЛицо.Контрагент.Отчество КАК Отчество
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаУчреждений.СрезПоследних(&ДатаСреза, Учреждение = &Организация) КАК ОтветственныеЛицаУчрежденийСрезПоследних";	
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();
		
		Пока Руководители.Следующий() Цикл
			
			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			ФИО.Фамилия = "";
			ФИО.Имя = "";
			ФИО.Отчество = "";
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество;
			
			Если Руководители.ВидОтветственногоЛица  = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель               = Руководители.ОтветственноеЛицо;
				Результат.РуководительДолжность      = Руководители.ВидОтветственногоЛица;
				Результат.РуководительФИО            = ФИО;
				Результат.РуководительПредставление  = Представление;
				
			ИначеЕсли Руководители.ВидОтветственногоЛица  	= Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер           		= Руководители.ОтветственноеЛицо;
				Результат.ГлавныйБухгалтерДолжность  		= Руководители.ВидОтветственногоЛица;
				Результат.ГлавныйБухгалтерФИО        		= ФИО;
				Результат.ГлавныйБухгалтерПредставление 	= Представление;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
	//Для Бух и КА
	Если Метаданные.РегистрыСведений.Найти("ОтветственныеЛицаОрганизаций") <> НЕОПРЕДЕЛЕНО Тогда
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();
		
		Пока Руководители.Следующий() Цикл
			
			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			ФИО.Фамилия = "";
			ФИО.Имя = "";
			ФИО.Отчество = "";
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество;
			
			Если Руководители.ОтветственноеЛицо      = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель               = Руководители.ФизическоеЛицо;
				Результат.РуководительДолжность      = Руководители.Должность;
				Результат.РуководительФИО            = ФИО;
				Результат.РуководительПредставление  = Представление;
				
			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер           = Руководители.ФизическоеЛицо;
				Результат.ГлавныйБухгалтерДолжность  = Руководители.Должность;
				Результат.ГлавныйБухгалтерФИО        = ФИО;
				Результат.ГлавныйБухгалтерПредставление  = Представление;
				
			КонецЕсли;
			
		КонецЦикла;
		//для УТ
	ИначеЕсли Метаданные.РегистрыСведений.Найти("ОтветственныеЛицаОрганизации") <> НЕОПРЕДЕЛЕНО Тогда
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацииСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();
		
		Пока Руководители.Следующий() Цикл
			
			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			ФИО.Фамилия = "";
			ФИО.Имя = "";
			ФИО.Отчество = "";
			
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество;
			
			Если Руководители.ОтветственноеЛицо      = Перечисления.ОтветственныеЛицаОрганизации.Руководитель Тогда
				Результат.Руководитель               = Руководители.ФизическоеЛицо;
				Результат.РуководительДолжность      = Руководители.Должность;
				Результат.РуководительФИО            = ФИО;
				Результат.РуководительПредставление  = Представление;
				
			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер           = Руководители.ФизическоеЛицо;
				Результат.ГлавныйБухгалтерДолжность  = Руководители.Должность;
				Результат.ГлавныйБухгалтерФИО        = ФИО;
				Результат.ГлавныйБухгалтерПредставление  = Представление;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Функция возвращает ставку НДС
//
// Параметры: 
//  СтавкаНДССтрокой: строковое представление ставки НДС
//
// Возвращаемое значение:
//  Ставка НДС: перечисление "Ставки НДС"
//
Функция ПолучитьСтавкуНДСИзСтроки(СтавкаНДССтрокой) Экспорт
	
	СтавкаНДССтрокой = Строка(СтавкаНДССтрокой);
	
	Если СтавкаНДССтрокой = "0" Или 
		СтавкаНДССтрокой = "0.00000" Тогда
		Возврат Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли СтавкаНДССтрокой = "10" Или
		СтавкаНДССтрокой = "10.00000" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли СтавкаНДССтрокой = "18" Или
		СтавкаНДССтрокой = "18.00000" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли СтавкаНДССтрокой = "20" Или
		СтавкаНДССтрокой = "20.00000" Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли СтавкаНДССтрокой = "10/110" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10_110;
	ИначеЕсли СтавкаНДССтрокой = "18/118" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18_118;
	ИначеЕсли СтавкаНДССтрокой = "20/120" Тогда
		Возврат Перечисления.СтавкиНДС.НДС20_120;
	ИначеЕсли СтавкаНДССтрокой = "" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;		
	Иначе
		Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
КонецФункции

//Функция возвращает дату
//
// Параметры: 
//  ДатаВремяСтрокой: строковое представление даты
//	06.08.2012
//
// Возвращаемое значение:
//  Дата: тип Дата
//
Функция ПолучитьДатуИВремяИзСтроки(ДатаВремяСтрокой) Экспорт
	
	Год = Сред(ДатаВремяСтрокой, 7, 4);
	Месяц = Сред(ДатаВремяСтрокой, 4, 2);
	День = Сред(ДатаВремяСтрокой, 1, 2);	
	Попытка
		ДатаВремя = Дата(Год, Месяц, День);
		Возврат ДатаВремя;
	Исключение
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
КонецФункции

// Определяет есть ли реквизит с переданным именем у объекта метаданных
//
// Параметры:
//  ИмяРеквизита		 - Строка			- Имя реквизита
//  МетаданныеОбъекта	 - ОбъектМетаданных - Объект метаданных, для которого нужно определить наличие реквизита. 
//												Допустимые только те метаданные, у которых есть реквизиты (документы, справочники, табличные части)
// 
// Возвращаемое значение:
//  Булево - Есть реквизит
//
Функция ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Экспорт
	
	Реквизит = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
	Результат = НЕ (Реквизит = Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Устарела: Следует использовать ЕстьРеквизитОбъекта
// Позволяет определить есть ли среди реквизитов шапки справочника
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеСправочника - объект описания метаданных справочника, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитСправочника(ИмяРеквизита, МетаданныеСправочника) Экспорт
	
	Результат = ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеСправочника);
	
	Возврат Результат;
	
КонецФункции

// Устарела: Следует использовать ЕстьРеквизитОбъекта
// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт
	
	Результат = ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеДокумента);
	
	Возврат Результат;
	
КонецФункции // ЕстьРеквизитДокумента()

// Определить есть ли табличная часть с переданным именем у объекта метаданных
//
// Параметры:
//  ИмяТабличнойЧасти	 - Строка - Имя табличной части
//  МетаданныеОбъекта	 - ОбъектМетаданных - Объект метаданных, для которого нужно определить наличие реквизита. 
//												Допустимые только те метаданные, у которых есть реквизиты (документы, справочники, табличные части)
// 
// Возвращаемое значение:
//  Булево - Есть табличная часть
//
Функция ЕстьТабличнаяЧастьОбъекта(ИмяТабличнойЧасти, МетаданныеОбъекта)
	
	ТабЧасть = МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
	Результат = НЕ (ТабЧасть = Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Устарела: Следует использовать ЕстьТабличнаяЧастьОбъекта
// Позволяет определить есть ли среди табличных частей документа
// табличная часть с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьТабличнаяЧастьДокумента(ИмяТабличнойЧасти, МетаданныеДокумента) Экспорт
	
	Результат = ЕстьТабличнаяЧастьОбъекта(ИмяТабличнойЧасти, МетаданныеДокумента);
	
	Возврат Результат;
	
КонецФункции // ЕстьРеквизитДокумента()

// Определить есть ли реквизит с переданным именем у указанной табличной части объекта
//
// Параметры:
//  ИмяРеквизита		 - Строка			- Имя реквизита
//  МетаданныеОбъекта	 - ОбъектМетаданных - Объект метаданных, для которого нужно определить наличие реквизита. 
//												Допустимые только те метаданные, у которых есть табличные части (документы, справочники)
//  ИмяТабличнойЧасти	 - Строка			- Имя табличной части
// 
// Возвращаемое значение:
//  Булево - Есть реквизит
//
Функция ЕстьРеквизитТабличнойЧастиОбъекта(ИмяРеквизита, МетаданныеОбъекта, ИмяТабличнойЧасти) Экспорт
	
	ЕстьТабЧасть = ЕстьТабличнаяЧастьОбъекта(ИмяТабличнойЧасти, МетаданныеОбъекта);
	Если ЕстьТабЧасть Тогда
		
		ТабличнаяЧасть = МетаданныеОбъекта.ТабличныеЧасти[ИмяТабличнойЧасти];
		Результат = ЕстьРеквизитОбъекта(ИмяРеквизита, ТабличнаяЧасть);
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Функция переводит число из 16-ой системы счисления в 10-ную
//
// Параметры: 
//  Число_16: строковое представление числа в 16-ой системе
//
// Возвращаемое значение:
//  Результат: число в 10-й системе (тип Число)
//
Функция Число16_10(Число_16) Экспорт
	
	
	Перем СоответствиеСимволов;
	
	СоответствиеСимволов    = Новый Соответствие;
	
	СоответствиеСимволов.Вставить("0",0);
	СоответствиеСимволов.Вставить("1",1);
	СоответствиеСимволов.Вставить("2",2);
	СоответствиеСимволов.Вставить("3",3);
	СоответствиеСимволов.Вставить("4",4);
	СоответствиеСимволов.Вставить("5",5);
	СоответствиеСимволов.Вставить("6",6);
	СоответствиеСимволов.Вставить("7",7);
	СоответствиеСимволов.Вставить("8",8);
	СоответствиеСимволов.Вставить("9",9);
	СоответствиеСимволов.Вставить("A",10);
	СоответствиеСимволов.Вставить("B",11);
	СоответствиеСимволов.Вставить("C",12);
	СоответствиеСимволов.Вставить("D",13);
	СоответствиеСимволов.Вставить("E",14);
	СоответствиеСимволов.Вставить("F",15);
	
	Число16 = СокрЛП(Число_16);
	Результат = 0;
	
	ДлинаЧисла16 = СтрДлина(Число16);
	Для ы = 1 По ДлинаЧисла16 Цикл
		
		Символ16 = Сред(Число16, ы, 1);
		Число = СоответствиеСимволов.Получить(Символ16);
		Результат = Результат + Число * Pow(16, ДлинаЧисла16 - ы);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает объект ОписаниеТипов, построенный по строке текста
// FIXME: Не работает создание типа ДвоичныеДанные
// 
//    Параметры:
//        Текст - строка, описывающая тип. Состоит из обязательного имени типа и необязательных квалификаторов, 
//                разделенных запятыми.
//
//    Для типа "Строка" распознаются необязательные квалификаторы:
//        - максимальная длина (число, по умолчанию 0 - без ограничений)
//        - допустимая длина (строка "Переменная" или "Фиксированная", по умолчанию - переменная)
//
//    Для типа "Число" распознаются необязательные квалификаторы:
//        - число разрядов (число, по умолчанию 0 - без ограничений)
//        - число разрядов дробной части (число, по умолчанию 0)
//        - допустимый знак (строка "Любой" или "Неотрицательный", по умолчанию - любой)
//
//    Для типа "Дата" распознается необязательный квалификатор части даты (строка "Время" или "Дата" или "ДатаВремя",
//    по умолчанию "ДатаВремя")
//
//    Для типа "ДвоичныеДанные" распознаются необязательные квалификаторы:
//        - максимальная длина (число, по умолчанию 0 - без ограничений)
//        - допустимая длина (строка "Переменная" или "Фиксированная", по умолчанию - переменная)
//
//    Для остальных типов обрабатывается только имя типа
//
Функция ОписаниеТипаИзСтроки(Текст) Экспорт
	ЧастиОписания = СтрЗаменить(СтрЗаменить(Текст, Символы.ПС, ""), ",", Символы.ПС);
	КоличествоЧастей = СтрЧислоСтрок(ЧастиОписания);
	
	ИмяИсходногоТипа = СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 1));
	Если КоличествоЧастей = 1 Тогда
		Возврат Новый ОписаниеТипов(ИмяИсходногоТипа);
	КонецЕсли;
	
	ИсходныйТип = Тип(ИмяИсходногоТипа);
	Если ИсходныйТип = Тип("Строка") Или ИсходныйТип = Тип("ДвоичныеДанные") Тогда
		МаксимальнаяДлинаСтроки = "0" + СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 2));
		ДопустимаяДлинаСтроки   = СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 3));
		Если ПустаяСтрока(ДопустимаяДлинаСтроки) Тогда
			ДопустимаяДлинаСтроки = "Переменная";
		КонецЕсли;
		Возврат Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(
			Число(МаксимальнаяДлинаСтроки), ДопустимаяДлина[ДопустимаяДлинаСтроки]
		));
		
	ИначеЕсли ИсходныйТип = Тип("Число") Тогда
		ДлинаЧисла          = "0" + СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 2));
		ДлинаДробнойЧасти   = "0" + СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 3));
		ДопустимыйЗнакЧисла = СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 4));
		Если ПустаяСтрока(ДопустимыйЗнакЧисла) Тогда
			ДопустимыйЗнакЧисла = "Любой";
		КонецЕсли;
		Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(
			Число(ДлинаЧисла), Число(ДлинаДробнойЧасти), ДопустимыйЗнак[ДопустимыйЗнакЧисла]
		));
			
	ИначеЕсли ИсходныйТип = Тип("Дата") Тогда
		СоставДаты = СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 2));
		Если ПустаяСтрока(СоставДаты) Тогда
			СоставДаты = "ДатаВремя";
		КонецЕсли;
		Возврат Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты( 
			ЧастиДаты[СоставДаты]
		));
		
	КонецЕсли;

	Возврат Новый ОписаниеТипов(ИмяИсходногоТипа);
КонецФункции

Функция ОписаниеТипаИзТипа(ТипЗначения) Экспорт
	
	МассивТипов = ЗначениеВМассиве(ТипЗначения);
	
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипа;
	
КонецФункции

Функция ОписаниеТипаЗначения(Значение) Экспорт
	
	ТипЗначения = ТипЗнч(Значение);
	
	ОписаниеТипа = ОписаниеТипаИзТипа(ТипЗначения);
	
	Возврат ОписаниеТипа;
	
КонецФункции

Функция ОписаниеТипаЧисло(Длина = 0, Точность = 0, Неотрицательное = Ложь, Nullable = Ложь) Экспорт
	
	Знак = ?(Неотрицательное, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой);
	ОписаниеЧисла = Новый КвалификаторыЧисла(Длина, Точность, Знак);
	
	ОписаниеТипа = Новый ОписаниеТипов("Число", ОписаниеЧисла);
	
	Если Nullable Тогда
		ОписаниеТипа = ДобавитьNull(ОписаниеТипа);
	КонецЕсли;
	
	Возврат ОписаниеТипа;
	
КонецФункции

Функция ОписаниеТипаСтрока(Длина = 0, ФиксированнаяДлина = Ложь, Nullable = Ложь) Экспорт
	
	Фиксированность = ?(ФиксированнаяДлина, ДопустимаяДлина.Фиксированная, ДопустимаяДлина.Переменная);
	ОписаниеСтроки = Новый КвалификаторыСтроки(Длина, Фиксированность);
	
	ОписаниеТипа = Новый ОписаниеТипов("Строка", ОписаниеСтроки);
	
	Если Nullable Тогда
		ОписаниеТипа = ДобавитьNull(ОписаниеТипа);
	КонецЕсли;
	
	Возврат ОписаниеТипа;
	
КонецФункции

Функция ОписаниеТипаДата(Знач ВидДаты = Неопределено, Nullable = Ложь) Экспорт
	
	Если ВидДаты = Неопределено Тогда
		ВидДаты = ЧастиДаты.ДатаВремя;
	КонецЕсли;
	
	ОписаниеДаты = Новый КвалификаторыДаты(ВидДаты);
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата", ОписаниеДаты);
	
	Если Nullable Тогда
		ОписаниеТипа = ДобавитьNull(ОписаниеТипа);
	КонецЕсли;
	
	Возврат ОписаниеТипа;
	
КонецФункции

Функция ОписаниеТипаБулево(Nullable = Ложь) Экспорт
	
	ОписаниеТипа = Новый ОписаниеТипов("Булево");
	
	Если Nullable Тогда
		ОписаниеТипа = ДобавитьNull(ОписаниеТипа);
	КонецЕсли;
	
	Возврат ОписаниеТипа;
	
КонецФункции

Функция ДобавитьNull(ОписаниеТипа)
	
	Результат = Новый ОписаниеТипов(ОписаниеТипа, "Null");
	
	Возврат Результат;
	
КонецФункции


// Устарела: Следует использовать СтрРазделить2()
// Функция "расщепляет" строку на подстроки, используя заданный 
//        разделитель. Разделитель может иметь любую длину. 
//        Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//        считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//        игнорируются.
//        Например, 
//        РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//        три из которых - пустые строки, а 
//        РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//    Параметры: 
//        Стр -            строка, которую необходимо разложить на подстроки. 
//                        Параметр передается по значению.
//        Разделитель -    строка-разделитель, по умолчанию - запятая.
//
//
//    Возвращаемое значение:
//        массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	Если Разделитель = " " Тогда
		МассивСтрок = СтрРазделить2(Стр, Разделитель, Ложь, Истина);
	Иначе
		МассивСтрок = СтрРазделить2(Стр, Разделитель);
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции // глРазложить

// Соединяет массив переданных строк в одну строку с указанным разделителем
//
// Параметры:
//  МассивСтрок	 - Массив, ФиксированныйМассив - Массив, содержащий объединяемые строки
//  Разделитель	 - Строка - Строка, которая будет вставлена между объединяемыми строками. Если параметр не задан, строки будут объединены слитно друг с другом
// 
// Возвращаемое значение:
//  Строка - Строка, содержащая соединенные исходные строки с разделителем между ними
//
Функция СтрСоединить2(МассивСтрок, Разделитель, ВключаяПустые = Ложь) Экспорт
	
	Результат = "";
	
	ПерваяСтрока = Истина;
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		
		Если ВключаяПустые ИЛИ НЕ ПустаяСтрока(ТекСтрока) Тогда
			
			Если НЕ ПерваяСтрока Тогда
				Результат = Результат + Разделитель;
			КонецЕсли;
			Результат = Результат + ТекСтрока;
			
			ПерваяСтрока = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Разделяет строку на части по указанным символам-разделителям
//
// Параметры:
//  ИсходнаяСтрока	 - Строка - Разделяемая строка
//  Разделитель		 - Строка - Строка символов, которые являются разделителем
//  ВключаяПустые	 - Булево - Указывает необходимость включать в результат пустые строки, которые могут образоваться в результате разделения исходной строки
// 
// Возвращаемое значение:
//  Массив - Массив со строками, которые получились в результате разделения исходной строки
//
Функция СтрРазделить2(Знач ИсходнаяСтрока, Знач Разделитель, ВключаяПустые = Истина, ОбрезатьПробелы = Ложь) Экспорт
	
	МассивСтрок = Новый Массив();
	
	ОбластьПоиска = ИсходнаяСтрока;
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока Истина Цикл
		
		ПозицияРазделителя = СтрНайти2(ОбластьПоиска, Разделитель);
		
		Если ПозицияРазделителя = 0 Тогда
			Подстрока = ОбластьПоиска;
		Иначе
			Подстрока = Лев(ОбластьПоиска, ПозицияРазделителя - 1);
		КонецЕсли;
		
		Если ВключаяПустые ИЛИ НЕ ПустаяСтрока(Подстрока) Тогда
			
			Если ОбрезатьПробелы Тогда
				Подстрока = СокрЛП(Подстрока);
			КонецЕсли;
			
			МассивСтрок.Добавить(Подстрока);
			
		КонецЕсли;
		
		Если ПозицияРазделителя = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОбластьПоиска = Сред(ОбластьПоиска, ПозицияРазделителя + ДлинаРазделителя);
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

Функция СтрНайти2(ИсходнаяСтрока, ПодстрокаПоиска, НачальнаяПозиция = 1) Экспорт
	
	ОбластьПоиска = ИсходнаяСтрока;
	Если НачальнаяПозиция > 1 Тогда
		ОбластьПоиска = Сред(ОбластьПоиска, НачальнаяПозиция);
	КонецЕсли;
	
	Результат = Найти(ОбластьПоиска, ПодстрокаПоиска);
	
	Возврат Результат;
	
КонецФункции

Функция СтрНачинаетсяС2(ИсходнаяСтрока, ПодстрокаПоиска) Экспорт
	
	ОбластьПоиска = Лев(ИсходнаяСтрока, СтрДлина(ПодстрокаПоиска));
	
	Результат = (ОбластьПоиска = ПодстрокаПоиска);
	
	Возврат Результат;
	
КонецФункции

Функция СтрЗаканчиваетсяНа2(ИсходнаяСтрока, ПодстрокаПоиска) Экспорт
	
	ОбластьПоиска = Прав(ИсходнаяСтрока, СтрДлина(ПодстрокаПоиска));
	
	Результат = (ОбластьПоиска = ПодстрокаПоиска);
	
	Возврат Результат;
	
КонецФункции

// Подставляет параметры в строку по номеру
//
// Параметры:
//  Шаблон		 - Строка - Строка, содержащая маркеры подстановки вида: "%1..%10". Нумерация маркеров начинается с 1
//  Параметр1, Параметр2	 - Произвольный - Параметры, содержащие произвольные значения, строковые представления которых должны быть подставлены в шаблон
// 
// Возвращаемое значение:
//  Строка - Строка шаблона с подставленными параметрами
//
Функция СтрШаблон2(Шаблон, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено) Экспорт
	
	Результат = Шаблон;
	Результат = СтрЗаменить(Шаблон, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Возврат Результат;
	
КонецФункции


// Функция - Формирует представление суммы прописью в указанной валюте, если это возможно
//
// Параметры:
//  Сумма	 - Число, Строка - Сумма, для которой надо сформировать представление прописью
//  Валюта	 - СправочникСсылка.Валюты - Валюта
// 
// Возвращаемое значение:
//  Строка - Сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт
	
	СуммаЧисло = ПривестиКЧислу(Сумма);
	Если Валюта.ПараметрыПрописиНаРусском = "" Или СуммаЧисло > 999999999999999 Тогда
		Возврат ФорматСумм(СуммаЧисло);
	Иначе
		Возврат ЧислоПрописью(СуммаЧисло, ,Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "0,00", ЧРГ = "") Экспорт

	ФорматнаяСтрока = "ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);

	РезультирующаяСтрока = СокрЛ(Формат(ПривестиКЧислу(Сумма), ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

Функция ПривестиКЧислу(ИсходноеЗначение, ОбрабатыватьПустое = Истина, НольЕслиОшибка = Ложь) Экспорт
	
	Попытка
		Результат = Число(ИсходноеЗначение);
	Исключение
		Если ОбрабатыватьПустое И (ИсходноеЗначение = Неопределено Или НольЕслиОшибка) Тогда
			Результат = 0;
		Иначе
			Результат = ИсходноеЗначение;
		КонецЕсли;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


//////////////////////////////////////////////////////////////////////
//Процедуры и функции по работе с электронными документами

//Функция определяет, служебный документ или нет
//
// Параметры: 
//  Syn_Документ: документ сервиса (экземпляр класса Document)
//
// Возвращаемое значение:
//  Флаг служебного документа: Истина - служебный документ, Ложь - не служебный
//
Функция ЭтоСлужебныйДокумент(Syn_Документ) Экспорт
	Syn_ТипДокумента = Syn_Документ.DocumentType;
	Если Syn_ТипДокумента = "ServiceInvoiceConfirmation" Или
		Syn_ТипДокумента = "ServiceInvoiceReceipt" Или
		Syn_ТипДокумента = "ServiceInvoiceAmendmentRequest" Или
		Syn_ТипДокумента = "ServiceAmendmentRequest" Или
		Syn_ТипДокумента = "ServiceReceipt" Или 
		Syn_ТипДокумента = "WaybillBuyer" Или
		Syn_ТипДокумента = "ActOfWorkBuyer" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

//Функция определяет, относится ли документ к регламенту ЭСФ
//
// Параметры: 
//  Syn_Документ: документ сервиса (экземпляр класса Document)
//
// Возвращаемое значение:
//  Флаг регламента обмена электронными счет-фактурами:
//	Истина - документ регламента ЭСФ, Ложь - документ не регламента ЭСФ
//
Функция ЭтоРегламентЭСФ(Syn_Документ) Экспорт
	
	//определяем регламент по типу докумнта
	Syn_ТипДокумента = Syn_Документ.DocumentTypeEnum.Name;
	
	ПоРегламентуЭСФ = ЗначенияВМассиве(
		"Invoice",
		"InvoiceRevision",
		"InvoiceCorrection",
		"InvoiceCorrectionRevision",
		"GeneralTransferSeller",
		"GeneralTransferRevisionSeller",
		"GeneralTransferCorrectionSeller",
		"GeneralTransferCorrectionRevisionSeller"
	);
	
	//: Формализованные = Новый Массив;
	Результат = ПоРегламентуЭСФ.Найти(Syn_ТипДокумента) <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

//Функция определяет необходимость генерировать ИОП
//
// Параметры: 
//  Syn_Документ: документ сервиса (экземпляр класса Document)
//
// Возвращаемое значение:
//  Флаг необходимости в генерации ИОП:
//	Истина - необходимо создавать и отправлять ИОП, Ложь - ИОП для данного типа документа создавать не нужно или уже был создан
//
// Примечание:
// Сначала проверяется список типов документов, для которых надо генерировать ИОП
// Затем проверяется отсутствие ИОП для данного документа (чтобы избежать повторного создания, ИОП может быть создан в веб-клиенте)
//
Функция ГенерироватьИзвещениеОПолучении(Syn_Документ) Экспорт
	Syn_ТипДокумента = Syn_Документ.DocumentType;
	Если Syn_ТипДокумента = "ServiceInvoiceReceipt" Или
		Syn_ТипДокумента = "ServiceReceipt" Или
		Syn_ТипДокумента = "ServiceAmendmentRequest" Или
		Syn_ТипДокумента = "WaybillBuyer" Или
		Syn_ТипДокумента = "ActOfWorkBuyer" Тогда
		//пропускаем ИОП ЭСФ, ИОП общ и УОУ общ
		Возврат Ложь;
	Иначе
		//проверяем, нет ли уже ИОП (получаем служебные документы)
		Попытка
			Тип_FullDocumentInfoRequestParams = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "FullDocumentInfoRequestParams");
			FullDocumentInfoRequestParams = ExchangeService.ФабрикаXDTO.Создать(Тип_FullDocumentInfoRequestParams);
			FullDocumentInfoRequestParams.GetServiceDocuments = Истина;
			
			FullDocumentInfo = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id, FullDocumentInfoRequestParams);
			//бежим по служебным документам и ищем ИОП
			Syn_СлужебныеДокументы = FullDocumentInfo.ServiceDocuments;
			Для ы = 0 По Syn_СлужебныеДокументы.ServiceDocument.Количество() - 1 Цикл
				Syn_СлужебныйДокумент = Syn_СлужебныеДокументы.ServiceDocument[ы];
				Если (Syn_СлужебныйДокумент.DocumentType = "ServiceInvoiceReceipt" Или
					Syn_СлужебныйДокумент.DocumentType = "ServiceReceipt") И
					Syn_СлужебныйДокумент.ParentDocumentId = Syn_Документ.Id Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			
			ОтправитьУведомлениеПользователю("Ошибка генерации ИОП: " + ТекстОшибкиSynerdocs);
			
			Возврат Ложь;
			
		КонецПопытки;
		
		Возврат Истина;
	КонецЕсли;
КонецФункции

// Определяет тип документа и его представление по ссылке
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка - Ссылка на документ
// Возвращаемое значение:
//  Структура - Тип и представление документа
Функция ПолучитьТипИПредставлениеДокументаБГУ(ДокументСсылка) Экспорт
	
	ТипИПредставление = Новый Структура;
	ТипИПредставление.Вставить("Тип");
	ТипИПредставление.Вставить("Представление");
	
	Если (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОС_Реализация")) ИЛИ (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.МЗ_Реализация")) Тогда
		ТипДокумента			= "Торг12";
		ПредставлениеДокумента	= "Товарная накладная № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСсылка) +	" от " + Формат(ДокументСсылка.Дата, "ДЛФ=Д") + " г.";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УслугиОказанные") Тогда
		ТипДокумента			= "Акт";
		ПредставлениеДокумента	= "Акт об оказании услуг № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСсылка) +
		" от " + Формат(ДокументСсылка.Дата, "ДЛФ=Д") + " г.";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НДС_СчетФактураВыданный") Тогда
		ПредставлениеДокумента = 	"Счет-фактура № " + ДокументСсылка.Номер +	" от " + Формат(ДокументСсылка.Дата, "ДЛФ=Д") + " г.";
	ИначеЕсли ТипЗнч(ДокументСсылка) =  Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураВыданный") Тогда
		Если ТипЗнч(ДокументСсылка.ИсправляемыйДокумент) = Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный") Тогда
			ТипДокумента = "Исправительный корректировочный счет-фактура";
		Иначе
			ТипДокумента = "Исправительный счет-фактура";
		КонецЕсли;
		ПредставлениеДокумента =	"Исправительный счет-фактура № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСсылка) +
		" от " + Формат(ДокументСсылка.Дата, "ДЛФ=Д") + " г." +
		" к счету-фактуре № " + ДокументСсылка.ДокументОснование.Номер +
		" от " + Формат(ДокументСсылка.ДокументОснование.Дата, "ДЛФ=Д") + " г.";
	ИначеЕсли ТипЗнч(ДокументСсылка) =  Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный") Тогда
		ТипДокумента = "Корректировочный счет-фактура";
		ПредставлениеДокумента =	"Корректировочный счет-фактура № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСсылка) +
		" от " + Формат(ДокументСсылка.Дата, "ДЛФ=Д") + " г." +
		" к счету-фактуре № " + ДокументСсылка.ДокументОснование.Номер +
		" от " + Формат(ДокументСсылка.ДокументОснование.Дата, "ДЛФ=Д") + " г.";
	КонецЕсли;
	
	ТипИПредставление.Тип = ТипДокумента;
	ТипИПредставление.Представление = ПредставлениеДокумента;
	
	Возврат ТипИПредставление;
	
КонецФункции

//Функция возвращает представление документа 1С
//
// Параметры: 
//  Документ1С: ссылка на учетный документ 1С
//
// Возвращаемое значение:
//  Формализованное представление документа 1С 
//
Функция ПолучитьПредставлениеДокумента1С(Документ1С) Экспорт
	ПредставлениеДокумента = "";
	
	Если ТипЗнч(Документ1С) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если Документ1С.Товары.Количество() > 0 Или 
			Документ1С.Услуги.Количество() = 0 Тогда
			ПредставлениеДокумента = "Товарная накладная № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Документ1С) + " от " + Формат(Документ1С.Дата, "ДЛФ=Д") + " г.";
		Иначе
			ПредставлениеДокумента = "Акт о выполнении работ (оказании услуг) № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Документ1С) + " от " + Формат(Документ1С.Дата, "ДЛФ=Д") + " г.";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ1С) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если Документ1С.Товары.Количество() > 0 Или 
			Документ1С.Услуги.Количество() = 0 Тогда
			ПредставлениеДокумента = "Товарная накладная № " + Документ1С.НомерВходящегоДокумента + " от " + Документ1С.ДатаВходящегоДокумента + " г.";
		Иначе
			ПредставлениеДокумента = "Акт о выполнении работ (оказании услуг) № " + Документ1С.НомерВходящегоДокумента + " от " + Документ1С.ДатаВходящегоДокумента + " г.";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ1С) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Если Документ1С.Исправление Тогда
			Если Документ1С.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
				ПредставлениеДокумента = "Исправление № " + Документ1С.НомерИсправления + " от " + Формат(Документ1С.Дата, "ДЛФ=Д") + " г." + 
				" корректировочной счет-фактуры № " + Документ1С.НомерИсправляемогоКорректировочногоДокумента + " от " + Формат(Документ1С.ДатаИсправляемогоКорректировочногоДокумента, "ДЛФ=Д") + " г." +
				" к счету-фактуре № " + Документ1С.НомерИсходногоДокумента + " от " + Формат(Документ1С.ДатаИсходногоДокумента, "ДЛФ=Д") + " г.";
			Иначе
				ПредставлениеДокумента = "Исправление № " + Документ1С.НомерИсправления + " от " + Формат(Документ1С.Дата, "ДЛФ=Д") + " г." + " счет-фактуры № " + Документ1С.НомерИсходногоДокумента + " от " + Формат(Документ1С.ДатаИсходногоДокумента, "ДЛФ=Д") + " г.";
			КонецЕсли;
			
		ИначеЕсли Документ1С.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ПредставлениеДокумента = "Корректировочный счет-фактура № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Документ1С) + " от " + Формат(Документ1С.Дата, "ДЛФ=Д") + " г." + " к счету-фактуре № " + Документ1С.НомерИсходногоДокумента + " от " + Формат(Документ1С.ДатаИсходногоДокумента, "ДЛФ=Д") + " г.";
		Иначе
			ПредставлениеДокумента = "Счет-фактура № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Документ1С) + " от " + Формат(Документ1С.Дата, "ДЛФ=Д") + " г.";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ1С) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Если Документ1С.Исправление Тогда
			Если Документ1С.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				ПредставлениеДокумента = "Исправление № " + Документ1С.НомерИсправления + " от " + Формат(Документ1С.ДатаИсправления, "ДЛФ=Д") + " г." + 
				" корректировочной счет-фактуры № " + Документ1С.НомерВходящегоДокумента + " от " + Формат(Документ1С.ДатаВходящегоДокумента, "ДЛФ=Д") + " г." +
				" к счету-фактуре № " + Документ1С.НомерИсходногоДокумента + " от " + Формат(Документ1С.ДатаИсходногоДокумента, "ДЛФ=Д") + " г.";
			Иначе
				ПредставлениеДокумента = "Исправление № " + Документ1С.НомерИсправления + " от " + Формат(Документ1С.ДатаИсправления, "ДЛФ=Д") + " г." + " счет-фактуры № " + Документ1С.НомерВходящегоДокумента + " от " + Формат(Документ1С.ДатаВходящегоДокумента, "ДЛФ=Д") + " г.";
			КонецЕсли;
			
		ИначеЕсли Документ1С.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ПредставлениеДокумента = "Корректировочный счет-фактура № " + Документ1С.НомерВходящегоДокумента + " от " + Формат(Документ1С.ДатаВходящегоДокумента, "ДЛФ=Д") + " г." + " к счету-фактуре № " + Документ1С.НомерИсходногоДокумента + " от " + Формат(Документ1С.ДатаИсходногоДокумента, "ДЛФ=Д") + " г.";
		Иначе
			ПредставлениеДокумента = "Счет-фактура № " + Документ1С.НомерВходящегоДокумента + " от " + Формат(Документ1С.ДатаВходящегоДокумента, "ДЛФ=Д") + " г.";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

//Функция возвращает основные реквизиты электронного документа
//
// Параметры: 
//  Syn_Документ: документ сервиса (экземпляр класса Document)
//
// Возвращаемое значение:
//  Структура с данными об электронном документе: тип и представление, дата, сумма, контрагент, статус и др.
//
// Примечание:
//	Некоторые данные получаем из XML (контента документа), другие из сервиса
//
Функция ПолучитьОсновныеРеквизитыЭД(Syn_Документ) Экспорт
	Попытка
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Сумма");
		СтруктураРеквизитов.Вставить("Тип");
		СтруктураРеквизитов.Вставить("Представление");
		СтруктураРеквизитов.Вставить("Дата");
		СтруктураРеквизитов.Вставить("Контрагент");
		СтруктураРеквизитов.Вставить("КонтрагентПредставление");
		СтруктураРеквизитов.Вставить("Статус");
		СтруктураРеквизитов.Вставить("ДатаСобытия");
		СтруктураРеквизитов.Вставить("IDДокумента");
		СтруктураРеквизитов.Вставить("IDКонтрагента");
		
		СтруктураРеквизитов.Тип = СоответствиеТиповЭД_Synerdocs_1C.Получить(Syn_Документ.DocumentType);
		
		Если СтруктураРеквизитов.Тип = "Торг12" Тогда			
			НомерДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ТН", "НомТН");
			ДатаДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ТН", "ДатаТН");
			СуммаДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ВсегоНакл", "СумУчНДСВс");
			
			СтруктураРеквизитов.Представление = "Товарная накладная № " + НомерДокумента + " от " + ДатаДокумента + " г.";
			СтруктураРеквизитов.Дата = ДатаДокумента;
			СтруктураРеквизитов.Сумма = СуммаДокумента;
		ИначеЕсли СтруктураРеквизитов.Тип = "Акт" Тогда
			НомерДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвАктИ", "НомАкт");
			ДатаДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвАктИ", "ДатаАкт");
			СуммаДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ОписРабот", "СумУчНДСИт");
			
			СтруктураРеквизитов.Представление = "Акт о выполнении работ (оказании услуг) № " + НомерДокумента + " от " + ДатаДокумента + " г.";
			СтруктураРеквизитов.Дата = ДатаДокумента;
			СтруктураРеквизитов.Сумма = СуммаДокумента;
			
		ИначеЕсли СтруктураРеквизитов.Тип = "Счет-фактура" Тогда
			НомерДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвСчФакт", "НомерСчФ");
			ДатаДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвСчФакт", "ДатаСчФ");
			СуммаДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ВсегоОпл", "СтТовУчНалВсего");
			
			СтруктураРеквизитов.Представление = "Счет-фактура № " + НомерДокумента + " от " + ДатаДокумента + " г.";
			СтруктураРеквизитов.Дата = ДатаДокумента;
			СтруктураРеквизитов.Сумма = СуммаДокумента;
		ИначеЕсли СтруктураРеквизитов.Тип = "Исправленный счет-фактура" Тогда
			НомерДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвСчФакт", "НомерСчФ");
			ДатаДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвСчФакт", "ДатаСчФ");
			СуммаДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ВсегоОпл", "СтТовУчНалВсего");
			НомерИсправления = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ИспрСчФ", "НомИспрСчФ");
			ДатаИсправления = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ИспрСчФ", "ДатаИспрСчФ");
			
			СтруктураРеквизитов.Представление = "Исправление № " + НомерИсправления + " от " + ДатаИсправления + " г." + " счет-фактуры № " + НомерДокумента + " от " + ДатаИсправления + " г.";
			СтруктураРеквизитов.Дата = ДатаДокумента;
			СтруктураРеквизитов.Сумма = СуммаДокумента;
		ИначеЕсли СтруктураРеквизитов.Тип = "Корректировочный счет-фактура" Тогда
			НомерДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвКСчФ", "НомерКСчФ");
			ДатаДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвКСчФ", "ДатаКСчФ");
			НомерИсхДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвКСчФ", "НомерСчФ");
			ДатаИсхДокумента = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвКСчФ", "ДатаСчФ");
			
			ВсегоУвел = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ВсегоУвел", "СтТовУчНалВсего");
			ВсегоУм = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ВсегоУм", "СтТовУчНалВсего");
			СуммаДокумента = ?(ЗначениеЗаполнено(ВсегоУвел), Число(ВсегоУвел), 0) - ?(ЗначениеЗаполнено(ВсегоУм), Число(ВсегоУм), 0);
			
			СтруктураРеквизитов.Представление = "Корректировочный счет-фактура № " + НомерДокумента + " от " + ДатаДокумента + " г." + " к счету-фактуре № " + НомерИсхДокумента + " от " + ДатаИсхДокумента + " г.";
			СтруктураРеквизитов.Дата = ДатаДокумента;
			СтруктураРеквизитов.Сумма = СуммаДокумента;
			
		ИначеЕсли СтруктураРеквизитов.Тип = "Исправленный корректировочный счет-фактура" Тогда
			НомерДокументаКСФ = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвКСчФ", "НомерКСчФ");
			ДатаДокументаКСФ = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвКСчФ", "ДатаКСчФ");
			НомерДокументаСФ = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвКСчФ", "НомерСчФ");
			ДатаДокументаСФ = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвКСчФ", "ДатаСчФ");
			НомерИсправленияСф = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ИспрСчФ", "НомИспрСчФ");
			ДатаИсправленияСФ = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ИспрСчФ", "ДатаИспрСчФ");
			НомерИсправленияКСФ = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ИспрКСчФ", "НомИспрКСчФ");
			ДатаИсправленияКСФ = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ИспрКСчФ", "ДатаИспрКСчФ");
			
			ВсегоУвел = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ВсегоУвел", "СтТовУчНалВсего");
			ВсегоУм = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "ВсегоУм", "СтТовУчНалВсего");
			СуммаДокумента = ?(ЗначениеЗаполнено(ВсегоУвел), Число(ВсегоУвел), 0) - ?(ЗначениеЗаполнено(ВсегоУм), Число(ВсегоУм), 0);
			
			СтруктураРеквизитов.Представление = "Исправление № " + НомерИсправленияКСФ + " от " + ДатаИсправленияКСФ + " г." + 
			" корректировочной счет-фактуры № " + НомерДокументаКСФ + " от " + ДатаДокументаКСФ + " г." +
			" к счету-фактуре № " + НомерДокументаСФ + " от " + ДатаДокументаСФ + " г." +
			?(ЗначениеЗаполнено(НомерИсправленияСф), " исправление № " + НомерИсправленияСф, "") +
			?(ЗначениеЗаполнено(ДатаИсправленияСФ), " от " + ДатаИсправленияСФ + " г.", "");
			СтруктураРеквизитов.Дата = ДатаДокумента;
			СтруктураРеквизитов.Сумма = СуммаДокумента;
		ИначеЕсли СтруктураРеквизитов.Тип = "Неформализованный" Тогда
			СтруктураРеквизитов.Представление = "Неформализованный: " + Syn_Документ.Name;
		КонецЕсли;
		
		Попытка
			FullDocumentInfo = ExchangeService.GetFlowDocumentInfo(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id, );
			
			БезПодписи = Ложь;
			
			Для Каждого Получатель Из FullDocumentInfo.Flows.DocumentFlow Цикл
				// отправлен без подписи
				Если Получатель.FlowType = "SentUnsigned" Тогда
					БезПодписи = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
            			
			//Проверяем, входящий или исходящий документ (from или to)
			Если НЕ БезПодписи Тогда
				Syn_ЯщикКонтрагента = ?(FullDocumentInfo.From <> Syn_ЯщикОрганизации, FullDocumentInfo.From, FullDocumentInfo.To);
			Иначе
				Syn_ЯщикКонтрагента = ?(FullDocumentInfo.From <> Syn_ЯщикОрганизации, FullDocumentInfo.From, FullDocumentInfo.Flows.DocumentFlow[0].RecipientOrganization.BoxAddress);
			КонецЕсли;
		
			СтруктураРеквизитов.Контрагент = ?(НЕ ЭтоБГУ,ПолучитьОбъектПоЗначениюСвойства("Syn_ЯщикКонтрагента", Syn_ЯщикКонтрагента),
			ПолучитьОбъектПоЗначениюСвойстваБГУ("Syn_ЯщикКонтрагента",  Syn_ЯщикКонтрагента, НЕОПРЕДЕЛЕНО));
			//Ищем контрагента по ящику
			Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
				СтруктураРеквизитов.КонтрагентПредставление = СтруктураРеквизитов.Контрагент.Наименование;
				СтруктураРеквизитов.IDКонтрагента = ПолучитьЗначениеСвойстваПоОбъекту(СтруктураРеквизитов.Контрагент, "Syn_IDКонтрагента");
			Иначе
				Попытка
					InnKppName = ExchangeService.GetInnKppNameByBoxId(Токен, Syn_ЯщикКонтрагента);
					Если InnKppName <>  НЕОПРЕДЕЛЕНО Тогда
						СтруктураРеквизитов.КонтрагентПредставление = InnKppName.Name;
						Syn_Контрагент = ExchangeService.GetOrganizationByInnKpp(Токен, InnKppName.Inn, InnKppName.Kpp);
						Если Syn_Контрагент <> НЕОПРЕДЕЛЕНО Тогда
							СтруктураРеквизитов.IDКонтрагента = Syn_Контрагент.OrganizationId;
						КонецЕсли;
					КонецЕсли;
				Исключение
					ОписаниеОшибкиСтрокой = ОписаниеОшибки();
					ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
					
					ОтправитьУведомлениеПользователю("Ошибка получения информации о контрагенте по его ящику: " + ТекстОшибкиSynerdocs);
					
					Возврат НЕОПРЕДЕЛЕНО;
					
				КонецПопытки;
				
			КонецЕсли;
			
			СтруктураРеквизитов.ДатаСобытия = FullDocumentInfo.SentDate;
			СтруктураРеквизитов.IDДокумента = Syn_Документ.Id;
			
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			
			ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
			
			Возврат НЕОПРЕДЕЛЕНО;
			
		КонецПопытки;
		
		Возврат СтруктураРеквизитов;
	Исключение
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
КонецФункции

//Функция возвращает основные реквизиты служебного документа
//
// Параметры: 
//  Syn_Документ: служебный документ сервиса (экземпляр класса Document)
//
// Возвращаемое значение:
//  Структура с данными об электронном документе: тип и представление, дата, 
//	данные родительского документа, к которому относится служебный документ
//
Функция ПолучитьОсновныеРеквизитыЭД_СлужебныйДокумент(Syn_Документ) Экспорт
	Попытка
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("СуммаРодительскогоДокумента");
		СтруктураРеквизитов.Вставить("Тип");
		СтруктураРеквизитов.Вставить("ТипРодительскогоДокумента");
		СтруктураРеквизитов.Вставить("Представление");
		СтруктураРеквизитов.Вставить("ПредставлениеРодительскогоДокумента");
		СтруктураРеквизитов.Вставить("IDРодительскогоДокумента");
		СтруктураРеквизитов.Вставить("Дата");
		СтруктураРеквизитов.Вставить("ДатаРодительскогоДокумента");
		СтруктураРеквизитов.Вставить("КонтрагентРодительскогоДокумента");
		СтруктураРеквизитов.Вставить("КонтрагентПредставлениеРодительскогоДокумента");
		СтруктураРеквизитов.Вставить("СтатусРодительскогоДокумента");
		СтруктураРеквизитов.Вставить("СобытиеРодительскогоДокумента");
		СтруктураРеквизитов.Вставить("ДатаСобытия");
		СтруктураРеквизитов.Вставить("IDРодительскогоДокумента");
		СтруктураРеквизитов.Вставить("IDРодительскогоКонтрагента");
		
		СтруктураРеквизитов.Тип = СоответствиеТиповЭД_Synerdocs_1C.Получить(Syn_Документ.DocumentType);
		
		//исходный родительский документ
		Попытка
			Syn_РодительскийДокумент_FullDocumentInfo = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, Syn_Документ.ParentDocumentId, );
			Syn_РодительскийДокумент = Syn_РодительскийДокумент_FullDocumentInfo.Document;
			
			Если Не ЭтоСлужебныйДокумент(Syn_РодительскийДокумент) Тогда
				//получаем данные родительского документа
				СтруктураРеквизитовРодительскогоДокумента = ПолучитьОсновныеРеквизитыЭД(Syn_РодительскийДокумент);
				
				СтруктураРеквизитов.ПредставлениеРодительскогоДокумента = СтруктураРеквизитовРодительскогоДокумента.Представление;
				СтруктураРеквизитов.ТипРодительскогоДокумента = СтруктураРеквизитовРодительскогоДокумента.Тип;
				СтруктураРеквизитов.СуммаРодительскогоДокумента = СтруктураРеквизитовРодительскогоДокумента.Сумма;
				СтруктураРеквизитов.ДатаРодительскогоДокумента = СтруктураРеквизитовРодительскогоДокумента.Дата;
				СтруктураРеквизитов.КонтрагентРодительскогоДокумента = СтруктураРеквизитовРодительскогоДокумента.Контрагент;
				СтруктураРеквизитов.КонтрагентПредставлениеРодительскогоДокумента = СтруктураРеквизитовРодительскогоДокумента.КонтрагентПредставление;
				СтруктураРеквизитов.СтатусРодительскогоДокумента = СтруктураРеквизитовРодительскогоДокумента.Статус;
				СтруктураРеквизитов.IDРодительскогоДокумента = СтруктураРеквизитовРодительскогоДокумента.IDДокумента;
				СтруктураРеквизитов.IDРодительскогоКонтрагента = СтруктураРеквизитовРодительскогоДокумента.IDКонтрагента;
			Иначе
				//получаем данные родительского служебного документа
				СтруктураРеквизитовРодительскогоДокумента = ПолучитьОсновныеРеквизитыЭД_СлужебныйДокумент(Syn_РодительскийДокумент);
				
				СтруктураРеквизитов.ПредставлениеРодительскогоДокумента = СтруктураРеквизитовРодительскогоДокумента.Представление;
				СтруктураРеквизитов.ТипРодительскогоДокумента = СтруктураРеквизитовРодительскогоДокумента.Тип;
				СтруктураРеквизитов.ДатаРодительскогоДокумента = СтруктураРеквизитовРодительскогоДокумента.Дата;
			КонецЕсли;
			
			Если СтруктураРеквизитов.Тип = "УточнениеСФ" Тогда
				СтруктураРеквизитов.Дата = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвУведУточ", "ДатаПол");
				СтруктураРеквизитов.Представление = "Уведомление об уточнении от " + СтруктураРеквизитов.Дата + " документа <" + СтруктураРеквизитовРодительскогоДокумента.Представление + ">";
				СтруктураРеквизитов.СобытиеРодительскогоДокумента = "Запрос на уточнение счета-фактуры";
			ИначеЕсли СтруктураРеквизитов.Тип = "УточнениеОбщ" Тогда
				СтруктураРеквизитов.Дата = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвУведУточ", "ДатаПол");
				СтруктураРеквизитов.Представление = "Отказ в подписи от " + СтруктураРеквизитов.Дата + " документа <" + СтруктураРеквизитовРодительскогоДокумента.Представление + ">";
				СтруктураРеквизитов.СобытиеРодительскогоДокумента = "Отказано в подписи документа";
			ИначеЕсли СтруктураРеквизитов.Тип = "Торг12Покупатель" Или
				СтруктураРеквизитов.Тип = "АктПокупатель" Тогда
				СтруктураРеквизитов.Дата = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "Документ", "ДатаДок");
				СтруктураРеквизитов.Представление = "Подпись от " + СтруктураРеквизитов.Дата + " документа <" + СтруктураРеквизитовРодительскогоДокумента.Представление + ">";
				СтруктураРеквизитов.СобытиеРодительскогоДокумента = "Подписан документ";
			ИначеЕсли СтруктураРеквизитов.Тип = "Извещение о получении" Тогда
				СтруктураРеквизитов.Дата = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СвИзвПолуч", "ДатаПол");
				СтруктураРеквизитов.Представление = "Извещение от " + СтруктураРеквизитов.Дата + " о получении документа <" + СтруктураРеквизитовРодительскогоДокумента.Представление + ">";
			ИначеЕсли СтруктураРеквизитов.Тип = "Подтверждение" Тогда
				СтруктураРеквизитов.Дата = ПолучитьЗначениеАтрибутаXML(Syn_Документ, "СведПодтв", "ДатаОтпр");
				ТипПодтверждения = ?(Найти(Syn_Документ.FileName, "DP_PDPOL") > 0, "получения", "отправки");
				СтруктураРеквизитов.Представление = "Подтверждение от " + СтруктураРеквизитов.Дата + " " + ТипПодтверждения + " документа <" + СтруктураРеквизитовРодительскогоДокумента.Представление + ">";
			КонецЕсли;
			
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			
			ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
			
			Возврат НЕОПРЕДЕЛЕНО;
			
		КонецПопытки;
		
		Попытка
			FullDocumentInfo = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id, );
			СтруктураРеквизитов.ДатаСобытия = FullDocumentInfo.SentDate;
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			
			ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
			
			Возврат НЕОПРЕДЕЛЕНО;
			
		КонецПопытки;
		
		Возврат СтруктураРеквизитов;
	Исключение
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
КонецФункции

//========================================================================
// НАСТРОЙКИ ИР
//========================================================================

//////////////////////////////////////////////////////////////////////
//Процедуры и функции подключения к сервису обмена и начала работы

//Функция осуществляет подключение к веб-сервису
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Флаг успешного подключения: истина - подключение к веб-сервису прошло успешно, ложь - ошибка при подключении
//
// Примечение:
//	данные для подключения считываются из настроек модуля
//
Функция ПодключитьсяКВебСервисуSynerdocs() Экспорт
	
	Попытка
		ПолучитьЛокальноеОписаниеСервиса("ExchangeService");
		ПолучитьЛокальноеОписаниеСервиса("KalugaAstralService");
	Исключение
		Ответ = Вопрос(ОписаниеОшибки() + Символы.ПС + "Открыть окно настройки?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "ВНИМАНИЕ!!!");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма_Настройка = ПолучитьФорму("Форма_Настройка");
			Если НЕ Форма_Настройка.Открыта() Тогда
				Форма_Настройка.ОткрытьМодально();
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
	КонецПопытки;
	
	// Создание объекта веб-сервиса
	Попытка
		ExchangeService = СоздатьОбъектWS("ExchangeService");
		KalugaAstralService = СоздатьОбъектWS("KalugaAstralService");
		Возврат Истина;
	Исключение
		Ответ = Вопрос("Ошибка подключения к Веб-сервису: " + ОписаниеОшибки() + Символы.ПС + Символы.ПС + "Открыть окно настройки?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "ВНИМАНИЕ!!!");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма_Настройка = ПолучитьФорму("Форма_Настройка");
			Форма_Настройка.ОткрытьМодально();
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ПолучитьЛокальноеОписаниеСервиса(НаименованиеСервиса)
	
	ПутьПубликацииСервиса = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("ПутьПубликацииСервиса");
	ПутьВСДЛ = ПолучитьКаталогИР() + "\Bin\" + НаименованиеСервиса + ".wsdl";
	ФайлВСДЛ = Новый Файл(ПутьВСДЛ);
	КаталогВСДЛ = Новый Файл(ФайлВСДЛ.Путь);
	Если Не КаталогВСДЛ.Существует() Тогда
		СоздатьКаталог(КаталогВСДЛ.ПолноеИмя);
	КонецЕсли;
	
	Попытка
		КопироватьФайл(ПутьПубликацииСервиса + "/" + НаименованиеСервиса + ".svc?SingleWsdl", ПутьВСДЛ);
		Нормализовать(ПутьВСДЛ);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры

Функция СоздатьОбъектWS(НаименованиеСервиса)
	
	ПутьВСДЛ = ПолучитьКаталогИР() + "\Bin\" + НаименованиеСервиса + ".wsdl";
	Определение = Новый WSОпределения(ПутьВСДЛ);
	Возврат Новый WSПрокси(Определение, URIПространстваИменСервиса, НаименованиеСервиса, "BasicHttpBindingSecure_I" + НаименованиеСервиса);
	
КонецФункции

//Процедура устанавливает первоначальные настройки при запуске модуля:
//  - создание свойств в ПВХ "СвойстваОбъектов"
//	- создание файла событий
//	- создание файла лога
//	- установка настроек модуля по умолчанию
//	- установка соответствий между английскими представлениями типов документов и статусов
//	  в сервисе и русскими представлениями в 1С
//
// Параметры: 
//  нет
//
Процедура УстановитьПервоначальныеНастройки() Экспорт
	
	// Классификаторы
	ТЗ_ЕдИзм 	= СформироватьИзМакетаТаблицуЗначений(ПолучитьМакет("КлассификаторЕдиницИзмерений"));
	ТЗ_Страны 	= СформироватьИзМакетаТаблицуЗначений(ПолучитьМакет("КлассификаторСтранМира"));
    	
	//Создаем все необходимые свойства в ПВХ "Свойства объектов" и значения по-умолчанию
	//Проверяем наличие хотя бы одного свойства (первый запуск или нет)
	КвалификаторЧислаРазр6 = Новый КвалификаторыЧисла(6, 0);
	КвалификаторСтроки6 = Новый КвалификаторыСтроки(6);
	КвалификаторСтроки36 = Новый КвалификаторыСтроки(36);
	КвалификаторСтроки50 = Новый КвалификаторыСтроки(50);
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	
	Если НЕ ЭтоБГУ Тогда
		//Свойство "ID контрагента"
		СоздатьНовоеСвойство("Syn_IDКонтрагента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты, Тип("Строка"), КвалификаторСтроки6, НЕОПРЕДЕЛЕНО);
		//Свойство "Статус контрагента"
		СоздатьНовоеСвойство("Syn_СтатусКонтрагента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты, Тип("Строка"), КвалификаторСтроки36, НЕОПРЕДЕЛЕНО);
		//Свойство "Адрес контрагента"
		СоздатьНовоеСвойство("Syn_АдресКонтрагента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты, Тип("Строка"), КвалификаторСтроки50, НЕОПРЕДЕЛЕНО);
		//Свойство "Сертификат контрагента"
		СоздатьНовоеСвойство("Syn_СертификатКонтрагента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты, Тип("Строка"), КвалификаторСтроки50, НЕОПРЕДЕЛЕНО);
		//Свойство "Дата статуса контрагента"
		СоздатьНовоеСвойство("Syn_ДатаСтатусаКонтрагента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты, Тип("Дата"), НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО);
		//Свойство "Ящик контрагента"
		СоздатьНовоеСвойство("Syn_ЯщикКонтрагента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты, Тип("Строка"), КвалификаторСтроки50, НЕОПРЕДЕЛЕНО);
		//Свойство "Комментарий контрагента"
		СоздатьНовоеСвойство("Syn_КомментарийКонтрагента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты, Тип("Строка"), КвалификаторСтроки50, НЕОПРЕДЕЛЕНО);
		 		
		//Свойство "Факторинг"
		Если НЕ ЭтоБГУ Тогда
			СоздатьНовоеСвойство("Syn_Факторинг", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов, Тип("Строка"), КвалификаторСтроки50, НЕОПРЕДЕЛЕНО);
		КонецЕсли;
		
		//Свойство "ID организации"
		СоздатьНовоеСвойство("Syn_IDОрганизации", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации, Тип("Строка"), КвалификаторСтроки6, НЕОПРЕДЕЛЕНО);
		//Свойство "Ящик организации"
		СоздатьНовоеСвойство("Syn_ЯщикОрганизации", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации, Тип("Строка"), КвалификаторСтроки50, НЕОПРЕДЕЛЕНО);
		//Свойство "ID последнего загруженного сообщения"
		СоздатьНовоеСвойство("Syn_IDПоследнегоЗагруженногоСообщения", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации, Тип("Строка"), КвалификаторСтроки36, НЕОПРЕДЕЛЕНО);
		
		//Свойство "ID документа"
		СоздатьНовоеСвойство("Syn_IDДокумента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы, Тип("Строка"), КвалификаторСтроки36, НЕОПРЕДЕЛЕНО);
		//Свойство "LocalID документа"
		СоздатьНовоеСвойство("Syn_LocalIDДокумента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы, Тип("Строка"), КвалификаторСтроки36, НЕОПРЕДЕЛЕНО);
		//Свойство "Статус документ"
		СоздатьНовоеСвойство("Syn_СтатусДокумента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы, Тип("Строка"), КвалификаторСтроки50, НЕОПРЕДЕЛЕНО);
		//Свойство "Удален" (логическое удаление ЭД, чтобы не отображался в списке)
		СоздатьНовоеСвойство("Syn_Удален", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы, Тип("Булево"), НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО);
		//Признак установленной блокировки получения документов
		СоздатьНовоеСвойство("Syn_БлокировкаПолученияВходящихСообщений", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации, Тип("Булево"), НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО);
	Иначе // для БГУ	                                             
		//Свойство "ID контрагента"
		СоздатьНовоеСвойствоБГУ("Syn_IDКонтрагента", ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов, Тип("Строка"), КвалификаторСтроки6, НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО);
		//Свойство "Статус контрагента"
		СоздатьНовоеСвойствоБГУ("Syn_СтатусКонтрагента", ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов, Тип("Строка"), КвалификаторСтроки36, НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО);
		//Свойство "Адрес контрагента"
		СоздатьНовоеСвойствоБГУ("Syn_АдресКонтрагента", ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов, Тип("Строка"), КвалификаторСтроки50, НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО);
		//Свойство "Сертификат контрагента"
		СоздатьНовоеСвойствоБГУ("Syn_СертификатКонтрагента", ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов, Тип("Строка"), КвалификаторСтроки50, НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО);
		//Свойство "Дата статуса контрагента"
		СоздатьНовоеСвойствоБГУ("Syn_ДатаСтатусаКонтрагента", ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов, Тип("Дата"), НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО, КвалификаторДаты);
		//Свойство "Ящик контрагента"
		СоздатьНовоеСвойствоБГУ("Syn_ЯщикКонтрагента", ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов, Тип("Строка"), КвалификаторСтроки50, НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО);
		//Свойство "Комментарий контрагента"
		СоздатьНовоеСвойствоБГУ("Syn_КомментарийКонтрагента", ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов, Тип("Строка"), КвалификаторСтроки50, НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО);
		
		//Свойство "ID организации"
		СоздатьНовоеСвойство("Syn_IDОрганизации", ПланыВидовХарактеристик.СвойстваОбъектов, Тип("Строка"), КвалификаторСтроки6, НЕОПРЕДЕЛЕНО);
		//Свойство "Ящик организации"
		СоздатьНовоеСвойство("Syn_ЯщикОрганизации", ПланыВидовХарактеристик.СвойстваОбъектов, Тип("Строка"), КвалификаторСтроки50, НЕОПРЕДЕЛЕНО);
		//Свойство "ID последнего загруженного сообщения"
		СоздатьНовоеСвойство("Syn_IDПоследнегоЗагруженногоСообщения", ПланыВидовХарактеристик.СвойстваОбъектов, Тип("Строка"), КвалификаторСтроки36, НЕОПРЕДЕЛЕНО);
		
		//Свойство "ID документа"
		СоздатьНовоеСвойствоБГУ("Syn_IDДокумента", ПланыВидовХарактеристик.СвойстваОбъектов, Тип("СправочникСсылка.ЗначенияСвойств"), НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО);
		//Свойство "LocalID документа"
		СоздатьНовоеСвойствоБГУ("Syn_LocalIDДокумента", ПланыВидовХарактеристик.СвойстваОбъектов,Тип("СправочникСсылка.ЗначенияСвойств"), НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО, НЕОПРЕДЕЛЕНО);
	КонецЕсли;
	
	//Настройки пользователя
	
	СтруктураНастроек = МенеджерНастроек.НастройкиИР();
				
	ОтправлятьДанныеАналитики = СтруктураНастроек.ОтправлятьДанныеАналитики;
	
	ПутьПубликации = СтруктураНастроек.ПутьПубликацииСервиса;
    	
	//Соответствия для перечислений из Synerdocs (русские аналоги 1С)
	СоответствиеТиповЭД_1С_Synerdocs = Новый Соответствие;
	СоответствиеТиповЭД_Synerdocs_1C = Новый Соответствие;
	
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("Заявление об участии в ЭДО счетов-фактур", "Неформализованный");
	
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("Счет-фактура", "Invoice");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("Invoice", "Счет-фактура");
	
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("Корректировочный счет-фактура", "InvoiceCorrection");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("InvoiceCorrection", "Корректировочный счет-фактура");
	
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("Исправленный счет-фактура", "InvoiceRevision");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("InvoiceRevision", "Исправленный счет-фактура");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("Исправленный корректировочный счет-фактура", "InvoiceCorrectionRevision");
	
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("InvoiceCorrectionRevision", "Исправленный корректировочный счет-фактура");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("Торг12Продавец", "WaybillSeller");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("Торг-12", "WaybillSeller");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("КорректировкаТорг12Продавец", "WaybillSeller");
	
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("WaybillSeller", "Торг12");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("Торг12Покупатель", "WaybillBuyer");
	
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("WaybillBuyer", "Торг12Покупатель");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("АктПродавец", "ActOfWorkSeller");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("КорректировкаАктПродавец", "ActOfWorkSeller");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("Акт", "ActOfWorkSeller");
	
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("ActOfWorkSeller", "Акт");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("АктПокупатель", "ActOfWorkBuyer");
		
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("ActOfWorkBuyer", "АктПокупатель");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("ИзвещениеСФ", "ServiceInvoiceReceipt");
	
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("ServiceInvoiceReceipt", "Извещение о получении");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("ИзвещениеОбщ", "ServiceReceipt");
	
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("ServiceReceipt", "Извещение о получении");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("УточнениеСФ", "ServiceInvoiceAmendmentRequest");
	
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("ServiceInvoiceAmendmentRequest", "УточнениеСФ");
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("УточнениеОбщ", "ServiceAmendmentRequest");
	
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("ServiceAmendmentRequest", "УточнениеОбщ");
	
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("Подтверждение", "ServiceInvoiceConfirmation");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("ServiceInvoiceConfirmation", "Подтверждение");
	
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("Неформализованный", "Untyped");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("Untyped", "Неформализованный");
	
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("СчетНаОплату", "Untyped");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("Счет на оплату", "Счет на оплату");
	
	// Доки из DISI
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("DogNoForm", "Неформализованный");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("ActNoForm", "Неформализованный");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("ShetNoForm", "Неформализованный");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("DopNoForm", "Неформализованный");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("AсtSNoForm", "Неформализованный");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("DopSNoForm", "Неформализованный");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("OthNoForm", "Неформализованный");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("LettNoForm", "Неформализованный");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("NaclNoForm", "Неформализованный");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("ActNoFormX", "Неформализованный");
	
	СоответствиеТиповЭД_1С_Synerdocs.Вставить("АктОбУстановленномРасхождении", "Untyped");
	СоответствиеТиповЭД_Synerdocs_1C.Вставить("Акт об установленном расхождении", "Акт об установленном расхождении");
	
	СоответствиеСтатусовСФ_1С_Synerdocs = Новый Соответствие;
	СоответствиеСтатусовСФ_1С_Synerdocs.Вставить("InvoiceSent", "Отправлен");
	СоответствиеСтатусовСФ_1С_Synerdocs.Вставить("InvoiceCharged", "Выставлен");
	СоответствиеСтатусовСФ_1С_Synerdocs.Вставить("InvoiceRejected", "Запрошено уточнение");
	СоответствиеСтатусовСФ_1С_Synerdocs.Вставить("InvoiceNotValid", "Нарушен регламент");
	
	СоответствиеСтатусовПодписания_1С_Synerdocs = Новый Соответствие;
	СоответствиеСтатусовПодписания_1С_Synerdocs.Вставить("NoSignNeeded", "Подпись не требуется");
	СоответствиеСтатусовПодписания_1С_Synerdocs.Вставить("WaitingForSign", "Требуется подпись");
	СоответствиеСтатусовПодписания_1С_Synerdocs.Вставить("Signed", "Подписан");    
	СоответствиеСтатусовПодписания_1С_Synerdocs.Вставить("SentUnsigned", "Отправлен без подписи");
	СоответствиеСтатусовПодписания_1С_Synerdocs.Вставить("SignRequested", "Требуется подпись");		
	СоответствиеСтатусовПодписания_1С_Synerdocs.Вставить("SignRejected", "Отказано");
	СоответствиеСтатусовПодписания_1С_Synerdocs.Вставить("SignReceived", "Подписан");
	
	СоответствиеСтатусовПодписанияСимволу = Новый Соответствие;
	СоответствиеСтатусовПодписанияСимволу.Вставить("Подпись не требуется", "[-]");
	СоответствиеСтатусовПодписанияСимволу.Вставить("Отправлен без подписи", "[-]");
	СоответствиеСтатусовПодписанияСимволу.Вставить("SentUnsigned", "[-]");
	
	СоответствиеСтатусовПодписанияСимволу.Вставить("Требуется подпись", "[?]");
	СоответствиеСтатусовПодписанияСимволу.Вставить("Отказано", "[x]");
	СоответствиеСтатусовПодписанияСимволу.Вставить("Запрошено уточнение", "[x]");
	СоответствиеСтатусовПодписанияСимволу.Вставить("Подписан", "[v]");
	СоответствиеСтатусовПодписанияСимволу.Вставить("SentSigned", "[v]");
		
	СоответствиеСтатусовМножественногоПодписания_1С_Synerdocs = Новый Соответствие;
	СоответствиеСтатусовМножественногоПодписания_1С_Synerdocs.Вставить("NoSignNeeded", "Подпись не требуется");
	СоответствиеСтатусовМножественногоПодписания_1С_Synerdocs.Вставить("WaitingForSign", "Требуется подпись");
	СоответствиеСтатусовМножественногоПодписания_1С_Synerdocs.Вставить("Signed", "Подписан всеми получателями");
	СоответствиеСтатусовМножественногоПодписания_1С_Synerdocs.Вставить("SignRejected", "Отказано");
	СоответствиеСтатусовМножественногоПодписания_1С_Synerdocs.Вставить("SignRequested", "Требуется подпись");
	СоответствиеСтатусовМножественногоПодписания_1С_Synerdocs.Вставить("PartlySigned", "Подписан не всеми");
	
	СоответсвиеПараметровУступочнойНадписиОписанию = Новый Соответствие;
	СоответсвиеПараметровУступочнойНадписиОписанию.Вставить("ФакторНаим", "Наименование организации-фактора");
	СоответсвиеПараметровУступочнойНадписиОписанию.Вставить("ФакторИНН", "ИНН организации-фактора");
	СоответсвиеПараметровУступочнойНадписиОписанию.Вставить("ФакторКПП", "КПП организации-фактора");
	СоответсвиеПараметровУступочнойНадписиОписанию.Вставить("ФакторНомерСчет", "Номер расчетного счета организации-фактора");
	СоответсвиеПараметровУступочнойНадписиОписанию.Вставить("ФакторКоррСчет", "Корреспондирующий счет организации-фактора");
	СоответсвиеПараметровУступочнойНадписиОписанию.Вставить("ФакторНаимБанк", "Наименование банка организации-фактора, в котором открыт расчетный счет");
	СоответсвиеПараметровУступочнойНадписиОписанию.Вставить("ФакторБИК", "БИК банка организации-фактора, в котором открыт расчетный счет");
	СоответсвиеПараметровУступочнойНадписиОписанию.Вставить("ФакторТел", "Контактный телефон организации-фактора");
	СоответсвиеПараметровУступочнойНадписиОписанию.Вставить("ФакторАдрес", "Юридический адрес организации-фактора");
	СоответсвиеПараметровУступочнойНадписиОписанию.Вставить("ФактУступки", "Факт уступки");
	
	СоответствиеСтатусовСогласования_Synerdocs = Новый Соответствие;
	СоответствиеСтатусовСогласования_Synerdocs.Вставить("Approved", "Согласовано");
	СоответствиеСтатусовСогласования_Synerdocs.Вставить("Disapproved", "Отказано в согласовании");
	
КонецПроцедуры

Процедура Нормализовать(ПутьКWSDL)
	Файл = Новый ТекстовыйДокумент;
	Файл.Прочитать(ПутьКWSDL, КодировкаТекста.UTF8);
	УзелНачало = "<wsp:Policy wsu";
	УзелКонец = "</wsp:Policy>";
	Текст = Файл.ПолучитьТекст();
	УзелНачалоПоз = Найти(Текст, УзелНачало);
	Если УзелНачалоПоз <> 0 Тогда
		Пока Истина Цикл
			УзелКонецПоз = Найти(Текст, УзелКонец);
			Если УзелКонецПоз = 0 Тогда
				Прервать;
			КонецЕсли;
			Текст = Лев(Текст, УзелНачалоПоз-1) + Прав(Текст, СтрДлина(Текст)-УзелКонецПоз-12);
		КонецЦикла;
		Файл.УстановитьТекст(Текст);
		Попытка
			Файл.Записать(ПутьКWSDL, КодировкаТекста.UTF8);
		Исключение
			Сообщить("У текущего пользователя 1С недостаточно прав для записи информации во внешний файл, необходимый для работы интеграционного решения Synerdocs-1C.");
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////
//Процедуры и функции для работы с объектами и методами сервиса

//Функция создает экземпляр класса Document сервиса
//
// Параметры: 
//  Документ: ссылка на учетный документ 1С
//  Документ_ДвоичныеДанные: двоичные данные (контент) создаваемого документа
//	ТипЭД: тип электронного документа
//	ИмяФайла: имя файла электронного документа
//	Syn_РодительскийДокумент: документ сервиса (экземпляр класса Document), родительский к данному (заполняется для служебных документов)
//	Комментарий: комментарий к документу
//
// Возвращаемое значение:
//  Document: документ сервиса (экземпляр класса Document)
//
Функция СоздатьОбъект_Document(Документ = НЕОПРЕДЕЛЕНО, Документ_ДвоичныеДанные, ТипЭД, ИмяФайла = "", Syn_РодительскийДокумент = НЕОПРЕДЕЛЕНО, Комментарий = "", НужнаПодпись = Ложь, Типизированный = Истина) Экспорт
	//создаем Document в СО
	Тип_Document = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "Document");
	Document = ExchangeService.ФабрикаXDTO.Создать(Тип_Document);
	Если Документ <> НЕОПРЕДЕЛЕНО Тогда
		Document.Id = Строка(Документ.УникальныйИдентификатор());
		Если НЕ ЭтоБГУ Тогда
			УстановитьЗначениеСвойства(Документ, "Syn_LocalIDДокумента", Document.Id);
		Иначе
			УстановитьЗначениеСвойстваБГУ(Документ, "Syn_LocalIDДокумента", Document.Id);
		КонецЕсли;
		
		Если ТипЭД = "СчетНаОплату" Тогда
			Типизированный = Ложь;
			Document.UntypedKind = "Счет на оплату";
			Document.Card = СоздатьКарточкуДокументаСчетНаОплату(Документ);
			НужнаПодпись = Ложь;			
		КонецЕсли;
		
		Document.FileName = ИмяФайла + ?(Типизированный,".xml",".pdf");
	Иначе
		Document.Id = Строка(Новый УникальныйИдентификатор());
		Document.FileName = ?(ТипЭД = "АктОбУстановленномРасхождении", ИмяФайла, ИмяФайла + ".xml");
	КонецЕсли;                                    
	
	Document.DocumentType = СоответствиеТиповЭД_1С_Synerdocs.Получить(ТипЭД);
	Document.Content = Документ_ДвоичныеДанные;
	Document.NeedSign = НужнаПодпись;
	
	Если Syn_РодительскийДокумент <> НЕОПРЕДЕЛЕНО Тогда
		Document.ParentDocumentId = Syn_РодительскийДокумент.Id;
	КонецЕсли;
	
	Document.Comment = Комментарий;
	
	Возврат Document;
КонецФункции

//Функция создает экземпляр класса Sign сервиса
//
// Параметры: 
//  Syn_Документ: документ сервиса (экземпляр класса Document), подпись к которому создается
//  ЭЦП_ДвоичныеДанные: двоичные данные (контент) создаваемой подписи
//
// Возвращаемое значение:
//  Sign: электронно-цифровая подпись (экземпляр класса Sign)
//
Функция СоздатьОбъект_Sign(Syn_Документ, ЭЦП_ДвоичныеДанные) Экспорт
	
	//создаем Подпись в СО
	Тип_Sign = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "Sign");
	Sign = ExchangeService.ФабрикаXDTO.Создать(Тип_Sign);
	Если ЗначениеЗаполнено(Syn_Документ) Тогда
		Sign.DocumentId = Syn_Документ;
	КонецЕсли;
	Sign.From = Syn_ЯщикОрганизации;
	Sign.Raw = ЭЦП_ДвоичныеДанные;
	Sign.Subject = ?(Сертификат <> НЕОПРЕДЕЛЕНО, ПредставлениеСертификата(Сертификат.Субъект), "");
	Sign.Id = Строка(Новый УникальныйИдентификатор());
	
	Возврат Sign;
	
КонецФункции

//Функция возвращает таблицу связанных документов для документа Synerdocs
//
// Параметры: 
//  Syn_Документ: документ сервиса (экземпляр класса Document)
//
// Возвращаемое значение:
//  Таблица значений: таблица документов, связанных с данным документом по логике Synerdocs:
//
Функция ПолучитьСвязанныеДокументыSynerdocs(Syn_Документ, ПолучитьНеформализованные = Истина, ТолькоВходящие = Ложь) Экспорт
	
	ТЗ_СвязанныеДокументы = Новый ТаблицаЗначений;
	ТЗ_СвязанныеДокументы.Колонки.Добавить("ДокументПредставление");
	ТЗ_СвязанныеДокументы.Колонки.Добавить("Тип");
	ТЗ_СвязанныеДокументы.Колонки.Добавить("IDДокумента");
	ТЗ_СвязанныеДокументы.Колонки.Добавить("Статус");
	ТЗ_СвязанныеДокументы.Колонки.Добавить("Документ1С");
	
	Попытка
		FullDocumentInfo = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, Syn_Документ.ID,);
		Syn_СвязанныеДокументы = FullDocumentInfo.RelatedDocuments;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;		
	
	//достаем документы
	Для ы = 0 По Syn_СвязанныеДокументы.Document.Количество() - 1 Цикл
		Попытка
			Syn_СвязанныйДокумент_Элем = Syn_СвязанныеДокументы.Document[ы];
			
			FullDocumentInfo_СвязанныйДокумент = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, Syn_СвязанныйДокумент_Элем.Id,);
			Syn_СвязанныйДокумент = FullDocumentInfo_СвязанныйДокумент.Document;
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			
			ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
			
			Возврат НЕОПРЕДЕЛЕНО;
		КонецПопытки;
		
		Если ТолькоВходящие Тогда
			Если НЕ FullDocumentInfo_СвязанныйДокумент.To = Syn_ЯщикОрганизации Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
			
		Если Не ПолучитьНеформализованные Тогда
			
			Если Syn_СвязанныйДокумент.DocumentType = "Untyped" И Syn_СвязанныйДокумент.UntypedKind <> "" Тогда
				Продолжить;
			Иначе
				
				НоваяСтрока = ТЗ_СвязанныеДокументы.Добавить();
				СтруктураРеквизитов = ПолучитьОсновныеРеквизитыЭД(Syn_СвязанныйДокумент);
				
				НоваяСтрока.ДокументПредставление = СтруктураРеквизитов.Представление;
				НоваяСтрока.Тип = СтруктураРеквизитов.Тип;
				НоваяСтрока.IDДокумента = Syn_СвязанныйДокумент.Id;
				
				Если НЕ ЭтоБГУ Тогда
					НоваяСтрока.Документ1С = ПолучитьОбъектПоЗначениюСвойства("Syn_IDДокумента", Syn_СвязанныйДокумент.Id);
				Иначе
					НоваяСтрока.Документ1С = ПолучитьДокумент1С("Syn_IDДокумента", Syn_СвязанныйДокумент.Id, Syn_СвязанныйДокумент.DocumentType);
				КонецЕсли;
			КонецЕсли;
		Иначе
			НоваяСтрока = ТЗ_СвязанныеДокументы.Добавить();
			СтруктураРеквизитов = ПолучитьОсновныеРеквизитыЭД(Syn_СвязанныйДокумент);
			
			НоваяСтрока.ДокументПредставление = СтруктураРеквизитов.Представление;
			НоваяСтрока.Тип = СтруктураРеквизитов.Тип;
			НоваяСтрока.IDДокумента = Syn_СвязанныйДокумент.Id;
			
			Если НЕ ЭтоБГУ Тогда
				НоваяСтрока.Документ1С = ПолучитьОбъектПоЗначениюСвойства("Syn_IDДокумента", Syn_СвязанныйДокумент.Id);
			Иначе
				НоваяСтрока.Документ1С = ПолучитьДокумент1С("Syn_IDДокумента", Syn_СвязанныйДокумент.Id, Syn_СвязанныйДокумент.DocumentType);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ТЗ_СвязанныеДокументы;
КонецФункции

Функция ЗаполнитьТаблицуСвязанныхДокументов(FullDocumentInfo) Экспорт
	
	ТЗ_СвязанныеДокументы = Новый ТаблицаЗначений;
	ТЗ_СвязанныеДокументы.Колонки.Добавить("ДокументПредставление");
	ТЗ_СвязанныеДокументы.Колонки.Добавить("Тип");
	ТЗ_СвязанныеДокументы.Колонки.Добавить("IDДокумента");
	ТЗ_СвязанныеДокументы.Колонки.Добавить("Статус");
	ТЗ_СвязанныеДокументы.Колонки.Добавить("Документ1С");
	
	Если FullDocumentInfo.CountRelatedDocuments > 0 Тогда
		
		Для Каждого ТекСтрока Из FullDocumentInfo.RelatedDocuments.Document Цикл
			
			НоваяСтрока 						= ТЗ_СвязанныеДокументы.Добавить();
			НоваяСтрока.ДокументПредставление 	= ?(ЗначениеЗаполнено(ТекСтрока.UntypedKind), ТекСтрока.UntypedKind + " " + ТекСтрока.Name, ТекСтрока.Name);
			НоваяСтрока.Тип 					= СоответствиеТиповЭД_Synerdocs_1C.Получить(ТекСтрока.DocumentType);
			НоваяСтрока.IDДокумента 			= ТекСтрока.Id;
			
			Если НЕ ЭтоБГУ Тогда
				НоваяСтрока.Документ1С = ПолучитьОбъектПоЗначениюСвойства("Syn_IDДокумента", ТекСтрока.Id);
			Иначе
				НоваяСтрока.Документ1С = ПолучитьДокумент1С("Syn_IDДокумента", ТекСтрока.Id, ТекСтрока.DocumentType);
			КонецЕсли;
			
 		КонецЦикла;
	КонецЕсли;

	Возврат ТЗ_СвязанныеДокументы;
	
КонецФункции

//Функция возвращает текст исключения при вызове метода сервиса
//
// Параметры: 
//  ОписаниеОшибкиСтрокой: текст ошибки, который возвращает метод 1С "ОписаниеОшибки()"
//
// Возвращаемое значение:
//  Текст ошибки: более или менее читабельный текст ошибки
//
// Примечание:
//	Разбор текст ошибки 1С: поиск строки "Ошибка SOAP сервера:"
//
Функция РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой) Экспорт
	//Тип_ServiceErrorCode = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel.Exceptions", "ServiceErrorCode");
	//ServiceErrorCode = ExchangeService.ФабрикаXDTO.Создать(Тип_ServiceErrorCode);
	//Возврат ServiceErrorCode.Значение;
	
	Поз_SOAP = Найти(ОписаниеОшибкиСтрокой, "Ошибка SOAP сервера:");
	Поз_Расшифровать = Найти(ОписаниеОшибкиСтрокой, "(Расшифровать):");
	Поз_ОшибкаПроверкиСертификата = Найти(ОписаниеОшибкиСтрокой, "указан неправильный пароль доступа к закрытому ключу");
	Если Поз_SOAP > 0 Тогда
		ОшибкаSOAPСтрокой = СокрЛП(Сред(ОписаниеОшибкиСтрокой, Поз_SOAP + СтрДлина("Ошибка SOAP сервера:") + 1));
		МассивОшибки = РазложитьСтрокуВМассивПодстрок(ОшибкаSOAPСтрокой, ";");
		ОшибкаКод = ?(МассивОшибки.Количество() >= 3, МассивОшибки[МассивОшибки.Количество()-3], МассивОшибки[0]);
		ОшибкаПоле = ?(МассивОшибки.Количество() >= 3,МассивОшибки[МассивОшибки.Количество()-2], МассивОшибки[0]);
		
		СоответствиеКодовИОписаний = Новый Соответствие;
		СоответствиеКодовИОписаний.Вставить("UnexpectedError", "Внутренняя ошибка сервера");
		СоответствиеКодовИОписаний.Вставить("NotFilledRequiredField", "Не заполнено обязательное поле");
		СоответствиеКодовИОписаний.Вставить("MessageDoesNotContainReference", "Сообщение не содержит документ");
		СоответствиеКодовИОписаний.Вставить("InvalidFormatField", "Неправильный формат значения поля");
		СоответствиеКодовИОписаний.Вставить("InvalidDestinationAddress", "Неправильно указан получатель");
		СоответствиеКодовИОписаний.Вставить("Unauthorized", "Неправильный токен авторизации");
		СоответствиеКодовИОписаний.Вставить("InvalidDocumentReference", "Неверная ссылка на документ");
		СоответствиеКодовИОписаний.Вставить("BoxAccessError", "Ошибка доступа к ящику");
		СоответствиеКодовИОписаний.Вставить("ContragentIsNotAuthorized", "Контрагент не авторизован");
		СоответствиеКодовИОписаний.Вставить("ContactListError", "Ошибка работы со списком контактов");
		СоответствиеКодовИОписаний.Вставить("AccessDeniedError", "Ошибка доступа к ресурсам");
		СоответствиеКодовИОписаний.Вставить("InvalidCMS", "Некорректный формат подписи (CMS)");
		СоответствиеКодовИОписаний.Вставить("SignDoesNotContainCertificate", "Подпись не содержит информацию о сертификате");
		СоответствиеКодовИОписаний.Вставить("SignIsNotValid", "Недействительная подпись, код подразумевает несоответствие хеша");
		СоответствиеКодовИОписаний.Вставить("CertificatePeriodIsNotValid", "Истек или еще не наступил срок действия сертификата");
		СоответствиеКодовИОписаний.Вставить("CertificateIsNotTrusted", "Сертификат не входит в зону доверия");
		СоответствиеКодовИОписаний.Вставить("CertificateIsRevoked", "Сертификат отозван");
		СоответствиеКодовИОписаний.Вставить("CertificateHasNotValidAttributesAndExtensions", "Ваш сертификат ЭП не удовлетворяет требованиям Федерального закона №63-ФЗ «Об электронной подписи». Для подписания и отправки документов необходимо наличие квалифицированного сертификата ЭП");
		СоответствиеКодовИОписаний.Вставить("InvalidDocumentFormat", "Некорректный формат документа");
		СоответствиеКодовИОписаний.Вставить("InvalidDocumentContent", "Некорректное содержимое документа");
		СоответствиеКодовИОписаний.Вставить("InvalidFileName", "Некорректное имя файла");
		СоответствиеКодовИОписаний.Вставить("WorkflowViolation", "Нарушение регламента документооборота");
		СоответствиеКодовИОписаний.Вставить("SignAlreadyExists", "Попытка подписать уже подписанный документ (одним и тем же пользователем)");
		СоответствиеКодовИОписаний.Вставить("InvalidSourceAddress", "Неправильно указан отправитель");
		СоответствиеКодовИОписаний.Вставить("CyclicParentReferences", "Циклические ссылки в списке документов");
		СоответствиеКодовИОписаний.Вставить("DocumentNotFound", "Не найден документ, удовлетворяющий критериям поиска");
		СоответствиеКодовИОписаний.Вставить("DepartmentDeleted", "Элемент оргструктуры удален");
		СоответствиеКодовИОписаний.Вставить("ParentDepartmentDeleted", "Родительский элемент оргструктуры удален");
		СоответствиеКодовИОписаний.Вставить("DepartmentHasChild", "Нельзя удалять, если есть дочерние элементы оргструктуры");
		СоответствиеКодовИОписаний.Вставить("DepartmentDoesNotExist", "Попытка указать несуществующее или удаленное подразделение в сообщении");
		СоответствиеКодовИОписаний.Вставить("DepartmentCyclicDependency", "Циклическая зависимость между элементами оргструктуры");
		СоответствиеКодовИОписаний.Вставить("IncorrectParentDepartment", "Некорректное родительское подразделение");
		СоответствиеКодовИОписаний.Вставить("DepartmentIsHead", "Подразделение является головным, удалить нельзя");
		СоответствиеКодовИОписаний.Вставить("PermissionAlreadyDeleted", "Запись уже удалена");
		СоответствиеКодовИОписаний.Вставить("PermissionDoesNotExist", "Несуществующая запись");
		СоответствиеКодовИОписаний.Вставить("DuplicateUser", "Пользователь уже существует");
		СоответствиеКодовИОписаний.Вставить("UserDeleted", "Пользователь удален");
		СоответствиеКодовИОписаний.Вставить("DuplicateCertificate", "Переданный сертификат уже есть в базе данных");
		СоответствиеКодовИОписаний.Вставить("DuplicateBindToOrganization", "Привязка к организации пользователя уже есть");
		СоответствиеКодовИОписаний.Вставить("CertificateNotFound", "Не найден сертификат");
		СоответствиеКодовИОписаний.Вставить("CertificateParsingFailed", "Не удалось распознать сертификат");
		СоответствиеКодовИОписаний.Вставить("DuplicateOrganization", "Организация с предоставленным инн уже есть в базе данных");
		СоответствиеКодовИОписаний.Вставить("FeatureDisabled", "Данная возможность отключена для текущей организации");
		СоответствиеКодовИОписаний.Вставить("ForwardIsNotAvailable", "Пересылка документов недоступна");
		СоответствиеКодовИОписаний.Вставить("SendToRoamingIsNotAllowed", "Отправка в роуминг запрещена");
		СоответствиеКодовИОписаний.Вставить("SendToSelfIsNotAllowed", "Отправка самому себе запрещена");
		
		Если МассивОшибки.Количество() > 1 Тогда
			ТекстОшибки = ?(НЕ СоответствиеКодовИОписаний.Получить(ОшибкаКод) = Неопределено, СоответствиеКодовИОписаний.Получить(ОшибкаКод), ОшибкаКод + ": " + МассивОшибки[0]);
		Иначе
			ОшибкаКод = СтрЗаменить(Лев(ОшибкаКод, Найти(ОшибкаКод, ",") - 1), "Code: ", "");
			Если СоответствиеКодовИОписаний.Получить(ОшибкаКод) = "Неправильный токен авторизации" Тогда
				ТекстОшибки = "Сеанс работы в Synerdocs завершен. Выполните вход заново";
			Иначе
				ТекстОшибки = СоответствиеКодовИОписаний.Получить(ОшибкаКод) + ": " + МассивОшибки[0];
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли Поз_ОшибкаПроверкиСертификата > 0 Тогда
		ТекстОшибки = "Ошибка проверки сертификата. Возможно, не верный пароль";
	ИначеЕсли Поз_Расшифровать > 0 Тогда
		ТекстОшибки = "Неверный сертификат";
	Иначе
		ТекстОшибки = ОписаниеОшибкиСтрокой;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

//Функция отправляет сообщение в сервис
//
// Параметры: 
//  Syn_Сообщение: сообщение сервиса (экземпляр класса Message)
//
// Возвращаемое значение:
//  Флаг отправки сообщения: Истина - сообщение отправлено успещно, Ложь - ошибка при отправке сообщения
//
Функция ОтправитьСообщениеВСервисОбмена(Syn_Сообщение, ЭтоПересылка = Ложь) Экспорт
	//Отправляем КоличествоПовторныхОтправокСообщения
	ТекстОшибкиSynerdocs = "";
	Для ы = 1 По КоличествоПовторныхОтправокСообщения Цикл
		Попытка
			Если НЕ ЭтоПересылка Тогда
				SentMessage = ExchangeService.SendMessage(Токен, Syn_Сообщение);
				Возврат SentMessage;
			Иначе
				SentMessage = ExchangeService.SendForwardMessage(Токен, Syn_Сообщение);
				Возврат SentMessage;
			КонецЕсли;
		Исключение                   
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
			ОтправитьУведомлениеПользователю("Сообщение не отправлено. " + ТекстОшибкиSynerdocs);
			Возврат НЕОПРЕДЕЛЕНО;
		КонецПопытки;
	КонецЦикла;
	
КонецФункции

//////////////////////////////////////////////////////////////////////
//Процедуры и функции работы с криптографией

//Функция создает менеджер криптографии для работы с сертификатами и ЭЦП
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//	Флаг создания менеджера криптографии: Истина - менеджер криптографии создан успешно, Ложь - ошибки при создании менеджера криптографии
//
Функция СоздатьМенеджерКриптографии() Экспорт
	
	Если МенеджерКриптографии <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекущиеНастройки = МенеджерНастроек.НастройкиИР();
	
	Если ТекущиеНастройки.ИспользоватьЛокальнуюКриптографию Тогда
		
		Криптопровайдер = ?(ТекущиеНастройки.Свойство("ТипКриптопровайдера"), ТекущиеНастройки.ТипКриптопровайдера, 0);
		
		Если Криптопровайдер = 1 Тогда //криптопро
			ПровайдерЭЦП = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
			ТипПровайдераЭЦП = 75;
			ПутьМодуляКриптографии = "";
		ИначеЕсли Криптопровайдер = 2 Тогда //випнет
			ПровайдерЭЦП = "Infotecs Cryptographic Service Provider";
			ТипПровайдераЭЦП = 2;
			ПутьМодуляКриптографии = "";
		Иначе
			Предупреждение("Не указан используемый криптопровайдер. Проверьте настройки интеграционного решения.");
			Возврат Ложь;
		КонецЕсли;
		
		// Инициализация выбранного криптопровайдера
		// Если он не установлен на рабочем месте, то инициализация криптопровайдера MS
		Попытка
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		Исключение
			// TODO: В этом случае отображать только облачные сертификаты
			Сообщить("Указанный в настройках криптопровайдер не обнаружен");
			Попытка
				МенеджерКриптографии = Новый МенеджерКриптографии("Microsoft Strong Cryptographic Provider", "", 1);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				Сообщить(ОписаниеОшибки);
				Возврат Ложь;
			КонецПопытки;
		КонецПопытки;
		
	Иначе
		
		МенеджерКриптографии = Новый МенеджерКриптографии("Microsoft Strong Cryptographic Provider", "", 1);
		
	КонецЕсли;
	
	
	Попытка
		
		ИнформацияМенеджера = МенеджерКриптографии.ПолучитьИнформациюМодуляКриптографии();
		Если ПустаяСтрока(МенеджерКриптографии.АлгоритмПодписи) И (ИнформацияМенеджера.АлгоритмыПодписи.Количество() > 0) Тогда
			МенеджерКриптографии.АлгоритмПодписи = ИнформацияМенеджера.АлгоритмыПодписи[0];
		КонецЕсли;
		Если ПустаяСтрока(МенеджерКриптографии.АлгоритмХеширования) И (ИнформацияМенеджера.АлгоритмыХеширования.Количество() >0) Тогда
			МенеджерКриптографии.АлгоритмХеширования = ИнформацияМенеджера.АлгоритмыХеширования[0];
		КонецЕсли;
		Если ПустаяСтрока(МенеджерКриптографии.АлгоритмШифрования) И (ИнформацияМенеджера.АлгоритмыШифрования) > 0 Тогда
			МенеджерКриптографии.АлгоритмШифрования = ИнформацияМенеджера.АлгоритмыШифрования[0];
		КонецЕсли;
		
		МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
		
		ХранилищеСертификатов = Неопределено;
		ТолькоВЛичномХранилище = Истина;
		
		Если ТолькоВЛичномХранилище Тогда
			ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
		Иначе	
			ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
		КонецЕсли;
		Возврат Истина;
		
	Исключение
		
		МенеджерКриптографии = Неопределено;
		
		Сообщить(ОписаниеОшибки());		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

//Функция возращает строковое представление сертификата
//
// Параметры: 
//  СубъектСтруктура: структура с данными субъекта сертификата
//
// Возвращаемое значение:
//	Представление сертификата: складывается из ФИО и наименования организации, кому выдан сертификат
//
Функция ПредставлениеСертификата(СубъектСтруктура) Экспорт
	
	Представление = "";
	O = "";
	Если СубъектСтруктура.Свойство("O", O) Тогда
		Представление = Представление + ", " + O;
	КонецЕсли;	
	CN = "";
	Если СубъектСтруктура.Свойство("CN", CN) Тогда
		Представление = Представление + CN;
	КонецЕсли;	
	OU = "";
	Если СубъектСтруктура.Свойство("OU", OU) Тогда
		Представление = Представление + ", " + OU;
	КонецЕсли;	
	
	Возврат Представление;
	
КонецФункции

//Функция формирует электронно-цифровую подпись документа с помощью менеджера криптографии и сертификата
// TODO: Вынести в модуль криптографии, убрать лишние параметры, вынести работу с облачной подписью в отдельный модуль
//
// Параметры: 
//  Документ: ссылка на учетный документ 1С
//  Документ_ДвоичныеДанные: двоичные данные (контент) электронного документа
//  ИмяФайла: наименование для файла подписи
//
// Возвращаемое значение:
//	Двоичные данные (контент) сформированной ЭЦП
//
Функция СформироватьЭЦПДокумента(Документ = НЕОПРЕДЕЛЕНО, Документ_ДвоичныеДанные, ИмяФайла = "") Экспорт
	
	Если Сертификат = Неопределено Тогда
		Сообщить("Для подписания документов необходимо авторизоваться по сертификату");
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОблачнаяЭП Тогда
		ЭЦП_ДвоичныеДанные = КА_Подписать(КА_Токен, Документ_ДвоичныеДанные);
	Иначе
		Попытка
			ЭЦП_ДвоичныеДанные = МенеджерКриптографии.Подписать(Документ_ДвоичныеДанные, Сертификат);
		Исключение
			Для КоличествоПопыток = 0 по 2 Цикл
				ФормаПароля = ПолучитьФорму("Форма_ВводПароля");
				ФормаПароля.НомерПопытки = КоличествоПопыток;
				Ответ = ФормаПароля.ОткрытьМодально();
				
				Если Ответ = Неопределено Тогда
					Сообщить("Ошибка подписания служебного документа. Пароль не введен");
					Прервать;
				Иначе
					ПарольЗК = Ответ.Пароль;
					СохранитьПароль = Ответ.СохранитьПароль;
					МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольЗК;
					Попытка
						ЭЦП_ДвоичныеДанные = МенеджерКриптографии.Подписать(Документ_ДвоичныеДанные, Сертификат);
						
						Если Не СохранитьПароль Тогда
							МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = "";
						КонецЕсли;
						
						Прервать;
					Исключение
						Если КоличествоПопыток = 2 Тогда
							МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = "";
							Сообщить("Ошибка подписания. Возможно, не верный пароль");
						КонецЕсли;
					КонецПопытки;
					
					Если Не СохранитьПароль Тогда
						МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = "";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭЦП_ДвоичныеДанные;
	
КонецФункции

//////////////////////////////////////////////////////////////////////
//Процедуры и функции работы с формами и сообщениями пользователю

//Процедура устанавливает заголовок текущего окна при открытии
//
// Параметры: 
//  Форма: открываемая форма
//  Заголовок: текст заголовка формы
//
Процедура УстановитьЗаголовокОкна(Форма, Заголовок) Экспорт
	
	Форма.Заголовок = ЗаголовокПоУмолчанию + ". " + Заголовок;
	
КонецПроцедуры

//Процедура выводит сообщение в окно служебных сообщений
//
// Параметры: 
//  ТекстСообщения: текст выводимого сообщения
//
Процедура ОтправитьУведомлениеПользователю(ТекстСообщения) Экспорт
	Сообщить(ТекстСообщения);
КонецПроцедуры

// Процедура обработки исключений, возникающих при работе с веб-сервисом
Процедура ОбработкаИсключенияСервиса(ОписаниеОшибки, ЛогинПользователя, ПарольПользователя) Экспорт
	
	ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибки);
	
	ОтправитьУведомлениеПользователю("Ошибка аутентификации: " + ТекстОшибкиSynerdocs);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
//Процедуры и функции работы с регистром сведений "Значения свойств объектов"

//Функция создает новое свойство в ПВХ "Свойства объектов"
//
// Параметры: 
//  ИмяСвойства: наименование свойства
//  НазначениеСвойства: элемент ПВХ "НазначенияСвойствКатегорийОбъектов" (используются предопределенные)
//  ТипСвойства: имя примитивного типа создаваемого свойства (Булево, Число, Строка)
//	ПараметрыСтроки: параметры для создания свойства с типом Строка (длина строки)
//	ПараметрыЧисла: параметры для создания свойства с типом Число (разрядность числа, число знаков дробной части)
//
// Возвращаемое значение:
//	Свойство: новый элемент ПВХ "Свойства объектов"
//
// Примечание:
//	Вызывается при запуске модуле
//
Функция СоздатьНовоеСвойство(ИмяСвойства, НазначениеСвойства, ТипСвойства, ПараметрыСтроки, ПараметрыЧисла) Экспорт
	
	//Поиск свойства в ПВХ "СвойстваОбъектов"
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		СвойствоОбъект = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
	Иначе
		СвойствоОбъект = Свойство.ПолучитьОбъект();
	КонецЕсли;
	
	СвойствоОбъект.Наименование = ИмяСвойства;
	
	Если НЕ ЭтоБГУ Тогда
		СвойствоОбъект.НазначениеСвойства = НазначениеСвойства;
	Иначе
		СвойствоОбъект.Код = ИмяСвойства;
		СвойствоОбъект.Родитель = НазначениеСвойства;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипСвойства);
	
	Если ПараметрыЧисла <> НЕОПРЕДЕЛЕНО Тогда
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов, ПараметрыЧисла);
	ИначеЕсли ПараметрыСтроки <> НЕОПРЕДЕЛЕНО Тогда
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов, , ПараметрыСтроки);
	Иначе
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Попытка
		СвойствоОбъект.Записать();
		Свойство = СвойствоОбъект.Ссылка;
		Возврат Свойство;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

// Для БГУ создает новое свойство в ПВХ ВидыХарактеристикКонтрагентов
Функция СоздатьНовоеСвойствоБГУ(ИмяСвойства, НазначениеСвойства, ТипСвойства, ПараметрыСтроки, ПараметрыЧисла, ПараметрыДаты) Экспорт
	
	Если ИмяСвойства = "Syn_IDДокумента" ИЛИ ИмяСвойства = "Syn_LocalIDДокумента" Тогда
		
		Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ИмяСвойства);
		
		Если Не ЗначениеЗаполнено(Свойство) Тогда
			СвойствоОбъект = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		Иначе
			СвойствоОбъект = Свойство.ПолучитьОбъект();
		КонецЕсли;
		
		СвойствоОбъект.Наименование = ИмяСвойства;
		СвойствоОбъект.Код = ИмяСвойства;
		СвойствоОбъект.Списковое = Истина;
		
	Иначе
		Свойство = ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.НайтиПоНаименованию(ИмяСвойства);
		
		Если Не ЗначениеЗаполнено(Свойство) Тогда
			СвойствоОбъект = ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.СоздатьЭлемент();
		Иначе
			СвойствоОбъект = Свойство.ПолучитьОбъект();
		КонецЕсли;
		
		СвойствоОбъект.Наименование = ИмяСвойства;
		СвойствоОбъект.Код = ИмяСвойства;
		СвойствоОбъект.ПрименяетсяДляФизЛиц = Истина;
		СвойствоОбъект.ПрименяетсяДляЮрЛиц = Истина;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипСвойства);
	
	Если ПараметрыЧисла <> НЕОПРЕДЕЛЕНО Тогда
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов, ПараметрыЧисла);
	ИначеЕсли ПараметрыСтроки <> НЕОПРЕДЕЛЕНО Тогда
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов, , ПараметрыСтроки);
	ИначеЕсли ПараметрыДаты <> НЕОПРЕДЕЛЕНО Тогда
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов, , ПараметрыДаты);;
	Иначе 
		СвойствоОбъект.ТипЗначения = ТипСвойства;
	КонецЕсли;
	
	Попытка
		СвойствоОбъект.Записать();
		Свойство = СвойствоОбъект.Ссылка;
		Возврат Свойство;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//Процедура устанавливает значение указанного свойства указанному объекту:
//создает (или перезаписывает) запись в РСВ "Значения свойств объектов" для указанного объекта и указанного свойства
//
// Параметры: 
//  Объект: объект 1С, которому устанавливается значение свойства (документ, контрагент, организация)
//  ИмяСвойства: наименование свойства, значение которого устанавливается
//  ЗначениеСвойства: значение, которое устанавливается свойству для указанного объекта
//
Процедура УстановитьЗначениеСвойства(Объект, ИмяСвойства, ЗначениеСвойства) Экспорт
	
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ИмяСвойства);
	
	Если ЗначениеЗаполнено(Свойство) Тогда
		
		НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Объект);
		НаборЗаписей.Отбор.Свойство.Установить(Свойство);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			//Свойство уже есть, перезаполняем значение
			Запись = НаборЗаписей[0];
			Запись.Значение = ЗначениеСвойства;
			НаборЗаписей.Записать();
			
		Иначе
			//Создаем новую запись в регистре
			НоваяЗапись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			НоваяЗапись.Объект = Объект;
			НоваяЗапись.Свойство = Свойство;
			НоваяЗапись.Значение = ЗначениеСвойства;
			НоваяЗапись.Записать();
		КонецЕсли;
	Иначе
		Сообщить("Необходимо создать свойство <" + ИмяСвойства + ">");
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьЗначениеСвойстваБГУ(Объект, ИмяСвойства, ЗначениеСвойства) Экспорт
	
	Если ИмяСвойства = "Syn_IDКонтрагента" ИЛИ ИмяСвойства = "Syn_ЯщикКонтрагента" Тогда
		Свойство = ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.НайтиПоНаименованию(ИмяСвойства);
		
		Если ЗначениеЗаполнено(Свойство) Тогда
			
			НаборЗаписей = РегистрыСведений.ХарактеристикиКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Контрагент.Установить(Объект);
			НаборЗаписей.Отбор.ВидХарактеристики.Установить(Свойство);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				//Свойство уже есть, перезаполняем значение
				Запись = НаборЗаписей[0];
				Запись.ЗначениеХарактеристики = ЗначениеСвойства;
				НаборЗаписей.Записать();
				
			Иначе
				//Создаем новую запись в регистре
				НоваяЗапись = РегистрыСведений.ХарактеристикиКонтрагентов.СоздатьМенеджерЗаписи();
				НоваяЗапись.Контрагент = Объект;
				НоваяЗапись.ВидХарактеристики = Свойство;
				НоваяЗапись.ЗначениеХарактеристики = ЗначениеСвойства;
				НоваяЗапись.Записать();
			КонецЕсли;
		Иначе
			Сообщить("Необходимо создать свойство <" + ИмяСвойства + ">");
		КонецЕсли;
		
		// Устанавливает значение (id локального + id в сервисе) для отправленного документа	
		// в подчиненный справочник "ЗначениеСвойств"
	ИначеЕсли  ИмяСвойства = "Syn_LocalIDДокумента" Тогда
		
		Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ИмяСвойства);
		
		Если ЗначениеЗаполнено(Свойство) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗначенияСвойств.Ссылка,
			|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) КАК ИдОбъекта
			|ИЗ
			|	Справочник.ЗначенияСвойств КАК ЗначенияСвойств
			|ГДЕ
			|	ЗначенияСвойств.ПометкаУдаления = ЛОЖЬ
			|	И ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) = &ИдДокумента
			|	И ЗначенияСвойств.Владелец = &Свойство";
			Запрос.УстановитьПараметр("ИдДокумента", Строка(Объект.УникальныйИдентификатор()));	
			Запрос.УстановитьПараметр("Свойство",Свойство);
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				ТекЗапись = Результат.Ссылка.ПолучитьОбъект();
				ТекЗапись.Наименование = Строка(Объект.УникальныйИдентификатор());
				ТекЗапись.Владелец = Свойство;
				Попытка
					ТекЗапись.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				НовЗапись = Справочники.ЗначенияСвойств.СоздатьЭлемент();
				НовЗапись.Наименование = Строка(Объект.УникальныйИдентификатор());
				НовЗапись.Владелец = Свойство;
				Попытка
					НовЗапись.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		Иначе
			Сообщить("Необходимо создать свойство <" + ИмяСвойства + ">");
		КонецЕсли;
		
		// Устанавливает id в сервисе в подчиненном справочнике "Значение свойств" (для поиска документов-оснований для корр. с/ф и т.п)
	ИначеЕсли ИмяСвойства = "Syn_IDДокумента" Тогда
		
		Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Syn_LocalIDДокумента");
		
		Если ЗначениеЗаполнено(Свойство) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗначенияСвойств.Ссылка,
			|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) КАК ИдОбъекта
			|ИЗ
			|	Справочник.ЗначенияСвойств КАК ЗначенияСвойств
			|ГДЕ                                                                   
			|	ЗначенияСвойств.ПометкаУдаления = ЛОЖЬ
			|	И ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) = &ИдДокумента";
			Запрос.УстановитьПараметр("ИдДокумента",  Строка(Объект.УникальныйИдентификатор()));		
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда                                           
				СправочникОбъект = Результат.Ссылка.ПолучитьОбъект();
				СправочникОбъект.Наименование =  Строка(Объект.УникальныйИдентификатор())+";"+ЗначениеСвойства;
				СправочникОбъект.Владелец = Свойство;
				Попытка
					СправочникОбъект.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				СправочникОбъект = Справочники.ЗначенияСвойств.СоздатьЭлемент();
				СправочникОбъект.Наименование = Строка(Объект.УникальныйИдентификатор())+";"+ЗначениеСвойства;
				СправочникОбъект.Владелец = Свойство;
				Попытка
					СправочникОбъект.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Функция возвращает значение указанного свойства указанного объекта
//
// Параметры: 
//  Объект: объект 1С, у которого получаем значение свойства
//  ИмяСвойства: наименование свойства, значение которого получаем
//
// Возвращаемое значение:
//	Значение свойства: значение указанного свойства указанного объекта из РСВ "Значения свойств объектов"
//
Функция ПолучитьЗначениеСвойстваПоОбъекту(Объект, ИмяСвойства) Экспорт
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ИмяСвойства);
	
	Если ЗначениеЗаполнено(Свойство) Тогда
		//Поиск объекта и свойства в регистре "ЗСВ"
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Объект", Объект);
		СтруктураОтбора.Вставить("Свойство", Свойство);
		Запись = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(СтруктураОтбора);
		Возврат	?(Запись <> НЕОПРЕДЕЛЕНО, Запись.Значение, НЕОПРЕДЕЛЕНО);
		
	Иначе
		Сообщить("Необходимо создать свойство <" + ИмяСвойства + ">");
		Возврат	НЕОПРЕДЕЛЕНО;
	КонецЕсли;
КонецФункции

//Функция возвращает значение указанного свойства указанного объекта
//
// Параметры: 
//  Объект: объект 1С, у которого получаем значение свойства
//  ИмяСвойства: наименование свойства, значение которого получаем
//
// Возвращаемое значение:
//	Значение свойства: значение указанного свойства указанного объекта из РСВ "Значения свойств объектов"
//
Функция ПолучитьЗначениеСвойстваПоОбъектуБГУ(Объект, ИмяСвойства) Экспорт
	
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ИмяСвойства);      
	
	Если ЗначениеЗаполнено(Свойство) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) КАК ЛокальныйИд,
		|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 38, 36) КАК СервисныйИд
		|ИЗ
		|	Справочник.ЗначенияСвойств КАК ЗначенияСвойств
		|ГДЕ
		|	ЗначенияСвойств.ПометкаУдаления = ЛОЖЬ
		|	И ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) = &Объект";
		Запрос.УстановитьПараметр("Объект", Объект);
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			Возврат Результат.СервисныйИд;
		Иначе
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
		
		
	Иначе
		Сообщить("Необходимо создать свойство <" + ИмяСвойства + ">");
		Возврат	НЕОПРЕДЕЛЕНО;
	КонецЕсли;
КонецФункции

//Функция возвращает объект по указанному значению указанного свойства
//
// Параметры:
//  ИмяСвойства: наименование свойства, чье значение указываем
//	Значение свойства: значение указанного свойства в РСВ "Значения свойств объектов"
//
// Возвращаемое значение:
//  Объект: объект 1С, найденный по значению указанного свойства в РСВ "Значения свойств объектов"
//
Функция ПолучитьОбъектПоЗначениюСвойства(ИмяСвойства, Значение) Экспорт
	
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ИмяСвойства);
	
	Если ЗначениеЗаполнено(Свойство) Тогда
		//Поиск объекта и свойства в регистре "ЗСВ"
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияСвойствОбъектов.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &Свойство
		|	И ЗначенияСвойствОбъектов.Значение = &Значение");
		
		Запрос.УстановитьПараметр("Свойство", Свойство);
		Запрос.УстановитьПараметр("Значение", Значение);
		Выборка = Запрос.Выполнить().Выбрать();
		Возврат	?(Выборка.Следующий(), Выборка.Объект, НЕОПРЕДЕЛЕНО);
		
	Иначе
		Сообщить("Необходимо создать свойство <" + ИмяСвойства + ">");
		Возврат	НЕОПРЕДЕЛЕНО;
	КонецЕсли;
КонецФункции

//Функция возвращает объект по указанному значению указанного свойства
//
// Параметры:
//  ИмяСвойства: наименование свойства, чье значение указываем
//	Значение свойства: значение указанного свойства в РСВ "Значения свойств объектов"
//
// Возвращаемое значение:
//  Объект: объект 1С, найденный по значению указанного свойства в РСВ "Значения свойств объектов"
//
Функция ПолучитьОбъектПоЗначениюСвойстваБГУ(ИмяСвойства, Значение, ДокументТип) Экспорт
	
	Если ИмяСвойства = "Syn_IDКонтрагента" Тогда
		Свойство = ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.НайтиПоНаименованию(ИмяСвойства);
		
		Если ЗначениеЗаполнено(Свойство) Тогда
			//Поиск объекта и свойства в регистре "ЗСВ"
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ХарактеристикиКонтрагентов.Контрагент КАК Объект
			|ИЗ
			|	РегистрСведений.ХарактеристикиКонтрагентов КАК ХарактеристикиКонтрагентов
			|ГДЕ
			|	ХарактеристикиКонтрагентов.ВидХарактеристики = &Свойство
			|	И ХарактеристикиКонтрагентов.ЗначениеХарактеристики = &Значение");
			
			Запрос.УстановитьПараметр("Свойство", Свойство);
			Запрос.УстановитьПараметр("Значение", Значение);
			Выборка = Запрос.Выполнить().Выбрать();
			Возврат	?(Выборка.Следующий(), Выборка.Объект, НЕОПРЕДЕЛЕНО);
		Иначе
			Сообщить("Необходимо создать свойство <" + ИмяСвойства + ">");
			Возврат	НЕОПРЕДЕЛЕНО;
		КонецЕсли;                                                                                                         
		
	ИначеЕсли ИмяСвойства = "Syn_LocalIDДокумента" Тогда
		
		Если ДокументТип <> Неопределено Тогда
			Если ДокументТип = "АктПродавец" Тогда
				ДокументСсылка = Документы.УслугиОказанные.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
			ИначеЕсли ДокументТип = "Счет-фактура" Тогда
				ДокументСсылка = Документы.НДС_СчетФактураВыданный.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
			ИначеЕсли ДокументТип = "Торг12Продавец" Тогда
				ДокументСсылка = ?(НЕ Документы.МЗ_Реализация.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение)).Пустая(),Документы.МЗ_Реализация.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение)),Документы.ОС_Реализация.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение)));
			ИначеЕсли  (ДокументТип = "Исправленный счет-фактура") ИЛИ 
				(ДокументТип = "Исправленный корректировочный счет-фактура") ИЛИ (ДокументТип = Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураВыданный")) Тогда
				ДокументСсылка = Документы.НДС_ИсправительныйСчетФактураВыданный.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
			ИначеЕсли  (ДокументТип = "Корректировочный счет-фактура") ИЛИ (ДокументТип = Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный")) Тогда
				ДокументСсылка = Документы.НДС_КорректировочныйСчетФактураВыданный.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
			КонецЕсли;
			
		КонецЕсли;
		
		Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ИмяСвойства);
		
		Если ЗначениеЗаполнено(Свойство) Тогда
			//Ищем док по УИДу
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) КАК ИдДокумента
			|ИЗ
			|	Справочник.ЗначенияСвойств КАК ЗначенияСвойств
			|ГДЕ
			|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) = &ИдДокумента
			|	И ЗначенияСвойств.ПометкаУдаления = ЛОЖЬ";
			Запрос.УстановитьПараметр("ИдДокумента",Строка(Значение));
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				Возврат ДокументСсылка;
			Иначе  // Создадим запись в справочнике 
				СправочникОбъект = Справочники.ЗначенияСвойств.СоздатьЭлемент();
				СправочникОбъект.Наименование = Значение;
				СправочникОбъект.Владелец = Свойство;
				Попытка
					СправочникОбъект.Записать();
					Возврат ДокументСсылка;
				Исключение
					Сообщить("Не удалось установить значение для свойсва Syn_LocalIDДокумкента!");
					Возврат НЕОПРЕДЕЛЕНО;
				КонецПопытки;
				
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСвойства = "Syn_ЯщикКонтрагента" Тогда
		
		Свойство = ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.НайтиПоНаименованию(ИмяСвойства);
		
		Если ЗначениеЗаполнено(Свойство) Тогда
			
		КонецЕсли;
		
		
	ИначеЕсли ИмяСвойства = "Syn_IDДокумента" Тогда
		
		Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ИмяСвойства);
		
		Если ЗначениеЗаполнено(Свойство) Тогда
			//Ищем док по УИДу
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) КАК ИдДокумента
			|ИЗ
			|	Справочник.ЗначенияСвойств КАК ЗначенияСвойств
			|ГДЕ
			|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) = &ИдДокумента
			|	И ЗначенияСвойств.ПометкаУдаления = ЛОЖЬ";
			Запрос.УстановитьПараметр("ИдДокумента",Строка(Значение));
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				Возврат Результат.ИдДокумента;
			Иначе  // Создадим запись в справочнике 
				СправочникОбъект = Справочники.ЗначенияСвойств.СоздатьЭлемент();
				СправочникОбъект.Наименование = Значение;
				СправочникОбъект.Владелец = Свойство;
				Попытка
					СправочникОбъект.Записать();
					Возврат ДокументСсылка;
				Исключение
					Сообщить("Не удалось установить значение для свойсва Syn_LocalIDДокумкента!");
					Возврат НЕОПРЕДЕЛЕНО;
				КонецПопытки;
				
				
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДокумент1С(ИмяСвойства,ЗначениеСвойства,ДокументТип) Экспорт 
	
	Если ИмяСвойства = "Syn_IDДокумента" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 1, 36) КАК ЛокальныйИД,
		|	ПОДСТРОКА(ЗначенияСвойств.Наименование, 38, 36) КАК СервисныйИД
		|ИЗ
		|	Справочник.ЗначенияСвойств КАК ЗначенияСвойств
		|ГДЕ
		|	ЗначенияСвойств.ПометкаУдаления = ЛОЖЬ
		|	И ПОДСТРОКА(ЗначенияСвойств.Наименование, 38, 36) = &ИдДокумента
		|	И ЗначенияСвойств.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("ИдДокумента",ЗначениеСвойства);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			Если ДокументТип = "WaybillSeller" Тогда 
				ДокументСсылка = Документы.МЗ_Покупка.ПолучитьСсылку(Новый УникальныйИдентификатор(Результат.ЛокальныйИД));
				ДокЕсть = ДокументСсылка.ПолучитьОбъект();
				Возврат ?(ДокЕсть = НЕОПРЕДЕЛЕНО,НЕОПРЕДЕЛЕНО,ДокументСсылка);
			ИначеЕсли ДокументТип = "ActOfWorkSeller" Тогда 
				ДокументСсылка = Документы.УслугиСтороннихОрганизаций.ПолучитьСсылку(Новый УникальныйИдентификатор(Результат.ЛокальныйИД));
				ДокЕсть = ДокументСсылка.ПолучитьОбъект();
				Возврат ?(ДокЕсть = НЕОПРЕДЕЛЕНО,НЕОПРЕДЕЛЕНО,ДокументСсылка);
			ИначеЕсли ДокументТип = "Invoice" Тогда
				ДокументСсылка = Документы.НДС_СчетФактураПолученный.ПолучитьСсылку(Новый УникальныйИдентификатор(Результат.ЛокальныйИД));
				ДокЕсть = ДокументСсылка.ПолучитьОбъект();
				Возврат ?(ДокЕсть = НЕОПРЕДЕЛЕНО,НЕОПРЕДЕЛЕНО,ДокументСсылка);
			ИначеЕсли ДокументТип = "InvoiceRevision" Тогда
				ДокументСсылка = Документы.НДС_ИсправительныйСчетФактураПолученный.ПолучитьСсылку(Новый УникальныйИдентификатор(Результат.ЛокальныйИД));
				ДокЕсть = ДокументСсылка.ПолучитьОбъект();
				Возврат ?(ДокЕсть = НЕОПРЕДЕЛЕНО,НЕОПРЕДЕЛЕНО,ДокументСсылка);
			ИначеЕсли ДокументТип = "InvoiceCorrection" Тогда
				ДокументСсылка = Документы.НДС_КорректировочныйСчетФактураПолученный.ПолучитьСсылку(Новый УникальныйИдентификатор(Результат.ЛокальныйИД));
				ДокЕсть = ДокументСсылка.ПолучитьОбъект();
				Возврат ?(ДокЕсть = НЕОПРЕДЕЛЕНО,НЕОПРЕДЕЛЕНО,ДокументСсылка);
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////
//Процедуры и функции работы с XML

//Процедура устанавливает значение атрибута в текущей строке XML-файла
//
// Параметры:
//	ЗаписьXML: текущая запись в XML-файле 
//	Атрибут: атрибут XML
//  ЗначениеАтрибута - устанавливаемое в атрибут значение
//  ОбязательныйАтрибут - признак обязательности заполнения атрибута
//
Процедура ЗаписатьXMLАтрибут(ЗаписьXML, Атрибут, ЗначениеАтрибута, ОбязательныйАтрибут = Ложь) Экспорт
	Попытка 
		//Записываем обязательные атрибуты и все непустые
		Если ЗначениеЗаполнено(ЗначениеАтрибута) Или
			(ТипЗнч(ЗначениеАтрибута) = Тип("Число") И ЗначениеАтрибута = 0) Или
			ОбязательныйАтрибут Тогда
			ЗаписьXML.ЗаписатьАтрибут(Атрибут, ?(ЗначениеЗаполнено(ЗначениеАтрибута) Или (ТипЗнч(ЗначениеАтрибута) = Тип("Число") И ЗначениеАтрибута = 0), Строка(ЗначениеАтрибута), " "));
		КонецЕсли;
	Исключение 
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
Конецпроцедуры

//Процедура осуществляет поиск узла по имени в файле XML (используется при получении значений атрибутов),
//начиная с определенного места в XML, и позиционируется на этом узле
//
// Параметры:
//	ЧтениеXML: текущая строка в XML-файле  
//	ИмяУзла: имя искомого узла
//
Процедура ПоискУзлаXML (ЧтениеXML, ИмяУзла) Экспорт
	Поз_Тчк = Найти(ИмяУзла, ".");
	Если Поз_Тчк > 0 Тогда
		//Еще не конец
		ИмяОчередногоУзла = Лев(ИмяУзла, Поз_Тчк - 1);
		
		Пока ЧтениеXML.Прочитать() Цикл
			//Ищем узел по имени
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И
				ЧтениеXML.Имя = ИмяОчередногоУзла Тогда
				//Нашли - идем глубже, чтобы достать атрибут
				ПоискУзлаXML(ЧтениеXML, Сред(ИмяУзла, Поз_Тчк + 1));
			КонецЕсли;
		КонецЦикла;
	Иначе
		//последний узел, ищем его
		Пока ЧтениеXML.Прочитать() Цикл
			//Ищем узел по имени
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И
				ЧтениеXML.Имя = ИмяУзла Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//Функция возвращает значение атрибута в XML
//
// Параметры:
//  Syn_Документ: документ сервиса (экземпляр класса Document)
//	ИмяУзла: имя искомого узла
//	ИмяАтрибута: имя искомого атрибута
//
// Возвращаемое значение::
//  В контенте электронного документа (XML-файле) ищет нужный узел
//	по имени с помощью функции поиска узла и получает значение атрибута
//
Функция ПолучитьЗначениеАтрибутаXML(Syn_Документ, ИмяУзла, ИмяАтрибута) Экспорт
	//Ищем только при условии, что контент есть (FileName заполнено в ЭД)
	ИмяФайлаЭД = Syn_Документ.FileName;
	
	Если ИмяФайлаЭД <> НЕОПРЕДЕЛЕНО Тогда
		КаталогЭД = КаталогВременныхФайлов();
		
		НовыйЧтениеXML = Новый ЧтениеXML;
		
		ФайлЭД = Новый Файл(КаталогЭД + ИмяФайлаЭД);
		
		Если ФайлЭД.Существует() Тогда
			//Если файл существует, то считываем данные из него
			НовыйЧтениеXML.ОткрытьФайл(КаталогЭД + ИмяФайлаЭД);
		Иначе
			//Если файл не существует, то считываем данные из контента документа синердокса
			Попытка
				Документ_ДвоичныеДанные = ?(Syn_Документ.FileSize > 1000000, 
				ExchangeService.GetDocumentContent(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id),
				Syn_Документ.Content);
			Исключение
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
				
				ОтправитьУведомлениеПользователю("Ошибка получения контента (содержимого) ЭД: " + ТекстОшибкиSynerdocs);
				
				Возврат НЕОПРЕДЕЛЕНО;
			КонецПопытки;
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
			Документ_ДвоичныеДанные.Записать(ИмяВременногоФайла);
			НовыйЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
		КонецЕсли;
		
		ПоискУзлаXML(НовыйЧтениеXML, ИмяУзла);
		
		ЗначениеАтрибута = "";
		Если НовыйЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			//последний узел в пути, берем атрибут
			ЗначениеАтрибута = НовыйЧтениеXML.ПолучитьАтрибут(ИмяАтрибута);
		КонецЕсли;
		
		НовыйЧтениеXML.Закрыть();
		//последний узел в пути, берем атрибут
		Возврат ЗначениеАтрибута;
	Иначе
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
КонецФункции

//Создание электронных документов (XML)

// Проверяет правильно ли заполнено полученное ФИО
//
// Параметры:
//  ФИО	 - Структура - см. функцию Новый_ФИО()
// 
// Возвращаемое значение:
//  Булево - ФИО заполнено
//
Функция ФИОЗаполнено(ФИО)
	
	Результат = Истина
		И ЗначениеЗаполнено(ФИО.Фамилия)
		И ЗначениеЗаполнено(ФИО.Имя);
		
	Если НЕ Результат Тогда
		Сообщить("Не удалось получить ФИО физ. лица [" + ФИО.Источник + "]. Проверьте корректность заполнения данных.");
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Создает объект ФИО для сериализации в XML.
// Если объект не удалось создать возвращает Неопределено
//
// Параметры:
//  Фабрика	 - ФабиркаXDTO		 - фабрика, по которой создается объект
//  ТипФИО	 - ТипОбъектаXDTO	 - тип объекта, полученный из фабрики
//  ФИО		 - Cтруктура		 - см. функцию Новый_ФИО()
// 
// Возвращаемое значение:
//  ОбъектXDTO, Неопределено - созданный объект
//
Функция СоздатьОбъектФИО(Фабрика, ТипФИО, ФИО)
	
	Если ФИОЗаполнено(ФИО) Тогда
	
		ОбъектФИО = Фабрика.Создать(ТипФИО);
		
		ОбъектФИО.Фамилия	= ФИО.Фамилия;
		ОбъектФИО.Имя		= ФИО.Имя;
		
		Если ЗначениеЗаполнено(ФИО.Отчество) Тогда
			ОбъектФИО.Отчество = ФИО.Отчество;
		КонецЕсли;
		
		Результат = ОбъектФИО;
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает объект ФИО из индивидуального предпринимателя для сериализации в XML.
// Если объект не удалось создать возвращает Неопределено.
//
// Параметры:
//  Фабрика	 - ФабиркаXDTO		 - фабрика, по которой создается объект
//  ТипФИО	 - ТипОбъектаXDTO	 - тип объекта, полученный из фабрики
//  ИП		 - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты, СправочникСсылка.Организации, Строка	 - ссылка на ИП, или его строковое представление, из которого создается объект
// 
// Возвращаемое значение:
//  ОбъектXDTO, Неопределено - созданный объект
//
Функция СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, ИП)
	
	Если ЭтоБГУ Тогда
		ФИО = ФИОИндивидуальногоПредпринимателяБГУ(ИП);
	Иначе
		ФИО = ФИОИндивидуальногоПредпринимателя(ИП);
	КонецЕсли;
	
	ОбъектФИО = СоздатьОбъектФИО(Фабрика, ТипФИО, ФИО);
	
	Возврат ОбъектФИО;
	
КонецФункции

// Создает объект ФИО из должностного лица для сериализации в XML.
// Если объект не удалось создать возвращает Неопределено.
//
// Параметры:
//  Фабрика			 - ФабиркаXDTO		 - фабрика, по которой создается объект
//  ТипФИО			 - ТипОбъектаXDTO	 - тип объекта, полученный из фабрики
//  ДолжностноеЛицо	 - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Сотрудники, Строка, Структура	 - Подписант (см. ПодписантСтруктура()) или ссылка на должностное лицо
// 
// Возвращаемое значение:
//  ОбъектXDTO, Неопределено - созданный объект
//
Функция СоздатьОбъектФИОИзДолжностногоЛица(Фабрика, ТипФИО, ДолжностноеЛицо)
	
	ФИО = ФИОДолжностногоЛица(ДолжностноеЛицо);
	
	ОбъектФИО = СоздатьОбъектФИО(Фабрика, ТипФИО, ФИО);
	
	Возврат ОбъектФИО;
	
КонецФункции

// Функция формирует структура данных для формирования формализованных документов
// (адреса, контактные данные, банковские реквизиты)
// Параметры: Документ - Документ.Ссылка
//
// Возвращаемое значение: Структура
//
Функция СформироватьСтруктуруДанныхДокумента(Документ) Экспорт
	
	ЭтоКСФ = Ложь;
	
	Если НЕ ЭтоБГУ Тогда
		Контрагент = Документ.Контрагент;
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			// Для СФ
			МетаданныеДокумента = Документ.ДокументОснование.Метаданные();
			ЭтоСФ = Истина;
		Иначе
			// Для остальных
			МетаданныеДокумента = Документ.Метаданные();
			ЭтоСФ = Ложь;
		КонецЕсли;
	Иначе
		Если  ТипЗнч(Документ) = Тип("ДокументСсылка.ОС_Реализация") ИЛИ
			ТипЗнч(Документ) = Тип("ДокументСсылка.МЗ_Реализация") Тогда
			Контрагент = Документ.СубконтоСчетДебета2;
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.УслугиОказанные") Тогда
			Контрагент = Документ.Контрагент;
		КонецЕсли;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.НДС_СчетФактураВыданный") ИЛИ 
			ТипЗнч(Документ) = Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураВыданный") ИЛИ
			ТипЗнч(Документ) = Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный") Тогда
			// Для СФ
			Контрагент 						= Документ.Контрагент;
			МетаданныеДокумента 			= Документ.ДокументОснование.Метаданные();
			МетаданныеДокументаОснования 	= Документ.ДокументОснование.Метаданные();
			ЭтоСФ 	= Истина;
			ЭтоКСФ 	= ТипЗнч(Документ) = Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный");
		Иначе
			// Для остальных
			МетаданныеДокумента = Документ.Метаданные();
			ЭтоСФ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеСправочникаОрганизации = Метаданные.Справочники.Организации; 
	
	СтруктураДанных = Новый Структура;
	
	// Общие данные
	Попытка
		SubjectInfo_Контрагент = ExchangeService.GetSubjectInfo(Токен, ПолучитьЯщик(Контрагент));
		СтруктураДанных.Вставить("ИдентификаторПолучателя", SubjectInfo_Контрагент.ServiceCode);
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		ОтправитьУведомлениеПользователю("Ошибка получения информации о субъекте документооборота: " + ТекстОшибкиSynerdocs);
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	Попытка
		SubjectInfo_Организация = ExchangeService.GetSubjectInfo(Токен, Syn_ЯщикОрганизации);
		СтруктураДанных.Вставить("ИдентификаторОтправителя", SubjectInfo_Организация.ServiceCode);
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		ОтправитьУведомлениеПользователю("Ошибка получения информации о субъекте документооборота: " + ТекстОшибкиSynerdocs);
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	Попытка
		СтруктураДанных.Вставить("SubjectInfo_ЭДО", ExchangeService.GetSpecialOperatorInfo(Токен));
		СтруктураДанных.Вставить("ИдентификаторЭДО", СтруктураДанных.SubjectInfo_ЭДО.OperatorServiceCode);
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации об операторе документооборота: " + ТекстОшибкиSynerdocs);
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	// Данные организации
	АдресОрганизации = ПолучитьАдресКонтрагента(?(НЕ ЭтоБГУ, Документ.Организация, Документ.Учреждение), Истина, ?(НЕ ЭтоБГУ, ?(Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица), Справочники.ВидыКонтактнойИнформации.ЮрАдресУчреждения));
	
	//Не нашли юр адрес, ищем факт.
	Если АдресОрганизации = Неопределено Тогда
		АдресОрганизации = ПолучитьАдресКонтрагента(?(НЕ ЭтоБГУ, Документ.Организация, Документ.Учреждение), Истина, ?(НЕ ЭтоБГУ, ?(Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица), Справочники.ВидыКонтактнойИнформации.ФактАдресУчреждения));	
	КонецЕсли;
		
	Если АдресОрганизации = Неопределено Тогда
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			Сообщить("Не заполнен адрес организации [" + Строка(Организация) + "]. Невозможно отправить документ.");
		Иначе
			Сообщить("Не заполнен адрес физ. лица [" + Строка(Организация) + "]. Невозможно отправить документ.");
		КонецЕсли;
		
		Возврат Неопределено;
	Иначе
		СтруктураДанных.Вставить("АдресОрганизации", АдресОрганизации);
	КонецЕсли;
	
	Попытка
		Если НЕ ЭтоБГУ Тогда
			Syn_Организация = ExchangeService.GetOrganizationByInnKpp(Токен, Документ.Организация.ИНН, Документ.Организация.КПП);
		Иначе
			Syn_Организация = ExchangeService.GetOrganizationByInnKpp(Токен, Документ.Учреждение.ИНН, Документ.Учреждение.КПП);
		КонецЕсли;
		
		Если Не Syn_Организация.IsJuridical Тогда
			//Для ИП берем из сервиса ФИО
			Syn_ФИООрганизации = Новый Структура;
			Syn_ФИООрганизации.Вставить("Фамилия", Syn_Организация.LastName);
			Syn_ФИООрганизации.Вставить("Имя", Syn_Организация.FirstName);
			Syn_ФИООрганизации.Вставить("Отчество", Syn_Организация.MiddleName);
			
		Иначе
			Syn_ФИООрганизации = НЕОПРЕДЕЛЕНО;
		КонецЕсли;
		
		СтруктураДанных.Вставить("Syn_ФИООрганизации", Syn_ФИООрганизации);
		
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации об организации: <" + Документ.Организация + ">. " + ТекстОшибкиSynerdocs);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	//Контактные данные
	ТелефонОрганизации = ПолучитьТелефон(?(НЕ ЭтоБГУ, Документ.Организация, Документ.Учреждение));
	ТелефонОрганизации = ?(Не ТелефонОрганизации = Неопределено, Лев(ТелефонОрганизации, 20), Неопределено);
	СтруктураДанных.Вставить("ТлфОрганизации", ?(ЗначениеЗаполнено(ТелефонОрганизации), ТелефонОрганизации, Неопределено));
	
	ФаксОрганизации = ПолучитьТелефон(?(НЕ ЭтоБГУ, Документ.Организация, Документ.Учреждение), Истина);
	ФаксОрганизации = ?(Не ФаксОрганизации = Неопределено, Лев(ФаксОрганизации, 20), Неопределено);
	СтруктураДанных.Вставить("ФаксОрганизации", ?(ЗначениеЗаполнено(ФаксОрганизации), ФаксОрганизации, Неопределено));

	
	//Банковские реквизиты (Для ТОРГ-12)
	Если НЕ ЭтоСФ Тогда
		ДанныеСчетаОрганизации = Новый Структура;
		Если НЕ ЭтоБГУ Тогда
			Если ЕстьРеквизитДокумента("БанковскийСчетОрганизации", Документ.Метаданные()) И ЗначениеЗаполнено(Документ.БанковскийСчетОрганизации) Тогда
				ДанныеСчетаОрганизации.Вставить("НомерСчета", ?(ЗначениеЗаполнено(Документ.БанковскийСчетОрганизации), Документ.БанковскийСчетОрганизации.НомерСчета, Неопределено));
				БанкОрганизации = ?(ЗначениеЗаполнено(Документ.БанковскийСчетОрганизации), Документ.БанковскийСчетОрганизации.Банк, Неопределено);
				ДанныеСчетаОрганизации.Вставить("НаимБанк", ?(ЗначениеЗаполнено(Документ.БанковскийСчетОрганизации), БанкОрганизации.Наименование, Неопределено));
				ДанныеСчетаОрганизации.Вставить("БИК",  ?(ЗначениеЗаполнено(Документ.БанковскийСчетОрганизации), БанкОрганизации.Код, Неопределено));
				СтруктураДанных.Вставить("ДанныеСчетаОрганизации", ДанныеСчетаОрганизации);
			ИначеЕсли ЗначениеЗаполнено(Документ.Организация.ОсновнойБанковскийСчет) Тогда
				БанковскийСчетОрганизации = Документ.Организация.ОсновнойБанковскийСчет;
				
				ДанныеСчетаОрганизации.Вставить("НомерСчета", ?(ЗначениеЗаполнено(БанковскийСчетОрганизации), БанковскийСчетОрганизации.НомерСчета, Неопределено));
				БанкОрганизации = ?(ЗначениеЗаполнено(БанковскийСчетОрганизации), БанковскийСчетОрганизации.Банк, Неопределено);
				ДанныеСчетаОрганизации.Вставить("НаимБанк", ?(ЗначениеЗаполнено(БанковскийСчетОрганизации), БанкОрганизации.Наименование, Неопределено));
				ДанныеСчетаОрганизации.Вставить("БИК",  ?(ЗначениеЗаполнено(БанковскийСчетОрганизации), БанкОрганизации.Код, Неопределено));
				
				СтруктураДанных.Вставить("ДанныеСчетаОрганизации", ДанныеСчетаОрганизации);
			Иначе
				ДанныеСчетаОрганизации.Вставить("НомерСчета", Неопределено);
				ДанныеСчетаОрганизации.Вставить("НаимБанк", Неопределено);
				ДанныеСчетаОрганизации.Вставить("БИК", Неопределено);
				СтруктураДанных.Вставить("ДанныеСчетаОрганизации", ДанныеСчетаОрганизации);		
			КонецЕсли;
		Иначе
			ДанныеСчетаОрганизации.Вставить("НомерСчета", Неопределено);
			ДанныеСчетаОрганизации.Вставить("НаимБанк", Неопределено);
			ДанныеСчетаОрганизации.Вставить("БИК", Неопределено);
			СтруктураДанных.Вставить("ДанныеСчетаОрганизации", ДанныеСчетаОрганизации);		
		КонецЕсли;
	КонецЕсли;
	// Данные контрагента
	АдресКонтрагента = ПолучитьАдресКонтрагента(Контрагент, Неопределено, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	//Не нашли юр. адрес, ищем факт
	Если АдресКонтрагента = Неопределено Тогда
		АдресКонтрагента = ПолучитьАдресКонтрагента(Контрагент, Неопределено, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	КонецЕсли;
	
	Если АдресКонтрагента = Неопределено Тогда
		Сообщить("Не заполнен юридический адрес контрагента. Невозможно отправить документ.");
		Возврат Неопределено;
	Иначе 
		СтруктураДанных.Вставить("АдресКонтрагента", АдресКонтрагента);
	КонецЕсли;
	
	Попытка
		Syn_Контрагент = ExchangeService.GetOrganizationByInnKpp(Токен, Контрагент.ИНН, Контрагент.КПП);
		
		Если Не Syn_Контрагент.IsJuridical Тогда
			//Для ИП берем из сервиса ФИО
			Syn_ФИОКонтрагента = Новый Структура;
			Syn_ФИОКонтрагента.Вставить("Фамилия", Syn_Контрагент.LastName);
			Syn_ФИОКонтрагента.Вставить("Имя", Syn_Контрагент.FirstName);
			Syn_ФИОКонтрагента.Вставить("Отчество", Syn_Контрагент.MiddleName);
		Иначе
			Syn_ФИОКонтрагента = НЕОПРЕДЕЛЕНО;
		КонецЕсли;
		
		СтруктураДанных.Вставить("Syn_ФИОКонтрагента", Syn_ФИОКонтрагента);
		
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации о контрагенте: <" + Документ.Контрагент + ">. " + ТекстОшибкиSynerdocs);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	//Контактные данные
	ТелефонКонтрагента = ПолучитьТелефон(Контрагент);
	ТелефонКонтрагента = ?(Не ТелефонКонтрагента = Неопределено, Лев(ТелефонКонтрагента, 20), Неопределено);
	СтруктураДанных.Вставить("ТлфКонтрагента", ?(ЗначениеЗаполнено(ТелефонКонтрагента), ТелефонКонтрагента, Неопределено));
	
	ФаксКонтрагента = ПолучитьТелефон(Контрагент, Истина);
	ФаксКонтрагента = ?(Не ФаксКонтрагента = Неопределено, Лев(ФаксКонтрагента, 20), Неопределено);
	СтруктураДанных.Вставить("ФаксКонтрагента", ?(ЗначениеЗаполнено(ФаксКонтрагента), ФаксКонтрагента, Неопределено));

	
	//Банковские реквизиты (для ТОРГ-12)
	Если НЕ ЭтоСФ Тогда
		ДанныеСчетаКонтрагента = Новый Структура;
		Если НЕ ЭтоБГУ Тогда
			ДанныеСчетаКонтрагента.Вставить("НомерСчета", ?(ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет), Контрагент.ОсновнойБанковскийСчет.НомерСчета, Неопределено));
			БанкКонтрагента = ?(ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет), Контрагент.ОсновнойБанковскийСчет.Банк, Неопределено);
			ДанныеСчетаКонтрагента.Вставить("НаимБанк", ?(ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет), БанкКонтрагента.Наименование, Неопределено));
			ДанныеСчетаКонтрагента.Вставить("БИК", ?(ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет), БанкКонтрагента.Код, Неопределено));
			СтруктураДанных.Вставить("ДанныеСчетаКонтрагента", ДанныеСчетаКонтрагента);
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БанковскиеИКазначейскиеСчета.Ссылка
			|ИЗ
			|	Справочник.БанковскиеИКазначейскиеСчета КАК БанковскиеИКазначейскиеСчета
			|ГДЕ
			|	БанковскиеИКазначейскиеСчета.ПометкаУдаления = ЛОЖЬ
			|	И БанковскиеИКазначейскиеСчета.Закрыт = ЛОЖЬ
			|	И БанковскиеИКазначейскиеСчета.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", Контрагент);
			Результат = Запрос.Выполнить().Выбрать();
			ЛицевойСчет = ?(Результат.Следующий(), Результат.Ссылка, Неопределено);
			
			Если НЕ ЛицевойСчет = Неопределено Тогда
				ДанныеСчетаКонтрагента.Вставить("НомерСчета", ?(ЗначениеЗаполнено(ЛицевойСчет.Код), СокрЛП(ЛицевойСчет.Код), Неопределено));
				БанкКонтрагента = ?(ЗначениеЗаполнено(ЛицевойСчет.Код), ЛицевойСчет.КассовыйОрган, Неопределено);
				ДанныеСчетаКонтрагента.Вставить("НаимБанк", ?(ЗначениеЗаполнено(БанкКонтрагента), БанкКонтрагента.Наименование, Неопределено));
				ДанныеСчетаКонтрагента.Вставить("БИК", ?(ЗначениеЗаполнено(БанкКонтрагента), БанкКонтрагента.Код, Неопределено));
				СтруктураДанных.Вставить("ДанныеСчетаКонтрагента", ДанныеСчетаКонтрагента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Данные грузоотправителя
	Если НЕ ЭтоБГУ И ЕстьРеквизитДокумента("Грузоотправитель", МетаданныеДокумента) ИЛИ 
		ЭтоБГУ И НЕ ЭтоКСФ И ЕстьРеквизитДокумента("Грузоотправитель", ?(ЭтоСФ, МетаданныеДокументаОснования, МетаданныеДокумента)) Тогда
		
		Грузоотправитель = ?(НЕ ЭтоСф, Документ.Грузоотправитель, Документ.ДокументОснование.Грузоотправитель);
		
		Если (Грузоотправитель = ?(НЕ ЭтоБГУ, Документ.Организация, Документ.Учреждение)) ИЛИ (НЕ ЗначениеЗаполнено(Грузоотправитель)) Тогда
			Грузоотправитель = ?(НЕ ЭтоБГУ, Документ.Организация, Документ.Учреждение);
			АдресГрузоотправителя = ПолучитьАдресКонтрагента(Грузоотправитель, Истина, ?(НЕ ЭтоБГУ, ?(Грузоотправитель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица), Справочники.ВидыКонтактнойИнформации.ФактАдресУчреждения));
			
			Если АдресГрузоотправителя = Неопределено Тогда
				АдресГрузоотправителя =	ПолучитьАдресКонтрагента(Грузоотправитель, Истина, ?(НЕ ЭтоБГУ, ?(Грузоотправитель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица), Справочники.ВидыКонтактнойИнформации.ЮрАдресУчреждения));
			КонецЕсли;
						
			СтруктураДанных.Вставить("ДанныеСчетаГрузоотправителя", ДанныеСчетаОрганизации);
		Иначе
			Грузоотправитель = ?(НЕ ЭтоСФ, Документ.Грузоотправитель, Документ.ДокументОснование.Грузоотправитель);
			
			Если НЕ ЭтоБГУ Тогда
				АдресГрузоотправителя = ПолучитьАдресКонтрагента(Грузоотправитель, Неопределено, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
				
				Если АдресГрузоотправителя = Неопределено Тогда
					АдресГрузоотправителя = ПолучитьАдресКонтрагента(Грузоотправитель, Неопределено, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				КонецЕсли;
				
			Иначе
				АдресГрузоотправителя = ПолучитьАдресКонтрагента(Грузоотправитель, Неопределено, ?(Грузоотправитель.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Организация, 
				Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица));
				
				Если АдресГрузоотправителя = Неопределено Тогда
					АдресГрузоотправителя = ПолучитьАдресКонтрагента(Грузоотправитель, Неопределено, ?(Грузоотправитель.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Организация, 
					Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица));
				КонецЕсли;
				
			КонецЕсли;
			
			//Банковские реквизиты (для ТОРГ-12)
			Если НЕ ЭтоСФ Тогда
				ДанныеСчетаГрузоотправителя = Новый Структура;
				Если НЕ ЭтоБГУ Тогда
					ДанныеСчетаГрузоотправителя.Вставить("НомерСчета", ?(ЗначениеЗаполнено(Грузоотправитель.ОсновнойБанковскийСчет), Грузоотправитель.ОсновнойБанковскийСчет.НомерСчета, Неопределено));
					БанкГрузоотправителя = ?(ЗначениеЗаполнено(Грузоотправитель.ОсновнойБанковскийСчет), Грузоотправитель.ОсновнойБанковскийСчет.Банк, Неопределено);
					ДанныеСчетаГрузоотправителя.Вставить("НаимБанк", ?(ЗначениеЗаполнено(Грузоотправитель.ОсновнойБанковскийСчет), БанкГрузоотправителя.Наименование, Неопределено));
					ДанныеСчетаГрузоотправителя.Вставить("БИК", ?(ЗначениеЗаполнено(Грузоотправитель.ОсновнойБанковскийСчет), БанкГрузоотправителя.Код, Неопределено));
					СтруктураДанных.Вставить("ДанныеСчетаГрузоотправителя", ДанныеСчетаГрузоотправителя);
				Иначе
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	БанковскиеИКазначейскиеСчета.Ссылка
					|ИЗ
					|	Справочник.БанковскиеИКазначейскиеСчета КАК БанковскиеИКазначейскиеСчета
					|ГДЕ
					|	БанковскиеИКазначейскиеСчета.ПометкаУдаления = ЛОЖЬ
					|	И БанковскиеИКазначейскиеСчета.Закрыт = ЛОЖЬ
					|	И БанковскиеИКазначейскиеСчета.Владелец = &Владелец";
					Запрос.УстановитьПараметр("Владелец", Грузоотправитель);
					Результат = Запрос.Выполнить().Выбрать();
					ЛицевойСчет = ?(Результат.Следующий(), Результат.Ссылка, Неопределено);
					Если НЕ ЛицевойСчет = Неопределено Тогда
						ДанныеСчетаГрузоотправителя.Вставить("НомерСчета", ?(ЗначениеЗаполнено(ЛицевойСчет.Код), СокрЛП(ЛицевойСчет.Код), Неопределено));
						БанкГрузоотправителя = ?(ЗначениеЗаполнено(ЛицевойСчет.Код), ЛицевойСчет.КассовыйОрган, Неопределено);
						ДанныеСчетаГрузоотправителя.Вставить("НаимБанк", ?(ЗначениеЗаполнено(БанкГрузоотправителя), БанкГрузоотправителя.Наименование, Неопределено));
						ДанныеСчетаГрузоотправителя.Вставить("БИК", ?(ЗначениеЗаполнено(БанкГрузоотправителя), БанкГрузоотправителя.Код, Неопределено));
						СтруктураДанных.Вставить("ДанныеСчетаГрузоотправителя", ДанныеСчетаГрузоотправителя);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураДанных.Вставить("АдресГрузоотправителя", АдресГрузоотправителя);
				
		//Контактные данные
		ТелефонГрузоотправителя = ПолучитьТелефон(Грузоотправитель);
		ТелефонГрузоотправителя = ?(Не ТелефонГрузоотправителя = Неопределено, Лев(ТелефонГрузоотправителя, 20), Неопределено);
		СтруктураДанных.Вставить("ТлфГрузоотправителя", ?(ЗначениеЗаполнено(ТелефонГрузоотправителя), ТелефонГрузоотправителя, Неопределено));
		
		ФаксГрузоотправителя = ПолучитьТелефон(Грузоотправитель, Истина);
		ФаксГрузоотправителя = ?(Не ФаксГрузоотправителя = Неопределено, Лев(ФаксГрузоотправителя, 20), Неопределено);
		СтруктураДанных.Вставить("ФаксГрузоотправителя", ?(ЗначениеЗаполнено(ФаксГрузоотправителя), ФаксГрузоотправителя, Неопределено));
	КонецЕсли;
	
	// Данные грузополучателя
	Если НЕ ЭтоБГУ И ЕстьРеквизитДокумента("Грузополучатель", МетаданныеДокумента) ИЛИ
		ЭтоБГУ И НЕ ЭтоКСФ И ЕстьРеквизитДокумента("Грузополучатель", ?(ЭтоСФ, МетаданныеДокументаОснования, МетаданныеДокумента)) Тогда
		
		Грузополучатель = ?(НЕ ЭтоСф, Документ.Грузополучатель, Документ.ДокументОснование.Грузополучатель);
		Грузополучатель = ?((Грузополучатель = Контрагент) ИЛИ (НЕ ЗначениеЗаполнено(Грузополучатель)), Контрагент, Грузополучатель);
		
		// Данные грузоотправителя
		АдресГрузополучателя = ПолучитьАдресКонтрагента(Грузополучатель, Неопределено, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);			
		
		Если АдресГрузополучателя = Неопределено Тогда
			АдресГрузополучателя = ПолучитьАдресКонтрагента(Грузополучатель, Неопределено, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);	
		КонецЕсли;
		
		
		СтруктураДанных.Вставить("АдресГрузополучателя", АдресГрузополучателя);
				
		//Контактные данные
		ТелефонГрузополучателя = ПолучитьТелефон(Грузополучатель);
		ТелефонГрузополучателя = ?(Не ТелефонГрузополучателя = Неопределено, Лев(ТелефонГрузополучателя, 20), Неопределено);
       	СтруктураДанных.Вставить("ТлфГрузополучателя", ?(ЗначениеЗаполнено(ТелефонГрузополучателя), ТелефонГрузополучателя, Неопределено));
		
		ФаксГрузополучателя = ПолучитьТелефон(Грузополучатель, Истина);
		ФаксГрузополучателя = ?(Не ФаксГрузополучателя = Неопределено, Лев(ФаксГрузополучателя, 20), Неопределено);
       	СтруктураДанных.Вставить("ФаксГрузополучателя", ?(ЗначениеЗаполнено(ФаксГрузополучателя), ФаксГрузополучателя, Неопределено));
		
		//Банковские реквизиты (для ТОРГ-12)
		Если НЕ ЭтоСФ Тогда
			ДанныеСчетаГрузополучателя = Новый Структура;
			Если НЕ ЭтоБГУ Тогда
				Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ДанныеСчетаГрузополучателя.Вставить("НомерСчета", ?(ЗначениеЗаполнено(Грузополучатель.ОсновнойБанковскийСчет), Грузополучатель.ОсновнойБанковскийСчет.НомерСчета, Неопределено));
					БанкГрузополучателя = ?(ЗначениеЗаполнено(Грузополучатель.ОсновнойБанковскийСчет), Грузополучатель.ОсновнойБанковскийСчет.Банк, Неопределено);
					ДанныеСчетаГрузополучателя.Вставить("НаимБанк", ?(ЗначениеЗаполнено(Грузополучатель.ОсновнойБанковскийСчет), БанкГрузополучателя.Наименование, Неопределено));
					ДанныеСчетаГрузополучателя.Вставить("БИК", ?(ЗначениеЗаполнено(Грузополучатель.ОсновнойБанковскийСчет), БанкГрузополучателя.Код, Неопределено));
					СтруктураДанных.Вставить("ДанныеСчетаГрузополучателя", ДанныеСчетаГрузополучателя);
				КонецЕсли;
			Иначе
				Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияУслуги") ИЛИ
					ТипЗнч(Документ) = Тип("ДокументСсылка.ОС_Реализация") ИЛИ
					ТипЗнч(Документ) = Тип("ДокументСсылка.МЗ_Реализация") Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	БанковскиеИКазначейскиеСчета.Ссылка
					|ИЗ
					|	Справочник.БанковскиеИКазначейскиеСчета КАК БанковскиеИКазначейскиеСчета
					|ГДЕ
					|	БанковскиеИКазначейскиеСчета.ПометкаУдаления = ЛОЖЬ
					|	И БанковскиеИКазначейскиеСчета.Закрыт = ЛОЖЬ
					|	И БанковскиеИКазначейскиеСчета.Владелец = &Владелец";
					Запрос.УстановитьПараметр("Владелец", Грузополучатель);
					Результат = Запрос.Выполнить().Выбрать();
					
					ЛицевойСчет = ?(Результат.Следующий(), Результат.Ссылка, Неопределено);
					
					Если НЕ ЛицевойСчет = Неопределено Тогда
						ДанныеСчетаГрузополучателя.Вставить("НомерСчета", ?(ЗначениеЗаполнено(ЛицевойСчет.Код), СокрЛП(ЛицевойСчет.Код), Неопределено));
						БанкГрузополучателя = ?(ЗначениеЗаполнено(ЛицевойСчет.Код), ЛицевойСчет.КассовыйОрган, Неопределено);
						ДанныеСчетаГрузополучателя.Вставить("НаимБанк", ?(ЗначениеЗаполнено(БанкГрузополучателя), БанкГрузополучателя.Наименование, Неопределено));
						ДанныеСчетаГрузополучателя.Вставить("БИК", ?(ЗначениеЗаполнено(БанкГрузополучателя), БанкГрузополучателя.Код, Неопределено));
						СтруктураДанных.Вставить("ДанныеСчетаГрузополучателя", ДанныеСчетаГрузополучателя);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Функция формирует структура данных для формирования превью формализованных документов
// (адреса, контактные данные, банковские реквизиты) с заполнением незаполненных данных эталонными значениями и описанием ошибок/предупреждений
// Параметры: Документ - Документ.Ссылка
//
// Возвращаемое значение: Структура
//
Функция СформироватьСтруктуруДанныхДляПревьюДокумента(Документ) Экспорт
	
	// Структура данных, полученных из 1С/сервиса	
	СтруктураДанных = Новый Структура;
	
 	СтруктураДанных.Вставить("ИдентификаторПолучателя", Неопределено);
	СтруктураДанных.Вставить("ИдентификаторОтправителя", Неопределено);	
	СтруктураДанных.Вставить("SubjectInfo_ЭДО", Неопределено);
	СтруктураДанных.Вставить("ИдентификаторЭДО", Неопределено);
	
	СтруктураДанных.Вставить("АдресОрганизации", Неопределено);
	СтруктураДанных.Вставить("Syn_ФИООрганизации", Неопределено);
	СтруктураДанных.Вставить("ТлфОрганизации", Неопределено);
	СтруктураДанных.Вставить("ДанныеСчетаОрганизации", Неопределено);
	
	СтруктураДанных.Вставить("АдресКонтрагента", Неопределено);
	СтруктураДанных.Вставить("Syn_ФИОКонтрагента", Неопределено);
	СтруктураДанных.Вставить("ТлфКонтрагента", Неопределено);
	СтруктураДанных.Вставить("ДанныеСчетаКонтрагента", Неопределено);
	
	СтруктураДанных.Вставить("АдресГрузоотправителя", Неопределено);
	СтруктураДанных.Вставить("ТлфГрузоотправителя", Неопределено);
	СтруктураДанных.Вставить("ДанныеСчетаГрузоотправителя", Неопределено);

	СтруктураДанных.Вставить("АдресГрузополучателя", Неопределено);
	СтруктураДанных.Вставить("ТлфГрузополучателя", Неопределено);
	СтруктураДанных.Вставить("ДанныеСчетаГрузополучателя", Неопределено);
	
	ЭтоКСФ = Ложь;
	
	Если НЕ ЭтоБГУ Тогда
		Контрагент = Документ.Контрагент;
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			// Для СФ
			МетаданныеДокумента = Документ.ДокументОснование.Метаданные();
			ЭтоСФ = Истина;
		Иначе
			// Для остальных
			МетаданныеДокумента = Документ.Метаданные();
			ЭтоСФ = Ложь;
		КонецЕсли;
	Иначе
		Если  ТипЗнч(Документ) = Тип("ДокументСсылка.ОС_Реализация") ИЛИ
			ТипЗнч(Документ) = Тип("ДокументСсылка.МЗ_Реализация") Тогда
			Контрагент = Документ.СубконтоСчетДебета2;
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.УслугиОказанные") Тогда
			Контрагент = Документ.Контрагент;
		КонецЕсли;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.НДС_СчетФактураВыданный") ИЛИ 
			ТипЗнч(Документ) = Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураВыданный") ИЛИ
			ТипЗнч(Документ) = Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный") Тогда
			// Для СФ
			Контрагент 						= Документ.Контрагент;
			МетаданныеДокумента 			= Документ.ДокументОснование.Метаданные();
			МетаданныеДокументаОснования 	= Документ.ДокументОснование.Метаданные();
			ЭтоСФ 	= Истина;
			ЭтоКСФ 	= ТипЗнч(Документ) = Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный");
		Иначе
			// Для остальных
			МетаданныеДокумента = Документ.Метаданные();
			ЭтоСФ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеСправочникаОрганизации = Метаданные.Справочники.Организации; 
			
	// Общие данные
	Попытка
		SubjectInfo_Контрагент = ExchangeService.GetSubjectInfo(Токен, ПолучитьЯщик(Контрагент));
		СтруктураДанных.Вставить("ИдентификаторПолучателя", SubjectInfo_Контрагент.ServiceCode);
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = "Не удалось получить данные контрагента [" + Строка(Контрагент) + "] в сервисе по причине: " + РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		СтруктураИсключения = ЗаполнитьСтруктуруИсключения(Неопределено, "12345", ТекстОшибкиSynerdocs, Истина);
		СтруктураДанных.Вставить("ИдентификаторПолучателя", СтруктураИсключения);
	КонецПопытки;
	
	Попытка
		SubjectInfo_Организация = ExchangeService.GetSubjectInfo(Токен, Syn_ЯщикОрганизации);
		СтруктураДанных.Вставить("ИдентификаторОтправителя", SubjectInfo_Организация.ServiceCode);
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = "Не удалось получить данные организации [" + Строка(Документ.Организация) + "] в сервисе по причине: " + РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		СтруктураИсключения = ЗаполнитьСтруктуруИсключения(Неопределено, "12345", ТекстОшибкиSynerdocs, Истина);		
		СтруктураДанных.Вставить("ИдентификаторОтправителя", СтруктураИсключения);
 	КонецПопытки;
	
	Попытка
		СтруктураДанных.Вставить("SubjectInfo_ЭДО", ExchangeService.GetSpecialOperatorInfo(Токен));
		СтруктураДанных.Вставить("ИдентификаторЭДО", СтруктураДанных.SubjectInfo_ЭДО.OperatorServiceCode);
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = "Не удалось получить данные оператора ЭДО по причине: " + РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		СтруктураИсключения = ЗаполнитьСтруктуруИсключения(Неопределено, "12345", ТекстОшибкиSynerdocs, Истина);		
		СтруктураДанных.Вставить("ИдентификаторЭДО", СтруктураИсключения);
		
		СтруктураЭДО = Новый Структура;
		СтруктураЭДО.Вставить("FirstName", Неопределено);
		СтруктураЭДО.Вставить("Inn", "7728075928");
		СтруктураЭДО.Вставить("IsJuridical", Истина);
		СтруктураЭДО.Вставить("IsOperator",	Ложь);
		СтруктураЭДО.Вставить("Kpp", "123455789");
		СтруктураЭДО.Вставить("LastName", Неопределено);
		СтруктураЭДО.Вставить("MiddleName", Неопределено);
		СтруктураЭДО.Вставить("Name", "synerdocs");
		СтруктураЭДО.Вставить("OperatorServiceCode", "2ig");
		СтруктураЭДО.Вставить("OrganizationType", "LegalEntity");
		СтруктураЭДО.Вставить("ServiceCode", "2TS000000-D361FC44-FAE2-4485-877A-8B9057DC1C6E");
		
		СтруктураИсключения = ЗаполнитьСтруктуруИсключения(Неопределено, СтруктураЭДО, ТекстОшибкиSynerdocs, Истина);				
		СтруктураДанных.Вставить("SubjectInfo_ЭДО", СтруктураИсключения);
 	КонецПопытки;
	
	// Данные организации
	АдресОрганизации = ПолучитьАдресКонтрагентаДляПревью(?(НЕ ЭтоБГУ, Документ.Организация, Документ.Учреждение), Истина, ?(НЕ ЭтоБГУ, ?(Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица), Справочники.ВидыКонтактнойИнформации.ЮрАдресУчреждения));
	
	//Не нашли юр адрес, ищем факт.
	Если НЕ АдресОрганизации.АдресНайден Тогда
		АдресОрганизации = ПолучитьАдресКонтрагентаДляПревью(?(НЕ ЭтоБГУ, Документ.Организация, Документ.Учреждение), Истина, ?(НЕ ЭтоБГУ, ?(Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица), Справочники.ВидыКонтактнойИнформации.ФактАдресУчреждения));	
	КонецЕсли;
	
	СтруктураДанных.Вставить("АдресОрганизации", АдресОрганизации);
	
	Попытка
		Если НЕ ЭтоБГУ Тогда
			Syn_Организация = ExchangeService.GetOrganizationByInnKpp(Токен, Документ.Организация.ИНН, Документ.Организация.КПП);
		Иначе
			Syn_Организация = ExchangeService.GetOrganizationByInnKpp(Токен, Документ.Учреждение.ИНН, Документ.Учреждение.КПП);
		КонецЕсли;
		
		Если Не Syn_Организация.IsJuridical Тогда
			//Для ИП берем из сервиса ФИО
			Syn_ФИООрганизации = Новый Структура;
			Syn_ФИООрганизации.Вставить("Фамилия", Syn_Организация.LastName);
			Syn_ФИООрганизации.Вставить("Имя", Syn_Организация.FirstName);
			Syn_ФИООрганизации.Вставить("Отчество", Syn_Организация.MiddleName);
			
		Иначе
			Syn_ФИООрганизации = НЕОПРЕДЕЛЕНО;
		КонецЕсли;
		
		СтруктураДанных.Вставить("Syn_ФИООрганизации", Syn_ФИООрганизации);
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = "Не удалось получить данные организации [" + Строка(Документ.Организация) + "] в сервисе по причине: " + РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		Syn_ФИООрганизации = Новый Структура;
		Syn_ФИООрганизации.Вставить("Фамилия", "Фамилия");
		Syn_ФИООрганизации.Вставить("Имя", "Имя");
		Syn_ФИООрганизации.Вставить("Отчество", "Отчество");
        		
		СтруктураИсключения = ЗаполнитьСтруктуруИсключения(Неопределено, Syn_ФИООрганизации, ТекстОшибкиSynerdocs, Истина);
		СтруктураДанных.Вставить("Syn_ФИООрганизации", СтруктураИсключения);
 	КонецПопытки;
	
	//Контактные данные
	ТелефонОрганизации = ПолучитьТелефон(?(НЕ ЭтоБГУ, Документ.Организация, Документ.Учреждение));
	Если Не ТелефонОрганизации = Неопределено Тогда
		СтруктураДанных.Вставить("ТлфОрганизации", Лев(ТелефонОрганизации, 20));
	Иначе
		ОписаниеОшибкиСтрокой = "Не удалось получить телефон организации";
		СтруктураИсключения = ЗаполнитьСтруктуруИсключения(Неопределено, "81111111111", ОписаниеОшибкиСтрокой, Ложь);
        СтруктураДанных.Вставить("ТлфОрганизации", СтруктураИсключения);
	КонецЕсли;
	
	ФаксОрганизации = ПолучитьТелефон(?(НЕ ЭтоБГУ, Документ.Организация, Документ.Учреждение), Истина);
	Если НЕ ФаксОрганизации = Неопределено Тогда
		СтруктураДанных.Вставить("ФаксОрганизации", Лев(ФаксОрганизации, 20));
	Иначе
		ОписаниеОшибкиСтрокой = "Не удалось получить факс организации";
		СтруктураИсключения = ЗаполнитьСтруктуруИсключения(Неопределено, "81111111111", ОписаниеОшибкиСтрокой, Ложь);
        СтруктураДанных.Вставить("ФаксОрганизации", СтруктураИсключения);
	КонецЕсли;

	//Банковские реквизиты (Для ТОРГ-12)
	Если НЕ ЭтоСФ Тогда
		ДанныеСчетаОрганизации = Новый Структура;
		Если НЕ ЭтоБГУ Тогда
			Если ЕстьРеквизитДокумента("БанковскийСчетОрганизации", Документ.Метаданные()) Тогда
				Если ЗначениеЗаполнено(Документ.БанковскийСчетОрганизации.НомерСчета) Тогда
					СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.БанковскийСчетОрганизации.НомерСчета);
					ДанныеСчетаОрганизации.Вставить("НомерСчета", Документ.БанковскийСчетОрганизации.НомерСчета); 
					Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
						ОписаниеОшибкиСтрокой 	= "Номер счета должен содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".";
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.БанковскийСчетОрганизации.НомерСчета, "11111222223333344444", ОписаниеОшибкиСтрокой, Истина);
						ДанныеСчетаОрганизации.Вставить("НомерСчета", СтруктураИсключения);
					КонецЕсли;
					
					Если СтрДлина(Документ.БанковскийСчетОрганизации.НомерСчета) <> 20 Тогда
						Если НЕ ДанныеСчетаОрганизации.НомерСчета.Свойство("ЭтоОшибка") Тогда
							ОписаниеОшибкиСтрокой 	= "Номер счета не должен превышать 20 символов"; 
							СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.БанковскийСчетОрганизации.НомерСчета, "11111222223333344444", ОписаниеОшибкиСтрокой, Истина);
							ДанныеСчетаОрганизации.Вставить("НомерСчета", СтруктураИсключения);
						Иначе
							ДанныеСчетаОрганизации.НомерСчета.ОписаниеОшибки = ДанныеСчетаОрганизации.НомерСчета.ОписаниеОшибки + " Так же не должен превышать 20 символов";
						КонецЕсли;
					КонецЕсли;
					
					БанкОрганизации =  Документ.БанковскийСчетОрганизации.Банк;
					
					Если ЗначениеЗаполнено(БанкОрганизации.Наименование) Тогда
						ДанныеСчетаОрганизации.Вставить("НаимБанк", БанкОрганизации.Наименование);
					Иначе
						ОписаниеОшибкиСтрокой 	= "У банка не заполенено наименование";
						СтруктураИсключения		= ЗаполнитьСтруктуруИсключения(БанкОрганизации.Наименование, "Наименование банка", ОписаниеОшибкиСтрокой, Ложь);
						ДанныеСчетаОрганизации.Вставить("НаимБанк", СтруктураИсключения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(БанкОрганизации.Код) Тогда
						СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", БанкОрганизации.Код);
						ДанныеСчетаОрганизации.Вставить("БИК", БанкОрганизации.Код); 
						Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
							ОписаниеОшибкиСтрокой 	= "БИК содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + "."; 
							СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанкОрганизации.Код, "041234567", ОписаниеОшибкиСтрокой, Истина);
							ДанныеСчетаОрганизации.Вставить("БИК", СтруктураИсключения);
						КонецЕсли;
						
						Если СтрДлина(БанкОрганизации.Код) <> 9 Тогда
							Если НЕ ДанныеСчетаОрганизации.БИК.Свойство("ЭтоОшибка") Тогда
								ОписаниеОшибкиСтрокой 	= "БИК не должен превышать 9 символов"; 
								СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанкОрганизации.Код, "041234567", ОписаниеОшибкиСтрокой, Истина);
								ДанныеСчетаОрганизации.Вставить("БИК", СтруктураИсключения);
							Иначе
								ДанныеСчетаОрганизации.БИК.ОписаниеОшибки = ДанныеСчетаОрганизации.БИК.ОписаниеОшибки + " Так же не должен превышать 9 символов";
							КонецЕсли;
						КонецЕсли;
					Иначе
						ОписаниеОшибкиСтрокой 	= "Не заполнен БИК"; 
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "041234567", ОписаниеОшибкиСтрокой, Истина);
						ДанныеСчетаОрганизации.Вставить("БИК", СтруктураИсключения);
					КонецЕсли;
					СтруктураДанных.Вставить("ДанныеСчетаОрганизации", ДанныеСчетаОрганизации);
					
				ИначеЕсли ЗначениеЗаполнено(Документ.Организация.ОсновнойБанковскийСчет) Тогда
					
					СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Организация.ОсновнойБанковскийСчет.НомерСчета);
					ДанныеСчетаОрганизации.Вставить("НомерСчета", Документ.Организация.ОсновнойБанковскийСчет.НомерСчета); 
					Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
						ОписаниеОшибкиСтрокой 	= "Номер счета должен содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".";
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.ОсновнойБанковскийСчет.НомерСчета, "11111222223333344444", ОписаниеОшибкиСтрокой, Истина);
						ДанныеСчетаОрганизации.Вставить("НомерСчета", СтруктураИсключения);
					КонецЕсли;
					
					Если СтрДлина(Документ.Организация.ОсновнойБанковскийСчет.НомерСчета) <> 20 Тогда
						Если НЕ ДанныеСчетаОрганизации.НомерСчета.Свойство("ЭтоОшибка") Тогда
							ОписаниеОшибкиСтрокой 	= "Номер счета не должен превышать 20 символов"; 
							СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.ОсновнойБанковскийСчет.НомерСчета, "11111222223333344444", ОписаниеОшибкиСтрокой, Истина);
							ДанныеСчетаОрганизации.Вставить("НомерСчета", СтруктураИсключения);
						Иначе
							ДанныеСчетаОрганизации.НомерСчета.ОписаниеОшибки = ДанныеСчетаОрганизации.НомерСчета.ОписаниеОшибки + " Так же не должен превышать 20 символов";
						КонецЕсли;
					КонецЕсли;
					
					БанкОрганизации =  Документ.Организация.ОсновнойБанковскийСчет.Банк;
					
					Если ЗначениеЗаполнено(БанкОрганизации.Наименование) Тогда
						ДанныеСчетаОрганизации.Вставить("НаимБанк", БанкОрганизации.Наименование);
					Иначе
						ОписаниеОшибкиСтрокой 	= "У банка не заполенено наименование";
						СтруктураИсключения		= ЗаполнитьСтруктуруИсключения(БанкОрганизации.Наименование, "Наименование банка", ОписаниеОшибкиСтрокой, Ложь);
						ДанныеСчетаОрганизации.Вставить("НаимБанк", СтруктураИсключения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(БанкОрганизации.Код) Тогда
						СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", БанкОрганизации.Код);
						ДанныеСчетаОрганизации.Вставить("БИК", БанкОрганизации.Код); 
						Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
							ОписаниеОшибкиСтрокой 	= "БИК содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + "."; 
							СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанкОрганизации.Код, "041234567", ОписаниеОшибкиСтрокой, Истина);
							ДанныеСчетаОрганизации.Вставить("БИК", СтруктураИсключения);
						КонецЕсли;
						
						Если СтрДлина(БанкОрганизации.Код) <> 9 Тогда
							Если НЕ ДанныеСчетаОрганизации.БИК.Свойство("ЭтоОшибка") Тогда
								ОписаниеОшибкиСтрокой 	= "БИК не должен превышать 9 символов"; 
								СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанкОрганизации.Код, "041234567", ОписаниеОшибкиСтрокой, Истина);
								ДанныеСчетаОрганизации.Вставить("БИК", СтруктураИсключения);
							Иначе
								ДанныеСчетаОрганизации.БИК.ОписаниеОшибки = ДанныеСчетаОрганизации.БИК.ОписаниеОшибки + " Так же не должен превышать 9 символов";
							КонецЕсли;
						КонецЕсли;
					Иначе
						ОписаниеОшибкиСтрокой 	= "Не заполнен БИК"; 
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "041234567", ОписаниеОшибкиСтрокой, Истина);
						ДанныеСчетаОрганизации.Вставить("БИК", СтруктураИсключения);
					КонецЕсли;
					СтруктураДанных.Вставить("ДанныеСчетаОрганизации", ДанныеСчетаОрганизации);
                					
				Иначе
					
					ОписаниеОшибкиСтрокой 	= "Не найден расчетный счет организации";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "Номер счета, наименование и БИК банка", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ДанныеСчетаОрганизации", СтруктураИсключения);
				КонецЕсли;
			Иначе
				БанковскийСчетОрганизации = Документ.Организация.ОсновнойБанковскийСчет;
				
				Если ЗначениеЗаполнено(БанковскийСчетОрганизации.НомерСчета) Тогда
					СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", БанковскийСчетОрганизации.НомерСчета);
					ДанныеСчетаОрганизации.Вставить("НомерСчета", БанковскийСчетОрганизации.НомерСчета); 
					Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
						ОписаниеОшибкиСтрокой 	= "Номер счета должен содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".";
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.БанковскийСчетОрганизации.НомерСчета, "11111222223333344444", ОписаниеОшибкиСтрокой, Истина);
						ДанныеСчетаОрганизации.Вставить("НомерСчета", СтруктураИсключения);
					КонецЕсли;
					
					Если СтрДлина(БанковскийСчетОрганизации.НомерСчета) <> 20 Тогда
						Если НЕ ДанныеСчетаОрганизации.НомерСчета.Свойство("ЭтоОшибка") Тогда
							ОписаниеОшибкиСтрокой 	= "Номер счета не должен превышать 20 символов"; 
							СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанковскийСчетОрганизации.НомерСчета, "11111222223333344444", ОписаниеОшибкиСтрокой, Истина);
							ДанныеСчетаОрганизации.Вставить("НомерСчета", СтруктураИсключения);
						Иначе
							ДанныеСчетаОрганизации.НомерСчета.ОписаниеОшибки = ДанныеСчетаОрганизации.НомерСчета.ОписаниеОшибки + " Так же не должен превышать 20 символов";
						КонецЕсли;
					КонецЕсли;
					
					БанкОрганизации =  БанковскийСчетОрганизации.Банк;
					
					Если ЗначениеЗаполнено(БанкОрганизации.Наименование) Тогда
						ДанныеСчетаОрганизации.Вставить("НаимБанк", БанкОрганизации.Наименование);
					Иначе
						ОписаниеОшибкиСтрокой 	= "У банка не заполенено наименование";
						СтруктураИсключения		= ЗаполнитьСтруктуруИсключения(БанкОрганизации.Наименование, "Наименование банка", ОписаниеОшибкиСтрокой, Ложь);
						ДанныеСчетаОрганизации.Вставить("НаимБанк", СтруктураИсключения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(БанкОрганизации.Код) Тогда
						СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", БанкОрганизации.Код);
						ДанныеСчетаОрганизации.Вставить("БИК", БанкОрганизации.Код); 
						Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
							ОписаниеОшибкиСтрокой 	= "БИК содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + "."; 
							СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанкОрганизации.Код, "041234567", ОписаниеОшибкиСтрокой, Истина);
							ДанныеСчетаОрганизации.Вставить("БИК", СтруктураИсключения);
						КонецЕсли;
						
						Если СтрДлина(БанкОрганизации.Код) <> 9 Тогда
							Если НЕ ДанныеСчетаОрганизации.БИК.Свойство("ЭтоОшибка") Тогда
								ОписаниеОшибкиСтрокой 	= "БИК не должен превышать 9 символов"; 
								СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанкОрганизации.Код, "041234567", ОписаниеОшибкиСтрокой, Истина);
								ДанныеСчетаОрганизации.Вставить("БИК", СтруктураИсключения);
							Иначе
								ДанныеСчетаОрганизации.БИК.ОписаниеОшибки = ДанныеСчетаОрганизации.БИК.ОписаниеОшибки + " Так же не должен превышать 9 символов";
							КонецЕсли;
						КонецЕсли;
					Иначе
						ОписаниеОшибкиСтрокой 	= "Не заполнен БИК"; 
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "041234567", ОписаниеОшибкиСтрокой, Истина);
						ДанныеСчетаОрганизации.Вставить("БИК", СтруктураИсключения);
					КонецЕсли;
					СтруктураДанных.Вставить("ДанныеСчетаОрганизации", ДанныеСчетаОрганизации);
                Иначе
					ОписаниеОшибкиСтрокой 	= "Не найден расчетный счет организации";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "Номер счета, наименование и БИК банка", ОписаниеОшибкиСтрокой, Ложь);
					СтруктураДанных.Вставить("ДанныеСчетаОрганизации", СтруктураИсключения);
				КонецЕсли;
            КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	// Данные контрагента
	АдресКонтрагента = ПолучитьАдресКонтрагентаДляПревью(Контрагент, Неопределено, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	//Не нашли юр. адрес, ищем факт
	Если НЕ АдресКонтрагента.АдресНайден Тогда
		АдресКонтрагента = ПолучитьАдресКонтрагентаДляПревью(Контрагент, Неопределено, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	КонецЕсли;
	
	СтруктураДанных.Вставить("АдресКонтрагента", АдресКонтрагента);
		
	Попытка
		Syn_Контрагент = ExchangeService.GetOrganizationByInnKpp(Токен, Контрагент.ИНН, Контрагент.КПП);
		Если Не Syn_Контрагент.IsJuridical Тогда
			//Для ИП берем из сервиса ФИО
			Syn_ФИОКонтрагента = Новый Структура;
			Syn_ФИОКонтрагента.Вставить("Фамилия", Syn_Контрагент.LastName);
			Syn_ФИОКонтрагента.Вставить("Имя", Syn_Контрагент.FirstName);
			Syn_ФИОКонтрагента.Вставить("Отчество", Syn_Контрагент.MiddleName);
		Иначе
			Syn_ФИОКонтрагента = НЕОПРЕДЕЛЕНО;
		КонецЕсли;
		СтруктураДанных.Вставить("Syn_ФИОКонтрагента", Syn_ФИОКонтрагента);
	Исключение
		ОписаниеОшибкиСтрокой 	= ОписаниеОшибки();
		ТекстОшибкиSynerdocs 	= "Не удалось получить данные организации [" + Строка(Контрагент) + "] в сервисе по причине: " + РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		Syn_ФИОКонтрагента = Новый Структура;
		Syn_ФИОКонтрагента.Вставить("Фамилия", "Фамилия");
		Syn_ФИОКонтрагента.Вставить("Имя", "Имя");
		Syn_ФИОКонтрагента.Вставить("Отчество", "Отчество");
        		
		СтруктураИсключения = ЗаполнитьСтруктуруИсключения(Неопределено, Syn_ФИОКонтрагента, ТекстОшибкиSynerdocs, Истина);
        СтруктураДанных.Вставить("Syn_ФИОКонтрагента", СтруктураИсключения);
	КонецПопытки;
	
	//Контактные данные
	ТелефонКонтрагента = ПолучитьТелефон(Контрагент);
	Если ЗначениеЗаполнено(ТелефонКонтрагента) Тогда
		СтруктураДанных.Вставить("ТлфКонтрагента", Лев(ТелефонКонтрагента, 20));
	Иначе
		ОписаниеОшибкиСтрокой 	= "Не удалось получить телефон контрагента [" + Строка(Контрагент) + "]"; 
		СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "81111111111", ОписаниеОшибкиСтрокой, Ложь);
		СтруктураДанных.Вставить("ТлфКонтрагента", СтруктураИсключения);
	КонецЕсли;
	
	ФаксКонтрагента = ПолучитьТелефон(Контрагент);
	
	Если ЗначениеЗаполнено(ФаксКонтрагента) Тогда
		СтруктураДанных.Вставить("ФаксКонтрагента", Лев(ФаксКонтрагента, 20));
	Иначе
		ОписаниеОшибкиСтрокой 	= "Не удалось получить факс контрагента [" + Строка(Контрагент) + "]"; 
		СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "81111111111", ОписаниеОшибкиСтрокой, Ложь);
		СтруктураДанных.Вставить("ФаксКонтрагента", СтруктураИсключения);
	КонецЕсли;
		
	//Банковские реквизиты (для ТОРГ-12)
	Если НЕ ЭтоСФ Тогда
		ДанныеСчетаКонтрагента = Новый Структура;
		Если НЕ ЭтоБГУ Тогда
			Если ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет.НомерСчета) Тогда
				СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Контрагент.ОсновнойБанковскийСчет.НомерСчета);
				ДанныеСчетаКонтрагента.Вставить("НомерСчета", Контрагент.ОсновнойБанковскийСчет.НомерСчета); 
				Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
					ОписаниеОшибкиСтрокой 	= "Номер счета должен содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Контрагент.ОсновнойБанковскийСчет.НомерСчета, "11112222333344445555", ОписаниеОшибкиСтрокой, Истина);
					ДанныеСчетаКонтрагента.Вставить("НомерСчета", СтруктураИсключения);
				КонецЕсли;
				
				Если СтрДлина(Контрагент.ОсновнойБанковскийСчет.НомерСчета) <> 20 Тогда
					Если НЕ ДанныеСчетаКонтрагента.НомерСчета.Свойство("ЭтоОшибка") Тогда
						ОписаниеОшибкиСтрокой 	= "Номер счета не должен превышать 20 символов";
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Контрагент.ОсновнойБанковскийСчет.НомерСчета, "11112222333344445555", ОписаниеОшибкиСтрокой, Истина);
						ДанныеСчетаКонтрагента.Вставить("НомерСчета", СтруктураИсключения);
					Иначе
						ДанныеСчетаКонтрагента.НомерСчета.ОписаниеОшибки = ДанныеСчетаКонтрагента.НомерСчета.ОписаниеОшибки + " Так же не должен превышать 20 символов";
					КонецЕсли;
				КонецЕсли;
				
				БанкКонтрагента =  Контрагент.ОсновнойБанковскийСчет.Банк;
				
				Если ЗначениеЗаполнено(БанкКонтрагента.Наименование) Тогда
					ДанныеСчетаКонтрагента.Вставить("НаимБанк", БанкКонтрагента.Наименование);
				Иначе
					ОписаниеОшибкиСтрокой 	= "У банка не заполенено наименование";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанкКонтрагента.Наименование, "Наименование банка", ОписаниеОшибкиСтрокой, Ложь);
					ДанныеСчетаКонтрагента.Вставить("НаимБанк", СтруктураИсключения);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(БанкКонтрагента.Код) Тогда
					СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", БанкКонтрагента.Код);
					ДанныеСчетаКонтрагента.Вставить("БИК", БанкКонтрагента.Код); 
					Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
						ОписаниеОшибкиСтрокой 	= "БИК содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".";
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанкКонтрагента.Код, "041234567", ОписаниеОшибкиСтрокой, Истина);
						ДанныеСчетаКонтрагента.Вставить("БИК", СтруктураИсключения);
					КонецЕсли;
					
					Если СтрДлина(БанкКонтрагента.Код) <> 9 Тогда
						Если НЕ ДанныеСчетаКонтрагента.БИК.Свойство("ЭтоОшибка") Тогда
							ОписаниеОшибкиСтрокой 	= "БИК не должен превышать 9 символов";
							СтруктураИсключения 	=  ЗаполнитьСтруктуруИсключения(БанкКонтрагента.Код, "041234567", ОписаниеОшибкиСтрокой, Истина);
							ДанныеСчетаКонтрагента.Вставить("БИК", СтруктураИсключения);
						Иначе
							ДанныеСчетаКонтрагента.БИК.ОписаниеОшибки = ДанныеСчетаКонтрагента.БИК.ОписаниеОшибки + " Так же не должен превышать 9 символов";
						КонецЕсли;
					КонецЕсли;
				Иначе
					ОписаниеОшибкиСтрокой 	= "Не заполнен БИК";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанкКонтрагента.Код, "041234567", ОписаниеОшибкиСтрокой, Истина);
					ДанныеСчетаКонтрагента.Вставить("БИК", СтруктураИсключения);
				КонецЕсли;
				СтруктураДанных.Вставить("ДанныеСчетаКонтрагента", ДанныеСчетаКонтрагента);
			Иначе
				ОписаниеОшибкиСтрокой 	= "Не найден расчетный счет контрагента"; 
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "Номер счета, наименование и БИК банка", ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ДанныеСчетаКонтрагента", СтруктураИсключения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Данные грузоотправителя
	Если НЕ ЭтоБГУ И ЕстьРеквизитДокумента("Грузоотправитель", МетаданныеДокумента) ИЛИ 
		ЭтоБГУ И НЕ ЭтоКСФ И ЕстьРеквизитДокумента("Грузоотправитель", ?(ЭтоСФ, МетаданныеДокументаОснования, МетаданныеДокумента)) Тогда
		
		Грузоотправитель = ?(НЕ ЭтоСф, Документ.Грузоотправитель, Документ.ДокументОснование.Грузоотправитель);
		
		Если (Грузоотправитель = ?(НЕ ЭтоБГУ, Документ.Организация, Документ.Учреждение)) ИЛИ (НЕ ЗначениеЗаполнено(Грузоотправитель)) Тогда
			Грузоотправитель = ?(НЕ ЭтоБГУ, Документ.Организация, Документ.Учреждение);
			АдресГрузоотправителя = ПолучитьАдресКонтрагентаДляПревью(Грузоотправитель, Истина, ?(НЕ ЭтоБГУ, ?(Грузоотправитель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица), Справочники.ВидыКонтактнойИнформации.ФактАдресУчреждения));
			
			Если НЕ АдресГрузоотправителя.АдресНайден Тогда
				АдресГрузоотправителя =	ПолучитьАдресКонтрагентаДляПревью(Грузоотправитель, Истина, ?(НЕ ЭтоБГУ, ?(Грузоотправитель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица), Справочники.ВидыКонтактнойИнформации.ЮрАдресУчреждения));
			КонецЕсли;
						
			СтруктураДанных.Вставить("ДанныеСчетаГрузоотправителя", ДанныеСчетаОрганизации);
		Иначе
			Грузоотправитель = ?(НЕ ЭтоСФ, Документ.Грузоотправитель, Документ.ДокументОснование.Грузоотправитель);
			
			Если НЕ ЭтоБГУ Тогда
				АдресГрузоотправителя = ПолучитьАдресКонтрагентаДляПревью(Грузоотправитель, Неопределено, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
				
				Если НЕ АдресГрузоотправителя.АдресНайден Тогда
					АдресГрузоотправителя = ПолучитьАдресКонтрагентаДляПревью(Грузоотправитель, Неопределено, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				КонецЕсли;
			Иначе
				АдресГрузоотправителя = ПолучитьАдресКонтрагентаДляПревью(Грузоотправитель, Неопределено, ?(Грузоотправитель.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Организация, 
				Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица));
				
				Если НЕ АдресГрузоотправителя.АдресНайден Тогда
					АдресГрузоотправителя = ПолучитьАдресКонтрагентаДляПревью(Грузоотправитель, Неопределено, ?(Грузоотправитель.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Организация, 
					Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		СтруктураДанных.Вставить("АдресГрузоотправителя", АдресГрузоотправителя);
		
		//Банковские реквизиты (для ТОРГ-12)
		Если НЕ ЭтоСФ Тогда
			Если Грузоотправитель = Организация Тогда
				СтруктураДанных.Вставить("ДанныеСчетаГрузоотправителя", СтруктураДанных.ДанныеСчетаОрганизации);
			Иначе
				ДанныеСчетаГрузоотправителя = Новый Структура;
				Если НЕ ЭтоБГУ Тогда
					Если ЗначениеЗаполнено(Грузоотправитель.ОсновнойБанковскийСчет) Тогда
						ДанныеСчетаГрузоотправителя.Вставить("НомерСчета", Грузоотправитель.ОсновнойБанковскийСчет.НомерСчета);	
						СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Грузоотправитель.ОсновнойБанковскийСчет.НомерСчета);
						
						Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
							ОписаниеОшибкиСтрокой 	= "Номер счета должен содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".";
							СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузоотправитель.ОсновнойБанковскийСчет.НомерСчета, "11112222333344445555", ОписаниеОшибкиСтрокой, Истина);
							ДанныеСчетаГрузоотправителя.Вставить("НомерСчета", СтруктураИсключения);
						КонецЕсли;
						
						Если СтрДлина(Грузоотправитель.ОсновнойБанковскийСчет.НомерСчета) <> 20 Тогда
							Если НЕ ДанныеСчетаГрузоотправителя.НомерСчета.Свойство("ЭтоОшибка") Тогда
								ОписаниеОшибкиСтрокой 	= "Номер счета не должен превышать 20 символов";
								СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузоотправитель.ОсновнойБанковскийСчет.НомерСчета, "11112222333344445555", ОписаниеОшибкиСтрокой, Истина);
								ДанныеСчетаГрузоотправителя.Вставить("НомерСчета", СтруктураИсключения);
							Иначе
								ДанныеСчетаГрузоотправителя.НомерСчета.ОписаниеОшибки = ДанныеСчетаГрузоотправителя.НомерСчета.ОписаниеОшибки + " Так же не должен превышать 20 символов";
							КонецЕсли;
						КонецЕсли;
						
						БанкГрузоотправителя =  Грузоотправитель.ОсновнойБанковскийСчет.Банк;
						
						Если ЗначениеЗаполнено(БанкГрузоотправителя.Наименование) Тогда
							ДанныеСчетаГрузоотправителя.Вставить("НаимБанк", БанкГрузоотправителя.Наименование);
						Иначе
							ОписаниеОшибкиСтрокой 	= "У банка не заполенено наименование";
							СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "Наименование банка", ОписаниеОшибкиСтрокой, Ложь);
							ДанныеСчетаГрузоотправителя.Вставить("НаимБанк", СтруктураИсключения);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(БанкГрузоотправителя.Код) Тогда
							СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", БанкГрузоотправителя.Код);
							ДанныеСчетаГрузоотправителя.Вставить("БИК", БанкГрузоотправителя.Код); 
							Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
								ОписаниеОшибкиСтрокой 	= "БИК содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".";
								СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанкГрузоотправителя.Код, "041234567", ОписаниеОшибкиСтрокой, Истина);
								ДанныеСчетаГрузоотправителя.Вставить("БИК", СтруктураИсключения);
							КонецЕсли;
							
							Если СтрДлина(БанкГрузоотправителя.Код) <> 9 Тогда
								Если НЕ ДанныеСчетаГрузоотправителя.БИК.Свойство("ЭтоОшибка") Тогда
									ОписаниеОшибкиСтрокой 	= "БИК не должен превышать 9 символов";
									СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанкГрузоотправителя.Код, "041234567", ОписаниеОшибкиСтрокой, Истина);
									ДанныеСчетаГрузоотправителя.Вставить("БИК", СтруктураИсключения);
								Иначе
									ДанныеСчетаГрузоотправителя.БИК.ОписаниеОшибки = ДанныеСчетаГрузоотправителя.БИК.ОписаниеОшибки + " Так же не должен превышать 9 символов";
								КонецЕсли;
							КонецЕсли;
						Иначе
							ОписаниеОшибкиСтрокой 	= "Не заполнен БИК";
							СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(БанкГрузоотправителя.Код, "041234567", ОписаниеОшибкиСтрокой, Истина);
							ДанныеСчетаГрузоотправителя.Вставить("БИК", СтруктураИсключения);
						КонецЕсли;
						СтруктураДанных.Вставить("ДанныеСчетаГрузоотправителя", ДанныеСчетаГрузоотправителя);
					Иначе
						ОписаниеОшибкиСтрокой 	= "Не найден расчетный счет грузоотправителя";
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "Номер счета, наименование и БИК банка", ОписаниеОшибкиСтрокой,  Истина);
						СтруктураДанных.Вставить("ДанныеСчетаГрузоотправителя", СтруктураИсключения);
					КонецЕсли;
				Иначе
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	БанковскиеИКазначейскиеСчета.Ссылка
					|ИЗ
					|	Справочник.БанковскиеИКазначейскиеСчета КАК БанковскиеИКазначейскиеСчета
					|ГДЕ
					|	БанковскиеИКазначейскиеСчета.ПометкаУдаления = ЛОЖЬ
					|	И БанковскиеИКазначейскиеСчета.Закрыт = ЛОЖЬ
					|	И БанковскиеИКазначейскиеСчета.Владелец = &Владелец";
					Запрос.УстановитьПараметр("Владелец", Грузоотправитель);
					Результат = Запрос.Выполнить().Выбрать();
					ЛицевойСчет = ?(Результат.Следующий(), Результат.Ссылка, Неопределено);
					Если НЕ ЛицевойСчет = Неопределено Тогда
						ДанныеСчетаГрузоотправителя.Вставить("НомерСчета", ЛицевойСчет.Код);	
						СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", ЛицевойСчет.Код);
						
						Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
							СтруктураИсключения = Новый Структура;
							СтруктураИсключения.Вставить("ТекущееЗначение", ЛицевойСчет.Код);
							СтруктураИсключения.Вставить("ЭталонноеЗначение", "11112222333344445555");
							СтруктураИсключения.Вставить("ОписаниеОшибки", "Номер счета должен содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".");
							СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
							ДанныеСчетаГрузоотправителя.Вставить("НомерСчета", СтруктураИсключения);
						КонецЕсли;
						
						Если СтрДлина(ЛицевойСчет.Код) <> 20 Тогда
							Если НЕ ДанныеСчетаГрузоотправителя.НомерСчета.Свойство("ЭтоОшибка") Тогда
								СтруктураИсключения = Новый Структура;
								СтруктураИсключения.Вставить("ТекущееЗначение", ЛицевойСчет.Код);
								СтруктураИсключения.Вставить("ЭталонноеЗначение", "11112222333344445555");
								СтруктураИсключения.Вставить("ОписаниеОшибки", "Номер счета не должен превышать 20 символов");
								СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
								ДанныеСчетаГрузоотправителя.Вставить("НомерСчета", СтруктураИсключения);
							Иначе
								ДанныеСчетаГрузоотправителя.НомерСчета.ОписаниеОшибки = ДанныеСчетаГрузоотправителя.НомерСчета.ОписаниеОшибки + " Так же не должен превышать 20 символов";
							КонецЕсли;
						КонецЕсли;
						
						БанкГрузоотправителя =  ЛицевойСчет.КассовыйОрган;
						
						Если ЗначениеЗаполнено(БанкГрузоотправителя.Наименование) Тогда
							ДанныеСчетаГрузоотправителя.Вставить("НаимБанк", БанкГрузоотправителя.Наименование);
						Иначе
							СтруктураИсключения = Новый Структура;
							СтруктураИсключения.Вставить("ТекущееЗначение", БанкГрузоотправителя.Наименование);
							СтруктураИсключения.Вставить("ЭталонноеЗначение", "Наименование банка");
							СтруктураИсключения.Вставить("ОписаниеОшибки", "У банка не заполенено наименование");
							СтруктураИсключения.Вставить("ЭтоОшибка", Ложь);
							ДанныеСчетаГрузоотправителя.Вставить("НаимБанк", СтруктураИсключения);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(БанкГрузоотправителя.Код) Тогда
							СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", БанкГрузоотправителя.Код);
							ДанныеСчетаГрузоотправителя.Вставить("БИК", БанкГрузоотправителя.Код); 
							Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
								СтруктураИсключения = Новый Структура;
								СтруктураИсключения.Вставить("ТекущееЗначение", БанкГрузоотправителя.Код);
								СтруктураИсключения.Вставить("ЭталонноеЗначение", "041234567");
								СтруктураИсключения.Вставить("ОписаниеОшибки", "БИК содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".");
								СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
								ДанныеСчетаГрузоотправителя.Вставить("БИК", СтруктураИсключения);
							КонецЕсли;
							
							Если СтрДлина(БанкГрузоотправителя.Код) <> 9 Тогда
								Если НЕ ДанныеСчетаГрузоотправителя.БИК.Свойство("ЭтоОшибка") Тогда
									СтруктураИсключения = Новый Структура;
									СтруктураИсключения.Вставить("ТекущееЗначение", БанкГрузоотправителя.Код);
									СтруктураИсключения.Вставить("ЭталонноеЗначение", "041234567");
									СтруктураИсключения.Вставить("ОписаниеОшибки", "БИК не должен превышать 9 символов");
									СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
									ДанныеСчетаГрузоотправителя.Вставить("БИК", СтруктураИсключения);
								Иначе
									ДанныеСчетаГрузоотправителя.БИК.ОписаниеОшибки = ДанныеСчетаГрузоотправителя.БИК.ОписаниеОшибки + " Так же не должен превышать 9 символов";
								КонецЕсли;
							КонецЕсли;
						Иначе
							СтруктураИсключения = Новый Структура;
							СтруктураИсключения.Вставить("ТекущееЗначение", Неопределено);
							СтруктураИсключения.Вставить("ЭталонноеЗначение", "041234567");
							СтруктураИсключения.Вставить("ОписаниеОшибки", "Не заполнен БИК");
							СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
							ДанныеСчетаГрузоотправителя.Вставить("БИК", СтруктураИсключения);
						КонецЕсли;
						СтруктураДанных.Вставить("ДанныеСчетаГрузоотправителя", ДанныеСчетаГрузоотправителя);
					Иначе
						СтруктураИсключения = Новый Структура;
						СтруктураИсключения.Вставить("ТекущееЗначение", Неопределено);
						СтруктураИсключения.Вставить("ЭталонноеЗначение", "Номер счета, наименование и БИК банка");
						СтруктураИсключения.Вставить("ОписаниеОшибки", "Не найден расчетный счет контрагента");
						СтруктураИсключения.Вставить("ЭтоОшибка", Ложь);
						СтруктураДанных.Вставить("ДанныеСчетаГрузоотправителя", СтруктураИсключения);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	//Контактные данные
	ТелефонГрузоотправителя = ПолучитьТелефон(Грузоотправитель);
	
	Если ЗначениеЗаполнено(ТелефонГрузоотправителя) Тогда
		СтруктураДанных.Вставить("ТлфГрузоотправителя", Лев(ТелефонГрузоотправителя, 20));
	Иначе
		ОписаниеОшибкиСтрокой 	= "Не удалось получить телефон грузоотправителя [" + Строка(Грузоотправитель) + "]"; 
		СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "81111111111", ОписаниеОшибкиСтрокой, Ложь);
		СтруктураДанных.Вставить("ТлфГрузоотправителя", СтруктураИсключения);
 	КонецЕсли;
	
	Если Грузоотправитель = Организация Тогда
		ФаксГрузоотправителя = ФаксОрганизации;
	Иначе
		ФаксГрузоотправителя = ПолучитьТелефон(Грузоотправитель, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФаксГрузоотправителя) Тогда
		СтруктураДанных.Вставить("ФаксГрузоотправителя", Лев(ФаксГрузоотправителя, 20));
	Иначе
		ОписаниеОшибкиСтрокой 	= "Не удалось получить факс грузоотправителя [" + Строка(Грузоотправитель) + "]"; 
		СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "81111111111", ОписаниеОшибкиСтрокой, Ложь);
		СтруктураДанных.Вставить("ФаксГрузоотправителя", СтруктураИсключения);
	КонецЕсли;
	
	// Данные грузополучателя
	Если НЕ ЭтоБГУ И ЕстьРеквизитДокумента("Грузополучатель", МетаданныеДокумента) ИЛИ
		ЭтоБГУ И НЕ ЭтоКСФ И ЕстьРеквизитДокумента("Грузополучатель", ?(ЭтоСФ, МетаданныеДокументаОснования, МетаданныеДокумента)) Тогда
		
		Грузополучатель = ?(НЕ ЭтоСф, Документ.Грузополучатель, Документ.ДокументОснование.Грузополучатель);
		Грузополучатель = ?((Грузополучатель = Контрагент) ИЛИ (НЕ ЗначениеЗаполнено(Грузополучатель)), Контрагент, Грузополучатель);
		
		// Данные грузоотправителя
		//Если Грузополучатель = Контрагент Тогда
		//	АдресГрузополучателя = АдресКонтрагента;
		//Иначе
			
		АдресГрузополучателя = ПолучитьАдресКонтрагентаДляПревью(Грузополучатель, Неопределено, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);			
			
			Если НЕ АдресГрузополучателя.АдресНайден Тогда
				АдресГрузополучателя = ПолучитьАдресКонтрагентаДляПревью(Грузополучатель, Неопределено, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);	
			КонецЕсли;
		//КонецЕсли;
	
		СтруктураДанных.Вставить("АдресГрузополучателя", АдресГрузополучателя);
								
		//Банковские реквизиты (для ТОРГ-12)
		Если НЕ ЭтоСФ Тогда
			Если Грузополучатель = Контрагент Тогда
				СтруктураДанных.Вставить("ДанныеСчетаГрузополучателя", СтруктураДанных.ДанныеСчетаКонтрагента);
			Иначе
				ДанныеСчетаГрузополучателя = Новый Структура;
				Если НЕ ЭтоБГУ Тогда
				Если ЗначениеЗаполнено(Грузополучатель.ОсновнойБанковскийСчет) Тогда
					ДанныеСчетаГрузополучателя.Вставить("НомерСчета", Грузополучатель.ОсновнойБанковскийСчет.НомерСчета);	
					СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Грузополучатель.ОсновнойБанковскийСчет.НомерСчета);
					
					Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
						СтруктураИсключения = Новый Структура;
						СтруктураИсключения.Вставить("ТекущееЗначение", Грузополучатель.ОсновнойБанковскийСчет.НомерСчета);
						СтруктураИсключения.Вставить("ЭталонноеЗначение", "11112222333344445555");
						СтруктураИсключения.Вставить("ОписаниеОшибки", "Номер счета должен содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".");
						СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
						ДанныеСчетаГрузополучателя.Вставить("НомерСчета", СтруктураИсключения);
					КонецЕсли;
					
					Если СтрДлина(Грузополучатель.ОсновнойБанковскийСчет.НомерСчета) <> 20 Тогда
						Если НЕ ДанныеСчетаГрузополучателя.НомерСчета.Свойство("ЭтоОшибка") Тогда
							СтруктураИсключения = Новый Структура;
							СтруктураИсключения.Вставить("ТекущееЗначение", Грузополучатель.ОсновнойБанковскийСчет.НомерСчета);
							СтруктураИсключения.Вставить("ЭталонноеЗначение", "11112222333344445555");
							СтруктураИсключения.Вставить("ОписаниеОшибки", "Номер счета не должен превышать 20 символов");
							СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
							ДанныеСчетаГрузополучателя.Вставить("НомерСчета", СтруктураИсключения);
						Иначе
							ДанныеСчетаГрузополучателя.НомерСчета.ОписаниеОшибки = ДанныеСчетаГрузополучателя.НомерСчета.ОписаниеОшибки + " Так же не должен превышать 20 символов";
						КонецЕсли;
					КонецЕсли;
					
					БанкГрузополучателя =  Грузополучатель.ОсновнойБанковскийСчет.Банк;
					
					Если ЗначениеЗаполнено(БанкГрузополучателя.Наименование) Тогда
						ДанныеСчетаГрузополучателя.Вставить("НаимБанк", БанкГрузополучателя.Наименование);
					Иначе
						СтруктураИсключения = Новый Структура;
						СтруктураИсключения.Вставить("ТекущееЗначение", БанкГрузополучателя.Наименование);
						СтруктураИсключения.Вставить("ЭталонноеЗначение", "Наименование банка");
						СтруктураИсключения.Вставить("ОписаниеОшибки", "У банка не заполенено наименование");
						СтруктураИсключения.Вставить("ЭтоОшибка", Ложь);
						ДанныеСчетаГрузополучателя.Вставить("НаимБанк", СтруктураИсключения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(БанкГрузополучателя.Код) Тогда
						СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", БанкГрузополучателя.Код);
						ДанныеСчетаГрузополучателя.Вставить("БИК", БанкГрузополучателя.Код); 
						Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
							СтруктураИсключения = Новый Структура;
							СтруктураИсключения.Вставить("ТекущееЗначение", БанкГрузополучателя.Код);
							СтруктураИсключения.Вставить("ЭталонноеЗначение", "041234567");
							СтруктураИсключения.Вставить("ОписаниеОшибки", "БИК содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".");
							СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
							ДанныеСчетаГрузополучателя.Вставить("БИК", СтруктураИсключения);
						КонецЕсли;
						
						Если СтрДлина(БанкГрузополучателя.Код) <> 9 Тогда
							Если НЕ ДанныеСчетаГрузополучателя.БИК.Свойство("ЭтоОшибка") Тогда
								СтруктураИсключения = Новый Структура;
								СтруктураИсключения.Вставить("ТекущееЗначение", БанкГрузополучателя.Код);
								СтруктураИсключения.Вставить("ЭталонноеЗначение", "041234567");
								СтруктураИсключения.Вставить("ОписаниеОшибки", "БИК не должен превышать 9 символов");
								СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
								ДанныеСчетаГрузополучателя.Вставить("БИК", СтруктураИсключения);
							Иначе
								ДанныеСчетаГрузополучателя.БИК.ОписаниеОшибки = ДанныеСчетаГрузополучателя.БИК.ОписаниеОшибки + " Так же не должен превышать 9 символов";
							КонецЕсли;
						КонецЕсли;
					Иначе
						СтруктураИсключения = Новый Структура;
						СтруктураИсключения.Вставить("ТекущееЗначение", Неопределено);
						СтруктураИсключения.Вставить("ЭталонноеЗначение", "041234567");
						СтруктураИсключения.Вставить("ОписаниеОшибки", "Не заполнен БИК");
						СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
						ДанныеСчетаГрузополучателя.Вставить("БИК", СтруктураИсключения);
					КонецЕсли;
					СтруктураДанных.Вставить("ДанныеСчетаГрузополучателя", ДанныеСчетаГрузополучателя);
				Иначе
					СтруктураИсключения = Новый Структура;
					СтруктураИсключения.Вставить("ТекущееЗначение", Неопределено);
					СтруктураИсключения.Вставить("ЭталонноеЗначение", "Номер счета, наименование и БИК банка");
					СтруктураИсключения.Вставить("ОписаниеОшибки", "Не найден расчетный счет контрагента");
					СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
					СтруктураДанных.Вставить("ДанныеСчетаГрузополучателя", СтруктураИсключения);
				КонецЕсли;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	БанковскиеИКазначейскиеСчета.Ссылка
				|ИЗ
				|	Справочник.БанковскиеИКазначейскиеСчета КАК БанковскиеИКазначейскиеСчета
				|ГДЕ
				|	БанковскиеИКазначейскиеСчета.ПометкаУдаления = ЛОЖЬ
				|	И БанковскиеИКазначейскиеСчета.Закрыт = ЛОЖЬ
				|	И БанковскиеИКазначейскиеСчета.Владелец = &Владелец";
				Запрос.УстановитьПараметр("Владелец", Грузополучатель);
				Результат = Запрос.Выполнить().Выбрать();
				ЛицевойСчет = ?(Результат.Следующий(), Результат.Ссылка, Неопределено);
				Если НЕ ЛицевойСчет = Неопределено Тогда
					ДанныеСчетаГрузополучателя.Вставить("НомерСчета", ЛицевойСчет.Код);	
					СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", ЛицевойСчет.Код);
					
					Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
						СтруктураИсключения = Новый Структура;
						СтруктураИсключения.Вставить("ТекущееЗначение", ЛицевойСчет.Код);
						СтруктураИсключения.Вставить("ЭталонноеЗначение", "11112222333344445555");
						СтруктураИсключения.Вставить("ОписаниеОшибки", "Номер счета должен содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".");
						СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
						ДанныеСчетаГрузополучателя.Вставить("НомерСчета", СтруктураИсключения);
					КонецЕсли;
					
					Если СтрДлина(ЛицевойСчет.Код) <> 20 Тогда
						Если НЕ ДанныеСчетаГрузополучателя.НомерСчета.Свойство("ЭтоОшибка") Тогда
							СтруктураИсключения = Новый Структура;
							СтруктураИсключения.Вставить("ТекущееЗначение", ЛицевойСчет.Код);
							СтруктураИсключения.Вставить("ЭталонноеЗначение", "11112222333344445555");
							СтруктураИсключения.Вставить("ОписаниеОшибки", "Номер счета не должен превышать 20 символов");
							СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
							ДанныеСчетаГрузополучателя.Вставить("НомерСчета", СтруктураИсключения);
						Иначе
							ДанныеСчетаГрузополучателя.НомерСчета.ОписаниеОшибки = ДанныеСчетаГрузополучателя.НомерСчета.ОписаниеОшибки + " Так же не должен превышать 20 символов";
						КонецЕсли;
					КонецЕсли;
					
					БанкГрузополучателя =  ЛицевойСчет.КассовыйОрган;
					
					Если ЗначениеЗаполнено(БанкГрузополучателя.Наименование) Тогда
						ДанныеСчетаГрузополучателя.Вставить("НаимБанк", БанкГрузополучателя.Наименование);
					Иначе
						СтруктураИсключения = Новый Структура;
						СтруктураИсключения.Вставить("ТекущееЗначение", БанкГрузополучателя.Наименование);
						СтруктураИсключения.Вставить("ЭталонноеЗначение", "Наименование банка");
						СтруктураИсключения.Вставить("ОписаниеОшибки", "У банка не заполенено наименование");
						СтруктураИсключения.Вставить("ЭтоОшибка", Ложь);
						ДанныеСчетаГрузополучателя.Вставить("НаимБанк", СтруктураИсключения);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(БанкГрузополучателя.Код) Тогда
						СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", БанкГрузополучателя.Код);
						ДанныеСчетаГрузополучателя.Вставить("БИК", БанкГрузополучателя.Код); 
						Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
							СтруктураИсключения = Новый Структура;
							СтруктураИсключения.Вставить("ТекущееЗначение", БанкГрузополучателя.Код);
							СтруктураИсключения.Вставить("ЭталонноеЗначение", "041234567");
							СтруктураИсключения.Вставить("ОписаниеОшибки", "БИК содержать только цифры. Содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы + ".");
							СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
							ДанныеСчетаГрузополучателя.Вставить("БИК", СтруктураИсключения);
						КонецЕсли;
						
						Если СтрДлина(БанкГрузополучателя.Код) <> 9 Тогда
							Если НЕ ДанныеСчетаГрузополучателя.БИК.Свойство("ЭтоОшибка") Тогда
								СтруктураИсключения = Новый Структура;
								СтруктураИсключения.Вставить("ТекущееЗначение", БанкГрузополучателя.Код);
								СтруктураИсключения.Вставить("ЭталонноеЗначение", "041234567");
								СтруктураИсключения.Вставить("ОписаниеОшибки", "БИК не должен превышать 9 символов");
								СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
								ДанныеСчетаГрузополучателя.Вставить("БИК", СтруктураИсключения);
							Иначе
								ДанныеСчетаГрузополучателя.БИК.ОписаниеОшибки = ДанныеСчетаГрузополучателя.БИК.ОписаниеОшибки + " Так же не должен превышать 9 символов";
							КонецЕсли;
						КонецЕсли;
					Иначе
						СтруктураИсключения = Новый Структура;
						СтруктураИсключения.Вставить("ТекущееЗначение", Неопределено);
						СтруктураИсключения.Вставить("ЭталонноеЗначение", "041234567");
						СтруктураИсключения.Вставить("ОписаниеОшибки", "Не заполнен БИК");
						СтруктураИсключения.Вставить("ЭтоОшибка", Истина);
						ДанныеСчетаГрузополучателя.Вставить("БИК", СтруктураИсключения);
					КонецЕсли;
					СтруктураДанных.Вставить("ДанныеСчетаГрузополучателя", ДанныеСчетаГрузополучателя);
				Иначе
					СтруктураИсключения = Новый Структура;
					СтруктураИсключения.Вставить("ТекущееЗначение", Неопределено);
					СтруктураИсключения.Вставить("ЭталонноеЗначение", "Номер счета, наименование и БИК банка");
					СтруктураИсключения.Вставить("ОписаниеОшибки", "Не найден расчетный счет контрагента");
					СтруктураИсключения.Вставить("ЭтоОшибка", Ложь);
					СтруктураДанных.Вставить("ДанныеСчетаГрузополучателя", СтруктураИсключения);
				КонецЕсли;
			КонецЕсли;	
			КонецЕсли;
 		КонецЕсли;
		
		//Контактные данные
		ТелефонГрузополучателя = ПолучитьТелефон(Грузополучатель);
		Если ЗначениеЗаполнено(ТелефонГрузополучателя) Тогда
			СтруктураДанных.Вставить("ТлфГрузополучателя", Лев(ТелефонГрузополучателя, 20)); 	
		Иначе
			ОписаниеОшибкиСтрокой 	= "Не удалось получить телефон грузополучателя [" + Строка(Грузополучатель) + "]"; 
			СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "81111111111", ОписаниеОшибкиСтрокой, Ложь);
			СтруктураДанных.Вставить("ТлфГрузополучателя", СтруктураИсключения);
        КонецЕсли;
		
		ФаксГрузополучателя = ПолучитьТелефон(Грузополучатель, Истина);
		
		Если ЗначениеЗаполнено(ФаксГрузополучателя) Тогда
			СтруктураДанных.Вставить("ФаксГрузополучателя", Лев(ФаксГрузополучателя, 20));
		Иначе	
			ОписаниеОшибкиСтрокой 	= "Не удалось получить факс грузополучателя [" + Строка(Грузополучатель) + "]"; 
			СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, "81111111111", ОписаниеОшибкиСтрокой, Ложь);
			СтруктураДанных.Вставить("ФаксГрузополучателя", СтруктураИсключения);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

//Функция формирует XML-файл (контент) документа с типом "Торг12"
//
// Параметры:
//  Документ: ссылка на учетный документ 1С
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭДТОРГ12Продавец(Документ, БезАвторизации = Неопределено, СтруктураУступочнойНадписи) Экспорт
	
	//Проверим валюту документа. 
	Если СокрЛП(Документ.ВалютаДокумента.Код) <> "643" Тогда 
		Сообщить("Работа с иностранной валютой " + Документ.ВалютаДокумента + " не поддерживается, невозможно сформировать документ [" + Документ + "].");
		Возврат Неопределено;	
	КонецЕсли;
		
	СтруктураДанных = СформироватьСтруктуруДанныхДокумента(Документ);
	
	// Недостаточно данных для формирования, прерываенм формирование документа
	Если СтруктураДанных = Неопределено Тогда
		ОткрытьФормуПредпростраДокумента(Документ, БезАвторизации, СтруктураУступочнойНадписи, "Торг12");
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеДокумента 				= Документ.Метаданные();
	МетаданныеСправочникаОрганизации    = Метаданные.Справочники.Организации;
	
	ЕстьХарактеристики 	= ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, "Товары");
	ЭтоБухгалтерия		= НЕ (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, "Товары")); 
	
	// Создаем фабрику из схемы
	Попытка
		Фабрика 						= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_OTORG12_1_986_00_05_01_02").ПолучитьТекст());
		КаталогЭД 						= КаталогВременныхФайлов();
		ТипКодировки 					= "windows-1251";		
		
		ФабрикаИнфПол					= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("XSD_ИнфПолТорг12").ПолучитьТекст());
				
		ИмяФайлаЭД = "DP_OTORG12" + "_" +
		СтруктураДанных.ИдентификаторПолучателя + "_" +
		СтруктураДанных.ИдентификаторОтправителя + "_" +
		Формат(Документ.Дата, "ДФ=""ггггММдд""") + "_" +
		Документ.УникальныйИдентификатор();
		
		//Определение типов XDTO
		ТипАдрес					= Фабрика.Тип("OTORG12", "АдресТип");
		ТипАдресИно					= Фабрика.Тип("OTORG12", "АдрИноТип");
		ТипАдресРФ					= Фабрика.Тип("OTORG12", "АдрРФТип");
		ТипДолжЛицо  				= Фабрика.Тип("OTORG12", "ДолжЛицоТип");
		ТипКонтакт		  			= Фабрика.Тип("OTORG12", "КонтактТип");
		ТипТаблица                  = Фабрика.Тип("OTORG12", "ТаблицаТип");
		ТипУчастник				    = Фабрика.Тип("OTORG12", "УчастникТип");
		ТипФИО						= Фабрика.Тип("OTORG12", "ФИОТип");
		
		//Определение типов элементов XDTO
		ЭлементФайл					= Фабрика.Тип("OTORG12", "Файл");
		ЭлементСвУчДокОбор			= ЭлементФайл.Свойства.Получить("СвУчДокОбор").Тип;
		ЭлементСвОЭДОтпрСФ			= ЭлементСвУчДокОбор.Свойства.Получить("СвОЭДОтпрСФ").Тип;
		ЭлементДокумент				= ЭлементФайл.Свойства.Получить("Документ").Тип;
		ЭлементСвТНО				= ЭлементДокумент.Свойства.Получить("СвТНО").Тип;
		ЭлементГрузОт				= ЭлементСвТНО.Свойства.Получить("ГрузОт").Тип;
		ЭлементГрузПолуч			= ЭлементСвТНО.Свойства.Получить("ГрузПолуч").Тип;
		ЭлементПоставщик			= ЭлементСвТНО.Свойства.Получить("Поставщик").Тип;
		ЭлементПлательщик			= ЭлементСвТНО.Свойства.Получить("Плательщик").Тип;
		ЭлементОснование			= ЭлементСвТНО.Свойства.Получить("Основание").Тип;
		ЭлементТранНакл				= ЭлементСвТНО.Свойства.Получить("ТранНакл").Тип;
		ЭлементТН					= ЭлементСвТНО.Свойства.Получить("ТН").Тип;
		ЭлементТаблица				= ЭлементТН.Свойства.Получить("Таблица").Тип;
		ЭлементОтпускГруз			= ЭлементСвТНО.Свойства.Получить("ОтпускГруз").Тип;
		ЭлементИнфПол				= ЭлементСвТНО.Свойства.Получить("ИнфПол").Тип;
		ЭлементПодписант			= ЭлементДокумент.Свойства.Получить("Подписант").Тип; 
		
		//Файл обмена (Файл)
		Файл = Фабрика.Создать(ЭлементФайл);
		Файл.ИдФайл 	= ИмяФайлаЭД;
		Файл.ВерсПрог	= СформироватьСтрокуВерсПрог();
		Файл.ВерсФорм 	= "5.01";
		//Сведения об участниках электронногодокументооборота (СвУчДокОбор)
		СвУчДокОбор = Фабрика.Создать(ЭлементСвУчДокОбор);
		СвУчДокОбор.ИдОтпр 	= СтруктураДанных.ИдентификаторОтправителя;
		СвУчДокОбор.ИдПок	= СтруктураДанных.ИдентификаторПолучателя;	
		//Сведения об операторе электронного документооборота отправителя (СвОЭДОтпр)
		СвОЭДОтпрСФ = Фабрика.Создать(ЭлементСвОЭДОтпрСФ);
		СвОЭДОтпрСФ.НаимОрг		= СтруктураДанных.SubjectInfo_ЭДО.Name;
		СвОЭДОтпрСФ.ИННЮЛ		= СтруктураДанных.SubjectInfo_ЭДО.Inn;
		СвОЭДОтпрСФ.ИдЭДОСФ		= СтруктураДанных.ИдентификаторЭДО;
		СвУчДокОбор.СвОЭДОтпрСФ = СвОЭДОтпрСФ;			
		Файл.СвУчДокОбор		= СвУчДокОбор;
		//Документ (Документ Торг-12)
		Док = Фабрика.Создать(ЭлементДокумент);
		Док.КНД 	= "1175004";
		ТекДата		= ТекущаяДата();
		Док.ДатаДок	= Формат(ТекДата, "ДЛФ=Д");
		Док.ВремДок = Формат(ТекДата, "ДФ=""ЧЧ.мм.сс""");
		//Товарная накладная, титул продавца (СвТНО)	
		СвТНО = Фабрика.Создать(ЭлементСвТНО);
		СвТНО.НаимПервДок 	= "Товарная накладная";
		СвТНО.ОКУДПервДок	= "0330212";
		СвТНО.НомФорм		= "ТОРГ-12";
		//Сведения о грузоотправителе (ГрузОт)
		ГрузОт		 		= Фабрика.Создать(ЭлементГрузОт);
		Грузоотправитель 	= ?(ЗначениеЗаполнено(Документ.Грузоотправитель), Документ.Грузоотправитель, Документ.Организация);
		//Грузоотправитель (ГрузОтпр)
		ГрузОтпр = Фабрика.Создать(ТипУчастник);
		Если ЗначениеЗаполнено(Грузоотправитель.КодПоОКПО) Тогда
			ГрузОтпр.ОКПО = Грузоотправитель.КодПоОКПО;
		КонецЕсли;
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(ГрузОтпр.Тип().Свойства.Получить("ИдСв").Тип);
		
		Если Грузоотправитель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			//Сведения об организации 
			СвЮЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг	= Грузоотправитель.НаименованиеПолное;
			
			Если ЗначениеЗаполнено(Грузоотправитель.ИНН) Тогда
				СвЮЛ.ИННЮЛ	= Грузоотправитель.ИНН;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Грузоотправитель.КПП) Тогда
				СвЮЛ.КПП = Грузоотправитель.КПП;
			КонецЕсли;
		
			Если ЕстьРеквизитСправочника("ОКОПФ", Метаданные.Справочники.Контрагенты) И ТипЗнч(Грузоотправитель) = Тип("СправочникСсылка.Контрагенты") И
				ЗначениеЗаполнено(Грузоотправитель.ОКОПФ) Тогда
				Если СтрДлина(Грузоотправитель.ОКОПФ.Код) = 2 ИЛИ СтрДлина(Грузоотправитель.ОКОПФ.Код) = 5 Тогда
					СвЮЛ.ОКОПФ		= Грузоотправитель.ОКОПФ.Код;
				Иначе
					Сообщить("Не верный код ОКОПФ у грузоотправителя [" + Строка(Грузоотправитель) + "]. Не будет заполнен в xml.");
				КонецЕсли;
			КонецЕсли;
			
			ИдСВ.СвЮЛ 		= СвЮЛ;
		Иначе                                    
			//Сведения об индивидуальном предпринимателе	
			СвФЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			
			Если ЗначениеЗаполнено(Грузоотправитель.ИНН) Тогда
				СвФЛ.ИННФЛ = Грузоотправитель.ИНН;
			КонецЕсли;
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Грузоотправитель);
			Если ФИОИП <> Неопределено Тогда
				СвФЛ.ФИОИП = ФИОИП;
			КонецЕсли;
			
			ИдСв.СвФЛ = СвФЛ;
			
		КонецЕсли;
		
		ГрузОтпр.ИдСв = ИдСв;
		
		//Адрес
		Если НЕ СтруктураДанных.АдресГрузоотправителя = Неопределено Тогда
			Адрес = Фабрика.Создать(ГрузОтпр.Тип().Свойства.Получить("Адрес").Тип); 
			
			Если СтруктураДанных.АдресГрузоотправителя.АдресРФ Тогда
				//Адрес местонахождения в Российской Федерации (структурированный)
				АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
				ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресГрузоотправителя); 
				Адрес.АдрРФ = АдрРФ;
			Иначе                                                                     
				АдрИно 			= Фабрика.Создать(ТипАдресИно);
				ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресГрузоотправителя);
				Адрес.АдрИно 	= АдрИно;
			КонецЕсли;
			ГрузОтпр.Адрес = Адрес;
		КонецЕсли;
		//Контактные сведения
		Контакт 			= Фабрика.Создать(ГрузОтпр.Тип().Свойства.Получить("Контакт").Тип);
        ЗаполнятьКонтакт 	= Ложь;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ТлфГрузоотправителя) Тогда
			Контакт.Тлф 		= СтруктураДанных.ТлфГрузоотправителя;
			ЗаполнятьКонтакт 	= Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ФаксГрузоотправителя) Тогда
			Контакт.Факс		= СтруктураДанных.ФаксГрузоотправителя;
			ЗаполнятьКонтакт	= Истина;
		КонецЕсли;
		
		Если ЗаполнятьКонтакт Тогда 
		    ГрузОтпр.Контакт 	= Контакт;
		КонецЕсли;
		
		//Банковские реквизиты
		Если ЗначениеЗаполнено(СтруктураДанных.ДанныеСчетаГрузоотправителя.НомерСчета) Тогда
			БанкРекв 			= Фабрика.Создать(ГрузОтпр.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаГрузоотправителя.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаГрузоотправителя); 
			БанкРекв.СвБанк 	= СвБанк;
			ГрузОтпр.БанкРекв 	= БанкРекв;
		КонецЕсли;
		
		Если ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(Документ.Подразделение) Тогда
				ГрузОт.СтруктПодр = Строка(Документ.Подразделение);	
			КонецЕсли;
		КонецЕсли;
		
		ГрузОт.ГрузОтпр = ГрузОтпр;
		СвТНО.ГрузОт = ГрузОт;
		
		//Грузополучатель (ГрузПолуч)
		Грузополучатель = ?(ЗначениеЗаполнено(Документ.Грузополучатель), Документ.Грузополучатель, Документ.Контрагент);
		ГрузПолуч 		= Фабрика.Создать(ТипУчастник);
		Если ЗначениеЗаполнено(Грузополучатель.КодПоОКПО) Тогда
			ГрузПолуч.ОКПО = Грузополучатель.КодПоОКПО;
		КонецЕсли;
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(ГрузПолуч.Тип().Свойства.Получить("ИдСв").Тип);
		
		Если Грузополучатель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			//Сведения об организации 
			СвЮЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг	= Грузополучатель.НаименованиеПолное;
			
			Если ЗначениеЗаполнено(Грузополучатель.ИНН) Тогда
				СвЮЛ.ИННЮЛ		= Грузополучатель.ИНН;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Грузополучатель.КПП) Тогда
				СвЮЛ.КПП		= Грузополучатель.КПП;
			КонецЕсли;
			
			Если ЕстьРеквизитСправочника("ОКОПФ", Метаданные.Справочники.Контрагенты) И
				ЗначениеЗаполнено(Грузополучатель.ОКОПФ) Тогда
				Если СтрДлина(Грузополучатель.ОКОПФ.Код) = 2 ИЛИ СтрДлина(Грузополучатель.ОКОПФ.Код) = 5 Тогда
					СвЮЛ.ОКОПФ	= Грузополучатель.ОКОПФ.Код;
				Иначе
					Сообщить("Не верный код ОКОПФ у грузополучателя [" + Строка(Грузополучатель) + "]. Не будет заполнен в xml.");
				КонецЕсли;
			КонецЕсли;

			ИдСВ.СвЮЛ 		= СвЮЛ;
		Иначе                                    
			//Сведения об индивидуальном предпринимателе	
			СвФЛ 				= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			
			Если ЗначениеЗаполнено(Грузополучатель.ИНН) Тогда
				СвФЛ.ИННФЛ 			= Грузополучатель.ИНН;
			КонецЕсли;
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Грузополучатель);
			Если ФИОИП <> Неопределено Тогда
				СвФЛ.ФИОИП = ФИОИП;
			КонецЕсли;
			
			ИдСв.СвФЛ = СвФЛ;
			
		КонецЕсли;
		
		ГрузПолуч.ИдСв = ИдСв;
		
		//Адрес
		Если НЕ СтруктураДанных.АдресГрузополучателя = Неопределено Тогда
			Адрес = Фабрика.Создать(ГрузПолуч.Тип().Свойства.Получить("Адрес").Тип); 
			
			Если СтруктураДанных.АдресГрузополучателя.АдресРФ Тогда
				//Адрес местонахождения в Российской Федерации (структурированный)
				АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
				ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресГрузополучателя); 
				Адрес.АдрРФ = АдрРФ;
			Иначе                                                                     
				АдрИно 			= Фабрика.Создать(ТипАдресИно);
				ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресГрузополучателя);
				Адрес.АдрИно 	= АдрИно;
			КонецЕсли;
			ГрузПолуч.Адрес = Адрес;
		КонецЕсли;
		
		//Контактные сведения			
		Контакт			 = Фабрика.Создать(ГрузПолуч.Тип().Свойства.Получить("Контакт").Тип);
		ЗаполнятьКонтакт = Ложь;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ТлфГрузополучателя) Тогда
			Контакт.Тлф 		= СтруктураДанных.ТлфГрузополучателя;
			ЗаполнятьКонтакт 	= Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ФаксГрузополучателя) Тогда
			Контакт.Факс 		= СтруктураДанных.ФаксГрузополучателя;
			ЗаполнятьКонтакт	= Истина;	
		КонецЕсли;
		
		Если ЗаполнятьКонтакт Тогда 
			ГрузПолуч.Контакт = Контакт;
		КонецЕсли;
	
		
		//Банковские реквизиты
		Если ЗначениеЗаполнено(СтруктураДанных.ДанныеСчетаГрузополучателя.НомерСчета) Тогда
			БанкРекв 			= Фабрика.Создать(ГрузПолуч.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаГрузополучателя.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаГрузополучателя);
			БанкРекв.СвБанк 	= СвБанк;
			ГрузПолуч.БанкРекв 	= БанкРекв;
		КонецЕсли;
		
		СвТНО.ГрузПолуч = ГрузПолуч;
		
		//Поставщик (Поставщик)		
		Поставщик = Фабрика.Создать(ТипУчастник);
		Если ЗначениеЗаполнено(Документ.Организация.КодПоОКПО) Тогда
			Поставщик.ОКПО = Документ.Организация.КодПоОКПО;
		КонецЕсли;
		
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(Поставщик.Тип().Свойства.Получить("ИдСв").Тип);
		
		Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			//Сведения об организации 
			СвЮЛ 			= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг	= Документ.Организация.НаименованиеПолное;
			СвЮЛ.ИННЮЛ		= Документ.Организация.ИНН;
			СвЮЛ.КПП		= Документ.Организация.КПП;
						
			Если ЕстьРеквизитСправочника("КодОКОПФ", Документ.Организация.Метаданные()) Тогда
				Если ЗначениеЗаполнено(Документ.Организация.КодОКОПФ) Тогда
					СвЮЛ.ОКОПФ = СокрЛП(Документ.Организация.КодОКОПФ);					
				КонецЕсли;
			КонецЕсли;
			ИдСВ.СвЮЛ 		= СвЮЛ;

		Иначе                                    
			//Сведения об индивидуальном предпринимателе	
			СвФЛ 				= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			СвФЛ.ИННФЛ 			= Документ.Организация.ИНН;
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Документ.Организация);
			Если ФИОИП <> Неопределено Тогда
				СвФЛ.ФИОИП = ФИОИП;
			КонецЕсли;
			
			ИдСв.СвФЛ = СвФЛ;
			
		КонецЕсли;
		
		Поставщик.ИдСв = ИдСв;
		
		//Адрес
		Адрес = Фабрика.Создать(Поставщик.Тип().Свойства.Получить("Адрес").Тип); 
		
		Если СтруктураДанных.АдресОрганизации.АдресРФ Тогда
			//Адрес местонахождения в Российской Федерации (структурированный)
			АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
			ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресОрганизации); 
			Адрес.АдрРФ = АдрРФ;
		Иначе                                                                     
			АдрИно 			= Фабрика.Создать(ТипАдресИно);
			ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресОрганизации);
			Адрес.АдрИно 	= АдрИно;
		КонецЕсли;
		
		Поставщик.Адрес = Адрес;
		
		//Контактные сведения			
		Контакт 			= Фабрика.Создать(Поставщик.Тип().Свойства.Получить("Контакт").Тип);
		ЗаполнятьКонтакт	= Ложь;	
		
		Если ЗначениеЗаполнено(СтруктураДанных.ТлфОрганизации) Тогда
			Контакт.Тлф 		= СтруктураДанных.ТлфОрганизации;
			ЗаполнятьКонтакт	= Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ФаксОрганизации) Тогда
			Контакт.Факс 		= СтруктураДанных.ФаксОрганизации;
			ЗаполнятьКонтакт	= Истина;
		КонецЕсли;
		
		Если ЗаполнятьКонтакт Тогда
			Поставщик.Контакт 	= Контакт;
		КонецЕсли;
		
		
		//Банковские реквизиты
		Если ЗначениеЗаполнено(СтруктураДанных.ДанныеСчетаОрганизации.НомерСчета) Тогда
			БанкРекв 			= Фабрика.Создать(Поставщик.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаОрганизации.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаОрганизации);
			БанкРекв.СвБанк 	= СвБанк;
			Поставщик.БанкРекв 	= БанкРекв;
		КонецЕсли;
		
		СвТНО.Поставщик = Поставщик;
		
		//Плательщик	
		Плательщик = Фабрика.Создать(ТипУчастник);
		Если ЗначениеЗаполнено(Документ.Контрагент.КодПоОКПО) Тогда
			Плательщик.ОКПО = Документ.Контрагент.КодПоОКПО;
		КонецЕсли;
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(Плательщик.Тип().Свойства.Получить("ИдСв").Тип);
		
		Если Документ.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			//Сведения об организации 
			СвЮЛ 			= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг	= Документ.Контрагент.НаименованиеПолное;
			СвЮЛ.ИННЮЛ		= Документ.Контрагент.ИНН;
			СвЮЛ.КПП		= Документ.Контрагент.КПП;
			
			Если ЕстьРеквизитСправочника("ОКОПФ", Документ.Контрагент.Метаданные()) Тогда
				Если ЗначениеЗаполнено(Документ.Контрагент.ОКОПФ) Тогда
					Если Найти(Метаданные.КраткаяИнформация, "Управление торговлей, редакция 10.3") > 0  ИЛИ 
						Найти(Метаданные.КраткаяИнформация, "Комплексная автоматизация, редакция 1.1") > 0 ИЛИ
						Найти(Метаданные.КраткаяИнформация, "Управление производственным предприятием, редакция 1.3") > 0 Тогда
						СвЮЛ.ОКОПФ = СокрЛП(Строка(Документ.Контрагент.ОКОПФ.Код));
					Иначе
						СвЮЛ.ОКОПФ = СокрЛП(Строка(Документ.Контрагент.ОКОПФ));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
           			
			ИдСВ.СвЮЛ 		= СвЮЛ;
		Иначе                                    
			//Сведения об индивидуальном предпринимателе	
			СвФЛ 				= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			СвФЛ.ИННФЛ 			= Документ.Контрагент.ИНН;
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Документ.Контрагент);
			Если ФИОИП <> Неопределено Тогда
				СвФЛ.ФИОИП = ФИОИП;
			КонецЕсли;
			
			ИдСв.СвФЛ = СвФЛ;
			
		КонецЕсли;
		
		Плательщик.ИдСв = ИдСв;
		//Адрес
		Адрес = Фабрика.Создать(Плательщик.Тип().Свойства.Получить("Адрес").Тип); 
		
		Если СтруктураДанных.АдресКонтрагента.АдресРФ Тогда
			//Адрес местонахождения в Российской Федерации (структурированный)
			АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
			ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресКонтрагента); 
			Адрес.АдрРФ = АдрРФ;
		Иначе                                                                     
			АдрИно 			= Фабрика.Создать(ТипАдресИно);
			ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресКонтрагента);
			Адрес.АдрИно 	= АдрИно;
		КонецЕсли;
		Плательщик.Адрес = Адрес;
		
		//Контактные сведения
		Контакт 			= Фабрика.Создать(Плательщик.Тип().Свойства.Получить("Контакт").Тип);
		ЗаполнятьКонтакт	= Ложь;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ТлфКонтрагента) Тогда
			Контакт.Тлф 		= СтруктураДанных.ТлфКонтрагента;
			ЗаполнятьКонтакт	= Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ФаксКонтрагента) Тогда
			Контакт.Факс 		= СтруктураДанных.ФаксКонтрагента;
			ЗаполнятьКонтакт	= Истина;
		КонецЕсли;
		
		Если ЗаполнятьКонтакт Тогда
			Плательщик.Контакт 	= Контакт;
		КонецЕсли;
				
		//Банковские реквизиты
		Если ЗначениеЗаполнено(СтруктураДанных.ДанныеСчетаКонтрагента.НомерСчета) Тогда
			БанкРекв 			= Фабрика.Создать(Плательщик.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаКонтрагента.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаКонтрагента);
			БанкРекв.СвБанк 	= СвБанк;
			Плательщик.БанкРекв = БанкРекв;
		КонецЕсли;
		СвТНО.Плательщик 	= Плательщик;
		
		//Основание (договор)
		ДоговорКонтрагента = Документ.ДоговорКонтрагента;
		Основание = Фабрика.Создать(ЭлементСвТНО.Свойства.Получить("Основание").Тип); 
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента.Наименование) Тогда
			Основание.НаимОсн = ДоговорКонтрагента.Наименование;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента.Номер) Тогда
			Основание.НомОсн = ДоговорКонтрагента.Номер;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента.Дата) Тогда
			Основание.ДатаОсн = Формат(ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		СвТНО.Основание 	= Основание;	
		СвТНО.ВидОперации 	= Строка(Документ.ВидОперации);
		
		//Уступочная надпись (параметры)
		Если НЕ СтруктураУступочнойНадписи = Неопределено Тогда
			ИнфПол 			= Фабрика.Создать(ЭлементСвТНО.Свойства.Получить("ИнфПол").Тип);
			ИнфПол.ТекстИнф = СтруктураУступочнойНадписи.ТекстУступочнойНадписи;
			СвТНО.ИнфПол 	= ИнфПол;
		КонецЕсли;
		
		СтруктураНастроек 		= МенеджерНастроек.НастройкиИР();
		ИспользоватьШтрихкод 	= СтруктураНастроек.ЗначениеКодаНоменклаутрыТН = 1 И НЕ Метаданные.РегистрыСведений.Найти("Штрихкоды") = Неопределено;
						
		//Товарная накладная
		ТН = Фабрика.Создать(ЭлементТН);
		ТН.НомТН 	= ОбщегоНазначения.ПолучитьНомерНаПечать(Документ);
		ТН.ДатаТН	= Формат(Документ.Дата, "ДЛФ=Д");
		        		
		Таблица = Фабрика.Создать(ЭлементТаблица);
		
		БруттоВсего = 0;
		НомерСтроки = 0;
		
		//Заполнение табличной части
		Для Каждого ТекСтрока Из Документ.Товары Цикл
			НомерСтроки = НомерСтроки + 1; 
			//Сведения о товаре (СвТов)
			СвТов 			= Фабрика.Создать(ЭлементТаблица.Свойства.Получить("СвТов").Тип);
			СвТов.НомТов 	= НомерСтроки;
			
			//Заполняем из полного наим, если оно не пустое и короче 1000 симв.
			Если СтрДлина(СокрЛП(ТекСтрока.Номенклатура.НаименованиеПолное)) <= 1000 И ЗначениеЗаполнено(ТекСтрока.Номенклатура.НаименованиеПолное) Тогда
				СвТов.НаимТов = СокрЛП(ТекСтрока.Номенклатура.НаименованиеПолное);
			Иначе
				СвТов.НаимТов = СокрЛП(ТекСтрока.Номенклатура.Наименование);
			КонецЕсли;
			
			//Для КА, УТ, УПП
			Если ЕстьХарактеристики И ЗначениеЗаполнено(ТекСтрока.ХарактеристикаНоменклатуры) Тогда
				СвТов.ХарактерТов = СокрЛП(Строка(ТекСтрока.ХарактеристикаНоменклатуры));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.Артикул) Тогда
				СвТов.АртикулТов = ТекСтрока.Номенклатура.Артикул;
			КонецЕсли;
			
			Если НЕ ИспользоватьШтрихкод Тогда
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.Код) Тогда
					СвТов.КодТов = ТекСтрока.Номенклатура.Код;
				КонецЕсли;
			Иначе
				ШтрихКод = ПолучитьШтрихКод(ТекСтрока);
				
				Если ЗначениеЗаполнено(ШтрихКод) Тогда
					СвТов.КодТов = ШтрихКод;
				КонецЕсли;
			КонецЕсли;
									
			Если ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
				Если ТипЗнч(ТекСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
					//Для Бух
					СвТов.НаимЕдИзм	= ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
					Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код) Тогда
						СвТов.ОКЕИ_Тов	= СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код);
					КонецЕсли;
				ИначеЕсли ТипЗнч(ТекСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					//Для УТ и КА, УПП
					СвТов.НаимЕдИзм = ТекСтрока.ЕдиницаИзмерения.Наименование;
					Если ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код) Тогда
						СвТов.ОКЕИ_Тов	= СокрЛП(ТекСтрока.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код);
					КонецЕсли;
				КонецЕсли;
			Иначе
				СвТов.НаимЕдИзм = ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код) Тогда
					СвТов.ОКЕИ_Тов	= СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код);
				КонецЕсли;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, "Товары") И
				ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмеренияМест) Тогда
				//Для УТ и КА, УПП
				КолМест 		= Формат(Окр(ТекСтрока.КоличествоМест), "ЧГ=0");
				Место 			= ОкруглитьВБольшуюСторону(ТекСтрока.ЕдиницаИзмеренияМест.Коэффициент/?(ТекСтрока.ЕдиницаИзмерения.Коэффициент <> 0, ТекСтрока.ЕдиницаИзмерения.Коэффициент, 1)); // Формат(Окр(ТекСтрока.ЕдиницаИзмеренияМест.Коэффициент/ТекСтрока.ЕдиницаИзмерения.Коэффициент), "ЧГ=0");
				СвТов.ВидУпак 	= ТекСтрока.ЕдиницаИзмеренияМест.Наименование;
				СвТов.Место		= ?(ЗначениеЗаполнено(Место), Место, "-");
				СвТов.КолМест	= КолМест;
			КонецЕсли;                  										
			
			// Для Бух          
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, "Товары") И
				((Метаданные.Имя = "БухгалтерияПредприятия") ИЛИ (Метаданные.Имя = "БухгалтерияПредприятияКОРП")) И (ТекСтрока.КоличествоМест > 0) Тогда
				
				КолМест 		= Формат(Окр(ТекСтрока.КоличествоМест), "ЧГ=0");
				Место 			= Формат(ТекСтрока.Коэффициент, "ЧГ=0");
				СвТов.ВидУпак 	= ТекСтрока.ЕдиницаИзмерения.Наименование;
				СвТов.Место		= Место;
				СвТов.КолМест	= КолМест;
 			КонецЕсли;
			
			СвТов.Нетто			= Формат(ТекСтрока.Количество, "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
			
			Попытка
				СвТов.Брутто = Формат(ТекСтрока.ЕдиницаИзмеренияМест.Вес * КолМест, "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
				БруттоВсего = БруттоВсего + ТекСтрока.ЕдиницаИзмеренияМест.Вес * КолМест;
			Исключение
				// нет реквизита вес брутто
			КонецПопытки;
			
			СуммаБезНДС = Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма - ТекСтрока.СуммаНДС, ТекСтрока.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			// Вдруг количество = 0 
			Попытка
				РасчетнаяЦена = Формат(СуммаБезНДС/ТекСтрока.Количество,"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			Исключение
				РасчетнаяЦена = 0;
			КонецПопытки;
			
			СвТов.Цена 		= РасчетнаяЦена;
			СвТов.СумБезНДС = СуммаБезНДС;
			
			Если НЕ ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СвТов.СтавкаНДС	= Формат(УчетНДС.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС), "ЧЦ=10; ЧДЦ=5; ЧРД='.'; ЧГ=0; ЧН=0");
				СвТов.СумНДС	= Формат(ТекСтрока.СуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			КонецЕсли;
			
			СвТов.СумУчНДС		= Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма, ТекСтрока.Сумма +  ТекСтрока.СуммаНДС), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			
			СтрокаИнфПол 		= ЗаполнитьИнфПолТОРГ12(ТекСтрока, ЕстьХарактеристики, ЭтоБухгалтерия, ФабрикаИнфПол);
			СвТов.ИнфПолСтр 	= СтрокаИнфПол;
			
			Таблица.СвТов.Добавить(СвТов);
		КонецЦикла;	
		
		//Услуги
		Для Каждого ТекСтрока Из Документ.Услуги Цикл
			НомерСтроки = НомерСтроки + 1;
			//Сведения о товаре (работе, услуге) (СвТов)
			СвТов 			= Фабрика.Создать(ЭлементТаблица.Свойства.Получить("СвТов").Тип);
			СвТов.НомТов	= НомерСтроки;
			
			//Заполняем из полного наим, если оно не пустое и короче 1000 симв.
			Если СтрДлина(СокрЛП(ТекСтрока.Номенклатура.НаименованиеПолное)) <= 1000 И ЗначениеЗаполнено(ТекСтрока.Номенклатура.НаименованиеПолное) Тогда
				СвТов.НаимТов 	= СокрЛП(ТекСтрока.Номенклатура.НаименованиеПолное);
			Иначе
				СвТов.НаимТов	= СокрЛП(ТекСтрока.Номенклатура.Наименование);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.Артикул) Тогда
				СвТов.АртикулТов = ТекСтрока.Номенклатура.Артикул;
			КонецЕсли;
			
			СвТов.КодТов 		= ТекСтрока.Номенклатура.Код;
			СвТов.НаимЕдИзм 	= ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
			
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код) Тогда
				СвТов.ОКЕИ_Тов		= СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код);
			КонецЕсли;
			
			СвТов.Нетто			= Формат(ТекСтрока.Количество, "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
			
			СуммаБезНДС = Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма - ТекСтрока.СуммаНДС, ТекСтрока.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			// Вдруг количество = 0 
			Попытка
				РасчетнаяЦена = Формат(СуммаБезНДС/ТекСтрока.Количество,"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			Исключение
				РасчетнаяЦена = 0;
			КонецПопытки;			
			
			СвТов.Цена		= РасчетнаяЦена;
			СвТов.СумБезНДС = СуммаБезНДС;
			
			Если НЕ ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СвТов.СтавкаНДС = Формат(УчетНДС.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС), "ЧЦ=10; ЧДЦ=5; ЧРД='.'; ЧГ=0; ЧН=0");
			КонецЕсли;
			
			СвТов.СумНДС	= Формат(ТекСтрока.СуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			СвТов.СумУчНДС	= Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма, ТекСтрока.Сумма +  ТекСтрока.СуммаНДС), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			Таблица.СвТов.Добавить(СвТов);
		КонецЦикла;
										
		ТН.Таблица 		= Таблица;
		//Реквизиты строки Всего по накладной (ВсегоНакл)
		ВсегоНакл			= Фабрика.Создать(ЭлементТаблица.Свойства.Получить("ВсегоНакл").Тип);
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, "Товары") И
			Документ.Товары.Итог("КоличествоМест") > 0 Тогда
			ВсегоНакл.КолМестВс = Формат(Документ.Товары.Итог("КоличествоМест"), "ЧГ=0");
		КонецЕсли;                                                                                                                 
		
		Если БруттоВсего > 0 Тогда
			ВсегоНакл.БруттоВс 		= Формат(БруттоВсего, "ЧЦ=12; ЧДЦ=3;ЧРД='.';ЧГ=0; ЧН=0");
		КонецЕсли;
		
		СуммаНДСДокумента 		= Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
		ВсегоНакл.НеттоВс		= Формат(Документ.Товары.Итог("Количество"), "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
		ВсегоНакл.СумБезНДСВс	= Формат(Документ.СуммаДокумента - СуммаНДСДокумента, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		ВсегоНакл.СумНДСВс		= Формат(СуммаНДСДокумента, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		ВсегоНакл.СумУчНДСВс	= Формат(Документ.СуммаДокумента, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		Таблица.ВсегоНакл 		= ВсегоНакл;
				
		//Общие сведения товарной накладной (ТНОбщ)
		ТнОбщ 				= Фабрика.Создать(ЭлементТН.Свойства.Получить("ТнОбщ").Тип);
		КоличествоЗаписей 	= Документ.Товары.Количество() + Документ.Услуги.Количество();
		ТнОбщ.КолНомЗап		= КоличествоЗаписей;
		ТнОбщ.КолНомЗапПр	= ЧислоПрописью(КоличествоЗаписей,"",",,,м,,,,,0");
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, "Товары")  И
			Документ.Товары.Итог("КоличествоМест") > 0 Тогда
			ТнОбщ.ВсМест	= Формат(Документ.Товары.Итог("КоличествоМест"), "ЧГ=0");
			ТнОбщ.ВсМестПр 	= ЧислоПрописью(Документ.Товары.Итог("КоличествоМест"),"",",,,м,,,,,0");
		КонецЕсли;
				
		ТнОбщ.Нетто		= Формат(Документ.Товары.Итог("Количество"), "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
		ТнОбщ.НеттоПр	= ЧислоПрописью(Документ.Товары.Итог("Количество"),"",",,,,,,,,3");
		
		Если НЕ БруттоВсего = 0 Тогда
			ТнОбщ.Брутто	= Формат(БруттоВсего, "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
			ТнОбщ.БруттоПр	= ЧислоПрописью(БруттоВсего,"",",,,,,,,,0") + "кг.";
		КонецЕсли;
		
		ТН.ТнОбщ			= ТнОбщ;
		СвТНО.ТН			= ТН;
		
		//Сведения по отпуску груза (ОтпускГруз)                                      
		ОтпускГруз 				= Фабрика.Создать(ЭлементСвТНО.Свойства.Получить("ОтпускГруз").Тип);
		ОтпускГруз.СумОтпуск 	= Формат(Документ.СуммаДокумента, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		ОтпускГруз.СумОтпускПр	= СформироватьСуммуПрописью(Документ.СуммаДокумента, мВалютаРегламентированногоУчета);
		ОтпускГруз.ДатаОтпуск	= Формат(Документ.Дата, "ДЛФ=Д");	
		
		Руководители 	= ПолучитьОтветственныхЛицОрганизации(Документ.Организация, Документ.Дата);
		ОтпускРазрешил 	= Неопределено;
		
		//Для Бух
		Если ЕстьРеквизитДокумента("Руководитель", МетаданныеДокумента) И  ЗначениеЗаполнено(Документ.Руководитель) Тогда
			ОтпускРазрешил = СокрЛП(Строка(Документ.Руководитель));
			//Для УТ и КА
		ИначеЕсли ЕстьРеквизитДокумента("ОтпускРазрешил", МетаданныеДокумента) И ЗначениеЗаполнено(Документ.ОтпускРазрешил) Тогда
			ОтпускРазрешил = СокрЛП(Строка(Документ.ОтпускРазрешил));
		КонецЕсли;
		
		//Сведения о должностном лице (ОтпускРазреш)
		//Если ЗначениеЗаполнено(Руководители.РуководительДолжность) Тогда
		Если ЗначениеЗаполнено(ОтпускРазрешил) Тогда
			ОтпускРазреш 			= Фабрика.Создать(ТипДолжЛицо);
			
			Если ЗначениеЗаполнено(Руководители.РуководительДолжность) Тогда
				ОтпускРазреш.Должность	= Строка(Руководители.РуководительДолжность);
			КонецЕсли;
			
			Если ОтпускРазрешил <> Неопределено Тогда
				ДолжностноеЛицо = ОтпускРазрешил;
			ИначеЕсли Руководители.Руководитель <> Неопределено Тогда
				ДолжностноеЛицо = Руководители.Руководитель;
			Иначе
				ДолжностноеЛицо = ПодписантСтруктура();
			КонецЕсли;
			
			ФИО = СоздатьОбъектФИОИзДолжностногоЛица(Фабрика, ТипФИО, ДолжностноеЛицо);
			
			ОтпускРазреш.ФИО 		= ФИО;
			ОтпускГруз.ОтпускРазреш = ОтпускРазреш;
		КонецЕсли;
		
		//Сведения о должностном лице (Бухгалтер)
		//Для Бух и КА
		Если ЕстьРеквизитДокумента("ГлавныйБухгалтер", МетаданныеДокумента) Тогда
			Бухгалтер = ?(ЗначениеЗаполнено(Документ.ГлавныйБухгалтер), Документ.ГлавныйБухгалтер, Руководители.ГлавныйБухгалтер);
			//Для УТ
		Иначе 
			Бухгалтер = Руководители.ГлавныйБухгалтер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Бухгалтер) Тогда
			Бух						= Фабрика.Создать(ТипДолжЛицо);
			Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерДолжность) Тогда
				Бух.Должность			= Строка(Руководители.ГлавныйБухгалтерДолжность);
			КонецЕсли;
			
			ФИО = СоздатьОбъектФИОИзДолжностногоЛица(Фабрика, ТипФИО, Бухгалтер);
			
			Бух.ФИО = ФИО;
			ОтпускГруз.Бухгалтер = Бух;
		КонецЕсли;	
		
		//Сведения о должностном лице (ОтпускПроизв)
		Если ЗначениеЗаполнено(Документ.ОтпускПроизвел) Тогда
			ОтпускПроизв			= Фабрика.Создать(ТипДолжЛицо);
			
			ФИО	= СоздатьОбъектФИОИзДолжностногоЛица(Фабрика, ТипФИО, Документ.ОтпускПроизвел);
			
			ОтпускПроизв.ФИО = ФИО;
			ОтпускГруз.ОтпускПроизв = ОтпускПроизв;
		КонецЕсли;
		
		СвТНО.ОтпускГруз = ОтпускГруз;
		//Сведения о лице, подписывающем документ в электронном виде (Подписант)
		Подп = Фабрика.Создать(ЭлементДокумент.Свойства.Получить("Подписант").Тип);		
		
		Подписант = ПодписантСтруктура();
		
		Если Подписант = Неопределено Тогда
			ВызватьИсключение "Не удалось получить информацию о подписанте";
		КонецЕсли;
		
		//Сведения о лице, подписывающем документ в электронном виде
		Подп 	= Фабрика.Создать(ЭлементПодписант);
		ФИО		= СоздатьОбъектФИО(Фабрика, ТипФИО, Подписант.ФИО);
		Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
			//Индивидуальный предприниматель (ИП)
			ИП 				= Фабрика.Создать(ЭлементПодписант.Свойства.Получить("ИП").Тип);
			ИП.ИННФЛ 		= Подписант.ИННФЛ;
			ИП.СвГосРегИП	= Подписант.СвГосРегИП;
			ИП.ФИО 	= ФИО;
			Подп.ИП = ИП;
		Иначе
			//Организация (ЮЛ)
			ЮЛ 			= Фабрика.Создать(ЭлементПодписант.Свойства.Получить("ЮЛ").Тип);
			ЮЛ.ИННЮЛ	= Подписант.ИННЮЛ;
			
			Если ЗначениеЗаполнено(Подписант.Должность) Тогда
				ЮЛ.Должн = Подписант.Должность;
			КонецЕсли;
			
			ЮЛ.ФИО 	= ФИО;
			Подп.ЮЛ = ЮЛ;
		КонецЕсли;
		
		Док.СвТНО 			= СвТНО;                                                            
		Док.Подписант		= Подп;
		Файл.Документ 		= Док;
		
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(КаталогЭД + ИмяФайлаЭД + ".xml", ТипКодировки);
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		Фабрика.ЗаписатьXML(НоваяЗаписьXML, Файл);
		НоваяЗаписьXML.Закрыть();
		
		ЭД_ДвоичныеДанные = Новый ДвоичныеДанные(КаталогЭД + ИмяФайлаЭД + ".xml");
		
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", ЭД_ДвоичныеДанные);
		ДокументXML_Структура.Вставить("Документ_ИмяФайла", ИмяФайлаЭД);
		
		Возврат ДокументXML_Структура;
	Исключение
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <" + Документ + ">. " + ОписаниеОшибки());
		ОткрытьФормуПредпростраДокумента(Документ, БезАвторизации, СтруктураУступочнойНадписи, "Торг12");
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
КонецФункции

//Функция формирует XML-файл (контент) документа с типом "Торг12" для предпросмотра с указанием ошибок/предупреждений
//
// Параметры:
//  Документ: ссылка на учетный документ 1С
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент), имя файла сформированного электронного документа, структура с описанием ошибок/предупреждений
//
Функция СоздатьЭДТОРГ12ПродавецПревью(Документ, БезАвторизации = Неопределено, СтруктураУступочнойНадписи) Экспорт
	
	СтруктураДанных = СформироватьСтруктуруДанныхДляПревьюДокумента(Документ);
			
	//Проверим валюту документа. 
	Если СокрЛП(Документ.ВалютаДокумента.Код) <> "643" Тогда 
		ОписаниеОшибкиСтрокой = "Код валюты документа отличен от 643";
		СтруктураИсключения = ЗаполнитьСтруктуруИсключения(СокрЛП(Документ.ВалютаДокумента.Код), "643", ОписаниеОшибкиСтрокой, Истина);
		СтруктураДанных.Вставить("ОблВалютаОшибка", СтруктураИсключения);
  	КонецЕсли;
	
	МетаданныеДокумента 				= Документ.Метаданные();
	МетаданныеСправочникаОрганизации    = Метаданные.Справочники.Организации;
	
	// Создаем фабрику из схемы
	Попытка
		Фабрика 						= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_OTORG12_1_986_00_05_01_02").ПолучитьТекст());
		КаталогЭД 						= КаталогВременныхФайлов();
		ТипКодировки 					= "windows-1251";		
		
		ИмяФайлаЭД = "DP_OTORG12" + "_" +
		СтруктураДанных.ИдентификаторПолучателя + "_" +
		СтруктураДанных.ИдентификаторОтправителя + "_" +
		Формат(Документ.Дата, "ДФ=""ггггММдд""") + "_" +
		Документ.УникальныйИдентификатор();
		
		//Определение типов XDTO
		ТипАдрес					= Фабрика.Тип("OTORG12", "АдресТип");
		ТипАдресИно					= Фабрика.Тип("OTORG12", "АдрИноТип");
		ТипАдресРФ					= Фабрика.Тип("OTORG12", "АдрРФТип");
		ТипДолжЛицо  				= Фабрика.Тип("OTORG12", "ДолжЛицоТип");
		ТипКонтакт		  			= Фабрика.Тип("OTORG12", "КонтактТип");
		ТипТаблица                  = Фабрика.Тип("OTORG12", "ТаблицаТип");
		ТипУчастник				    = Фабрика.Тип("OTORG12", "УчастникТип");
		ТипФИО						= Фабрика.Тип("OTORG12", "ФИОТип");
		
		//Определение типов элементов XDTO
		ЭлементФайл					= Фабрика.Тип("OTORG12", "Файл");
		ЭлементСвУчДокОбор			= ЭлементФайл.Свойства.Получить("СвУчДокОбор").Тип;
		ЭлементСвОЭДОтпрСФ			= ЭлементСвУчДокОбор.Свойства.Получить("СвОЭДОтпрСФ").Тип;
		ЭлементДокумент				= ЭлементФайл.Свойства.Получить("Документ").Тип;
		ЭлементСвТНО				= ЭлементДокумент.Свойства.Получить("СвТНО").Тип;
		ЭлементГрузОт				= ЭлементСвТНО.Свойства.Получить("ГрузОт").Тип;
		ЭлементГрузПолуч			= ЭлементСвТНО.Свойства.Получить("ГрузПолуч").Тип;
		ЭлементПоставщик			= ЭлементСвТНО.Свойства.Получить("Поставщик").Тип;
		ЭлементПлательщик			= ЭлементСвТНО.Свойства.Получить("Плательщик").Тип;
		ЭлементОснование			= ЭлементСвТНО.Свойства.Получить("Основание").Тип;
		ЭлементТранНакл				= ЭлементСвТНО.Свойства.Получить("ТранНакл").Тип;
		ЭлементТН					= ЭлементСвТНО.Свойства.Получить("ТН").Тип;
		ЭлементТаблица				= ЭлементТН.Свойства.Получить("Таблица").Тип;
		ЭлементОтпускГруз			= ЭлементСвТНО.Свойства.Получить("ОтпускГруз").Тип;
		ЭлементИнфПол				= ЭлементСвТНО.Свойства.Получить("ИнфПол").Тип;
		ЭлементПодписант			= ЭлементДокумент.Свойства.Получить("Подписант").Тип; 
		
		//Файл обмена (Файл)
		Файл = Фабрика.Создать(ЭлементФайл);
		Файл.ИдФайл 	= ИмяФайлаЭД;
		Файл.ВерсПрог	= СформироватьСтрокуВерсПрог();
		Файл.ВерсФорм 	= "5.01";
		//Сведения об участниках электронногодокументооборота (СвУчДокОбор)
		СвУчДокОбор = Фабрика.Создать(ЭлементСвУчДокОбор);
		
		Если НЕ ТипЗнч(СтруктураДанных.ИдентификаторОтправителя) = Тип("Структура") Тогда
			СвУчДокОбор.ИдОтпр 	= СтруктураДанных.ИдентификаторОтправителя;
		Иначе
			СвУчДокОбор.ИдОтпр 	= СтруктураДанных.ИдентификаторОтправителя.ЭталонноеЗначение;
		КонецЕсли;
		
		Если НЕ ТипЗнч(СтруктураДанных.ИдентификаторПолучателя) = Тип("Структура") Тогда
			СвУчДокОбор.ИдПок = СтруктураДанных.ИдентификаторПолучателя;
		Иначе
			СвУчДокОбор.ИдПок = СтруктураДанных.ИдентификаторПолучателя.ЭталонноеЗначение;
		КонецЕсли;
		
		//Сведения об операторе электронного документооборота отправителя (СвОЭДОтпр)
		СвОЭДОтпрСФ = Фабрика.Создать(ЭлементСвОЭДОтпрСФ);
		
		Если ТипЗнч(СтруктураДанных.SubjectInfo_ЭДО) = Тип("ОбъектXDTO") Тогда
			СвОЭДОтпрСФ.НаимОрг		= СтруктураДанных.SubjectInfo_ЭДО.Name;
			СвОЭДОтпрСФ.ИННЮЛ		= СтруктураДанных.SubjectInfo_ЭДО.Inn;
			СвОЭДОтпрСФ.ИдЭДОСФ		= СтруктураДанных.ИдентификаторЭДО;
		Иначе
			СвОЭДОтпрСФ.НаимОрг		= СтруктураДанных.SubjectInfo_ЭДО.ЭталонноеЗначение.Name;
			СвОЭДОтпрСФ.ИННЮЛ		= СтруктураДанных.SubjectInfo_ЭДО.ЭталонноеЗначение.Inn;
			СвОЭДОтпрСФ.ИдЭДОСФ		= СтруктураДанных.SubjectInfo_ЭДО.ЭталонноеЗначение.OperatorServiceCode;
		КонецЕсли;
		
		СвУчДокОбор.СвОЭДОтпрСФ = СвОЭДОтпрСФ;			
		Файл.СвУчДокОбор		= СвУчДокОбор;
		
		//Документ (Документ Торг-12)
		Док = Фабрика.Создать(ЭлементДокумент);
		Док.КНД 	= "1175004";
		
		Если Документ.Дата > ТекущаяДата() Тогда
			ОписаниеОшибкиСтрокой 	= "Дата документа больше текущей даты.";
			СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Формат(Документ.Дата, "ДЛФ=Д"), Формат(ТекущаяДата(), "ДЛФ=Д"), ОписаниеОшибкиСтрокой, Ложь);
            СтруктураДанных.Вставить("ОблДатаДокументаОшибки", СтруктураИсключения);
			 			
			Док.ДатаДок = Формат(Документ.Дата, "ДЛФ=Д");
			Док.ВремДок = Формат(Документ.Дата, "ДФ=""ЧЧ.мм.сс""");
		ИначеЕсли НЕ ЗначениеЗаполнено(Документ.Дата) Тогда
			ОписаниеОшибкиСтрокой 	= "В документе не заполнена дата.";
            СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, Формат(ТекущаяДата(), "ДЛФ=Д"), ОписаниеОшибкиСтрокой, Ложь);
			СтруктураДанных.Вставить("ОблДатаДокументаОшибки", СтруктураИсключения);
			                                                                                                                                                                                 
			Док.ДатаДок = Формат(ТекущаяДата(), "ДЛФ=Д");
			Док.ВремДок = Формат(ТекущаяДата(), "ДФ=""ЧЧ.мм.сс""");		
		Иначе
			Док.ДатаДок = Формат(Документ.Дата, "ДЛФ=Д");
			Док.ВремДок = Формат(Документ.Дата, "ДФ=""ЧЧ.мм.сс""");			
		КонецЕсли;
				
		//Товарная накладная, титул продавца (СвТНО)	
		СвТНО = Фабрика.Создать(ЭлементСвТНО);
		СвТНО.НаимПервДок 	= "Товарная накладная";
		СвТНО.ОКУДПервДок	= "0330212";
		СвТНО.НомФорм		= "ТОРГ-12";
		//Сведения о грузоотправителе (ГрузОт)
		ГрузОт		 		= Фабрика.Создать(ЭлементГрузОт);
		Грузоотправитель 	= ?(ЗначениеЗаполнено(Документ.Грузоотправитель), Документ.Грузоотправитель, Документ.Организация);
		
		//Грузоотправитель (ГрузОтпр)
		ГрузОтпр = Фабрика.Создать(ТипУчастник);
		
		Если ЗначениеЗаполнено(Грузоотправитель.КодПоОКПО) Тогда
			СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Грузоотправитель.КодПоОКПО);
			Если СтруктураПроверки.КорректноеЗначение Тогда
				ГрузОтпр.ОКПО = СокрЛП(Грузоотправитель.КодПоОКПО);
			Иначе
				ОписаниеОшибкиСтрокой 	= "У грузоотправителя [" + Строка(Грузоотправитель) + "] код ОКПО содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				СтруктураИсключения		= ЗаполнитьСтруктуруИсключения(Грузоотправитель.КодПоОКПО, "1234567890", ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблОргОКПООшибки", СтруктураИсключения);
 				ГрузОтпр.ОКПО = "1234567890";
			КонецЕсли;
		КонецЕсли;
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(ГрузОтпр.Тип().Свойства.Получить("ИдСв").Тип);
		
		Если Грузоотправитель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			//Сведения об организации 
			СвЮЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг	= Грузоотправитель.НаименованиеПолное;
			
			СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Грузоотправитель.ИНН);
			ГрузОтпрИНН = Грузоотправитель.ИНН;
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
				ОписаниеОшибкиСтрокой 	= "У грузоотправителя [" + Строка(Грузоотправитель) + "] ИНН содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузоотправитель.ИНН, "1831010101", ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПредставлениеГрузОтпрОшибки", СтруктураИсключения);
                ГрузОтпрИНН = "1831010101";
				ГрузОтпрОшибки = ?(ЗначениеЗаполнено(ГрузОтпрОшибки), ГрузОтпрОшибки + Символы.ПС + ОписаниеОшибкиСтрокой, ОписаниеОшибкиСтрокой);
			КонецЕсли;
			
			Если СтрДлина(Грузоотправитель.ИНН) > 10 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузОтпрОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "У грузоотправителя [" + Строка(Грузоотправитель) + "] некорректный ИНН. Для юр.лица ИНН должен состоять из 10 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузоотправитель.ИНН, "1831010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеГрузОтпрОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки + Символы.ПС + "ИНН должен состоять из 10 символов.";
				КонецЕсли;
				ГрузОтпрИНН = "1831010101";
			КонецЕсли;
			
			// Текущее значение некорректного ИНН
			Если ГрузОтпрИНН <> Грузоотправитель.ИНН Тогда
				СтруктураДанных.Вставить("ГрузОтИННОшибка", Грузоотправитель.ИНН);
			КонецЕсли;
						
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Грузоотправитель.КПП);
			ГрузОтпрКПП			= Грузоотправитель.КПП;			
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузОтпрОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "У грузоотправителя [" + Строка(Грузоотправитель) + "] КПП содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузоотправитель.КПП, "183101010", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеГрузОтпрОшибки", СтруктураИсключения);
					ГрузОтпрКПП = "183101010";
				Иначе
					СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки + Символы.ПС + "КПП содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрДлина(Грузоотправитель.КПП) <> 9 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузОтпрОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "У грузоотправителя [" + Строка(Грузоотправитель) + "] КПП должен состоять из 9 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузоотправитель.КПП, "183101010", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеГрузОтпрОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки + Символы.ПС + "КПП должен состоять из 9 символов.";
				КонецЕсли;
				ГрузОтпрКПП = "183101010";
			КонецЕсли;
			
			// Текущее значение некорректного КПП
			Если ГрузОтпрКПП <> Грузоотправитель.КПП Тогда
				СтруктураДанных.Вставить("ГрузОтКППОшибка", Грузоотправитель.КПП);	
			КонецЕсли;
						
			СвЮЛ.ИННЮЛ	= ГрузОтпрИНН;
			СвЮЛ.КПП    = ГрузОтпрКПП;
			ИдСВ.СвЮЛ 	= СвЮЛ;
		Иначе                                    
			//Сведения об индивидуальном предпринимателе	
			СвФЛ 				= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Грузоотправитель.ИНН);
			ГрузОтпрИНН = Грузоотправитель.ИНН;
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда			
				Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
					ОписаниеОшибкиСтрокой 	= "У грузоотправителя [" + Строка(Грузоотправитель) + "] ИНН содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузоотправитель.ИНН, "183101010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеГрузОтпрОшибки", СтруктураИсключения);
					ГрузОтпрИНН = "183101010101";
				КонецЕсли;
				
				Если СтрДлина(Грузоотправитель.ИНН) < 12 Тогда
					Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузОтпрОшибки") Тогда
						ОписаниеОшибкиСтрокой 	= "У грузоотправителя [" + Строка(Грузоотправитель) + "] некорректный ИНН. Для физ.лица ИНН должен состоять из 12 символов.";
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузоотправитель.ИНН, "183101010101", ОписаниеОшибкиСтрокой, Истина);
						СтруктураДанных.Вставить("ОблПредставлениеГрузОтпрОшибки", СтруктураИсключения);
					Иначе
						СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки + Символы.ПС + "ИНН должен состоять из 12 символов.";
					КонецЕсли;
					ГрузОтпрИНН = "183101010101";
				КонецЕсли;
			КонецЕсли;
			
			// Текущее значение некорректного ИНН
			Если ГрузОтпрИНН <> Грузоотправитель.ИНН Тогда
				СтруктураДанных.Вставить("ГрузОтИННОшибка", Грузоотправитель.ИНН);
			КонецЕсли;
			
			СвФЛ.ИННФЛ 			= ГрузОтпрИНН;
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Грузоотправитель);
			Если ФИОИП <> Неопределено Тогда
				
				СвФЛ.ФИОИП = ФИОИП;
				
			Иначе
				
				СтруктураФИОФизЛица = Новый_ФИО("Иванов", "Иван", "Иванович");
				
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузОтпрОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "Не удалось получить ФИО грузоотправителя [" + Строка(Грузоотправитель) + "] проверьте заполнение справочника в 1С.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, СтруктураФИОФизЛица, ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеГрузОтпрОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				
				// Некорректное ФИО ГП
				СтруктураДанных.Вставить("ГрузОтФИООшибка", "-"); 
				
			КонецЕсли;
			
			ИдСв.СвФЛ = СвФЛ;
			
		КонецЕсли;
		
		ГрузОтпр.ИдСв = ИдСв;
		
		//Адрес
		Адрес = Фабрика.Создать(ГрузОтпр.Тип().Свойства.Получить("Адрес").Тип);
		
		Если НЕ СтруктураДанных.АдресГрузоотправителя.ЕстьОшибкиЗаполнения Тогда
			Если СтруктураДанных.АдресГрузоотправителя.АдресСтруктура.АдресРФ Тогда
				//Адрес местонахождения в Российской Федерации (структурированный)
				АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
				ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресГрузоотправителя.АдресСтруктура); 
				Адрес.АдрРФ = АдрРФ;
			Иначе                                                                     
				АдрИно 			= Фабрика.Создать(ТипАдресИно);
				ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресГрузоотправителя.АдресСтруктура);
				Адрес.АдрИно 	= АдрИно;
			КонецЕсли;
			ГрузОтпр.Адрес = Адрес;
		Иначе
			АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
			ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресГрузоотправителя.АдресСтруктура.ТекущееЗначение); 
			Адрес.АдрРФ = АдрРФ;
			ГрузОтпр.Адрес = Адрес;
			
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузОтпрОшибки") Тогда
				ОписаниеОшибкиСтрокой 	= СтруктураДанных.АдресГрузоотправителя.АдресСтруктура.ОписаниеОшибки;
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", СтруктураДанных.АдресГрузоотправителя.АдресСтруктура.ЭталонноеЗначение, ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПредставлениеГрузОтпрОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки + Символы.ПС + СтруктураДанных.АдресГрузоотправителя.АдресСтруктура.ОписаниеОшибки;
			КонецЕсли;
			
			Если СтруктураДанных.АдресГрузоотправителя.АдресНайден Тогда
				ОшибкиАдреса = "";
				
				Для Каждого ЭлементСтруктуры Из СтруктураДанных.АдресГрузоотправителя.АдресОшибки Цикл
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Структура") Тогда
						ОшибкиАдреса = ?(НЕ ЗначениеЗаполнено(ОшибкиАдреса), ЭлементСтруктуры.Значение.ОписаниеОшибки, ОшибкиАдреса + Символы.ПС + ЭлементСтруктуры.Значение.ОписаниеОшибки);
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ОшибкиАдреса) Тогда
					СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки + Символы.ПС + ОшибкиАдреса;
				КонецЕсли;
				
				СтруктураДанных.Вставить("ГрузОтАдресОшибка", СтруктураДанных.АдресГрузоотправителя.АдресОшибки);
			КонецЕсли;
        КонецЕсли;
		
		//Контактные сведения			
		Если ЗначениеЗаполнено(СтруктураДанных.ТлфГрузоотправителя) ИЛИ ЗначениеЗаполнено(СтруктураДанных.ФаксГрузоотправителя) Тогда 
			Контакт = Фабрика.Создать(ГрузОтпр.Тип().Свойства.Получить("Контакт").Тип);
			
			Если НЕ ТипЗнч(СтруктураДанных.ТлфГрузоотправителя) = Тип("Структура") Тогда
				Контакт.Тлф 		= СтруктураДанных.ТлфГрузоотправителя;
				ГрузОтпр.Контакт 	= Контакт;
			Иначе
				ОписаниеОшибкиСтрокой 	= "Не найден телефон грузоотправителя";
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузОтпрОшибки") Тогда
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
					СтруктураДанных.Вставить("ОблПредставлениеГрузОтпрОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				СтруктураДанных.Вставить("ГрузОтТлфОшибка", "-");
			КонецЕсли;
			
			Если НЕ ТипЗнч(СтруктураДанных.ФаксГрузоотправителя) = Тип("Структура") Тогда
				Контакт.Факс 		= СтруктураДанных.ФаксГрузоотправителя;
				ГрузОтпр.Контакт 	= Контакт;
			Иначе
				ОписаниеОшибкиСтрокой 	= "Не найден факс грузоотправителя";
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузОтпрОшибки") Тогда
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
					СтруктураДанных.Вставить("ОблПредставлениеГрузОтпрОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				СтруктураДанных.Вставить("ГрузОтФаксОшибка", "-");
			КонецЕсли;
		КонецЕсли;
		
		//Банковские реквизиты
		Если НЕ СтруктураДанных.ДанныеСчетаГрузоотправителя.Свойство("ЭтоОшибка") Тогда
			БанкРекв 			= Фабрика.Создать(ГрузОтпр.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаГрузоотправителя.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаГрузоотправителя); 
			БанкРекв.СвБанк 	= СвБанк;
			ГрузОтпр.БанкРекв 	= БанкРекв;
		Иначе
			ОписаниеОшибкиСтрокой 	= "Не найдены данные расчетного счета грузоотправителя";
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузОтпрОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблПредставлениеГрузОтпрОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузОтпрОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			СтруктураДанных.Вставить("ГрузОтСчетОшибка", "-");
 		КонецЕсли;
		
		Если ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(Документ.Подразделение) Тогда
				ГрузОт.СтруктПодр = Строка(Документ.Подразделение);	
			КонецЕсли;
		КонецЕсли;
		
		ГрузОт.ГрузОтпр = ГрузОтпр;
		СвТНО.ГрузОт = ГрузОт;
		
		//Грузополучатель (ГрузПолуч)
		Грузополучатель = ?(ЗначениеЗаполнено(Документ.Грузополучатель), Документ.Грузополучатель, Документ.Контрагент);
		ГрузПолуч 		= Фабрика.Создать(ТипУчастник);
		
		Если ЗначениеЗаполнено(Грузополучатель.КодПоОКПО) Тогда
			СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Грузополучатель.КодПоОКПО);
			
			Если СтруктураПроверки.КорректноеЗначение Тогда
				ГрузПолуч.ОКПО = СокрЛП(Грузополучатель.КодПоОКПО);
			Иначе
				ОписаниеОшибкиСтрокой 	= "У грузополучателя [" + Строка(Грузополучатель) + "] код ОКПО содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузополучатель.КодПоОКПО,  "1234567890", Истина);
				СтруктураДанных.Вставить("ОблГрузПолучОКПООшибки", СтруктураИсключения);
				ГрузПолуч.ОКПО 			= "1234567890";
			КонецЕсли;
		КонецЕсли;
		
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(ГрузПолуч.Тип().Свойства.Получить("ИдСв").Тип);
		
		Если Грузополучатель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			//Сведения об организации 
			СвЮЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг	= Грузополучатель.НаименованиеПолное;
			
			СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Грузополучатель.ИНН);
			ГрузПолучИНН = Грузополучатель.ИНН;
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузПолучОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "У грузополучателя [" + Строка(Грузополучатель) + "] ИНН содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузополучатель.ИНН, "1831010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеГрузПолучОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки + Символы.ПС + "ИНН содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				КонецЕсли;
				ГрузПолучИНН 	= "1831010101";
			КонецЕсли;
			
			Если СтрДлина(Грузополучатель.ИНН) > 10 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузПолучОшибки") Тогда
					ОписаниеОшибкиСтрокой	= "У грузополучателя [" + Строка(Грузополучатель) + "] некорректный ИНН. Для юр.лица ИНН должен состоять из 10 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузополучатель.ИНН, "1831010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ГрузПолучИНН", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки + Символы.ПС + "ИНН должен состоять из 10 символов.";
				КонецЕсли;
				ГрузПолучИНН 	= "1831010101";
			КонецЕсли;
			
			Если ГрузПолучИНН <> Грузополучатель.ИНН Тогда
				СтруктураДанных.Вставить("ГрузПолучИННОшибка", Грузополучатель.ИНН);
			КонецЕсли;
						
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Грузополучатель.КПП);
			ГрузПолучКПП		= Грузополучатель.КПП;			
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузПолучОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "У грузополучателя [" + Строка(Грузополучатель) + "] КПП содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузополучатель.КПП, "183101010", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ГрузПолучКПП", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки + Символы.ПС + "КПП содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				КонецЕсли;
				ГрузПолучКПП = "183101010";
			КонецЕсли;
			
			Если СтрДлина(Грузополучатель.КПП) <> 9 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузПолучОшибки") Тогда
					ОписаниеОшибкиСтрокой	= "У грузополучателя [" + Строка(Грузополучатель) + "] КПП должен состоять из 9 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузополучатель.КПП, "183101010", ОписаниеОшибкиСтрокой, Истина);;
	                СтруктураДанных.Вставить("ОблПредставлениеГрузПолучОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки + Символы.ПС + "КПП должен состоять из 9 символов.";
				КонецЕсли;
				 ГрузПолучКПП = "183101010";
			КонецЕсли;

			Если ГрузПолучКПП <> Грузополучатель.КПП Тогда
				СтруктураДанных.Вставить("ГрузПолучКППОшибка", Грузополучатель.КПП);
			КонецЕсли;
						
			СвЮЛ.ИННЮЛ	= ГрузПолучИНН;
			СвЮЛ.КПП    = ГрузПолучКПП;
			ИдСВ.СвЮЛ 	= СвЮЛ;
		Иначе
			//Сведения об индивидуальном предпринимателе	
			СвФЛ 				= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Грузополучатель.ИНН);
 			ГрузПолучИНН = Грузополучатель.ИНН;
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда			
				ОписаниеОшибкиСтрокой 	= "У грузополучателя [" + Строка(Грузополучатель) + "] ИНН содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузополучатель.ИНН, "183101010101", ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПредставлениеГрузПолучОшибки", СтруктураИсключения);
				ГрузПолучИНН 	= "183101010101";
			КонецЕсли;
				
			Если СтрДлина(Грузополучатель.ИНН) < 12 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузПолучОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "У грузополучателя [" + Строка(Грузополучатель) + "] некорректный ИНН. Для физ.лица ИНН должен состоять из 12 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Грузополучатель.ИНН, "183101010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеГрузПолучОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки + Символы.ПС + "ИНН должен состоять из 12 символов.";
				КонецЕсли;
				ГрузПолучИНН 	= "183101010101";
			КонецЕсли;
			
			Если ГрузПолучИНН <> Грузополучатель.ИНН Тогда
				СтруктураДанных.Вставить("ГрузПолучИННОшибка", Грузополучатель.ИНН);
			КонецЕсли;
			
			СвФЛ.ИННФЛ 			= ГрузПолучИНН;
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Грузополучатель);
			Если ФИОИП <> Неопределено Тогда
				
				СвФЛ.ФИОИП = ФИОИП;
				
			Иначе
				
				СтруктураФИОФизЛица = Новый_ФИО("Иванов", "Иван", "Иванович");

				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузПолучОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "Не удалось получить ФИО грузополучателя [" + Строка(Грузополучатель) + "] проверьте заполнение справочника в 1С.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, СтруктураФИОФизЛица, ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеГрузПолучОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				
				СтруктураДанных.Вставить("ГрузПолучФИООшибка", "-");
				
			КонецЕсли;
			
			ИдСв.СвФЛ 	= СвФЛ;	
			
 		КонецЕсли;
		
		ГрузПолуч.ИдСв = ИдСв;
				
		Адрес = Фабрика.Создать(ГрузПолуч.Тип().Свойства.Получить("Адрес").Тип); 
		
		//Адрес
		Если НЕ СтруктураДанных.АдресГрузополучателя.ЕстьОшибкиЗаполнения Тогда
			Если СтруктураДанных.АдресГрузополучателя.АдресСтруктура.АдресРФ Тогда
				//Адрес местонахождения в Российской Федерации (структурированный)
				АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
				ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресГрузополучателя.АдресСтруктура); 
				Адрес.АдрРФ = АдрРФ;
			Иначе                                                                     
				АдрИно 			= Фабрика.Создать(ТипАдресИно);
				ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресГрузополучателя.АдресСтруктура);
				Адрес.АдрИно 	= АдрИно;
			КонецЕсли;
			ГрузПолуч.Адрес = Адрес;
		Иначе
			АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
			ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресГрузополучателя.АдресСтруктура.ТекущееЗначение); 
			Адрес.АдрРФ = АдрРФ;
			ГрузПолуч.Адрес = Адрес;
			
			ОписаниеОшибкиСтрокой 	= СтруктураДанных.АдресГрузополучателя.АдресСтруктура.ОписаниеОшибки;
			
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузПолучОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", СтруктураДанных.АдресГрузополучателя.АдресСтруктура.ЭталонноеЗначение, ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПредставлениеГрузПолучОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			
			Если СтруктураДанных.АдресГрузополучателя.АдресНайден Тогда
				ОшибкиАдреса = "";
				
				Для Каждого ЭлементСтруктуры Из СтруктураДанных.АдресГрузополучателя.АдресОшибки Цикл
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Структура") Тогда
						ОшибкиАдреса = ?(НЕ ЗначениеЗаполнено(ОшибкиАдреса), ЭлементСтруктуры.Значение.ОписаниеОшибки, ОшибкиАдреса + Символы.ПС + ЭлементСтруктуры.Значение.ОписаниеОшибки);
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ОшибкиАдреса) Тогда
					СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки + Символы.ПС + ОшибкиАдреса;
				КонецЕсли;
				
				СтруктураДанных.Вставить("ГрузПолучАдресОшибка", СтруктураДанных.АдресГрузополучателя.АдресОшибки);
			КонецЕсли;
		КонецЕсли;
		
		//Контактные сведения
	    Контакт = Фабрика.Создать(ГрузПолуч.Тип().Свойства.Получить("Контакт").Тип);
		
		Если НЕ ТипЗнч(СтруктураДанных.ТлфГрузополучателя) = Тип("Структура") Тогда
			Контакт.Тлф 		= СтруктураДанных.ТлфГрузополучателя;
			ГрузПолуч.Контакт 	= Контакт;
		Иначе
			ОписаниеОшибкиСтрокой 	= "Не найден телефон грузополучателя";
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузПолучОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблПредставлениеГрузПолучОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			СтруктураДанных.Вставить("ГрузПолучТлфОшибка", "-");
		КонецЕсли;
		
		Если НЕ ТипЗнч(СтруктураДанных.ФаксГрузополучателя) = Тип("Структура") Тогда
			Контакт.Факс 		= СтруктураДанных.ФаксГрузополучателя;
			ГрузПолуч.Контакт 	= Контакт;
		Иначе
			ОписаниеОшибкиСтрокой 	= "Не найден факс грузополучателя";
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузПолучОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблПредставлениеГрузПолучОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			СтруктураДанных.Вставить("ГрузПолучФаксОшибка", "-");
		КонецЕсли;

		
		//Банковские реквизиты
		Если НЕ СтруктураДанных.ДанныеСчетаГрузополучателя.Свойство("ЭтоОшибка") Тогда
			БанкРекв 			= Фабрика.Создать(ГрузПолуч.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаГрузополучателя.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаГрузополучателя);
			БанкРекв.СвБанк 	= СвБанк;
			ГрузПолуч.БанкРекв 	= БанкРекв;
		Иначе
			ОписаниеОшибкиСтрокой 	= "Не найдены данные расчетного счета грузополучателя";
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеГрузПолучОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблПредставлениеГрузПолучОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеГрузПолучОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			СтруктураДанных.Вставить("ГрузПолучСчетОшибка", "-");
		КонецЕсли;
		
		СвТНО.ГрузПолуч = ГрузПолуч;
		
		//Поставщик (Поставщик)		
		Поставщик = Фабрика.Создать(ТипУчастник);
		
		Если ЗначениеЗаполнено(Документ.Организация.КодПоОКПО) Тогда
						
			СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Организация.КодПоОКПО);
			
			Если СтруктураПроверки.КорректноеЗначение Тогда
				Поставщик.ОКПО = Документ.Организация.КодПоОКПО;
			Иначе
				ОписаниеОшибкиСтрокой	= "У организации [" + Строка(Документ.Организация) + "] код ОКПО содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.КодПоОКПО, "1234567890", ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПоставщикОКПООшибки", СтруктураИсключения);
				Поставщик.ОКПО 		= "1234567890";
			КонецЕсли;
		КонецЕсли;
		
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(Поставщик.Тип().Свойства.Получить("ИдСв").Тип);
		
		Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			СвЮЛ 			= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг	= Документ.Организация.НаименованиеПолное;
			//Сведения об организации 
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Организация.ИНН);
			ПоставщикИНН 		= Документ.Организация.ИНН;
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
				ОписаниеОшибкиСтрокой 	= "У организации [" + Строка(Документ.Организация) + "] ИНН содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.ИНН, "1831010101", ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПредставлениеПоставщикОшибки", СтруктураИсключения);
                ПоставщикИНН 	= "1831010101";
			КонецЕсли;
			
			Если СтрДлина(Документ.Организация.ИНН) > 10 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПоставщикОшибки") Тогда
					ОписаниеОшибкиСтрокой	= "У организации [" + Строка(Документ.Организация) + "] некорректный ИНН. Для юр.лица ИНН должен состоять из 10 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.ИНН, "1831010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеПоставщикОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки + Символы.ПС + "ИНН должен состоять из 10 символов.";
				КонецЕсли;
				ПоставщикИНН = "1831010101";
			КонецЕсли;

			Если ПоставщикИНН <> Документ.Организация.ИНН Тогда
				СтруктураДанных.Вставить("ПоставщикИННОшибка", Документ.Организация.ИНН);
			КонецЕсли;
						
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Организация.КПП);
			ПоставщикКПП		= Документ.Организация.КПП;			
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПоставщикОшибки") Тогда
					ОписаниеОшибкиСтрокой	= "У организации [" + Строка(Документ.Организация) + "] КПП содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.КПП, "183101010", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеПоставщикОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки + Символы.ПС + "КПП содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				КонецЕсли;
				ГрузПолучКПП = "183101010";
			КонецЕсли;
			
			Если СтрДлина(Документ.Организация.КПП) <> 9 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПоставщикОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "У организации [" + Строка(Документ.Организация) + "] КПП должен состоять из 9 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.КПП, "183101010", ОписаниеОшибкиСтрокой, Истина);
	                СтруктураДанных.Вставить("ОблПредставлениеПоставщикОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки + Символы.ПС + "КПП должен состоять из 9 символов.";
				КонецЕсли;
				 ПоставщикКПП = "183101010";
			КонецЕсли;

			Если ПоставщикКПП <> Документ.Организация.КПП Тогда
				СтруктураДанных.Вставить("ПоставщикКППОшибка", Документ.Организация.КПП);
			КонецЕсли;
						
			СвЮЛ.ИННЮЛ	= ПоставщикИНН;
			СвЮЛ.КПП    = ПоставщикКПП;
 			
			Если ЕстьРеквизитСправочника("КодОКОПФ", Документ.Организация.Метаданные()) И ЗначениеЗаполнено(Документ.Организация.КодОКОПФ) Тогда
				
				СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Организация.КодОКОПФ);
				ПоставщикОКОПФ 		= Документ.Организация.КодОКОПФ;
				
				Если НЕ (СтрДлина(Документ.Организация.КодОКОПФ) = 2 ИЛИ СтрДлина(Документ.Организация.КодОКОПФ) = 5) Тогда
					ПоставщикОКОПФ 			= "12345";
					ОписаниеОшибкиСтрокой	= "У организации [" + Строка(Документ.Организация) + "] некорректный код ОКОПФ: " + Документ.Организация.КодОКОПФ + ". Код должен состоять из 2 или 5 символов.";
					Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПоставщикОшибки") Тогда
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.КодОКОПФ, ПоставщикОКОПФ, ОписаниеОшибкиСтрокой, Истина);
						СтруктураДанных.Вставить("ОблПредставлениеПоставщикОшибки", СтруктураИсключения);
					Иначе
						СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
					ОписаниеОшибкиСтрокой	= "У организации [" + Строка(Документ.Организация) + "код ОКОПФ содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
					Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПоставщикОшибки") Тогда
						ПоставщикОКОПФ 			= "12345";
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.КодОКОПФ, ПоставщикОКОПФ, ОписаниеОшибкиСтрокой, Истина);
						СтруктураДанных.Вставить("ОблПредставлениеПоставщикОшибки", СтруктураИсключения);	
					Иначе	
						СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
					КонецЕсли;
					СвЮЛ.ОКОПФ = СокрЛП(ПоставщикОКОПФ);
				КонецЕсли;
			КонецЕсли;
						
			ИдСВ.СвЮЛ = СвЮЛ;
		Иначе                                    
			//Сведения об индивидуальном предпринимателе	
			СвФЛ 				= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Организация.ИНН);
			
			ПоставщикИНН = Документ.Организация.ИНН;
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда			
				ОписаниеОшибкиСтрокой 	= "У организации [" + Строка(Документ.Организация) + "] ИНН содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.ИНН, "183101010101", ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПредставлениеПоставщикОшибки", СтруктураИсключения);
				ПоставщикИНН = "183101010101";
			КонецЕсли;
			
			Если СтрДлина(Документ.Организация.ИНН) < 12 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПоставщикОшибки") Тогда
					ОписаниеОшибкиСтрокой	= "У организации [" + Строка(Документ.Организация) + "] некорректный ИНН. Для физ.лица ИНН должен состоять из 12 символов.";
					СтруктураИсключения		= ЗаполнитьСтруктуруИсключения(Документ.Организация.ИНН, "183101010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеПоставщикОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки + Символы.ПС + "ИНН должен состоять из 12 символов.";
				КонецЕсли;
				ПоставщикИНН = "183101010101";
			КонецЕсли;
			
			Если ПоставщикИНН <> Документ.Организация.ИНН Тогда
				СтруктураДанных.Вставить("ПоставщикИННОшибка", Документ.Организация.ИНН);
			КонецЕсли;
			
			СвФЛ.ИННФЛ = ПоставщикИНН;
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Документ.Организация);
			Если ФИОИП <> Неопределено Тогда
				
				СвФЛ.ФИОИП = ФИОИП;
				
			Иначе
				
				СтруктураФИОФизЛица = Новый_ФИО("Иванов", "Иван", "Иванович");
								
				ОписаниеОшибкиСтрокой 	= "Не удалось получить ФИО организации [" + Строка(Документ.Организация) + "] проверьте заполнение справочника в 1С.";
				
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПоставщикОшибки") Тогда
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, СтруктураФИОФизЛица, ОписаниеОшибкиСтрокой, Истина);
					ПоставщикОшибки 		= ?(ЗначениеЗаполнено(ПоставщикОшибки), ПоставщикОшибки + Символы.ПС + ОписаниеОшибкиСтрокой, ОписаниеОшибкиСтрокой);
				Иначе
					СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				
				СтруктураДанных.Вставить("ПоставщикФИООшибка", "-");
				
			КонецЕсли;
			
			ИдСв.СвФЛ 	= СвФЛ;	
			
		КонецЕсли;
		
		Поставщик.ИдСв = ИдСв;
		
		//Адрес
		Адрес = Фабрика.Создать(Поставщик.Тип().Свойства.Получить("Адрес").Тип); 
		
		Если НЕ СтруктураДанных.АдресОрганизации.ЕстьОшибкиЗаполнения Тогда
			Если СтруктураДанных.АдресОрганизации.АдресСтруктура.АдресРФ Тогда
				//Адрес местонахождения в Российской Федерации (структурированный)
				АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
				ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресОрганизации.АдресСтруктура); 
				Адрес.АдрРФ = АдрРФ;
			Иначе                                                                     
				АдрИно 			= Фабрика.Создать(ТипАдресИно);
				ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресОрганизации.АдресСтруктура);
				Адрес.АдрИно 	= АдрИно;
			КонецЕсли;
			Поставщик.Адрес = Адрес;
		Иначе
			АдрРФ 			= Фабрика.Создать(ТипАдресРФ);
			ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресОрганизации.АдресСтруктура.ТекущееЗначение); 
			Адрес.АдрРФ 	= АдрРФ;
			Поставщик.Адрес = Адрес;
			
			ОписаниеОшибкиСтрокой 	= СтруктураДанных.АдресОрганизации.АдресСтруктура.ОписаниеОшибки;
			
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПоставщикОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", СтруктураДанных.АдресОрганизации.АдресСтруктура.ЭталонноеЗначение, ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПредставлениеПоставщикОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			
			Если СтруктураДанных.АдресОрганизации.АдресНайден Тогда 
				ОшибкиАдреса = "";
				
				Для Каждого ЭлементСтруктуры Из СтруктураДанных.АдресОрганизации.АдресОшибки Цикл
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Структура") Тогда
						ОшибкиАдреса = ?(НЕ ЗначениеЗаполнено(ОшибкиАдреса), ЭлементСтруктуры.Значение.ОписаниеОшибки, ОшибкиАдреса + Символы.ПС + ЭлементСтруктуры.Значение.ОписаниеОшибки);
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ОшибкиАдреса) Тогда
					СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки + Символы.ПС + ОшибкиАдреса;
				КонецЕсли;
				
				СтруктураДанных.Вставить("ПоставщикАдресОшибка", СтруктураДанных.АдресОрганизации.АдресОшибки);
			КонецЕсли;
 		КонецЕсли;
		
		Поставщик.Адрес = Адрес;
		
		//Контактные сведения			
		Если НЕ ТипЗнч(СтруктураДанных.ТлфОрганизации) = Тип("Структура") Тогда
			Контакт 			= Фабрика.Создать(Поставщик.Тип().Свойства.Получить("Контакт").Тип);
			Контакт.Тлф 		= СтруктураДанных.ТлфОрганизации;
			Поставщик.Контакт 	= Контакт;
		Иначе
			ОписаниеОшибкиСтрокой 	= "Не найден телефон поставщика";
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПоставщикОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблПредставлениеПоставщикОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			СтруктураДанных.Вставить("ПоставщикТлфОшибка", "-");
		КонецЕсли;
		
		Если НЕ ТипЗнч(СтруктураДанных.ФаксОрганизации) = Тип("Структура") Тогда
			Контакт 			= Фабрика.Создать(Поставщик.Тип().Свойства.Получить("Контакт").Тип);
			Контакт.Факс 		= СтруктураДанных.ФаксОрганизации;
			Поставщик.Контакт 	= Контакт;
		Иначе
			ОписаниеОшибкиСтрокой 	= "Не найден факс поставщика";
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПоставщикОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблПредставлениеПоставщикОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			СтруктураДанных.Вставить("ПоставщикФаксОшибка", "-");
		КонецЕсли;
       		
		//Банковские реквизиты
		Если НЕ СтруктураДанных.ДанныеСчетаОрганизации.Свойство("ЭтоОшибка") Тогда
			БанкРекв 			= Фабрика.Создать(Поставщик.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаОрганизации.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаОрганизации);
			БанкРекв.СвБанк 	= СвБанк;
			Поставщик.БанкРекв 	= БанкРекв;
		Иначе
			ОписаниеОшибкиСтрокой 	= "Не найдены данные расчетного счета поставщика";
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПоставщикОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблПредставлениеПоставщикОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПоставщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			СтруктураДанных.Вставить("ПоставщикСчетОшибка", "-");
		КонецЕсли;
		
		СвТНО.Поставщик = Поставщик;
		
		//Плательщик	
		Плательщик = Фабрика.Создать(ТипУчастник);
				
		Если ЗначениеЗаполнено(Документ.Контрагент.КодПоОКПО) Тогда
						
			СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Контрагент.КодПоОКПО);
			
			Если СтруктураПроверки.КорректноеЗначение Тогда
				Плательщик.ОКПО = Документ.Контрагент.КодПоОКПО;
			Иначе
				ОписаниеОшибкиСтрокой 	= "У контрагента [" + Строка(Документ.Контрагент) + "] код ОКПО содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Контрагент.КодПоОКПО, "1234567890", ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПлательщикОКПООшибки", СтруктураИсключения);
				Плательщик.ОКПО 		= "1234567890";
			КонецЕсли;
		КонецЕсли;
		
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(Плательщик.Тип().Свойства.Получить("ИдСв").Тип);
		
		Если Документ.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			//Сведения об организации 
			СвЮЛ 			= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг	= Документ.Контрагент.НаименованиеПолное;
			
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Контрагент.ИНН);
			ПлательщикИНН		= Документ.Контрагент.ИНН;		
									
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
				ОписаниеОшибкиСтрокой 	= "У контрагента [" + Строка(Документ.Контрагент) + "] ИНН содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.ИНН, "1831010101", ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);
                ПлательщикИНН 		= "1831010101";
			КонецЕсли;
			
			Если СтрДлина(Документ.Контрагент.ИНН) > 10 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
					ОписаниеОшибкиСтрокой	= "У контрагента [" + Строка(Документ.Контрагент) + "] некорректный ИНН. Для юр.лица ИНН должен состоять из 10 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Контрагент.ИНН, "1831010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + Символы.ПС + "ИНН должен состоять из 10 символов.";
				КонецЕсли;
				ПлательщикИНН 		= "1831010101";
			КонецЕсли;

			Если ПлательщикИНН <> Документ.Контрагент.ИНН Тогда
				СтруктураДанных.Вставить("ПлательщикИННОшибка", Документ.Контрагент.ИНН);
			КонецЕсли;
						
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Контрагент.КПП);
			ПлательщикКПП		= Документ.Контрагент.КПП;			
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
				ОписаниеОшибкиСтрокой	= "У контрагента [" + Строка(Документ.Контрагент) + "] КПП содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Контрагент.КПП, "183101010", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				ПлательщикКПП = "183101010";
			КонецЕсли;
			
			Если СтрДлина(Документ.Контрагент.КПП) <> 9 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "У контрагента [" + Строка(Документ.Контрагент) + "] КПП должен состоять из 9 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Контрагент.КПП, "183101010", ОписаниеОшибкиСтрокой, Истина);
	                СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + " Так же КПП должен состоять из 9 символов.";
				КонецЕсли;
				ПлательщикКПП = "183101010";
			КонецЕсли;

			Если ПлательщикКПП <> Документ.Контрагент.КПП Тогда
				СтруктураДанных.Вставить("ПлательщикКППОшибка", Документ.Контрагент.КПП);
			КонецЕсли;
						
			СвЮЛ.ИННЮЛ	= ПлательщикИНН;
			СвЮЛ.КПП    = ПлательщикКПП;
 			
			Если ЕстьРеквизитСправочника("КодОКОПФ", Документ.Контрагент.Метаданные()) И ЗначениеЗаполнено(Документ.Контрагент.КодОКОПФ) Тогда
				
				СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Контрагент.КодОКОПФ);
				ПлательщикОКОПФ 	= Документ.Контрагент.КодОКОПФ;
				
				Если НЕ (СтрДлина(Документ.Контрагент.КодОКОПФ) = 2 ИЛИ СтрДлина(Документ.Контрагент.КодОКОПФ) = 5) Тогда
					ПлательщикОКОПФ			= "12345";
					ОписаниеОшибкиСтрокой	= "У контрагента [" + Строка(Документ.Контрагент) + "] некорректный код ОКОПФ: " + Документ.Контрагент.КодОКОПФ + ". Код должен состоять из 2 или 5 символов.";
					Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Контрагент.КодОКОПФ, ПлательщикОКОПФ, ОписаниеОшибкиСтрокой, Истина);
						СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);
					Иначе
						СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
					ОписаниеОшибкиСтрокой	= "У контрагента [" + Строка(Документ.Контрагент) + "код ОКОПФ содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
					Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
						ПлательщикОКОПФ			= "12345";
						СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Контрагент.КодОКОПФ, ПлательщикОКОПФ, ОписаниеОшибкиСтрокой, Истина);
						СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);	
					Иначе	
						СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
					КонецЕсли;
					СвЮЛ.ОКОПФ = СокрЛП(ПлательщикОКОПФ);
				КонецЕсли;
			КонецЕсли;
			ИдСВ.СвЮЛ = СвЮЛ;
     	Иначе                                    
			//Сведения об индивидуальном предпринимателе	
			СвФЛ 				= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Контрагент.ИНН);
			ПлательщикИНН 		= Документ.Контрагент.ИНН;
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда			
				ОписаниеОшибкиСтрокой 	= "У контрагента [" + Строка(Документ.Контрагент) + "] ИНН содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Контрагент.ИНН, "183101010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				ПлательщикИНН 		= "183101010101";
			КонецЕсли;
			
			Если СтрДлина(Документ.Контрагент.ИНН) < 12 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
					ОписаниеОшибкиСтрокой	= "У контрагента [" + Строка(Документ.Контрагент) + "] некорректный ИНН. Для физ.лица ИНН должен состоять из 12 символов.";
					СтруктураИсключения		= ЗаполнитьСтруктуруИсключения(Документ.Контрагент.ИНН, "183101010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + Символы.ПС + "ИНН должен состоять из 12 символов.";
				КонецЕсли;
				ПлательщикИНН 		= "183101010101"; 
			КонецЕсли;
			
			Если ПлательщикИНН <> Документ.Контрагент.ИНН Тогда
				СтруктураДанных.Вставить("ПлательщикИННОшибка", Документ.Контрагент.ИНН);
			КонецЕсли;
			
			СвФЛ.ИННФЛ = ПлательщикИНН;
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Документ.Контрагент);
			Если ФИОИП <> Неопределено Тогда
				
				СвФЛ.ФИОИП = ФИОИП;
				
			Иначе
				
				СтруктураФИОФизЛица = Новый_ФИО("Иванов", "Иван", "Иванович");
				
				ОписаниеОшибкиСтрокой 	= "Не удалось получить ФИО контрагента [" + Строка(Документ.Контрагент) + "] проверьте заполнение справочника в 1С.";
								
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, СтруктураФИОФизЛица, ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);
				Иначе 
					СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				
				СтруктураДанных.Вставить("ПлательщикФИООшибка", "-");
				
			КонецЕсли;
			
			ИдСв.СвФЛ 	= СвФЛ;	
			
		КонецЕсли;
		
		Плательщик.ИдСв = ИдСв;
		
		//Адрес
		Адрес = Фабрика.Создать(Плательщик.Тип().Свойства.Получить("Адрес").Тип); 
				
		Если НЕ СтруктураДанных.АдресКонтрагента.ЕстьОшибкиЗаполнения Тогда
			Если СтруктураДанных.АдресКонтрагента.АдресСтруктура.АдресРФ Тогда
				//Адрес местонахождения в Российской Федерации (структурированный)
				АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
				ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресКонтрагента.АдресСтруктура); 
				Адрес.АдрРФ = АдрРФ;
			Иначе                                                                     
				АдрИно 			= Фабрика.Создать(ТипАдресИно);
				ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресКонтрагента.АдресСтруктура);
				Адрес.АдрИно 	= АдрИно;
			КонецЕсли;
			Плательщик.Адрес = Адрес;
		Иначе
			АдрРФ 				= Фабрика.Создать(ТипАдресРФ);
			ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресКонтрагента.АдресСтруктура.ТекущееЗначение); 
			Адрес.АдрРФ 		= АдрРФ;
			Плательщик.Адрес 	= Адрес;
			
			ОписаниеОшибкиСтрокой = СтруктураДанных.АдресКонтрагента.АдресСтруктура.ОписаниеОшибки;
			
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", СтруктураДанных.АдресКонтрагента.АдресСтруктура.ЭталонноеЗначение, ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			
			Если СтруктураДанных.АдресКонтрагента.АдресНайден Тогда
				ОшибкиАдреса = "";
				
				Для Каждого ЭлементСтруктуры Из СтруктураДанных.АдресКонтрагента.АдресОшибки Цикл
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Структура") Тогда
						ОшибкиАдреса = ?(НЕ ЗначениеЗаполнено(ОшибкиАдреса), ЭлементСтруктуры.Значение.ОписаниеОшибки, ОшибкиАдреса + Символы.ПС + ЭлементСтруктуры.Значение.ОписаниеОшибки);
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ОшибкиАдреса) Тогда
					СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + Символы.ПС + ОшибкиАдреса;
				КонецЕсли;
				
				СтруктураДанных.Вставить("ПлательщикАдресОшибка", СтруктураДанных.АдресКонтрагента.АдресОшибки);
			КонецЕсли;
		КонецЕсли;
		
		//Контактные сведения			
		Если НЕ ТипЗнч(СтруктураДанных.ТлфКонтрагента) = Тип("Структура") Тогда
			Контакт 			= Фабрика.Создать(Плательщик.Тип().Свойства.Получить("Контакт").Тип);
			Контакт.Тлф 		= СтруктураДанных.ТлфКонтрагента;
			Плательщик.Контакт 	= Контакт;
		Иначе
			ОписаниеОшибкиСтрокой 	= "Не найден телефон покупателя";
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			СтруктураДанных.Вставить("ПлательщикТлфОшибка", "-");
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанных.ФаксКонтрагента) = Тип("Структура") Тогда
			ОписаниеОшибкиСтрокой 	= "Не найден факс покупателя";
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			СтруктураДанных.Вставить("ПлательщикФаксОшибка", "-");
		КонецЕсли;
        		
		//Банковские реквизиты
		Если НЕ СтруктураДанных.ДанныеСчетаКонтрагента.Свойство("ЭтоОшибка") Тогда
			БанкРекв 			= Фабрика.Создать(Плательщик.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаКонтрагента.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаКонтрагента);
			БанкРекв.СвБанк 	= СвБанк;
			Плательщик.БанкРекв 	= БанкРекв;
		Иначе
			ОписаниеОшибкиСтрокой 	= "Не найдены данные расчетного счета плательщика";
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеПлательщикОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблПредставлениеПлательщикОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеПлательщикОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
			СтруктураДанных.Вставить("ПлательщикСчетОшибка", "-");
		КонецЕсли;
		
		СвТНО.Плательщик 	= Плательщик;
		
		//Основание (договор)
		ДоговорКонтрагента = Документ.ДоговорКонтрагента;
		Основание = Фабрика.Создать(ЭлементСвТНО.Свойства.Получить("Основание").Тип); 
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента.Наименование) Тогда
			Основание.НаимОсн = ДоговорКонтрагента.Наименование;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента.Номер) Тогда
				Основание.НомОсн = ДоговорКонтрагента.Номер;
			Иначе
				ОписаниеОшибкиСтрокой	= "В договоре с контрагентом [" + Строка(Документ.Контрагент) + "] не указан номер.";
				СтруктураИсключения		= ЗаполнитьСтруктуруИсключения(Неопределено, "Номер договора", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблОснованиеОшибка", СтруктураИсключения);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента.Дата) Тогда
				Основание.ДатаОсн = Формат(ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy");
			Иначе
				ОписаниеОшибкиСтрокой	= "В договоре с контрагентом [" + Строка(Документ.Контрагент) + "] не указана дата.";
				Если НЕ СтруктураДанных.Свойство("ОблОснованиеОшибка") Тогда
					СтруктураИсключения		= ЗаполнитьСтруктуруИсключения(Неопределено, "Дата договора", ОписаниеОшибкиСтрокой, Ложь);
					СтруктураДанных.Вставить("ОблОснованиеОшибка", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблОснованиеОшибка.ОписаниеОшибки = СтруктураДанных.ОблОснованиеОшибка.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
			КонецЕсли;
        КонецЕсли;
						
		СвТНО.Основание 	= Основание;	
		СвТНО.ВидОперации 	= Строка(Документ.ВидОперации);
		
		//Уступочная надпись (параметры)
		Если НЕ СтруктураУступочнойНадписи = Неопределено Тогда
			
			ИнфПол = Фабрика.Создать(ЭлементСвТНО.Свойства.Получить("ИнфПол").Тип);
			
			ТЗ_ОшибкиУступочнойНадписи = Новый ТаблицаЗначений;
			ТЗ_ОшибкиУступочнойНадписи.Колонки.Добавить("ТекущееЗначение");
			ТЗ_ОшибкиУступочнойНадписи.Колонки.Добавить("ЭталонноеЗначение");
			ТЗ_ОшибкиУступочнойНадписи.Колонки.Добавить("ОписаниеОшибки");
			ТЗ_ОшибкиУступочнойНадписи.Колонки.Добавить("ЭтоОшибка");
			
			Для Каждого Элемент Из СтруктураУступочнойНадписи Цикл		
				Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
					НовСтрОшибки 					= ТЗ_ОшибкиУступочнойНадписи.Добавить();
					НовСтрОшибки.ТекущееЗначение 	= Неопределено;
					НовСтрОшибки.ЭталонноеЗначение 	= Элемент.Ключ;
					НовСтрОшибки.ОписаниеОшибки 	= "Ошибка заполнения уступочной надписи. Не заполнен параметр " + Элемент.Ключ;
					НовСтрОшибки.ЭтоОшибка  		= Истина;	
				КонецЕсли;
			КонецЦикла;
			
			ИнфПол.ТекстИнф = СтруктураУступочнойНадписи.ТекстУступочнойНадписи;
			СвТНО.ИнфПол 	= ИнфПол;
			
			Если ТЗ_ОшибкиУступочнойНадписи.Количество() > 0 Тогда
				СтруктураДанных.Вставить("ОшибкиУступочнойНадписи", ТЗ_ОшибкиУступочнойНадписи);
			КонецЕсли;
		КонецЕсли;
        		
		//Товарная накладная
		ТН = Фабрика.Создать(ЭлементТН);
		ТН.НомТН 	= ОбщегоНазначения.ПолучитьНомерНаПечать(Документ);
		ТН.ДатаТН	= Формат(Документ.Дата, "ДЛФ=Д");
		
		СтруктураНастроек 		= МенеджерНастроек.НастройкиИР();
		ИспользоватьШтрихкод 	= СтруктураНастроек.ЗначениеКодаНоменклаутрыТН = 1 И НЕ Метаданные.РегистрыСведений.Найти("Штрихкоды") = Неопределено;
		
		Таблица = Фабрика.Создать(ЭлементТаблица);
		
		БруттоВсего = 0;
		НомерСтроки = 0;
		
		ТЗ_ОшибкиТабЧастиТовары = Новый ТаблицаЗначений;
		ТЗ_ОшибкиТабЧастиТовары.Колонки.Добавить("НомерСтроки");
		ТЗ_ОшибкиТабЧастиТовары.Колонки.Добавить("ИмяЭлемента");
		ТЗ_ОшибкиТабЧастиТовары.Колонки.Добавить("ТекущееЗначение");
		ТЗ_ОшибкиТабЧастиТовары.Колонки.Добавить("ЭталонноеЗначение");
		ТЗ_ОшибкиТабЧастиТовары.Колонки.Добавить("ОписаниеОшибки");
		ТЗ_ОшибкиТабЧастиТовары.Колонки.Добавить("ЭтоОшибка");
		
		СтруктураДанных.Вставить("ТЗ_ОшибкиТабЧастиТовары", ТЗ_ОшибкиТабЧастиТовары);
		
		//Заполнение табличной части
		Для Каждого ТекСтрока Из Документ.Товары Цикл
			НомерСтроки = НомерСтроки + 1; 
			//Сведения о товаре (СвТов)
			СвТов 			= Фабрика.Создать(ЭлементТаблица.Свойства.Получить("СвТов").Тип);
			СвТов.НомТов 	= НомерСтроки;
			
			//Заполняем из полного наим, если оно не пустое и короче 1000 симв.
			Если СтрДлина(СокрЛП(ТекСтрока.Номенклатура.НаименованиеПолное)) <= 1000 И ЗначениеЗаполнено(ТекСтрока.Номенклатура.НаименованиеПолное) Тогда
				СвТов.НаимТов = СокрЛП(ТекСтрока.Номенклатура.НаименованиеПолное);
			Иначе
				СвТов.НаимТов = СокрЛП(ТекСтрока.Номенклатура.Наименование);
			КонецЕсли;
			
			//Для КА, УТ, УПП
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, "Товары") И
				ЗначениеЗаполнено(ТекСтрока.ХарактеристикаНоменклатуры) Тогда
				СвТов.ХарактерТов = СокрЛП(Строка(ТекСтрока.ХарактеристикаНоменклатуры));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.Артикул) Тогда
				СвТов.АртикулТов = ТекСтрока.Номенклатура.Артикул;
			КонецЕсли;
			
			Если НЕ ИспользоватьШтрихкод Тогда
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.Код) Тогда
					СвТов.КодТов = ТекСтрока.Номенклатура.Код;
				Иначе
					НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
					НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
					НовСтрОшибки.ИмяЭлемента 		= "ОблКодТовОшибка";
					НовСтрОшибки.ТекущееЗначение 	= "";     
					НовСтрОшибки.ЭталонноеЗначение 	= "";
					НовСтрОшибки.ОписаниеОшибки 	= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] не указан код товара";
					НовСтрОшибки.ЭтоОшибка 			= Ложь;
                КонецЕсли;
			Иначе
				ШтрихКод = ПолучитьШтрихКод(ТекСтрока);
				
				Если ЗначениеЗаполнено(ШтрихКод) Тогда
					СвТов.КодТов = ШтрихКод;
				Иначе
					НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
					НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
					НовСтрОшибки.ИмяЭлемента 		= "ОблКодТовОшибка";
					НовСтрОшибки.ТекущееЗначение 	= "";     
					НовСтрОшибки.ЭталонноеЗначение 	= "";
					НовСтрОшибки.ОписаниеОшибки 	= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] не указан штрих-код товара";
					НовСтрОшибки.ЭтоОшибка 			= Ложь;
				КонецЕсли;
			КонецЕсли;
        			
			ЕдИзмОписаниеОшибкиСтрокой 	= "";
			НаимЕдИзм 					= "";
			ОКЕИ_Тов 					= "";
		            			
			Если ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
				Если ТипЗнч(ТекСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
					//Для Бух
					НаимЕдИзм	= ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
					
					Если НЕ ЗначениеЗаполнено(НаимЕдИзм) Тогда
						ОписаниеОшибкиСтрокой 			= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] не указано наименование единицы измерения.";
						СвТов.НаимЕдИзм					= "--";
						
						НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
						НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
						НовСтрОшибки.ИмяЭлемента 		= "ОблНаимЕдИзмОшибка";
						НовСтрОшибки.ТекущееЗначение 	= СокрЛП(НаимЕдИзм);     
						НовСтрОшибки.ЭталонноеЗначение 	= "";
						НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
						НовСтрОшибки.ЭтоОшибка 			= Истина;
					Иначе
						СвТов.НаимЕдИзм					= НаимЕдИзм;
					КонецЕсли;
										
					Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код) Тогда
						ОКЕИ_Тов	= СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код);
						
						СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", СокрЛП(ОКЕИ_Тов));
						
						Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
							ОписаниеОшибкиСтрокой = "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] код единицы измерения содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
							СвТов.ОКЕИ_Тов	= "123";
							
							НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
							НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
							НовСтрОшибки.ИмяЭлемента 		= "ОблЕдИзмОшибка";
							НовСтрОшибки.ТекущееЗначение 	= СокрЛП(ОКЕИ_Тов);     
							НовСтрОшибки.ЭталонноеЗначение 	= "123";
							НовСтрОшибки.ОписаниеОшибки 	= ЕдИзмОписаниеОшибкиСтрокой;
							НовСтрОшибки.ЭтоОшибка 			= Истина;                    						
						Иначе
							СвТов.ОКЕИ_Тов	= СокрЛП(ОКЕИ_Тов);
						КонецЕсли;
 					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ТекСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					//Для УТ и КА, УПП
					НаимЕдИзм = ТекСтрока.ЕдиницаИзмерения.Наименование;
					
					Если НЕ ЗначениеЗаполнено(НаимЕдИзм) Тогда
						ОписаниеОшибкиСтрокой 			= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] не указано наименование единицы измерения.";
						СвТов.НаимЕдИзм					= "--";
						
						НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
						НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
						НовСтрОшибки.ИмяЭлемента 		= "ОблНаимЕдИзмОшибка";
						НовСтрОшибки.ТекущееЗначение 	= НаимЕдИзм;     
						НовСтрОшибки.ЭталонноеЗначение 	= "";
						НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
						НовСтрОшибки.ЭтоОшибка 			= Истина;
					Иначе
						СвТов.НаимЕдИзм					= НаимЕдИзм;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код) Тогда
						ОКЕИ_Тов	= СокрЛП(ТекСтрока.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код);
						
						СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", СокрЛП(ОКЕИ_Тов));
						
						Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
							ОписаниеОшибкиСтрокой = "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] код единицы измерения содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
							СвТов.ОКЕИ_Тов	= "123";
							
							НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
							НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
							НовСтрОшибки.ИмяЭлемента 		= "ОблЕдИзмОшибка";
							НовСтрОшибки.ТекущееЗначение 	= СокрЛП(ОКЕИ_Тов);     
							НовСтрОшибки.ЭталонноеЗначение 	= "123";
							НовСтрОшибки.ОписаниеОшибки 	= ЕдИзмОписаниеОшибкиСтрокой;
							НовСтрОшибки.ЭтоОшибка 			= Истина;                    						
						Иначе
							СвТов.ОКЕИ_Тов	= СокрЛП(ОКЕИ_Тов);
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			Иначе
				НаимЕдИзм = ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
				
				Если НЕ ЗначениеЗаполнено(НаимЕдИзм) Тогда
					ОписаниеОшибкиСтрокой 			= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] не указано наименование единицы измерения.";
					СвТов.НаимЕдИзм					= "--";
					
					НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
					НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
					НовСтрОшибки.ИмяЭлемента 		= "ОблНаимЕдИзмОшибка";
					НовСтрОшибки.ТекущееЗначение 	= НаимЕдИзм;     
					НовСтрОшибки.ЭталонноеЗначение 	= "";
					НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
					НовСтрОшибки.ЭтоОшибка 			= Истина; 
				Иначе
					СвТов.НаимЕдИзм					= НаимЕдИзм;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код) Тогда
					ОКЕИ_Тов	= СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код);
					
					СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", СокрЛП(ОКЕИ_Тов));
					
					Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
						ОписаниеОшибкиСтрокой = "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] код единицы измерения содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
						СвТов.ОКЕИ_Тов	= "123";
						
						НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
						НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
						НовСтрОшибки.ИмяЭлемента 		= "ОблЕдИзмОшибка";
						НовСтрОшибки.ТекущееЗначение 	= СокрЛП(ОКЕИ_Тов);     
						НовСтрОшибки.ЭталонноеЗначение 	= "123";
						НовСтрОшибки.ОписаниеОшибки 	= ЕдИзмОписаниеОшибкиСтрокой;
						НовСтрОшибки.ЭтоОшибка 			= Истина;                    						
					Иначе
						СвТов.ОКЕИ_Тов	= СокрЛП(ОКЕИ_Тов);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, "Товары") И
				ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмеренияМест) Тогда
				//Для УТ и КА, УПП
				КолМест 		= Формат(Окр(ТекСтрока.КоличествоМест), "ЧГ=0");
				Место 			= ОкруглитьВБольшуюСторону(ТекСтрока.ЕдиницаИзмеренияМест.Коэффициент/?(ТекСтрока.ЕдиницаИзмерения.Коэффициент <> 0, ТекСтрока.ЕдиницаИзмерения.Коэффициент, 1));
				СвТов.ВидУпак 	= ТекСтрока.ЕдиницаИзмеренияМест.Наименование;
				СвТов.Место		= Место;
				СвТов.КолМест	= КолМест;
			КонецЕсли;                  										
			
			// Для Бух          
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, "Товары") И
				((Метаданные.Имя = "БухгалтерияПредприятия") ИЛИ (Метаданные.Имя = "БухгалтерияПредприятияКОРП")) И (ТекСтрока.КоличествоМест > 0) Тогда
				
				КолМест 		= Формат(Окр(ТекСтрока.КоличествоМест), "ЧГ=0");
				Место 			= Формат(ТекСтрока.Коэффициент, "ЧГ=0");
				СвТов.ВидУпак 	= ТекСтрока.ЕдиницаИзмерения.Наименование;
				СвТов.Место		= Место;
				СвТов.КолМест	= КолМест;
 			КонецЕсли;
 			
			СвТов.Нетто			= Формат(ТекСтрока.Количество, "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
 					
			Попытка
				СвТов.Брутто = Формат(ТекСтрока.ЕдиницаИзмеренияМест.Вес * КолМест, "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
				БруттоВсего = БруттоВсего + ТекСтрока.ЕдиницаИзмеренияМест.Вес * КолМест;
			Исключение
				// нет реквизита вес брутто
			КонецПопытки;
			
			СуммаБезНДС = Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма - ТекСтрока.СуммаНДС, ТекСтрока.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			
			Если Число(СуммаБезНДС) = 0 Тогда
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблСуммаБезНДСОшибка";
				НовСтрОшибки.ТекущееЗначение 	= СуммаБезНДС;     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] не указана стоимость товара без НДС";
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
	      	КонецЕсли;
									
			// Вдруг количество = 0 
			Попытка
				РасчетнаяЦена = Формат(СуммаБезНДС/ТекСтрока.Количество,"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			Исключение
				РасчетнаяЦена = 0;
			КонецПопытки;
			
			Если ТекСтрока.Количество = 0 Тогда
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблКоличествоОшибка";
				НовСтрОшибки.ТекущееЗначение 	= ТекСтрока.Количество;     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] не указано количество товара";
				НовСтрОшибки.ЭтоОшибка 			= Истина;
	        КонецЕсли;
			
			Если ТекСтрока.Цена = 0 Тогда
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблЦенаОшибка";
				НовСтрОшибки.ТекущееЗначение 	= ТекСтрока.Цена;     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] не указана цена товара";
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
        	КонецЕсли;
			
			Если ТекСтрока.Сумма = 0 Тогда
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблСуммаОшибка";
				НовСтрОшибки.ТекущееЗначение 	= ТекСтрока.Сумма;     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] не указана стоимость товара с учетом НДС";
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
			КонецЕсли;
			
			СвТов.Цена 		= РасчетнаяЦена;
			СвТов.СумБезНДС = СуммаБезНДС;
			
			Если НЕ ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СвТов.СтавкаНДС	= Формат(УчетНДС.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС), "ЧЦ=10; ЧДЦ=5; ЧРД='.'; ЧГ=0; ЧН=0");
				СвТов.СумНДС	= Формат(ТекСтрока.СуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
				
				Если ТекСтрока.СуммаНДС = 0 Тогда
					НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
					НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
					НовСтрОшибки.ИмяЭлемента 		= "ОблСуммаНДСОшибка";
					НовСтрОшибки.ТекущееЗначение 	= ТекСтрока.СуммаНДС;     
					НовСтрОшибки.ЭталонноеЗначение 	= "";
					НовСтрОшибки.ОписаниеОшибки 	= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Товары] не указана сумма НДС";
					НовСтрОшибки.ЭтоОшибка 			= Ложь;
				КонецЕсли;	
			КонецЕсли;
			
			СвТов.СумУчНДС		= Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма, ТекСтрока.Сумма +  ТекСтрока.СуммаНДС), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			
			//Заполнение ГТД и страны
			// УПП, УТ, КА
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, "Товары") И
				ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры) И ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры.НомерГТД.Код) Тогда
								
				СтрокаГТД = ЗаполнитьСтрокуГТД(ТекСтрока.СерияНоменклатуры, Неопределено, Неопределено, Неопределено);
				
				Если СтрокаГТД <> Неопределено Тогда
					СвТов.ИнфПолСтр = СтрокаГТД;
				КонецЕсли;
				// БП	
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НомерГТД", МетаданныеДокумента, "Товары") И 
				ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтранаПроисхождения", МетаданныеДокумента, "Товары") И
				ЗначениеЗаполнено(ТекСтрока.НомерГТД) И ЗначениеЗаполнено(ТекСтрока.СтранаПроисхождения) Тогда
				
				СтрокаГТД = ЗаполнитьСтрокуГТД(Неопределено, ТекСтрока.СтранаПроисхождения.Код, ТекСтрока.СтранаПроисхождения.Наименование, ТекСтрока.НомерГТД);
				
				Если СтрокаГТД <> Неопределено Тогда
					СвТов.ИнфПолСтр = СтрокаГТД;
				КонецЕсли;
			КонецЕсли;
			Таблица.СвТов.Добавить(СвТов);
		КонецЦикла;	
		
		Если ТЗ_ОшибкиТабЧастиТовары.Количество() > 0 Тогда
			СтруктураДанных.Вставить("ОшибкиТабЧастиТовары", ТЗ_ОшибкиТабЧастиТовары);			
		КонецЕсли;
		
		//Услуги
		Для Каждого ТекСтрока Из Документ.Услуги Цикл
			НомерСтроки = НомерСтроки + 1;
			//Сведения о товаре (работе, услуге) (СвТов)
			СвТов 			= Фабрика.Создать(ЭлементТаблица.Свойства.Получить("СвТов").Тип);
			СвТов.НомТов	= НомерСтроки;
			
			//Заполняем из полного наим, если оно не пустое и короче 1000 симв.
			Если СтрДлина(СокрЛП(ТекСтрока.Номенклатура.НаименованиеПолное)) <= 1000 И ЗначениеЗаполнено(ТекСтрока.Номенклатура.НаименованиеПолное) Тогда
				СвТов.НаимТов 	= СокрЛП(ТекСтрока.Номенклатура.НаименованиеПолное);
			Иначе
				СвТов.НаимТов	= СокрЛП(ТекСтрока.Номенклатура.Наименование);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.Артикул) Тогда
				СвТов.АртикулТов = ТекСтрока.Номенклатура.Артикул;
			КонецЕсли;
			
			СвТов.КодТов 		= ТекСтрока.Номенклатура.Код;
			
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Наименование) Тогда
				СвТов.НаимЕдИзм 	= ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
			Иначе
				СвТов.НаимЕдИзм		= "-";
			КонецЕсли;
			 			
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код));
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
				ЕдИзмОписаниеОшибкиСтрокой = "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Услуги] код единицы измерения содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				СвТов.ОКЕИ_Тов	= "123";
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблЕдИзмОшибка";
				НовСтрОшибки.ТекущееЗначение 	= СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код);     
				НовСтрОшибки.ЭталонноеЗначение 	= "123";
				НовСтрОшибки.ОписаниеОшибки 	= ЕдИзмОписаниеОшибкиСтрокой;
				НовСтрОшибки.ЭтоОшибка 			= Истина;
			Иначе
				Если СтрДлина(СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код)) >= 3 Тогда 
					СвТов.ОКЕИ_Тов	= СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код);
				Иначе
					ЕдИзмОписаниеОшибкиСтрокой 		= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Услуги] код единицы изм. не соответсвует формату (должег состоять из 3 или 4 символов)";
					НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
					НовСтрОшибки.НомерСтроки 		= НомерСтроки;
					НовСтрОшибки.ИмяЭлемента 		= "ОблЕдИзмОшибка";
					НовСтрОшибки.ТекущееЗначение 	= СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код);     
					НовСтрОшибки.ЭталонноеЗначение 	= "123";
					НовСтрОшибки.ОписаниеОшибки 	= ЕдИзмОписаниеОшибкиСтрокой;
					НовСтрОшибки.ЭтоОшибка 			= Истина;
				КонецЕсли;
			КонецЕсли;
 			
			СвТов.Нетто			= Формат(ТекСтрока.Количество, "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
			
			Если ТекСтрока.Количество = 0 Тогда
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблКоличествоОшибка";
				НовСтрОшибки.ТекущееЗначение 	= ТекСтрока.Количество;     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Услуги] не указано количество.";
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
			КонецЕсли;
          					
			СуммаБезНДС = Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма - ТекСтрока.СуммаНДС, ТекСтрока.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			// Вдруг количество = 0 
			Попытка
				РасчетнаяЦена = Формат(СуммаБезНДС/ТекСтрока.Количество,"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			Исключение
				РасчетнаяЦена = 0;
			КонецПопытки;			
			
			Если ТекСтрока.Цена = 0 Тогда
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблЦенаОшибка";
				НовСтрОшибки.ТекущееЗначение 	= ТекСтрока.Цена;     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Услуги] не указана цена товара";
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
        	КонецЕсли;
            					
			СвТов.Цена		= РасчетнаяЦена;
												  			
			Если Число(СуммаБезНДС) = 0 Тогда
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблСуммаБезНДСОшибка";
				НовСтрОшибки.ТекущееЗначение 	= СуммаБезНДС;     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Услуги] не указана стоимость товара без НДС";
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
	      	КонецЕсли;

			СвТов.СумБезНДС = СуммаБезНДС;
			
			Если НЕ ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СвТов.СтавкаНДС = Формат(УчетНДС.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС), "ЧЦ=10; ЧДЦ=5; ЧРД='.'; ЧГ=0; ЧН=0");
				
				Если ТекСтрока.СуммаНДС = 0 Тогда
					НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
					НовСтрОшибки.НомерСтроки 		= НомерСтроки;
					НовСтрОшибки.ИмяЭлемента 		= "ОблСуммаНДСОшибка";
					НовСтрОшибки.ТекущееЗначение 	= ТекСтрока.СуммаНДС;     
					НовСтрОшибки.ЭталонноеЗначение 	= "";
					НовСтрОшибки.ОписаниеОшибки 	= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Услуги] не указана сумма НДС";
					НовСтрОшибки.ЭтоОшибка 			= Ложь;
				КонецЕсли;	

			КонецЕсли;
			
			СвТов.СумНДС	= Формат(ТекСтрока.СуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
					
			СвТов.СумУчНДС	= Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма, ТекСтрока.Сумма +  ТекСтрока.СуммаНДС), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			
			Если СвТов.СумУчНДС = 0 Тогда
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблСуммаОшибка";
				НовСтрОшибки.ТекущееЗначение 	= СвТов.СумУчНДС;     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= "В строке № " + ТекСтрока.НомерСтроки + " табличной части [Услуги] не указана стоимость товара с учетом НДС";
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
			КонецЕсли;
 			
			Таблица.СвТов.Добавить(СвТов);
		КонецЦикла;
		
		ТН.Таблица 		= Таблица;
		
		//Реквизиты строки Всего по накладной (ВсегоНакл)
		ВсегоНакл			= Фабрика.Создать(ЭлементТаблица.Свойства.Получить("ВсегоНакл").Тип);
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, "Товары") И
			Документ.Товары.Итог("КоличествоМест") > 0 Тогда
			ВсегоНакл.КолМестВс = Формат(Документ.Товары.Итог("КоличествоМест"), "ЧГ=0");
		КонецЕсли;                                                                                                                 
		
		Если БруттоВсего > 0 Тогда
			ВсегоНакл.БруттоВс 		= Формат(БруттоВсего, "ЧЦ=12; ЧДЦ=3;ЧРД='.';ЧГ=0; ЧН=0");
		КонецЕсли;
		
		СуммаНДСДокумента 		= Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
		ВсегоНакл.НеттоВс		= Формат(Документ.Товары.Итог("Количество"), "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
		ВсегоНакл.СумБезНДСВс	= Формат(Документ.СуммаДокумента - СуммаНДСДокумента, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		ВсегоНакл.СумНДСВс		= Формат(СуммаНДСДокумента, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		ВсегоНакл.СумУчНДСВс	= Формат(Документ.СуммаДокумента, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		Таблица.ВсегоНакл 		= ВсегоНакл;
				
		//Общие сведения товарной накладной (ТНОбщ)
		ТнОбщ 				= Фабрика.Создать(ЭлементТН.Свойства.Получить("ТнОбщ").Тип);
		КоличествоЗаписей 	= Документ.Товары.Количество() + Документ.Услуги.Количество();
		ТнОбщ.КолНомЗап		= КоличествоЗаписей;
		ТнОбщ.КолНомЗапПр	= ЧислоПрописью(КоличествоЗаписей,"",",,,м,,,,,0");
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, "Товары")  И
			Документ.Товары.Итог("КоличествоМест") > 0 Тогда
			ТнОбщ.ВсМест	= Формат(Документ.Товары.Итог("КоличествоМест"), "ЧГ=0");
			ТнОбщ.ВсМестПр 	= ЧислоПрописью(Документ.Товары.Итог("КоличествоМест"),"",",,,м,,,,,0");
		КонецЕсли;
				
		ТнОбщ.Нетто		= Формат(Документ.Товары.Итог("Количество"), "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
		ТнОбщ.НеттоПр	= ЧислоПрописью(Документ.Товары.Итог("Количество"),"",",,,,,,,,3");
		
		Если НЕ БруттоВсего = 0 Тогда
			ТнОбщ.Брутто	= Формат(БруттоВсего, "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
			ТнОбщ.БруттоПр	= ЧислоПрописью(БруттоВсего,"",",,,,,,,,0") + "кг.";
		КонецЕсли;
		
		ТН.ТнОбщ			= ТнОбщ;
		СвТНО.ТН			= ТН;
		
		//Сведения по отпуску груза (ОтпускГруз)                                      
		ОтпускГруз 				= Фабрика.Создать(ЭлементСвТНО.Свойства.Получить("ОтпускГруз").Тип);
		ОтпускГруз.СумОтпуск 	= Формат(Документ.СуммаДокумента, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		ОтпускГруз.СумОтпускПр	= СформироватьСуммуПрописью(Документ.СуммаДокумента, мВалютаРегламентированногоУчета);
		ОтпускГруз.ДатаОтпуск	= Формат(Документ.Дата, "ДЛФ=Д");	
		
		Руководители 	= ПолучитьОтветственныхЛицОрганизации(Документ.Организация, Документ.Дата);
		ОтпускРазрешил 	= Неопределено;
		
		//Для Бух
		Если ЕстьРеквизитДокумента("Руководитель", МетаданныеДокумента) И ЗначениеЗаполнено(Документ.Руководитель) Тогда
			ОтпускРазрешил = СокрЛП(Строка(Документ.Руководитель));
			//Для УТ и КА
		ИначеЕсли ЕстьРеквизитДокумента("ОтпускРазрешил", МетаданныеДокумента) И ЗначениеЗаполнено(Документ.ОтпускРазрешил) Тогда
			ОтпускРазрешил = СокрЛП(Строка(Документ.ОтпускРазрешил));
		КонецЕсли;
		
		//Сведения о должностном лице (ОтпускРазреш)
		Если ЗначениеЗаполнено(ОтпускРазрешил) Тогда
			ОтпускРазреш 			= Фабрика.Создать(ТипДолжЛицо);
			
			Если ЗначениеЗаполнено(Руководители.РуководительДолжность) Тогда
				
				ОтпускРазреш.Должность	= Строка(Руководители.РуководительДолжность);
				
			Иначе
				
				ОписаниеОшибкиСтрокой   = "Не указана должность.";
				СтруктураИсключения  	= ЗаполнитьСтруктуруИсключения(Неопределено, "-", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблОтпускРазрешилДолжностьОшибка", СтруктураИсключения); 
				
			КонецЕсли;
			
			Если ОтпускРазрешил <> Неопределено Тогда
				ДолжностноеЛицо = ОтпускРазрешил;
			ИначеЕсли Руководители.Руководитель <> Неопределено Тогда
				ДолжностноеЛицо = Руководители.Руководитель;
			Иначе
				ДолжностноеЛицо = ПодписантСтруктура();
			КонецЕсли;
			
			ФИО = СоздатьОбъектФИОИзДолжностногоЛица(Фабрика, ТипФИО, ДолжностноеЛицо);
			
			ОтпускРазреш.ФИО 		= ФИО;
			ОтпускГруз.ОтпускРазреш = ОтпускРазреш;
		Иначе
			ОписаниеОшибкиСтрокой   = "Не указано лицо, разрешившее отпуск груза.";
			СтруктураИсключения  	= ЗаполнитьСтруктуруИсключения(Неопределено, "-", ОписаниеОшибкиСтрокой, Ложь);
            СтруктураДанных.Вставить("ОблОтпускРазрешилФИООшибка", СтруктураИсключения);
		КонецЕсли;
 						
		//Сведения о должностном лице (Бухгалтер)
		//Для Бух и КА
		Если ЕстьРеквизитДокумента("ГлавныйБухгалтер", МетаданныеДокумента) Тогда
			Бухгалтер = ?(ЗначениеЗаполнено(Документ.ГлавныйБухгалтер), Документ.ГлавныйБухгалтер, Руководители.ГлавныйБухгалтер);
			//Для УТ
		Иначе 
			Бухгалтер = Руководители.ГлавныйБухгалтер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Бухгалтер) Тогда
			Бух	= Фабрика.Создать(ТипДолжЛицо);
			Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерДолжность) Тогда
				Бух.Должность			= Строка(Руководители.ГлавныйБухгалтерДолжность);
			КонецЕсли;
			
			ФИО = СоздатьОбъектФИОИзДолжностногоЛица(Фабрика, ТипФИО, Бухгалтер);
			
			Бух.ФИО = ФИО;
			ОтпускГруз.Бухгалтер = Бух;
		КонецЕсли;	
		
		//Сведения о должностном лице (ОтпускПроизв)
		Если ЗначениеЗаполнено(Документ.ОтпускПроизвел) Тогда
			
			ФИО = СоздатьОбъектФИОИзДолжностногоЛица(Фабрика, ТипФИО, Документ.ОтпускПроизвел);
			
			Если ФИО <> Неопределено Тогда
				
				ОтпускПроизв	= Фабрика.Создать(ТипДолжЛицо);
				
				ОтпускПроизв.ФИО = ФИО;
											
				ОтпускГруз.ОтпускПроизв = ОтпускПроизв;
			Иначе
				ОписаниеОшибкиСтрокой   = "У лица, отпустившего груз, не заполнены ФИО.";
				СтруктураИсключения  	= ЗаполнитьСтруктуруИсключения(Неопределено, "-", ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблОтпускПроизвелФИООшибка", СтруктураИсключения);	
			КонецЕсли;
		Иначе
			ОписаниеОшибкиСтрокой   = "Не указано лицо, отпустившее груз.";
			СтруктураИсключения  	= ЗаполнитьСтруктуруИсключения(Неопределено, "-", ОписаниеОшибкиСтрокой, Истина);
            СтруктураДанных.Вставить("ОблОтпускПроизвелФИООшибка", СтруктураИсключения);
		КонецЕсли;
 		
		СвТНО.ОтпускГруз = ОтпускГруз;
		//Сведения о лице, подписывающем документ в электронном виде (Подписант)
		Подп = Фабрика.Создать(ЭлементДокумент.Свойства.Получить("Подписант").Тип);		
		
		Подписант = ПодписантСтруктура();
	
		Если Подписант = Неопределено Тогда
			ВызватьИсключение "Не удалось получить информацию о подписанте";
		КонецЕсли;
		
		//Сведения о лице, подписывающем документ в электронном виде
		Подп 	= Фабрика.Создать(ЭлементПодписант);
		ФИО		= СоздатьОбъектФИО(Фабрика, ТипФИО, Подписант.ФИО);
		Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
			//Индивидуальный предприниматель (ИП)
			ИП 				= Фабрика.Создать(ЭлементПодписант.Свойства.Получить("ИП").Тип);
			ИП.ИННФЛ 		= Подписант.ИННФЛ;
			ИП.СвГосРегИП	= Подписант.СвГосРегИП;
			ИП.ФИО 	= ФИО;
			Подп.ИП = ИП;
		Иначе
			//Организация (ЮЛ)
			ЮЛ 			= Фабрика.Создать(ЭлементПодписант.Свойства.Получить("ЮЛ").Тип);
			
			Если ЗначениеЗаполнено(Подписант.ИННЮЛ) Тогда
				ЮЛ.ИННЮЛ	= Подписант.ИННЮЛ;
			Иначе
				ЮЛ.ИННЮЛ	= "1831010101";
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(Подписант.Должность) Тогда
				ЮЛ.Должн = Подписант.Должность;
			КонецЕсли;
			
			ЮЛ.ФИО 	= ФИО;
			Подп.ЮЛ = ЮЛ;
		КонецЕсли;
		
		Док.СвТНО 			= СвТНО;                                                            
		Док.Подписант		= Подп;
		Файл.Документ 		= Док;
		
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(КаталогЭД + ИмяФайлаЭД + ".xml", ТипКодировки);
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		Фабрика.ЗаписатьXML(НоваяЗаписьXML, Файл);
		НоваяЗаписьXML.Закрыть();
				
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_Файл", КаталогЭД + ИмяФайлаЭД + ".xml");
		ДокументXML_Структура.Вставить("СтруктураДанных", СтруктураДанных);
		
		Возврат ДокументXML_Структура;
	Исключение
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <" + Документ + ">. " + ОписаниеОшибки());
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
КонецФункции

//Функция формирует XML-файл (контент) документа с типом "Акт"
//
// Параметры:
//  Документ: ссылка на учетный документ 1С
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭДАктПродавец(Документ, БезАвторизации = Неопределено, СтруктураУступочнойНадписи) Экспорт
	
	//Проверим валюту документа. 
	Если СокрЛП(Документ.ВалютаДокумента.Код) <> "643" Тогда 
		Сообщить("Работа с иностранной валютой " + Документ.ВалютаДокумента + " не поддерживается, невозможно сформировать документ [" + Документ + "].");
		Возврат Неопределено;	
	КонецЕсли;

	СтруктураДанных = СформироватьСтруктуруДанныхДокумента(Документ);
	
	// Недостаточно данных для формирования, прерываенм формирование документа
	Если СтруктураДанных = Неопределено Тогда
		ОткрытьФормуПредпростраДокумента(Документ, БезАвторизации, СтруктураУступочнойНадписи, "Акт");
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеДокумента 				= Документ.Метаданные();
	МетаданныеСправочникаОрганизации    = Метаданные.Справочники.Организации;
	
	// Создаем фабрику из схемы
	Попытка
		Фабрика 						= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_IAKTPRM_1_987_00_05_01_02").ПолучитьТекст());
		КаталогЭД 						= КаталогВременныхФайлов();
		ТипКодировки 					= "windows-1251";		
		
		ИмяФайлаЭД = "DP_IAKTPRM" + "_" +
		СтруктураДанных.ИдентификаторПолучателя + "_" +
		СтруктураДанных.ИдентификаторОтправителя + "_" +
		Формат(Документ.Дата, "ДФ=""ггггММдд""") + "_" +
		Документ.УникальныйИдентификатор();
		
		//Определение типов XDTO
		ТипДоверенность				= Фабрика.Тип("IAKTPRM", "ДоверенностьТип");
		ТипДолжнЛицо				= Фабрика.Тип("IAKTPRM", "ДолжЛицоТип");
		ТипУчастник					= Фабрика.Тип("IAKTPRM", "УчастникТип");
		ТипКонтакт					= Фабрика.Тип("IAKTPRM", "КонтактТип");
		ТипАдрес					= Фабрика.Тип("IAKTPRM", "АдресТип");
		ТипАдресИно					= Фабрика.Тип("IAKTPRM", "АдрИноТип");
		ТипАдресРФ					= Фабрика.Тип("IAKTPRM", "АдрРФТип");
		ТипФИО						= Фабрика.Тип("IAKTPRM", "ФИОТип");
		
		//Определение типов элементов XDTO
		ЭлементФайл					= Фабрика.Тип("IAKTPRM", "Файл");
		ЭлементСвУчДокОбор			= ЭлементФайл.Свойства.Получить("СвУчДокОбор").Тип;
		ЭлементСвОЭДОтпрСФ			= ЭлементСвУчДокОбор.Свойства.Получить("СвОЭДОтпрСФ").Тип;
		ЭлементДокумент				= ЭлементФайл.Свойства.Получить("Документ").Тип;
		ЭлементСвАктИ				= ЭлементДокумент.Свойства.Получить("СвАктИ").Тип;
		ЭлементОписРабот			= ЭлементСвАктИ.Свойства.Получить("ОписРабот").Тип;
		ЭлементСдал					= ЭлементСвАктИ.Свойства.Получить("Сдал").Тип;
		ЭлементПодписант			= ЭлементДокумент.Свойства.Получить("Подписант").Тип;
		
		//Файл обмена (Файл)
		Файл = Фабрика.Создать(ЭлементФайл);
		Файл.ИдФайл 	= ИмяФайлаЭД;
		Файл.ВерсПрог	= СформироватьСтрокуВерсПрог();
		Файл.ВерсФорм 	= "5.01";
		//Сведения об участниках электронногодокументооборота (СвУчДокОбор)
		СвУчДокОбор = Фабрика.Создать(ЭлементСвУчДокОбор);
		СвУчДокОбор.ИдОтпр 	= СтруктураДанных.ИдентификаторОтправителя;
		СвУчДокОбор.ИдПок	= СтруктураДанных.ИдентификаторПолучателя;	
		//Сведения об операторе электронного документооборота отправителя (СвОЭДОтпр)
		СвОЭДОтпрСФ = Фабрика.Создать(ЭлементСвОЭДОтпрСФ);
		СвОЭДОтпрСФ.НаимОрг		= СтруктураДанных.SubjectInfo_ЭДО.Name;
		СвОЭДОтпрСФ.ИННЮЛ		= СтруктураДанных.SubjectInfo_ЭДО.Inn;
		СвОЭДОтпрСФ.ИдЭДОСФ		= СтруктураДанных.ИдентификаторЭДО;
		СвУчДокОбор.СвОЭДОтпрСФ = СвОЭДОтпрСФ;			
		Файл.СвУчДокОбор		= СвУчДокОбор;
		//Счет-фактура, применяемый при расчетах по налогу на добавленную стоимость (Документ)
		Док 		= Фабрика.Создать(ЭлементДокумент);
		Док.КНД		= "1175006";
		ТекДата		= ТекущаяДата();
		Док.ДатаДок	= Формат(ТекДата, "ДЛФ=Д");
		Док.ВремДок = Формат(ТекДата, "ДФ=""ЧЧ.мм.сс""");
		
		//Акт о выполнении работ (оказании услуг) - титул исполнителя (СвАктИ)
		СвАктИ 				= Фабрика.Создать(ЭлементСвАктИ);
		СвАктИ.НаимПервДок 	= "Акт о выполнении работ (оказании услуг)";
		СвАктИ.НомАкт 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Документ);
		СвАктИ.ДатаАкт 		= Формат(Документ.Дата, "ДЛФ=Д");
		
		Заголовок 			= "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ с одной стороны и представитель ЗАКАЗЧИКА с другой стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги):";		
		СвАктИ.Заголовок	= Заголовок;
		
		//Сведения об участнике документооборота (УчастникТип)
		Исполнитель 		= Фабрика.Создать(ТипУчастник);
		Если ЗначениеЗаполнено(Документ.Организация.КодПоОКПО) Тогда
			Исполнитель.ОКПО 	= Документ.Организация.КодПоОКПО;
		КонецЕсли;
		//Идентификационные сведения (ИдСв)
		ИдСв = Фабрика.Создать(Исполнитель.Тип().Свойства.Получить("ИдСв").Тип);
		Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			//Сведения об организации (СвЮЛ)
			СвЮЛ 			= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг 	= Документ.Организация.НаименованиеПолное;
			СвЮЛ.ИННЮЛ 		= Документ.Организация.ИНН;
			СвЮЛ.КПП 		= Документ.Организация.КПП;
			//Для Бух и КА
			Если ЕстьРеквизитСправочника("КодОКОПФ", МетаданныеСправочникаОрганизации) Тогда
				Если ЗначениеЗаполнено(Документ.Организация.КодОКОПФ) Тогда
					СвЮЛ.ОКОПФ 	= СокрЛП(Документ.Организация.КодОКОПФ);
				КонецЕсли;
			КонецЕсли;	
			ИдСв.СвЮЛ 		= СвЮЛ;
		Иначе
			//Сведения об индивидуальном предпринимателе (СвФЛ)
			СвФЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип); 
			//Для Бух и КА
			Если ЕстьРеквизитСправочника("ИндивидуальныйПредприниматель", МетаданныеСправочникаОрганизации) Тогда
				СвФЛ.ИННФЛ = Документ.Организация.ИндивидуальныйПредприниматель.ИНН;
			Иначе
				//для УТ
				СвФЛ.ИННФЛ = Документ.Организация.ИНН;
			КонецЕсли;
			
			//Фамилия, имя, отчество физического лица (ФИОТип)
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Документ.Организация);
			Если ФИОИП = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			СвФЛ.ФИОИП = ФИОИП;
			
			ИдСв.СвФЛ = СвФЛ;

		КонецЕсли;
		
		Исполнитель.ИдСв = ИдСв;
		
		//Сведения об адресе (АдресТип)
		Если НЕ СтруктураДанных.АдресОрганизации = Неопределено Тогда 
			Адрес = Фабрика.Создать(ТипАдрес);
			Если СтруктураДанных.АдресОрганизации.АдресРФ Тогда
				АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
				ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресОрганизации);
				Адрес.АдрРФ = АдрРФ;
			Иначе
				//иностранная компания, иностранный адрес
				АдрИно = Фабрика.Создать(ТипАдресИно);
				ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресОрганизации);
				Адрес.АдрИно = АдрИно;
			КонецЕсли;
			Исполнитель.Адрес = Адрес;	
		КонецЕсли;
		
		//Контактные сведения
		Контакт 			= Фабрика.Создать(ТипКонтакт);
        ЗаполнятьКонтакт 	= Ложь;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ТлфОрганизации) Тогда
			Контакт.Тлф 		= СтруктураДанных.ТлфОрганизации;
			ЗаполнятьКонтакт 	= Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ФаксОрганизации) Тогда
			Контакт.Факс		= СтруктураДанных.ФаксОрганизации;
			ЗаполнятьКонтакт	= Истина;
		КонецЕсли;
		
		Если ЗаполнятьКонтакт Тогда 
		    Исполнитель.Контакт 	= Контакт;
		КонецЕсли;
		
		//Банковские реквизиты (БанкРекв)
		Если ЗначениеЗаполнено(СтруктураДанных.ДанныеСчетаОрганизации.НомерСчета) Тогда
			БанкРекв 			= Фабрика.Создать(Исполнитель.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаОрганизации.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаОрганизации);
			БанкРекв.СвБанк 	= СвБанк;
			Исполнитель.БанкРекв 	= БанкРекв;
		КонецЕсли;
		
		СвАктИ.Исполнитель = Исполнитель;
		
		//Описание выполненных работ (ОписРабот)
		ОписРабот 				= Фабрика.Создать(ЭлементОписРабот);
		ОписРабот.СумБезНДСИт 	= Формат(?(Документ.СуммаВключаетНДС, Документ.Услуги.Итог("Сумма") - Документ.Услуги.Итог("СуммаНДС"), Документ.Услуги.Итог("Сумма")), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");	
	
		ОписРабот.СумУчНДСИт 	= Формат(?(Документ.СуммаВключаетНДС, Документ.Услуги.Итог("Сумма"), Документ.Услуги.Итог("Сумма") + Документ.Услуги.Итог("СуммаНДС")), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		НомерСтроки 			= 0;
		ДокументСодержитНДС		= Ложь;
		
		//Услуги
		Для Каждого ТекСтрока Из Документ.Услуги Цикл
			НомерСтроки = НомерСтроки + 1;
			//Сведения о произведенной работе (оказанной услуге) (Работа)
			Работа 			= Фабрика.Создать(ОписРабот.Тип().Свойства.Получить("Работа").Тип); 
			Работа.Номер 	= НомерСтроки;
			
			//Заполняем из полного наим, если оно не пустое и короче 1000 симв.
			Если СтрДлина(ТекСтрока.Номенклатура.НаименованиеПолное) <= 1000 И ЗначениеЗаполнено(ТекСтрока.Номенклатура.НаименованиеПолное) Тогда
				Работа.НаимРабот = ТекСтрока.Номенклатура.НаименованиеПолное;
			Иначе
				Работа.НаимРабот = ТекСтрока.Номенклатура.Наименование;
			КонецЕсли;
			
			Если НЕ СокрЛП(Строка(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения)) = "" Тогда
				Работа.НаимЕдИзм 	= СокрЛП(Строка(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения));
				
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код) Тогда
					Работа.ОКЕИ			= СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код);
				КонецЕсли;
			Иначе
				Сообщить("В строке " + НомерСтроки + " у номенклатуры [" + ТекСтрока.Номенклатура + "] не указана единица измерения.");
			КонецЕсли;
			
			СуммаБезНДС = Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма - ТекСтрока.СуммаНДС, ТекСтрока.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			// Вдруг количество = 0 
			Попытка
				РасчетнаяЦена = Формат(СуммаБезНДС/?(ТекСтрока.Количество = 0, 1, ТекСтрока.Количество), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			Исключение
				РасчетнаяЦена = 1;
			КонецПопытки;			
			
			Если ЗначениеЗаполнено(ТекСтрока.Содержание) Тогда
				Работа.Описание = ТекСтрока.Содержание;
			КонецЕсли;
			
			Работа.Цена = РасчетнаяЦена;
			
			Если НЕ ТекСтрока.Количество = 0 Тогда
				Работа.Количество = Формат(ТекСтрока.Количество, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			КонецЕсли;
			
			Работа.СумБезНДС 	= СуммаБезНДС;
			
			Если НЕ ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				Работа.СумНДС 		= Формат(ТекСтрока.СуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
				ДокументСодержитНДС = Истина;
			КонецЕсли;
			
			Работа.СумУчНДС 	= Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма, ТекСтрока.Сумма +  ТекСтрока.СуммаНДС), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			
			Если ЗначениеЗаполнено(ТекСтрока.Содержание) Тогда
				Работа.Описание = ТекСтрока.Содержание;
			КонецЕсли;
			
			ОписРабот.Работа.Добавить(Работа);
		КонецЦикла;
		
		Если ДокументСодержитНДС Тогда
			ОписРабот.СумНДСИт 		= Формат(Документ.Услуги.Итог("СуммаНДС"), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");		
		КонецЕсли;
				
		СвАктИ.ОписРабот.Добавить(ОписРабот);
		
		Руководители = ПолучитьОтветственныхЛицОрганизации(Документ.Организация, Документ.Дата);
		
		//Сдал (Сдал)
		Сдал 			= Фабрика.Создать(ЭлементСдал);
		Сдал.ДатаИсполн = Формат(Документ.Дата, "ДЛФ=Д");
		
		//Для Бух
		Если ЕстьРеквизитДокумента("Руководитель", МетаданныеДокумента) Тогда
			ОтпускРазрешил = ?(ЗначениеЗаполнено(Документ.Руководитель), Документ.Руководитель, Руководители.Руководитель);
		// Акт об оказании производственных услуг	
		ИначеЕсли ЕстьРеквизитДокумента("Исполнитель", МетаданныеДокумента) Тогда
			ОтпускРазрешил = ?(ЗначениеЗаполнено(Документ.Исполнитель), Документ.Исполнитель, Руководители.Руководитель);
		Иначе
			ОтпускРазрешил = Руководители.Руководитель;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтпускРазрешил) Тогда
			//Сведения о должностном лице (ДолжЛицоТип)
			ПодписьИсполн 			= Фабрика.Создать(ТипДолжнЛицо);
			Если ЗначениеЗаполнено(Руководители.РуководительДолжность) Тогда
				ПодписьИсполн.Должность = Строка(Руководители.РуководительДолжность);
			КонецЕсли;
			
			ФИО = СоздатьОбъектФИОИзДолжностногоЛица(Фабрика, ТипФИО, ОтпускРазрешил);
			Если ФИО = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ПодписьИсполн.ФИО 	= ФИО;
			Сдал.ПодписьИсполн 	= ПодписьИсполн;
			
		Иначе
			Сообщить("Не удалось получить сведения об исполнителе. Проверьте ответственных лиц организации. Невозможно отправить документ [" + Документ + "].");
			Возврат Неопределено;
		КонецЕсли;
		
		СвАктИ.Сдал = Сдал;
		
		//Уступочная надпись (параметры)
		Если НЕ СтруктураУступочнойНадписи = Неопределено Тогда
			ИнфПол 			= Фабрика.Создать(ЭлементСвАктИ.Свойства.Получить("ИнфПол").Тип);
			ИнфПол.ТекстИнф = СтруктураУступочнойНадписи.ТекстУступочнойНадписи;
			СвАктИ.ИнфПол 	= ИнфПол;
		КонецЕсли;
		
		//Сведения о лице, подписывающем документ в электронной форме (Подписант)		
		Подписант = ПодписантСтруктура();
		
		//Сведения о лице, подписывающем документ в электронном виде (Подписант)
		Подп 	= Фабрика.Создать(ЭлементПодписант);
		ФИО		= СоздатьОбъектФИО(Фабрика, ТипФИО, Подписант.ФИО);
		Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
			//Индивидуальный предприниматель (ИП)
			ИП 				= Фабрика.Создать(ЭлементПодписант.Свойства.Получить("ИП").Тип);
			ИП.ИННФЛ 		= Подписант.ИННФЛ;
			ИП.СвГосРегИП	= Подписант.СвГосРегИП;
			ИП.ФИО 	= ФИО;
			Подп.ИП = ИП;
		Иначе
			//Организация (ЮЛ)
			ЮЛ 			= Фабрика.Создать(ЭлементПодписант.Свойства.Получить("ЮЛ").Тип);
			ЮЛ.ИННЮЛ	= Подписант.ИННЮЛ;
			
			Если ЗначениеЗаполнено(Подписант.Должность) Тогда
				ЮЛ.Должн = Подписант.Должность;
			КонецЕсли;
			
			ЮЛ.ФИО 	= ФИО;
			Подп.ЮЛ = ЮЛ;
		КонецЕсли;
		
		Док.СвАктИ 		= СвАктИ;
		Док.Подписант 	= Подп;
		Файл.Документ 	= Док;
		
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(КаталогЭД + ИмяФайлаЭД + ".xml", ТипКодировки);
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		Фабрика.ЗаписатьXML(НоваяЗаписьXML, Файл);
		НоваяЗаписьXML.Закрыть();
		
		ЭД_ДвоичныеДанные = Новый ДвоичныеДанные(КаталогЭД + ИмяФайлаЭД + ".xml");
		
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", ЭД_ДвоичныеДанные);
		ДокументXML_Структура.Вставить("Документ_ИмяФайла", ИмяФайлаЭД);
		
		Возврат ДокументXML_Структура;
	Исключение		
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <" + Документ + ">. " + ОписаниеОшибки());
		ОткрытьФормуПредпростраДокумента(Документ, БезАвторизации, СтруктураУступочнойНадписи, "Акт");
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
КонецФункции

//Функция формирует XML-файл (контент) документа с типом "Акт"
//
// Параметры:
//  Документ: ссылка на учетный документ 1С
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭДАктПродавецПревью(Документ, БезАвторизации = Неопределено, СтруктураУступочнойНадписи) Экспорт
	
	СтруктураДанных = СформироватьСтруктуруДанныхДляПревьюДокумента(Документ);
    	    	
	МетаданныеДокумента 				= Документ.Метаданные();
	МетаданныеСправочникаОрганизации    = Метаданные.Справочники.Организации;
	
	// Создаем фабрику из схемы
	Попытка
		Фабрика 						= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_IAKTPRM_1_987_00_05_01_02").ПолучитьТекст());
		КаталогЭД 						= КаталогВременныхФайлов();
		ТипКодировки 					= "windows-1251";		
		
		ИмяФайлаЭД = "DP_IAKTPRM" + "_" +
		СтруктураДанных.ИдентификаторПолучателя + "_" +
		СтруктураДанных.ИдентификаторОтправителя + "_" +
		Формат(Документ.Дата, "ДФ=""ггггММдд""") + "_" +
		Документ.УникальныйИдентификатор();
		
		//Определение типов XDTO
		ТипДоверенность				= Фабрика.Тип("IAKTPRM", "ДоверенностьТип");
		ТипДолжнЛицо				= Фабрика.Тип("IAKTPRM", "ДолжЛицоТип");
		ТипУчастник					= Фабрика.Тип("IAKTPRM", "УчастникТип");
		ТипКонтакт					= Фабрика.Тип("IAKTPRM", "КонтактТип");
		ТипАдрес					= Фабрика.Тип("IAKTPRM", "АдресТип");
		ТипАдресИно					= Фабрика.Тип("IAKTPRM", "АдрИноТип");
		ТипАдресРФ					= Фабрика.Тип("IAKTPRM", "АдрРФТип");
		ТипФИО						= Фабрика.Тип("IAKTPRM", "ФИОТип");
		
		//Определение типов элементов XDTO
		ЭлементФайл					= Фабрика.Тип("IAKTPRM", "Файл");
		ЭлементСвУчДокОбор			= ЭлементФайл.Свойства.Получить("СвУчДокОбор").Тип;
		ЭлементСвОЭДОтпрСФ			= ЭлементСвУчДокОбор.Свойства.Получить("СвОЭДОтпрСФ").Тип;
		ЭлементДокумент				= ЭлементФайл.Свойства.Получить("Документ").Тип;
		ЭлементСвАктИ				= ЭлементДокумент.Свойства.Получить("СвАктИ").Тип;
		ЭлементОписРабот			= ЭлементСвАктИ.Свойства.Получить("ОписРабот").Тип;
		ЭлементСдал					= ЭлементСвАктИ.Свойства.Получить("Сдал").Тип;
		ЭлементПодписант			= ЭлементДокумент.Свойства.Получить("Подписант").Тип;
		
		//Файл обмена (Файл)
		Файл = Фабрика.Создать(ЭлементФайл);
		Файл.ИдФайл 	= ИмяФайлаЭД;
		Файл.ВерсПрог	= СформироватьСтрокуВерсПрог();
		Файл.ВерсФорм 	= "5.01";
		//Сведения об участниках электронногодокументооборота (СвУчДокОбор)
		СвУчДокОбор = Фабрика.Создать(ЭлементСвУчДокОбор);
		
		Если НЕ ТипЗнч(СтруктураДанных.ИдентификаторОтправителя) = Тип("Структура") Тогда
			СвУчДокОбор.ИдОтпр 	= СтруктураДанных.ИдентификаторОтправителя;
		Иначе
			СвУчДокОбор.ИдОтпр 	= СтруктураДанных.ИдентификаторОтправителя.ЭталонноеЗначение;
		КонецЕсли;
		
		Если НЕ ТипЗнч(СтруктураДанных.ИдентификаторПолучателя) = Тип("Структура") Тогда
			СвУчДокОбор.ИдПок = СтруктураДанных.ИдентификаторПолучателя;
		Иначе
			СвУчДокОбор.ИдПок = СтруктураДанных.ИдентификаторПолучателя.ЭталонноеЗначение;
		КонецЕсли;
	
		//Сведения об операторе электронного документооборота отправителя (СвОЭДОтпр)
		СвОЭДОтпрСФ = Фабрика.Создать(ЭлементСвОЭДОтпрСФ);
		
		Если ТипЗнч(СтруктураДанных.SubjectInfo_ЭДО) = Тип("ОбъектXDTO") Тогда
			СвОЭДОтпрСФ.НаимОрг		= СтруктураДанных.SubjectInfo_ЭДО.Name;
			СвОЭДОтпрСФ.ИННЮЛ		= СтруктураДанных.SubjectInfo_ЭДО.Inn;
			СвОЭДОтпрСФ.ИдЭДОСФ		= СтруктураДанных.ИдентификаторЭДО;
		Иначе
			СвОЭДОтпрСФ.НаимОрг		= СтруктураДанных.SubjectInfo_ЭДО.ЭталонноеЗначение.Name;
			СвОЭДОтпрСФ.ИННЮЛ		= СтруктураДанных.SubjectInfo_ЭДО.ЭталонноеЗначение.Inn;
			СвОЭДОтпрСФ.ИдЭДОСФ		= СтруктураДанных.SubjectInfo_ЭДО.ЭталонноеЗначение.OperatorServiceCode;
		КонецЕсли;
				
		СвУчДокОбор.СвОЭДОтпрСФ = СвОЭДОтпрСФ;			
		Файл.СвУчДокОбор		= СвУчДокОбор;
				
		//Счет-фактура, применяемый при расчетах по налогу на добавленную стоимость (Документ)
		Док 		= Фабрика.Создать(ЭлементДокумент);
		Док.КНД		= "1175006";
		ТекДата		= ТекущаяДата();
		Док.ДатаДок	= Формат(ТекДата, "ДЛФ=Д");
		Док.ВремДок = Формат(ТекДата, "ДФ=""ЧЧ.мм.сс""");

		
		//Акт о выполнении работ (оказании услуг) - титул исполнителя (СвАктИ)
		СвАктИ 				= Фабрика.Создать(ЭлементСвАктИ);
		СвАктИ.НаимПервДок 	= "Акт о выполнении работ (оказании услуг)";
		СвАктИ.НомАкт 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Документ);
		СвАктИ.ДатаАкт 		= Формат(Документ.Дата, "ДЛФ=Д");
		
		Заголовок 			= Фабрика.Создать(СвАктИ.Тип().Свойства.Получить("Заголовок").Тип);
		Заголовок 			= "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ с одной стороны и представитель ЗАКАЗЧИКА с другой стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги):";
		СвАктИ.Заголовок	= Заголовок;
		
		//Сведения об участнике документооборота (УчастникТип)
		Исполнитель 		= Фабрика.Создать(ТипУчастник);
		Если ЗначениеЗаполнено(Документ.Организация.КодПоОКПО) Тогда
			СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Организация.КодПоОКПО);
			Если СтруктураПроверки.КорректноеЗначение Тогда
				Исполнитель.ОКПО = Документ.Организация.КодПоОКПО;
			Иначе
				ОписаниеОшибкиСтрокой 	= "У организации [" + Строка(Документ.Организация) + "] код ОКПО содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				СтруктураИсключения		= ЗаполнитьСтруктуруИсключения(Документ.Организация.КодПоОКПО, "1234567890", ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
 				Исполнитель.ОКПО = "1234567890";
			КонецЕсли;
		КонецЕсли;
		
		//Идентификационные сведения (ИдСв)
		ИдСв = Фабрика.Создать(Исполнитель.Тип().Свойства.Получить("ИдСв").Тип);
		Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			//Сведения об организации (СвЮЛ)
			СвЮЛ 			= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг 	= Документ.Организация.НаименованиеПолное;
			
			ИсполнительИНН	= Документ.Организация.ИНН;
			
			СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Организация.ИНН);
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
				ОписаниеОшибкиСтрокой 	= "У организации [" + Строка(Документ.Организация) + "] ИНН содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
					СтруктураИсключения		= ЗаполнитьСтруктуруИсключения(Документ.Организация.ИНН, "1831010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				ИсполнительИНН = "1831010101";
			КонецЕсли;

			Если СтрДлина(Документ.Организация.ИНН) <> 10 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "У организации [" + Строка(Документ.Организация) + "] некорректный ИНН. Для юр.лица ИНН должен состоять из 10 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.ИНН, "1831010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + "ИНН должен состоять из 10 символов.";
				КонецЕсли;
				ИсполнительИНН = "1831010101";
			КонецЕсли;

			СвЮЛ.ИННЮЛ 		= ИсполнительИНН;
			ИсполнительКПП	= Документ.Организация.КПП;
			
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Организация.КПП);
						
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "У организации [" + Строка(Документ.Организация) + "] КПП содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.КПП, "183101010", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + "КПП содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				КонецЕсли;
				ИсполнительКПП = "183101010";
			КонецЕсли;
			
			Если СтрДлина(Документ.Организация.КПП) <> 9 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "У организации [" + Строка(Документ.Организация) + "] КПП должен состоять из 9 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.КПП, "183101010", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + "КПП должен состоять из 9 символов.";
				КонецЕсли;
				ИсполнительКПП = "183101010";
			КонецЕсли;

			СвЮЛ.КПП = ИсполнительКПП;
					
			//Для Бух и КА
			Если ЕстьРеквизитСправочника("КодОКОПФ", МетаданныеСправочникаОрганизации) Тогда
				Если ЗначениеЗаполнено(Документ.Организация.КодОКОПФ) Тогда
					СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", Документ.Организация.КодОКОПФ);
					ПоставщикОКОПФ 		= Документ.Организация.КодОКОПФ;
					
					Если НЕ (СтрДлина(Документ.Организация.КодОКОПФ) = 2 ИЛИ СтрДлина(Документ.Организация.КодОКОПФ) = 5) Тогда
						ПоставщикОКОПФ 			= "12345";
						ОписаниеОшибкиСтрокой	= "У организации [" + Строка(Документ.Организация) + "] некорректный код ОКОПФ: " + Документ.Организация.КодОКОПФ + ". Код должен состоять из 2 или 5 символов.";
						Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
							СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.КодОКОПФ, ПоставщикОКОПФ, ОписаниеОшибкиСтрокой, Истина);
							СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
						Иначе
							СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
						ОписаниеОшибкиСтрокой	= "У организации [" + Строка(Документ.Организация) + "код ОКОПФ содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
						Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
							ПоставщикОКОПФ 			= "12345";
							СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Документ.Организация.КодОКОПФ, ПоставщикОКОПФ, ОписаниеОшибкиСтрокой, Истина);
							СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);	
						Иначе	
							СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
						КонецЕсли;
					КонецЕсли;
					СвЮЛ.ОКОПФ 	= ПоставщикОКОПФ;
				КонецЕсли;
			КонецЕсли;	
			ИдСв.СвЮЛ 		= СвЮЛ;
		Иначе
			//Сведения об индивидуальном предпринимателе (СвФЛ)
			СвФЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип); 
			//Для Бух и КА
			Если ЕстьРеквизитСправочника("ИндивидуальныйПредприниматель", МетаданныеСправочникаОрганизации) Тогда
				ИННФЛ = Документ.Организация.ИндивидуальныйПредприниматель.ИНН;
			Иначе
				//для УТ
				ИННФЛ = Документ.Организация.ИНН;
			КонецЕсли;
			
			ИсполнительИНН		= ИННФЛ;
			СтруктураПроверки 	= ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", ИННФЛ);
			
			Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
				ОписаниеОшибкиСтрокой 	= "У организации [" + Строка(Документ.Организация) + "] ИНН содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
					СтруктураИсключения		= ЗаполнитьСтруктуруИсключения(ИННФЛ, "183101010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				ИсполнительИНН = "183101010101";
			КонецЕсли;

			Если СтрДлина(ИННФЛ) <> 12 Тогда
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "У организации [" + Строка(Документ.Организация) + "] некорректный ИНН. Для физ.лица ИНН должен состоять из 12 символов.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(ИННФЛ, "183101010101", ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + "ИНН должен состоять из 12 символов.";
				КонецЕсли;
				ИсполнительИНН = "183101010101";
			КонецЕсли;
            			
			СвФЛ.ИННФЛ = ИсполнительИНН;
			
			//Фамилия, имя, отчество физического лица (ФИОТип)
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Документ.Организация);
			Если ФИОИП <> Неопределено Тогда
				
				СвФЛ.ФИОИП = ФИОИП;
				
			Иначе
				
				СтруктураФИОФизЛица = Новый_ФИО("Иванов", "Иван", "Иванович");
					
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
					ОписаниеОшибкиСтрокой 	= "Не удалось получить ФИО ИП [" + Строка(Документ.Организация) + "] проверьте заполнение справочника в 1С.";
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения(Неопределено, СтруктураФИОФизЛица, ОписаниеОшибкиСтрокой, Истина);
					СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				
				// Некорректное ФИО 
				СтруктураДанных.Вставить("ПоставщикФИООшибка", "-"); 
				
			КонецЕсли;
			
			ИдСв.СвФЛ = СвФЛ;
				
		КонецЕсли;
		
		Исполнитель.ИдСв = ИдСв;
		
		//Сведения об адресе (АдресТип)
		Если НЕ СтруктураДанных.АдресОрганизации.ЕстьОшибкиЗаполнения Тогда 
			Адрес = Фабрика.Создать(ТипАдрес);
			Если СтруктураДанных.АдресОрганизации.АдресСтруктура.АдресРФ Тогда
				АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
				ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресОрганизации.АдресСтруктура);
				Адрес.АдрРФ = АдрРФ;
			Иначе
				//иностранная компания, иностранный адрес
				АдрИно = Фабрика.Создать(ТипАдресИно);
				ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресОрганизации.АдресСтруктура);
				Адрес.АдрИно = АдрИно;
			КонецЕсли;
			Исполнитель.Адрес = Адрес;
		Иначе
			Адрес = Фабрика.Создать(ТипАдрес);
            АдрРФ = Фабрика.Создать(ТипАдресРФ);
			
			ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресОрганизации.АдресСтруктура.ТекущееЗначение);

			Адрес.АдрРФ = АдрРФ;
            Исполнитель.Адрес = Адрес;
			
			ОписаниеОшибкиСтрокой 	= СтруктураДанных.АдресОрганизации.АдресСтруктура.ОписаниеОшибки;

			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", СтруктураДанных.АдресОрганизации.АдресСтруктура.ЭталонноеЗначение, ОписаниеОшибкиСтрокой, Истина);
				СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + СтруктураДанных.АдресОрганизации.АдресСтруктура.ОписаниеОшибки;
			КонецЕсли;
			
			Если СтруктураДанных.АдресОрганизации.АдресНайден Тогда
				ОшибкиАдреса = "";
				
				Для Каждого ЭлементСтруктуры Из СтруктураДанных.АдресОрганизации.АдресОшибки Цикл
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Структура") Тогда
						ОшибкиАдреса = ?(НЕ ЗначениеЗаполнено(ОшибкиАдреса), ЭлементСтруктуры.Значение.ОписаниеОшибки, ОшибкиАдреса + Символы.ПС + ЭлементСтруктуры.Значение.ОписаниеОшибки);
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ОшибкиАдреса) Тогда
					СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + ОшибкиАдреса;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//Контактные сведения			
		Контакт = Фабрика.Создать(ТипКонтакт);
		ЗаполнятьКонтакт = Ложь;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ТлфОрганизации) Тогда
			
			Если НЕ ТипЗнч(СтруктураДанных.ТлфОрганизации) = Тип("Структура") Тогда
				
				Контакт.Тлф = СтруктураДанных.ТлфОрганизации;
				ЗаполнятьКонтакт = Истина;
				
			Иначе
				
				ОписаниеОшибкиСтрокой 	= "Не найден телефон организации";
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
					СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ФаксОрганизации) Тогда 
			
			Если НЕ ТипЗнч(СтруктураДанных.ФаксГрузоотправителя) = Тип("Структура") Тогда
				
				Контакт.Факс = СтруктураДанных.ФаксОрганизации;
				ЗаполнятьКонтакт = Истина;
				
			Иначе
				
				ОписаниеОшибкиСтрокой 	= "Не найден факс организации";
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
					СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаполнятьКонтакт Тогда
			Исполнитель.Контакт = Контакт;
		КонецЕсли;
		
		Если НЕ СтруктураДанных.ДанныеСчетаОрганизации = Неопределено Тогда
			//Банковские реквизиты (БанкРекв)
			Если НЕ СтруктураДанных.ДанныеСчетаОрганизации.Свойство("ЭтоОшибка") Тогда
				БанкРекв 			= Фабрика.Создать(Исполнитель.Тип().Свойства.Получить("БанкРекв").Тип);
				БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаОрганизации.НомерСчета;
				СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
				ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаОрганизации);
				БанкРекв.СвБанк 	= СвБанк;
				Исполнитель.БанкРекв 	= БанкРекв;
			Иначе
				ОписаниеОшибкиСтрокой 	= "Не найдены данные расчетного счета организации";
				Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
					СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
					СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
				Иначе
					СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОписаниеОшибкиСтрокой 	= "Не найдены данные расчетного счета организации";
			Если НЕ СтруктураДанных.Свойство("ОблПредставлениеИсполнительОшибки") Тогда
				СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("-", "-", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблПредставлениеИсполнительОшибки", СтруктураИсключения);
			Иначе
				СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки = СтруктураДанных.ОблПредставлениеИсполнительОшибки.ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиСтрокой;
			КонецЕсли;
        КонецЕсли;
	
		СвАктИ.Исполнитель = Исполнитель;
		
		//Описание выполненных работ (ОписРабот)
		ОписРабот 				= Фабрика.Создать(ЭлементОписРабот);
		ОписРабот.СумБезНДСИт 	= Формат(?(Документ.СуммаВключаетНДС, Документ.Услуги.Итог("Сумма") - Документ.Услуги.Итог("СуммаНДС"), Документ.Услуги.Итог("Сумма")), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");	
	
		ОписРабот.СумУчНДСИт 	= Формат(?(Документ.СуммаВключаетНДС, Документ.Услуги.Итог("Сумма"), Документ.Услуги.Итог("Сумма") + Документ.Услуги.Итог("СуммаНДС")), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		НомерСтроки 			= 0;
		ДокументСодержитНДС		= Ложь;
		
		ТЗ_ОшибкиТабЧастиТовары = Новый ТаблицаЗначений;
		ТЗ_ОшибкиТабЧастиТовары.Колонки.Добавить("НомерСтроки");
		ТЗ_ОшибкиТабЧастиТовары.Колонки.Добавить("ИмяЭлемента");
		ТЗ_ОшибкиТабЧастиТовары.Колонки.Добавить("ТекущееЗначение");
		ТЗ_ОшибкиТабЧастиТовары.Колонки.Добавить("ЭталонноеЗначение");
		ТЗ_ОшибкиТабЧастиТовары.Колонки.Добавить("ОписаниеОшибки");
		ТЗ_ОшибкиТабЧастиТовары.Колонки.Добавить("ЭтоОшибка");
		
		СтруктураДанных.Вставить("ТЗ_ОшибкиТабЧастиТовары", ТЗ_ОшибкиТабЧастиТовары);
		
		//Услуги
		Для Каждого ТекСтрока Из Документ.Услуги Цикл
			НомерСтроки = НомерСтроки + 1;
			//Сведения о произведенной работе (оказанной услуге) (Работа)
			Работа 			= Фабрика.Создать(ОписРабот.Тип().Свойства.Получить("Работа").Тип); 
			Работа.Номер 	= НомерСтроки;
			
			//Заполняем из полного наим, если оно не пустое и короче 1000 симв.
			Если СтрДлина(ТекСтрока.Номенклатура.НаименованиеПолное) <= 1000 И ЗначениеЗаполнено(ТекСтрока.Номенклатура.НаименованиеПолное) Тогда
				Работа.НаимРабот = ТекСтрока.Номенклатура.НаименованиеПолное;
			Иначе
				Работа.НаимРабот = ТекСтрока.Номенклатура.Наименование;
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Содержание) Тогда
				ОписаниеОшибкиСтрокой = "В строке № " + ТекСтрока.НомерСтроки + " не заполнено содержание услуги.";
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблПредставлениеУслугиОшибки";
				НовСтрОшибки.ТекущееЗначение 	= "";     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
				НовСтрОшибки.ЭтоОшибка 			= Ложь;                    						
			КонецЕсли;
 			
			Если НЕ СокрЛП(Строка(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения)) = "" Тогда
				Работа.НаимЕдИзм 	= СокрЛП(Строка(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения));
				
				СтруктураПроверки = ПроверитьЗначениеНаНедопустимыеСимволы("1234567890", СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код));
				
				КодОКЕИ = СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код);
				
				Если НЕ СтруктураПроверки.КорректноеЗначение Тогда
					ОписаниеОшибкиСтрокой = "В строке № " + НомерСтроки + " код единицы измерения содержит недопустимые символы: " + СтруктураПроверки.НекорректныеСимволы;
					НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
					НовСтрОшибки.НомерСтроки 		= НомерСтроки;
					НовСтрОшибки.ИмяЭлемента 		= "ОблКодЕИОшибки";
					НовСтрОшибки.ТекущееЗначение 	= ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код;     
					НовСтрОшибки.ЭталонноеЗначение 	= "123";
					НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
					НовСтрОшибки.ЭтоОшибка 			= Истина;
					КодОКЕИ							= "123";					
				КонецЕсли;
				
				Если  СтрДлина(СокрЛП(ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код)) < 3 Тогда
					ОписаниеОшибкиСтрокой = "В строке № " + НомерСтроки + " код единицы измерения состоит менее чем из 3-х символов.";
					НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
					НовСтрОшибки.НомерСтроки 		= НомерСтроки;
					НовСтрОшибки.ИмяЭлемента 		= "ОблКодЕИОшибки";
					НовСтрОшибки.ТекущееЗначение 	= ТекСтрока.Номенклатура.БазоваяЕдиницаИзмерения.Код;     
					НовСтрОшибки.ЭталонноеЗначение 	= "123";
					НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
					НовСтрОшибки.ЭтоОшибка 			= Истина;
					КодОКЕИ							= "123";	
				КонецЕсли;
			  Иначе
				ОписаниеОшибкиСтрокой 			= "В строке " + НомерСтроки + " у номенклатуры [" + ТекСтрока.Номенклатура + "] не указана единица измерения.";
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблНаимЕИОшибки";
				НовСтрОшибки.ТекущееЗначение 	= "";     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
				НовСтрОшибки.ЭтоОшибка 			= Истина;
				Работа.НаимЕдИзм				= "шт";
				
				ОписаниеОшибкиСтрокой 			= "В строке " + НомерСтроки + " у номенклатуры [" + ТекСтрока.Номенклатура + "] не указан код единица измерения.";
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблКодЕИОшибки";
				НовСтрОшибки.ТекущееЗначение 	= "";     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КодОКЕИ) Тогда
				Работа.ОКЕИ	= КодОКЕИ;
			КонецЕсли;
						
			СуммаБезНДС = Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма - ТекСтрока.СуммаНДС, ТекСтрока.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			// Вдруг количество = 0 
			Попытка
				РасчетнаяЦена = Формат(СуммаБезНДС/?(ТекСтрока.Количество = 0, 1, ТекСтрока.Количество), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			Исключение
				РасчетнаяЦена = 1;
			КонецПопытки;			
			
			Работа.Цена = РасчетнаяЦена;
			
			Если Работа.Цена = 0 Тогда
				ОписаниеОшибкиСтрокой 			= "В строке № " + НомерСтроки + " не указана цена.";
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблЦенаОшибки";
				НовСтрОшибки.ТекущееЗначение 	= "";     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
			КонецЕсли;
						
			Если НЕ ТекСтрока.Количество = 0 Тогда
				Работа.Количество = Формат(ТекСтрока.Количество, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			Иначе
				ОписаниеОшибкиСтрокой 			= "В строке № " + НомерСтроки + " не указано количество.";
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблКоличествоОшибки";
				НовСтрОшибки.ТекущееЗначение 	= "";     
				НовСтрОшибки.ЭталонноеЗначение 	= "";
				НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
			КонецЕсли;
			
			Работа.СумБезНДС 	= СуммаБезНДС;
			
			Если Число(СуммаБезНДС) = 0 Тогда
				ОписаниеОшибкиСтрокой 			= "В строке № " + НомерСтроки + " не указана сумма без НДС.";
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблСтоимБезНДСОшибки";
				НовСтрОшибки.ТекущееЗначение 	= 0;     
				НовСтрОшибки.ЭталонноеЗначение 	= 0;
				НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
             КонецЕсли;
			
			Если НЕ ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				Работа.СумНДС 		= Формат(ТекСтрока.СуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
				ДокументСодержитНДС = Истина;
			КонецЕсли;
			
			Если ТекСтрока.СуммаНДС = 0 Тогда
				ОписаниеОшибкиСтрокой 			= "В строке № " + НомерСтроки + " не указана сумма НДС.";
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблСуммаНДСОшибки";
				НовСтрОшибки.ТекущееЗначение 	= 0;     
				НовСтрОшибки.ЭталонноеЗначение 	= 0;
				НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
			КонецЕсли;
			
			Работа.СумУчНДС 	= Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма, ТекСтрока.Сумма +  ТекСтрока.СуммаНДС), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			
			Если Работа.СумУчНДС = 0 Тогда
				ОписаниеОшибкиСтрокой 			= "В строке № " + НомерСтроки + " не указана сумма с учетом НДС.";
				НовСтрОшибки 					= ТЗ_ОшибкиТабЧастиТовары.Добавить();
				НовСтрОшибки.НомерСтроки 		= ТекСтрока.НомерСтроки;
				НовСтрОшибки.ИмяЭлемента 		= "ОблСтоимУчНДСОшибки";
				НовСтрОшибки.ТекущееЗначение 	= 0;     
				НовСтрОшибки.ЭталонноеЗначение 	= 0;
				НовСтрОшибки.ОписаниеОшибки 	= ОписаниеОшибкиСтрокой;
				НовСтрОшибки.ЭтоОшибка 			= Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрока.Содержание) И НЕ ТекСтрока.Содержание = ТекСтрока.Номенклатура.НаименованиеПолное Тогда
				Работа.Описание = ТекСтрока.Содержание;
			КонецЕсли;
			
			ОписРабот.Работа.Добавить(Работа);
		КонецЦикла;
		
		Если ДокументСодержитНДС Тогда
			ОписРабот.СумНДСИт 		= Формат(Документ.Услуги.Итог("СуммаНДС"), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");		
		КонецЕсли;
				
		СвАктИ.ОписРабот.Добавить(ОписРабот);
		
		Руководители = ПолучитьОтветственныхЛицОрганизации(Документ.Организация, Документ.Дата);
		
		//Сдал (Сдал)
		Сдал 			= Фабрика.Создать(ЭлементСдал);
		Сдал.ДатаИсполн = Формат(Документ.Дата, "ДЛФ=Д");
		
		//Для Бух
		Если ЕстьРеквизитДокумента("Руководитель", МетаданныеДокумента) Тогда
			ОтпускРазрешил = ?(ЗначениеЗаполнено(Документ.Руководитель), Документ.Руководитель, Руководители.Руководитель);
		// Акт об оказании производственных услуг	
		ИначеЕсли ЕстьРеквизитДокумента("Исполнитель", МетаданныеДокумента) Тогда
			ОтпускРазрешил = ?(ЗначениеЗаполнено(Документ.Исполнитель), Документ.Исполнитель, Руководители.Руководитель);
		Иначе
			ОтпускРазрешил = Руководители.Руководитель;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтпускРазрешил) И ЗначениеЗаполнено(Руководители.РуководительДолжность) Тогда
			//Сведения о должностном лице (ДолжЛицоТип)
			ПодписьИсполн 			= Фабрика.Создать(ТипДолжнЛицо);
			ПодписьИсполн.Должность = Строка(Руководители.РуководительДолжность);
			
			Если НЕ ЗначениеЗаполнено(ПодписьИсполн.Должность) Тогда
				ОписаниеОшибкиСтрокой 	= "Не указана должность исполнителя";
			    СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("--", "--", ОписаниеОшибкиСтрокой, Ложь);
				СтруктураДанных.Вставить("ОблСдалДолжностьОшибки", СтруктураИсключения);
			КонецЕсли;
			
			ФИО = СоздатьОбъектФИОИзДолжностногоЛица(Фабрика, ТипФИО, ОтпускРазрешил);
			Если ФИО <> Неопределено Тогда
				ПодписьИсполн.ФИО = ФИО;
			КонецЕсли;
			
			Сдал.ПодписьИсполн 	= ПодписьИсполн;
			
			СвАктИ.Сдал = Сдал;

		Иначе
			ОписаниеОшибкиСтрокой 	= "Не указан исполнитель";
			СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("--", "--", ОписаниеОшибкиСтрокой, Ложь);
			СтруктураДанных.Вставить("ОблСдалДолжностьОшибки", СтруктураИсключения);
			
			ОписаниеОшибкиСтрокой 	= "Не указан исполнитель.";
			СтруктураИсключения 	= ЗаполнитьСтруктуруИсключения("--", "--", ОписаниеОшибкиСтрокой, Ложь);
			СтруктураДанных.Вставить("ОблСдалФИООшибки", СтруктураИсключения);
 		КонецЕсли;
        		
		//Уступочная надпись (параметры)
		Если НЕ СтруктураУступочнойНадписи = Неопределено Тогда
			ИнфПол 			= Фабрика.Создать(ЭлементСвАктИ.Свойства.Получить("ИнфПол").Тип);
			ИнфПол.ТекстИнф = СтруктураУступочнойНадписи.ТекстУступочнойНадписи;
			СвАктИ.ИнфПол 	= ИнфПол;
			
			ТЗ_ОшибкиУступочнойНадписи = Новый ТаблицаЗначений;
			ТЗ_ОшибкиУступочнойНадписи.Колонки.Добавить("ТекущееЗначение");
			ТЗ_ОшибкиУступочнойНадписи.Колонки.Добавить("ЭталонноеЗначение");
			ТЗ_ОшибкиУступочнойНадписи.Колонки.Добавить("ОписаниеОшибки");
			ТЗ_ОшибкиУступочнойНадписи.Колонки.Добавить("ЭтоОшибка");
			
			Для Каждого Элемент Из СтруктураУступочнойНадписи Цикл		
				Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
					НовСтрОшибки 					= ТЗ_ОшибкиУступочнойНадписи.Добавить();
					НовСтрОшибки.ТекущееЗначение 	= Неопределено;
					НовСтрОшибки.ЭталонноеЗначение 	= Элемент.Ключ;
					НовСтрОшибки.ОписаниеОшибки 	= "Ошибка заполнения уступочной надписи. Не заполнен параметр " + Элемент.Ключ;
					НовСтрОшибки.ЭтоОшибка  		= Истина;	
				КонецЕсли;
			КонецЦикла;

			Если ТЗ_ОшибкиУступочнойНадписи.Количество() > 0 Тогда
				СтруктураДанных.Вставить("ОшибкиУступочнойНадписи", ТЗ_ОшибкиУступочнойНадписи);
			КонецЕсли;
 		КонецЕсли;
		
		//Сведения о лице, подписывающем документ в электронной форме (Подписант)		
		Подписант = ПодписантСтруктура();
		
		//Сведения о лице, подписывающем документ в электронном виде (Подписант)
		Подп 	= Фабрика.Создать(ЭлементПодписант);
		ФИО		= СоздатьОбъектФИО(Фабрика, ТипФИО, Подписант.ФИО);
		Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
			//Индивидуальный предприниматель (ИП)
			ИП 				= Фабрика.Создать(ЭлементПодписант.Свойства.Получить("ИП").Тип);
			ИП.ИННФЛ 		= Подписант.ИННФЛ;
			ИП.СвГосРегИП	= Подписант.СвГосРегИП;
			ИП.ФИО 	= ФИО;
			Подп.ИП = ИП;
		Иначе
			//Организация (ЮЛ)
			ЮЛ 			= Фабрика.Создать(ЭлементПодписант.Свойства.Получить("ЮЛ").Тип);
			ЮЛ.ИННЮЛ	= Подписант.ИННЮЛ;
			
			Если ЗначениеЗаполнено(Подписант.Должность) Тогда
				ЮЛ.Должн = Подписант.Должность;
			КонецЕсли;
			
			ЮЛ.ФИО 	= ФИО;
			Подп.ЮЛ = ЮЛ;
		КонецЕсли;
		
		Док.СвАктИ 		= СвАктИ;
		Док.Подписант 	= Подп;
		Файл.Документ 	= Док;
				
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(КаталогЭД + ИмяФайлаЭД + ".xml", ТипКодировки);
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		Фабрика.ЗаписатьXML(НоваяЗаписьXML, Файл);
		НоваяЗаписьXML.Закрыть();
				
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_Файл", КаталогЭД + ИмяФайлаЭД + ".xml");
		ДокументXML_Структура.Вставить("СтруктураДанных", СтруктураДанных);
					
		Возврат ДокументXML_Структура;
	Исключение
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <" + Документ + ">. " + ОписаниеОшибки());
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
КонецФункции

//Функция формирует XML-файл (контент) документа с типом "Торг12"
//
// Параметры:
//  Документ: ссылка на учетный документ 1С
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭДТОРГ12ПродавецБГУ(Документ, БезАвторизации = Неопределено, СтруктураУступочнойНадписи) Экспорт
	
	СтруктураДанных = СформироватьСтруктуруДанныхДокумента(Документ);
	
	// Недостаточно данных для формирования, прерываенм формирование документа
	Если СтруктураДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеДокумента 				= Документ.Метаданные();
	МетаданныеСправочникаОрганизации    = Метаданные.Справочники.Организации;
	
	// Создаем фабрику из схемы
	Попытка
		Фабрика 						= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_OTORG12_1_986_00_05_01_02").ПолучитьТекст());
		КаталогЭД 						= КаталогВременныхФайлов();
		ТипКодировки 					= "windows-1251";		
		
		ИмяФайлаЭД = "DP_OTORG12" + "_" +
		СтруктураДанных.ИдентификаторПолучателя + "_" +
		СтруктураДанных.ИдентификаторОтправителя + "_" +
		Формат(Документ.Дата, "ДФ=""ггггММдд""") + "_" +
		Документ.УникальныйИдентификатор();
		
		//Определение типов XDTO
		ТипАдрес					= Фабрика.Тип("OTORG12", "АдресТип");
		ТипАдресИно					= Фабрика.Тип("OTORG12", "АдрИноТип");
		ТипАдресРФ					= Фабрика.Тип("OTORG12", "АдрРФТип");
		ТипДолжЛицо  				= Фабрика.Тип("OTORG12", "ДолжЛицоТип");
		ТипКонтакт		  			= Фабрика.Тип("OTORG12", "КонтактТип");
		ТипТаблица                  = Фабрика.Тип("OTORG12", "ТаблицаТип");
		ТипУчастник				    = Фабрика.Тип("OTORG12", "УчастникТип");
		ТипФИО						= Фабрика.Тип("OTORG12", "ФИОТип");
		
		//Определение типов элементов XDTO
		ЭлементФайл					= Фабрика.Тип("OTORG12", "Файл");
		ЭлементСвУчДокОбор			= ЭлементФайл.Свойства.Получить("СвУчДокОбор").Тип;
		ЭлементСвОЭДОтпрСФ			= ЭлементСвУчДокОбор.Свойства.Получить("СвОЭДОтпрСФ").Тип;
		ЭлементДокумент				= ЭлементФайл.Свойства.Получить("Документ").Тип;
		ЭлементСвТНО				= ЭлементДокумент.Свойства.Получить("СвТНО").Тип;
		ЭлементГрузОт				= ЭлементСвТНО.Свойства.Получить("ГрузОт").Тип;
		ЭлементГрузПолуч			= ЭлементСвТНО.Свойства.Получить("ГрузПолуч").Тип;
		ЭлементПоставщик			= ЭлементСвТНО.Свойства.Получить("Поставщик").Тип;
		ЭлементПлательщик			= ЭлементСвТНО.Свойства.Получить("Плательщик").Тип;
		ЭлементОснование			= ЭлементСвТНО.Свойства.Получить("Основание").Тип;
		ЭлементТранНакл				= ЭлементСвТНО.Свойства.Получить("ТранНакл").Тип;
		ЭлементТН					= ЭлементСвТНО.Свойства.Получить("ТН").Тип;
		ЭлементТаблица				= ЭлементТН.Свойства.Получить("Таблица").Тип;
		ЭлементОтпускГруз			= ЭлементСвТНО.Свойства.Получить("ОтпускГруз").Тип;
		ЭлементИнфПол				= ЭлементСвТНО.Свойства.Получить("ИнфПол").Тип;
		ЭлементПодписант			= ЭлементДокумент.Свойства.Получить("Подписант").Тип; 
		
		//Файл обмена (Файл)
		Файл = Фабрика.Создать(ЭлементФайл);
		Файл.ИдФайл 	= ИмяФайлаЭД;
		Файл.ВерсПрог	= СформироватьСтрокуВерсПрог();
		Файл.ВерсФорм 	= "5.01";
		//Сведения об участниках электронногодокументооборота (СвУчДокОбор)
		СвУчДокОбор = Фабрика.Создать(ЭлементСвУчДокОбор);
		СвУчДокОбор.ИдОтпр 	= СтруктураДанных.ИдентификаторОтправителя;
		СвУчДокОбор.ИдПок	= СтруктураДанных.ИдентификаторПолучателя;	
		//Сведения об операторе электронного документооборота отправителя (СвОЭДОтпр)
		СвОЭДОтпрСФ = Фабрика.Создать(ЭлементСвОЭДОтпрСФ);
		СвОЭДОтпрСФ.НаимОрг		= СтруктураДанных.SubjectInfo_ЭДО.Name;
		СвОЭДОтпрСФ.ИННЮЛ		= СтруктураДанных.SubjectInfo_ЭДО.Inn;
		СвОЭДОтпрСФ.ИдЭДОСФ		= СтруктураДанных.ИдентификаторЭДО;
		СвУчДокОбор.СвОЭДОтпрСФ = СвОЭДОтпрСФ;			
		Файл.СвУчДокОбор		= СвУчДокОбор;
		//Документ (Документ Торг-12)
		Док = Фабрика.Создать(ЭлементДокумент);
		Док.КНД 	= "1175004";
		
		ТекДата		= ТекущаяДата();
		Док.ДатаДок	= Формат(ТекДата, "ДЛФ=Д");
		Док.ВремДок = Формат(ТекДата, "ДФ=""ЧЧ.мм.сс""");
		//Товарная накладная, титул продавца (СвТНО)	
		СвТНО = Фабрика.Создать(ЭлементСвТНО);
		СвТНО.НаимПервДок 	= "Товарная накладная";
		СвТНО.ОКУДПервДок	= "0330212";
		СвТНО.НомФорм		= "ТОРГ-12";
		
		//Сведения о грузоотправителе (ГрузОт)
		ГрузОт		 		= Фабрика.Создать(ЭлементГрузОт);
		Грузоотправитель 	= ?(ЗначениеЗаполнено(Документ.Грузоотправитель), Документ.Грузоотправитель, Документ.Учреждение);
		//Грузоотправитель (ГрузОтпр)
		ГрузОтпр = Фабрика.Создать(ТипУчастник);
		Если ЗначениеЗаполнено(Грузоотправитель.КодОКПО) Тогда
			ГрузОтпр.ОКПО = Грузоотправитель.КодОКПО;
		КонецЕсли;
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(ГрузОтпр.Тип().Свойства.Получить("ИдСв").Тип);
		
		Если (Грузоотправитель = Документ.Учреждение) ИЛИ (Грузоотправитель <> Документ.Учреждение И Грузоотправитель.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Организация) Тогда
			//Сведения об организации 
			СвЮЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг	= Грузоотправитель.НаименованиеПолное;
			СвЮЛ.ИННЮЛ		= Грузоотправитель.ИНН;
			СвЮЛ.КПП		= Грузоотправитель.КПП;
			ИдСВ.СвЮЛ 		= СвЮЛ;
		Иначе                                    
			//Сведения об индивидуальном предпринимателе	
			СвФЛ 				= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			СвФЛ.ИННФЛ 			= Грузоотправитель.ИНН;
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Грузоотправитель);
			Если ФИОИП <> Неопределено Тогда
				СвФЛ.ФИОИП = ФИОИП;
			КонецЕсли;
			
			ИдСв.СвФЛ = СвФЛ;
			
		КонецЕсли;
		
		ГрузОтпр.ИдСв = ИдСв;
		
		//Адрес
		Адрес = Фабрика.Создать(ГрузОтпр.Тип().Свойства.Получить("Адрес").Тип); 
		
		Если СтруктураДанных.АдресГрузоотправителя.АдресРФ Тогда
			//Адрес местонахождения в Российской Федерации (структурированный)
			АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
			ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресГрузоотправителя); 
			Адрес.АдрРФ = АдрРФ;
		Иначе                                                                     
			АдрИно 			= Фабрика.Создать(ТипАдресИно);
			ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресГрузоотправителя);
			Адрес.АдрИно 	= АдрИно;
		КонецЕсли;
		ГрузОтпр.Адрес = Адрес;
		//Контактные сведения			
		Если ЗначениеЗаполнено(СтруктураДанных.ТлфГрузоотправителя) Тогда
			Контакт 			= Фабрика.Создать(ГрузОтпр.Тип().Свойства.Получить("Контакт").Тип);
			Контакт.Тлф 		= СтруктураДанных.ТлфГрузоотправителя;
			ГрузОтпр.Контакт 	= Контакт;
		КонецЕсли;
		//Банковские реквизиты
		Если ЗначениеЗаполнено(СтруктураДанных.ДанныеСчетаГрузоотправителя.НомерСчета) Тогда
			БанкРекв 			= Фабрика.Создать(ГрузОтпр.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаГрузоотправителя.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаГрузоотправителя); 
			БанкРекв.СвБанк 	= СвБанк;
			ГрузОтпр.БанкРекв 	= БанкРекв;
		КонецЕсли;
		ГрузОт.ГрузОтпр = ГрузОтпр;
		СвТНО.ГрузОт = ГрузОт;
		
		//Грузополучатель (ГрузПолуч)
		Грузополучатель = ?(ЗначениеЗаполнено(Документ.Грузополучатель), Документ.Грузополучатель, Документ.СубконтоСчетДебета2);
		ГрузПолуч 		= Фабрика.Создать(ТипУчастник);
		Если ЗначениеЗаполнено(Грузополучатель.КодОКПО) Тогда
			ГрузПолуч.ОКПО = Грузополучатель.КодОКПО;
		КонецЕсли;
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(ГрузПолуч.Тип().Свойства.Получить("ИдСв").Тип);
		
		Если Грузополучатель.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Организация Тогда
			//Сведения об организации 
			СвЮЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг	= Грузополучатель.НаименованиеПолное;
			СвЮЛ.ИННЮЛ		= Грузополучатель.ИНН;
			СвЮЛ.КПП		= Грузополучатель.КПП;
			ИдСВ.СвЮЛ 		= СвЮЛ;
		Иначе                                    
			//Сведения об индивидуальном предпринимателе	
			СвФЛ 				= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			СвФЛ.ИННФЛ 			= Грузополучатель.ИНН;
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Грузополучатель);
			Если ФИОИП <> Неопределено Тогда
				СвФЛ.ФИОИП = ФИОИП;
			КонецЕсли;
			
			ИдСв.СвФЛ = СвФЛ;

		КонецЕсли;
		
		ГрузПолуч.ИдСв = ИдСв;
		
		//Адрес
		Адрес = Фабрика.Создать(ГрузПолуч.Тип().Свойства.Получить("Адрес").Тип); 
		
		Если СтруктураДанных.АдресГрузополучателя.АдресРФ Тогда
			//Адрес местонахождения в Российской Федерации (структурированный)
			АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
			ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресГрузополучателя); 
			Адрес.АдрРФ = АдрРФ;
		Иначе                                                                     
			АдрИно 			= Фабрика.Создать(ТипАдресИно);
			ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресГрузополучателя);
			Адрес.АдрИно 	= АдрИно;
		КонецЕсли;
		ГрузПолуч.Адрес = Адрес;
		//Контактные сведения			
		Если ЗначениеЗаполнено(СтруктураДанных.ТлфГрузополучателя) Тогда
			Контакт 			= Фабрика.Создать(ГрузПолуч.Тип().Свойства.Получить("Контакт").Тип);
			Контакт.Тлф 		= СтруктураДанных.ТлфГрузополучателя;
			ГрузПолуч.Контакт 	= Контакт;
		КонецЕсли;
		
		//Банковские реквизиты
		Если ЗначениеЗаполнено(СтруктураДанных.ДанныеСчетаГрузополучателя.НомерСчета) Тогда
			БанкРекв 			= Фабрика.Создать(ГрузПолуч.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаГрузополучателя.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаГрузополучателя);
			БанкРекв.СвБанк 	= СвБанк;
			ГрузПолуч.БанкРекв 	= БанкРекв;
		КонецЕсли;
		
		СвТНО.ГрузПолуч = ГрузПолуч;
		
		//Поставщик (Поставщик)		
		Поставщик = Фабрика.Создать(ТипУчастник);
		Если ЗначениеЗаполнено(Документ.Учреждение.КодОКПО) Тогда
			Поставщик.ОКПО = Документ.Учреждение.КодОКПО;
		КонецЕсли;
		
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(Поставщик.Тип().Свойства.Получить("ИдСв").Тип);
		
		//Сведения об организации 
		СвЮЛ 			= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
		СвЮЛ.НаимОрг	= Документ.Учреждение.НаименованиеПолное;
		СвЮЛ.ИННЮЛ		= Документ.Учреждение.ИНН;
		СвЮЛ.КПП		= Документ.Учреждение.КПП;
		ИдСВ.СвЮЛ 		= СвЮЛ;
		
		Поставщик.ИдСв = ИдСв;
		
		//Адрес
		Адрес = Фабрика.Создать(Поставщик.Тип().Свойства.Получить("Адрес").Тип); 
		
		Если СтруктураДанных.АдресОрганизации.АдресРФ Тогда
			//Адрес местонахождения в Российской Федерации (структурированный)
			АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
			ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресОрганизации); 
			Адрес.АдрРФ = АдрРФ;
		Иначе                                                                     
			АдрИно 			= Фабрика.Создать(ТипАдресИно);
			ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресОрганизации);
			Адрес.АдрИно 	= АдрИно;
		КонецЕсли;
		Поставщик.Адрес = Адрес;
		//Контактные сведения			
		Если ЗначениеЗаполнено(СтруктураДанных.ТлфОрганизации) Тогда
			Контакт 			= Фабрика.Создать(Поставщик.Тип().Свойства.Получить("Контакт").Тип);
			Контакт.Тлф 		= СтруктураДанных.ТлфОрганизации;
			Поставщик.Контакт 	= Контакт;
		КонецЕсли;
		
		//Банковские реквизиты
		Если ЗначениеЗаполнено(СтруктураДанных.ДанныеСчетаОрганизации.НомерСчета) Тогда
			БанкРекв 			= Фабрика.Создать(Поставщик.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаОрганизации.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаОрганизации);
			БанкРекв.СвБанк 	= СвБанк;
			Поставщик.БанкРекв 	= БанкРекв;
		КонецЕсли;
		
		СвТНО.Поставщик = Поставщик;
		
		//Плательщик	
		Плательщик = Фабрика.Создать(ТипУчастник);
		Если ЗначениеЗаполнено(Документ.СубконтоСчетДебета2.КодОКПО) Тогда
			Плательщик.ОКПО =Документ.СубконтоСчетДебета2.КодОКПО;
		КонецЕсли;
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(Плательщик.Тип().Свойства.Получить("ИдСв").Тип);
		
		Если Документ.СубконтоСчетДебета2.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Организация Тогда
			//Сведения об организации 
			СвЮЛ 			= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг	= Документ.СубконтоСчетДебета2.НаименованиеПолное;
			СвЮЛ.ИННЮЛ		= Документ.СубконтоСчетДебета2.ИНН;
			СвЮЛ.КПП		= Документ.СубконтоСчетДебета2.КПП;
			ИдСВ.СвЮЛ 		= СвЮЛ;
		Иначе                                    
			//Сведения об индивидуальном предпринимателе	
			СвФЛ 				= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			СвФЛ.ИННФЛ 			= Документ.СубконтоСчетДебета2.ИНН;
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Документ.СубконтоСчетДебета2);
			Если ФИОИП <> Неопределено Тогда
				СвФЛ.ФИОИП = ФИОИП;
			КонецЕсли;
			
			ИдСв.СвФЛ = СвФЛ;

		КонецЕсли;
		
		Плательщик.ИдСв = ИдСв;
		//Адрес
		Адрес = Фабрика.Создать(Плательщик.Тип().Свойства.Получить("Адрес").Тип); 
		
		Если СтруктураДанных.АдресКонтрагента.АдресРФ Тогда
			//Адрес местонахождения в Российской Федерации (структурированный)
			АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
			ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресКонтрагента); 
			Адрес.АдрРФ = АдрРФ;
		Иначе                                                                     
			АдрИно 			= Фабрика.Создать(ТипАдресИно);
			ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресКонтрагента);
			Адрес.АдрИно 	= АдрИно;
		КонецЕсли;
		Плательщик.Адрес = Адрес;
		//Контактные сведения			
		Если ЗначениеЗаполнено(СтруктураДанных.ТлфКонтрагента) Тогда
			Контакт 			= Фабрика.Создать(Плательщик.Тип().Свойства.Получить("Контакт").Тип);
			Контакт.Тлф 		= СтруктураДанных.ТлфКонтрагента;
			Плательщик.Контакт 	= Контакт;
		КонецЕсли;
		
		//Банковские реквизиты
		Если ЗначениеЗаполнено(СтруктураДанных.ДанныеСчетаКонтрагента.НомерСчета) Тогда
			БанкРекв 			= Фабрика.Создать(Плательщик.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаКонтрагента.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаКонтрагента);
			БанкРекв.СвБанк 	= СвБанк;
			Плательщик.БанкРекв = БанкРекв;
		КонецЕсли;
		СвТНО.Плательщик 	= Плательщик;
		
		//Основание (договор)
		ДоговорКонтрагента = Документ.СубконтоСчетДебета3;
		Основание = Фабрика.Создать(ЭлементСвТНО.Свойства.Получить("Основание").Тип); 
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента.Наименование) Тогда
			Основание.НаимОсн = ДоговорКонтрагента.Наименование;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента.НомерДоговора) Тогда
			Основание.НомОсн = ДоговорКонтрагента.НомерДоговора;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента.ДатаДоговора) Тогда
			Основание.ДатаОсн = Формат(ДоговорКонтрагента.ДатаДоговора, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		СвТНО.Основание 	= Основание;	
		СвТНО.ВидОперации 	= Строка(Документ.ВидОперации);
		
		//Уступочная надпись (параметры)
		Если НЕ СтруктураУступочнойНадписи = Неопределено Тогда
			ИнфПол 			= Фабрика.Создать(ЭлементСвТНО.Свойства.Получить("ИнфПол").Тип);
			ИнфПол.ТекстИнф = СтруктураУступочнойНадписи.ТекстУступочнойНадписи;
			СвТНО.ИнфПол 	= ИнфПол;
		КонецЕсли;
		
		//Товарная накладная
		ТН = Фабрика.Создать(ЭлементТН);
		ТН.НомТН 	= ОбщегоНазначения.ПолучитьНомерНаПечать(Документ);
		ТН.ДатаТН	= Формат(Документ.Дата, "ДЛФ=Д");
		
		Таблица = Фабрика.Создать(ЭлементТаблица);
		
		БруттоВсего = 0;
		НомерСтроки = 0;
		//Заполнение табличной части
		Для Каждого ТекСтрока Из Документ.Материалы Цикл
			НомерСтроки = НомерСтроки + 1; 
			//Сведения о товаре (СвТов)
			СвТов 			= Фабрика.Создать(ЭлементТаблица.Свойства.Получить("СвТов").Тип);
			СвТов.НомТов 	= НомерСтроки;
			
			//Заполняем из полного наим, если оно не пустое и короче 1000 симв.
			Если СтрДлина(СокрЛП(ТекСтрока.Номенклатура.НаименованиеПолное)) <= 1000 И ЗначениеЗаполнено(ТекСтрока.Номенклатура.НаименованиеПолное) Тогда
				СвТов.НаимТов = СокрЛП(ТекСтрока.Номенклатура.НаименованиеПолное);
			Иначе
				СвТов.НаимТов = СокрЛП(ТекСтрока.Номенклатура.Наименование);
			КонецЕсли;
			
			СвТов.КодТов	= ТекСтрока.Номенклатура.Код;
			
			СвТов.НаимЕдИзм = ТекСтрока.ЕдиницаИзмерения.Наименование;
			СвТов.ОКЕИ_Тов	= СокрЛП(ТекСтрока.ЕдиницаИзмерения.Код);
			
			СвТов.Нетто		= Формат(ТекСтрока.Количество, "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
			
			СуммаБезНДС = Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма - ТекСтрока.СуммаНДС, ТекСтрока.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			// Вдруг количество = 0 
			Попытка
				РасчетнаяЦена = Формат(СуммаБезНДС/ТекСтрока.Количество,"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			Исключение
				РасчетнаяЦена = 0;
			КонецПопытки;
			
			СвТов.Цена 		= РасчетнаяЦена;
			СвТов.СумБезНДС = СуммаБезНДС;
			
			Если НЕ ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СвТов.СтавкаНДС	= Формат(УчетНДС.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС), "ЧЦ=10; ЧДЦ=5; ЧРД='.'; ЧГ=0; ЧН=0");
				СвТов.СумНДС	= Формат(ТекСтрока.СуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			КонецЕсли;
			
			СвТов.СумУчНДС		= Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма, ТекСтрока.Сумма +  ТекСтрока.СуммаНДС), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			
			//Заполнение ГТД и страны
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.НомерГТД) И ЗначениеЗаполнено(ТекСтрока.Номенклатура.СтранаПроисхождения) Тогда
				
				СтрокаГТД = ЗаполнитьСтрокуГТД(Неопределено, ТекСтрока.Номенклатура.СтранаПроисхождения.Код, ТекСтрока.Номенклатура.СтранаПроисхождения.Наименование, СокрЛП(ТекСтрока.Номенклатура.НомерГТД.Код));
				
				Если СтрокаГТД <> Неопределено Тогда
					СвТов.ИнфПолСтр = СтрокаГТД;
				КонецЕсли;
			КонецЕсли;
			
			Таблица.СвТов.Добавить(СвТов);
			
		КонецЦикла;	
		
		ТН.Таблица 		= Таблица;
		//Реквизиты строки Всего по накладной (ВсегоНакл)
		ВсегоНакл			= Фабрика.Создать(ЭлементТаблица.Свойства.Получить("ВсегоНакл").Тип);
		
		ВсегоНакл.БруттоВс 		= Формат(БруттоВсего, "ЧЦ=12; ЧДЦ=3;ЧРД='.';ЧГ=0; ЧН=0");
		СуммаНДСДокумента 		= Документ.Материалы.Итог("СуммаНДС");
		ВсегоНакл.НеттоВс		= Формат(Документ.Материалы.Итог("Количество"), "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
		ВсегоНакл.СумБезНДСВс	= Формат(Документ.СуммаДокумента - СуммаНДСДокумента, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		ВсегоНакл.СумНДСВс		= Формат(СуммаНДСДокумента, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		ВсегоНакл.СумУчНДСВс	= Формат(Документ.СуммаДокумента, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		Таблица.ВсегоНакл 		= ВсегоНакл;
		// Если в табл. части больше 1 ед измерения то не заполняем необяз поля
		ЕстьРазличныеЕдИзм = Ложь;
		ТЗ_ЕдИзм = Документ.Материалы.Выгрузить();
		ТЗ_ЕдИзм.Свернуть("ЕдиницаИзмерения");
		
		Если ТЗ_ЕдИзм.Количество() > 1 Тогда
			ЕстьРазличныеЕдИзм = Истина;
		КонецЕсли;
		
		//Общие сведения товарной накладной (ТНОбщ)
		ТнОбщ 				= Фабрика.Создать(ЭлементТН.Свойства.Получить("ТнОбщ").Тип);
		КоличествоЗаписей 	= Документ.Материалы.Количество();
		ТнОбщ.КолНомЗап		= КоличествоЗаписей;
		ТнОбщ.КолНомЗапПр	= ЧислоПрописью(КоличествоЗаписей,"",",,,м,,,,,0");
		
		Если НЕ ЕстьРазличныеЕдИзм Тогда
			ТнОбщ.Нетто		= Формат(Документ.Товары.Итог("Количество"), "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
			ТнОбщ.НеттоПр	= ЧислоПрописью(Документ.Товары.Итог("Количество"),"",",,,,,,,,3");
			ТнОбщ.Брутто	= Формат(БруттоВсего, "ЧЦ=12; ЧДЦ=3; ЧРД='.'; ЧГ=0; ЧН=0");
			ТнОбщ.БруттоПр	= ЧислоПрописью(БруттоВсего,"",",,,,,,,,3");
		КонецЕсли;
		
		ТН.ТнОбщ			= ТнОбщ;
		СвТНО.ТН			= ТН;
		
		//Сведения по отпуску груза (ОтпускГруз)                                      
		ОтпускГруз 				= Фабрика.Создать(ЭлементСвТНО.Свойства.Получить("ОтпускГруз").Тип);
		ОтпускГруз.СумОтпуск 	= Формат(Документ.СуммаДокумента, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		ОтпускГруз.СумОтпускПр	= СформироватьСуммуПрописью(Документ.СуммаДокумента, мВалютаРегламентированногоУчета);
		ОтпускГруз.ДатаОтпуск	= Формат(Документ.Дата, "ДЛФ=Д");	
		
		Руководители 	= ПолучитьОтветственныхЛицОрганизации(Документ.Учреждение, Документ.Дата);
		ОтпускРазрешил 	= Неопределено;
		
		//Для Бух
		Если ЕстьРеквизитДокумента("Руководитель", МетаданныеДокумента) И  ЗначениеЗаполнено(Документ.Руководитель) Тогда
			ОтпускРазрешил = Документ.Руководитель;
			//Для УТ и КА
		ИначеЕсли ЕстьРеквизитДокумента("ОтпускРазрешил", МетаданныеДокумента) И ЗначениеЗаполнено(Документ.ОтпускРазрешил) Тогда
			ОтпускРазрешил = Документ.ОтпускРазрешил;
		КонецЕсли;
		
		//Сведения о должностном лице (ОтпускРазреш)
		ОтпускРазреш 			= Фабрика.Создать(ТипДолжЛицо);
		ФИО						= Фабрика.Создать(ТипФИО);
		ОтпускРазреш.Должность	= Строка(Руководители.РуководительДолжность);
		
		Если ОтпускРазрешил <> Неопределено Тогда
			ДолжностноеЛицо = ОтпускРазрешил;
		ИначеЕсли Руководители.Руководитель <> Неопределено Тогда
			ДолжностноеЛицо = Руководители.Руководитель;
		Иначе
			ДолжностноеЛицо = ПодписантСтруктура();
		КонецЕсли;
		
		ФИО = СоздатьОбъектФИОИзДолжностногоЛица(Фабрика, ТипФИО, ДолжностноеЛицо);
			
		ОтпускРазреш.ФИО 		= ФИО;
		ОтпускГруз.ОтпускРазреш = ОтпускРазреш;
		
		//Сведения о должностном лице (Бухгалтер)
		//Для Бух и КА
		Если ЕстьРеквизитДокумента("ГлавныйБухгалтер", МетаданныеДокумента) Тогда
			Бухгалтер = ?(ЗначениеЗаполнено(Документ.ГлавныйБухгалтер), Документ.ГлавныйБухгалтер, Руководители.ГлавныйБухгалтер);
			//Для УТ
		Иначе 
			Бухгалтер = Руководители.ГлавныйБухгалтер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Бухгалтер) Тогда
			Бух						= Фабрика.Создать(ТипДолжЛицо);
			ФИО						= Фабрика.Создать(ТипФИО);
			Бух.Должность			= Строка(Руководители.ГлавныйБухгалтерДолжность);
			
			СтруктураФИОФизЛица = ИзвлечьФИОИзПредставления(Строка(Бухгалтер));
			Если СтруктураФИОФизЛица <> НЕОПРЕДЕЛЕНО Тогда
				ФИО.Фамилия = СтруктураФИОФизЛица.Фамилия;
				ФИО.Имя		= СтруктураФИОФизЛица.Имя;
				Если СтруктураФИОФизЛица.Свойство("Отчество") Тогда
					ФИО.Отчество = СтруктураФИОФизЛица.Отчество;
				КонецЕсли;
			КонецЕсли;
			Бух.ФИО = ФИО;
			ОтпускГруз.Бухгалтер = Бух;
		КонецЕсли;	
		
		//Сведения о должностном лице (ОтпускПроизв)
		ОтпускПроизв			= Фабрика.Создать(ТипДолжЛицо);
		ФИО						= Фабрика.Создать(ТипФИО);
		
		СтруктураФИОФизЛица = ИзвлечьФИОИзПредставления(Строка(Документ.Руководитель));
		Если СтруктураФИОФизЛица <> НЕОПРЕДЕЛЕНО Тогда
			ФИО.Фамилия = СтруктураФИОФизЛица.Фамилия;
			ФИО.Имя		= СтруктураФИОФизЛица.Имя;
			Если СтруктураФИОФизЛица.Свойство("Отчество") Тогда
				ФИО.Отчество = СтруктураФИОФизЛица.Отчество;
			КонецЕсли;
		КонецЕсли;
		ОтпускПроизв.ФИО = ФИО;
		ОтпускГруз.ОтпускПроизв = ОтпускПроизв;
		
		
		СвТНО.ОтпускГруз = ОтпускГруз;
		//Сведения о лице, подписывающем документ в электронном виде (Подписант)
		Подп = Фабрика.Создать(ЭлементДокумент.Свойства.Получить("Подписант").Тип);		
		
		Подписант = ПодписантСтруктура();
		
		Если Подписант = Неопределено Тогда
			ВызватьИсключение "Не удалось получить информацию о подписанте";
		КонецЕсли;
		
		//Сведения о лице, подписывающем документ в электронном виде
		Подп 	= Фабрика.Создать(ЭлементПодписант);
		ФИО		= СоздатьОбъектФИО(Фабрика, ТипФИО, Подписант.ФИО);
		// БГУ, всегда юрлицо
		ЮЛ 			= Фабрика.Создать(ЭлементПодписант.Свойства.Получить("ЮЛ").Тип);
		ЮЛ.ИННЮЛ	= Подписант.ИННЮЛ;
		
		Если ЗначениеЗаполнено(Подписант.Должность) Тогда
			ЮЛ.Должн = Подписант.Должность;
		КонецЕсли;
		
		ЮЛ.ФИО 	= ФИО;
		Подп.ЮЛ = ЮЛ;
		
		Док.СвТНО 			= СвТНО;                                                            
		Док.Подписант		= Подп;
		Файл.Документ 		= Док;
		
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(КаталогЭД + ИмяФайлаЭД + ".xml", ТипКодировки);
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		Фабрика.ЗаписатьXML(НоваяЗаписьXML, Файл);
		НоваяЗаписьXML.Закрыть();
		
		ЭД_ДвоичныеДанные = Новый ДвоичныеДанные(КаталогЭД + ИмяФайлаЭД + ".xml");
		
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", ЭД_ДвоичныеДанные);
		ДокументXML_Структура.Вставить("Документ_ИмяФайла", ИмяФайлаЭД);
		
		Возврат ДокументXML_Структура;
	Исключение
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <" + Документ + ">. " + ОписаниеОшибки());
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
КонецФункции

//Функция формирует XML-файл (контент) документа с типом "Торг12 титул покупател"
//
// Параметры:
//  Syn_Документ: документ сервиса, который подписываем (экземпляр класса Document)
//  Syn_Подписант: информация о лице, подписывающем документ (экземпляр класса SignerInfo)
//  Syn_ТитулПокупателя: структура с информацией о лице, получающем груз, лице, принимающим груз
//	и данные по доверенности (экземпляр класса TitleBuyer)
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭлектронныйДокументТорг12ПокупательXML(Syn_Документ, Syn_Подписант, Syn_ТитулПокупателя) Экспорт
	//Титул покупателя
	Попытка		
		Документ_ДвоичныеДанные = ExchangeService.GenerateTitleBuyer(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id, Syn_ТитулПокупателя, Syn_Подписант);
		СохранитьЭлектронныйДокументНаДиск(Документ_ДвоичныеДанные.Content, Документ_ДвоичныеДанные.Name,);
		
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", Документ_ДвоичныеДанные.Content);
		ДокументXML_Структура.Вставить("Документ_ИмяФайла", Документ_ДвоичныеДанные.Name);
		
		//Возврат ЭД_ДвоичныеДанные;
		Возврат ДокументXML_Структура;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <Титул покупателя> (" + Syn_Документ.FileName + "). " + ОписаниеОшибкиСтрокой);
				
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
КонецФункции

//Функция формирует XML-файл (контент) документа с типом "Торг2 титул покупател"
//
// Параметры:
//  Syn_Документ: документ сервиса, который подписываем (экземпляр класса Document)
//  Syn_Подписант: информация о лице, подписывающем документ (экземпляр класса SignerInfo)
//  Syn_ТитулПокупателя: структура с информацией о лице, получающем груз, лице, принимающим груз
//	и данные по доверенности (экземпляр класса TitleBuyer)
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭлектронныйДокументТОРГ2ПокупательXML(Syn_Документ, Syn_Подписант, Syn_ТитулПокупателя) Экспорт
	
	//Титул покупателя
	Попытка		
		Документ_ДвоичныеДанные = ExchangeService.GenerateTitleBuyer(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id, Syn_ТитулПокупателя, Syn_Подписант);
		СохранитьЭлектронныйДокументНаДиск(Документ_ДвоичныеДанные.Content, Документ_ДвоичныеДанные.Name,);
		
		
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", Документ_ДвоичныеДанные.Content);
		ДокументXML_Структура.Вставить("Документ_ИмяФайла", Документ_ДвоичныеДанные.Name);
		
		//Возврат ЭД_ДвоичныеДанные;
		Возврат ДокументXML_Структура;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <Титул покупателя> (" + Syn_Документ.FileName + "). " + ОписаниеОшибкиСтрокой);
		
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
КонецФункции

//Функция формирует XML-файл (контент) документа с типом "Акт"
//
// Параметры:
//  Документ: ссылка на учетный документ 1С
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭДАктПродавецБГУ(Документ, БезАвторизации = Неопределено, СтруктураУступочнойНадписи) Экспорт
	
	СтруктураДанных = СформироватьСтруктуруДанныхДокумента(Документ);
	
	// Недостаточно данных для формирования, прерываенм формирование документа
	Если СтруктураДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеДокумента 				= Документ.Метаданные();
	МетаданныеСправочникаОрганизации    = Метаданные.Справочники.Организации;
	
	// Создаем фабрику из схемы
	Попытка
		Фабрика 						= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_IAKTPRM_1_987_00_05_01_02").ПолучитьТекст());
		КаталогЭД 						= КаталогВременныхФайлов();
		ТипКодировки 					= "windows-1251";		
		
		ИмяФайлаЭД = "DP_IAKTPRM" + "_" +
		СтруктураДанных.ИдентификаторПолучателя + "_" +
		СтруктураДанных.ИдентификаторОтправителя + "_" +
		Формат(Документ.Дата, "ДФ=""ггггММдд""") + "_" +
		Документ.УникальныйИдентификатор();
		
		//Определение типов XDTO
		ТипДоверенность				= Фабрика.Тип("IAKTPRM", "ДоверенностьТип");
		ТипДолжнЛицо				= Фабрика.Тип("IAKTPRM", "ДолжЛицоТип");
		ТипУчастник					= Фабрика.Тип("IAKTPRM", "УчастникТип");
		ТипКонтакт					= Фабрика.Тип("IAKTPRM", "КонтактТип");
		ТипАдрес					= Фабрика.Тип("IAKTPRM", "АдресТип");
		ТипАдресИно					= Фабрика.Тип("IAKTPRM", "АдрИноТип");
		ТипАдресРФ					= Фабрика.Тип("IAKTPRM", "АдрРФТип");
		ТипФИО						= Фабрика.Тип("IAKTPRM", "ФИОТип");
		
		//Определение типов элементов XDTO
		ЭлементФайл					= Фабрика.Тип("IAKTPRM", "Файл");
		ЭлементСвУчДокОбор			= ЭлементФайл.Свойства.Получить("СвУчДокОбор").Тип;
		ЭлементСвОЭДОтпрСФ			= ЭлементСвУчДокОбор.Свойства.Получить("СвОЭДОтпрСФ").Тип;
		ЭлементДокумент				= ЭлементФайл.Свойства.Получить("Документ").Тип;
		ЭлементСвАктИ				= ЭлементДокумент.Свойства.Получить("СвАктИ").Тип;
		ЭлементОписРабот			= ЭлементСвАктИ.Свойства.Получить("ОписРабот").Тип;
		ЭлементСдал					= ЭлементСвАктИ.Свойства.Получить("Сдал").Тип;
		ЭлементПодписант			= ЭлементДокумент.Свойства.Получить("Подписант").Тип;
		
		//Файл обмена (Файл)
		Файл = Фабрика.Создать(ЭлементФайл);
		Файл.ИдФайл 	= ИмяФайлаЭД;
		Файл.ВерсПрог	= СформироватьСтрокуВерсПрог();
		Файл.ВерсФорм 	= "5.01";
		//Сведения об участниках электронногодокументооборота (СвУчДокОбор)
		СвУчДокОбор = Фабрика.Создать(ЭлементСвУчДокОбор);
		СвУчДокОбор.ИдОтпр 	= СтруктураДанных.ИдентификаторОтправителя;
		СвУчДокОбор.ИдПок	= СтруктураДанных.ИдентификаторПолучателя;	
		//Сведения об операторе электронного документооборота отправителя (СвОЭДОтпр)
		СвОЭДОтпрСФ = Фабрика.Создать(ЭлементСвОЭДОтпрСФ);
		СвОЭДОтпрСФ.НаимОрг		= СтруктураДанных.SubjectInfo_ЭДО.Name;
		СвОЭДОтпрСФ.ИННЮЛ		= СтруктураДанных.SubjectInfo_ЭДО.Inn;
		СвОЭДОтпрСФ.ИдЭДОСФ		= СтруктураДанных.ИдентификаторЭДО;
		СвУчДокОбор.СвОЭДОтпрСФ = СвОЭДОтпрСФ;			
		Файл.СвУчДокОбор		= СвУчДокОбор;
		//Счет-фактура, применяемый при расчетах по налогу на добавленную стоимость (Документ)
		Док 		= Фабрика.Создать(ЭлементДокумент);
		Док.КНД		= "1175006";
		ТекДата		= ТекущаяДата();
		Док.ДатаДок	= Формат(ТекДата, "ДЛФ=Д");
		Док.ВремДок = Формат(ТекДата, "ДФ=""ЧЧ.мм.сс""");
		
		//Акт о выполнении работ (оказании услуг) - титул исполнителя (СвАктИ)
		СвАктИ 				= Фабрика.Создать(ЭлементСвАктИ);
		СвАктИ.НаимПервДок 	= "Акт о выполнении работ (оказании услуг)";
		СвАктИ.НомАкт 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Документ);
		СвАктИ.ДатаАкт 		= Формат(Документ.Дата, "ДЛФ=Д");
		
		Заголовок 			= Фабрика.Создать(СвАктИ.Тип().Свойства.Получить("Заголовок").Тип);
		Заголовок 			= "Акт";	
		СвАктИ.Заголовок	= Заголовок;
		
		//Сведения об участнике документооборота (УчастникТип)
		Исполнитель 		= Фабрика.Создать(ТипУчастник);
		Если ЗначениеЗаполнено(Документ.Учреждение.КодОКПО) Тогда
			Исполнитель.ОКПО 	= Документ.Учреждение.КодОКПО;
		КонецЕсли;
		//Идентификационные сведения (ИдСв)
		ИдСв = Фабрика.Создать(Исполнитель.Тип().Свойства.Получить("ИдСв").Тип);
		
		//Сведения об организации (СвЮЛ)
		СвЮЛ 			= Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
		СвЮЛ.НаимОрг 	= Документ.Учреждение.НаименованиеПолное;
		СвЮЛ.ИННЮЛ 		= Документ.Учреждение.ИНН;
		СвЮЛ.КПП 		= Документ.Учреждение.КПП;
		//Для Бух и КА
		Если ЕстьРеквизитСправочника("КодКОПФ", МетаданныеСправочникаОрганизации) И ЗначениеЗаполнено(Документ.Учреждение.КодКОПФ) Тогда
			СвЮЛ.ОКОПФ 	= СокрЛП(Документ.Учреждение.КодКОПФ.Код);
		КонецЕсли;	
		ИдСв.СвЮЛ 		= СвЮЛ;
		
		Исполнитель.ИдСв = ИдСв;
		
		//Сведения об адресе (АдресТип)
		Если НЕ СтруктураДанных.АдресОрганизации = Неопределено Тогда 
			Адрес = Фабрика.Создать(ТипАдрес);
			Если СтруктураДанных.АдресОрганизации.АдресРФ Тогда
				АдрРФ 		= Фабрика.Создать(ТипАдресРФ);
				ЗаполнитьЗначенияСвойств(АдрРФ, СтруктураДанных.АдресОрганизации);
				Адрес.АдрРФ = АдрРФ;
			Иначе
				//иностранная компания, иностранный адрес
				АдрИно = Фабрика.Создать(ТипАдресИно);
				ЗаполнитьЗначенияСвойств(АдрИно, СтруктураДанных.АдресОрганизации);
				Адрес.АдрИно = АдрИно;
			КонецЕсли;
			Исполнитель.Адрес = Адрес;	
		КонецЕсли;
		//Контактные данные (КонтактТип)
		Если СтруктураДанных.ТлфОрганизации <> НЕОПРЕДЕЛЕНО Тогда
			Контакт 			= Фабрика.Создать(ТипКонтакт);
			Контакт.Тлф	 		= СтруктураДанных.ТлфОрганизации;            
			Исполнитель.Контакт = Контакт;
		КонецЕсли;
		
		//Банковские реквизиты (БанкРекв)
		Если ЗначениеЗаполнено(СтруктураДанных.ДанныеСчетаОрганизации.НомерСчета) Тогда
			БанкРекв 			= Фабрика.Создать(Исполнитель.Тип().Свойства.Получить("БанкРекв").Тип);
			БанкРекв.НомерСчета = СтруктураДанных.ДанныеСчетаОрганизации.НомерСчета;
			СвБанк 				= Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			ЗаполнитьЗначенияСвойств(СвБанк, СтруктураДанных.ДанныеСчетаОрганизации);
			БанкРекв.СвБанк 	= СвБанк;
			Исполнитель.БанкРекв 	= БанкРекв;
		КонецЕсли;
		
		СвАктИ.Исполнитель = Исполнитель;
		
		//Описание выполненных работ (ОписРабот)
		ОписРабот 				= Фабрика.Создать(ЭлементОписРабот);
		ОписРабот.СумБезНДСИт 	= Формат(?(Документ.СуммаВключаетНДС, Документ.Услуги.Итог("Сумма") - Документ.Услуги.Итог("СуммаНДС"), Документ.Услуги.Итог("Сумма")), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		ОписРабот.СумНДСИт 		= Формат(Документ.Услуги.Итог("СуммаНДС"), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		ОписРабот.СумУчНДСИт 	= Формат(?(Документ.СуммаВключаетНДС, Документ.Услуги.Итог("Сумма"), Документ.Услуги.Итог("Сумма") + Документ.Услуги.Итог("СуммаНДС")), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
		НомерСтроки 			= 0;
		//Услуги
		Для Каждого ТекСтрока Из Документ.Услуги Цикл
			НомерСтроки = НомерСтроки + 1;
			//Сведения о произведенной работе (оказанной услуге) (Работа)
			Работа 			= Фабрика.Создать(ОписРабот.Тип().Свойства.Получить("Работа").Тип); 
			Работа.Номер 	= НомерСтроки;
			
			//Заполняем из полного наим, если оно не пустое и короче 1000 симв.
			Если СтрДлина(ТекСтрока.Номенклатура.НаименованиеПолное) <= 1000 И ЗначениеЗаполнено(ТекСтрока.Номенклатура.НаименованиеПолное) Тогда
				Работа.НаимРабот = ?(ЗначениеЗаполнено(ТекСтрока.Содержание),ТекСтрока.Содержание,ТекСтрока.Номенклатура.НаименованиеПолное);
			Иначе
				Работа.НаимРабот = ?(ЗначениеЗаполнено(ТекСтрока.Содержание),ТекСтрока.Содержание,ТекСтрока.Номенклатура.Наименование);
			КонецЕсли;
			
			Работа.НаимЕдИзм 	= Строка(ТекСтрока.Номенклатура.ЕдиницаИзмерения);
			Работа.ОКЕИ			= СокрЛП(ТекСтрока.Номенклатура.ЕдиницаИзмерения.Код);
			
			СуммаБезНДС = Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма - ТекСтрока.СуммаНДС, ТекСтрока.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			// Вдруг количество = 0 
			Попытка
				РасчетнаяЦена = Формат(СуммаБезНДС/?(ТекСтрока.Количество = 0, 1, ТекСтрока.Количество), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			Исключение
				РасчетнаяЦена = 1;
			КонецПопытки;			
			
			Работа.Цена = РасчетнаяЦена;
			
			Если НЕ ТекСтрока.Количество = 0 Тогда
				Работа.Количество = Формат(ТекСтрока.Количество, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			КонецЕсли;
			
			Работа.СумБезНДС 	= СуммаБезНДС;
			Работа.СумНДС 		= Формат(ТекСтрока.СуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			Работа.СумУчНДС 	= Формат(?(Документ.СуммаВключаетНДС, ТекСтрока.Сумма, ТекСтрока.Сумма +  ТекСтрока.СуммаНДС), "ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
			
			Если ЗначениеЗаполнено(ТекСтрока.Содержание) Тогда
				Работа.Описание = ТекСтрока.Содержание;
			КонецЕсли;
			ОписРабот.Работа.Добавить(Работа);
		КонецЦикла;
		
		СвАктИ.ОписРабот.Добавить(ОписРабот);
		
		Руководители = ПолучитьОтветственныхЛицОрганизации(Документ.Учреждение, Документ.Дата);
		
		//Сдал (Сдал)
		Сдал 			= Фабрика.Создать(ЭлементСдал);
		Сдал.ДатаИсполн = Формат(Документ.Дата, "ДЛФ=Д");
		
		//Для Бух
		Если ЕстьРеквизитДокумента("Руководитель", МетаданныеДокумента) Тогда
			ОтпускРазрешил = ?(ЗначениеЗаполнено(Документ.Руководитель), Документ.Руководитель, Руководители.Руководитель);
			//Для УТ и КА
		ИначеЕсли ЕстьРеквизитДокумента("ОтпускРазрешил", МетаданныеДокумента) Тогда
			ОтпускРазрешил = ?(ЗначениеЗаполнено(Документ.ОтпускРазрешил), Документ.ОтпускРазрешил, Руководители.Руководитель);
			// Акт об оказании производственных услуг	
		ИначеЕсли ЕстьРеквизитДокумента("Исполнитель", МетаданныеДокумента) Тогда
			ОтпускРазрешил = ?(ЗначениеЗаполнено(Документ.Исполнитель), Документ.Исполнитель, Руководители.Руководитель);   
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтпускРазрешил) Тогда
			//Сведения о должностном лице (ДолжЛицоТип)
			ПодписьИсполн 			= Фабрика.Создать(ТипДолжнЛицо);
			ПодписьИсполн.Должность = Строка(Руководители.РуководительДолжность);
			
			ФИО = Фабрика.Создать(ТипФИО);
			
			СтруктураФИОФизЛица = ИзвлечьФИОИзПредставления(Строка(ОтпускРазрешил));
			Если СтруктураФИОФизЛица <> НЕОПРЕДЕЛЕНО Тогда
				ФИО.Фамилия 	= СтруктураФИОФизЛица.Фамилия;
				ФИО.Имя 		= СтруктураФИОФизЛица.Имя;
				Если СтруктураФИОФизЛица.Свойство("Отчество") Тогда
					ФИО.Отчество = СтруктураФИОФизЛица.Отчество;
				КонецЕсли;
			КонецЕсли;
			ПодписьИсполн.ФИО = ФИО;	
		КонецЕсли;
		СвАктИ.Сдал = Сдал;
		
		//Уступочная надпись (параметры)
		Если НЕ СтруктураУступочнойНадписи = Неопределено Тогда
			ИнфПол 			= Фабрика.Создать(ЭлементСвАктИ.Свойства.Получить("ИнфПол").Тип);
			ИнфПол.ТекстИнф = СтруктураУступочнойНадписи.ТекстУступочнойНадписи;
			СвАктИ.ИнфПол 	= ИнфПол;
		КонецЕсли;
		
		//Сведения о лице, подписывающем документ в электронной форме (Подписант)		
		Подписант = ПодписантСтруктура();
		
		//Сведения о лице, подписывающем документ в электронном виде (Подписант)
		Подп 	= Фабрика.Создать(ЭлементПодписант);
		ФИО		= СоздатьОбъектФИО(Фабрика, ТипФИО, Подписант.ФИО);
		//БГУ, всегда юр. лицо 
		ЮЛ 			= Фабрика.Создать(ЭлементПодписант.Свойства.Получить("ЮЛ").Тип);
		ЮЛ.ИННЮЛ	= Подписант.ИННЮЛ;
		
		Если ЗначениеЗаполнено(Подписант.Должность) Тогда
			ЮЛ.Должн = Подписант.Должность;
		КонецЕсли;
		
		ЮЛ.ФИО 	= ФИО;
		Подп.ЮЛ = ЮЛ;
		
		
		Док.СвАктИ 		= СвАктИ;
		Док.Подписант 	= Подп;
		Файл.Документ 	= Док;
		
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(КаталогЭД + ИмяФайлаЭД + ".xml", ТипКодировки);
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		Фабрика.ЗаписатьXML(НоваяЗаписьXML, Файл);
		НоваяЗаписьXML.Закрыть();
		
		ЭД_ДвоичныеДанные = Новый ДвоичныеДанные(КаталогЭД + ИмяФайлаЭД + ".xml");
		
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", ЭД_ДвоичныеДанные);
		ДокументXML_Структура.Вставить("Документ_ИмяФайла", ИмяФайлаЭД);
		
		Возврат ДокументXML_Структура;
	Исключение
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <" + Документ + ">. " + ОписаниеОшибки());
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
КонецФункции

//Функция формирует XML-файл (контент) документа с типом "Акт титул покупател"
//
// Параметры:
//  Syn_Документ: документ сервиса, который подписываем (экземпляр класса Document)
//  Syn_Подписант: информация о лице, подписывающем документ (экземпляр класса SignerInfo)
//  Syn_ТитулПокупателя: структура с информацией о лице, получающем груз, лице, принимающим груз
//	и данные по доверенности (экземпляр класса TitleBuyer)
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭлектронныйДокументАктПокупательXML(Syn_Документ, Syn_Подписант, Syn_ТитулПокупателя) Экспорт
	//Титул покупателя
	Попытка
		Документ_ДвоичныеДанные = ExchangeService.GenerateTitleBuyer(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id, Syn_ТитулПокупателя, Syn_Подписант);
		СохранитьЭлектронныйДокументНаДиск(Документ_ДвоичныеДанные.Content, Документ_ДвоичныеДанные.Name,);
		
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", Документ_ДвоичныеДанные.Content);
		ДокументXML_Структура.Вставить("Документ_ИмяФайла", Документ_ДвоичныеДанные.Name);
		
		//Возврат ЭД_ДвоичныеДанные;
		Возврат ДокументXML_Структура;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <Титул покупателя> (" + Syn_Документ.FileName + "). " + ОписаниеОшибкиСтрокой);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
КонецФункции

Функция СоздатьЭД_ПОА(ИДДокумента, Комментарий) Экспорт
	
	ФабрикаСервиса = ExchangeService.ФабрикаXDTO;
	ДанныеПодписанта = ПолучитьВладельцаСертификата();
	Если ДанныеПодписанта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// TODO: С объектами конфигурации желательно бы работать через прокси-методы
	ЭтоЮрЛицо = ЭтоБГУ 
		ИЛИ (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
	
	Тип_SignerInfo				= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "SignerInfo");
	SignerInfo					= ФабрикаСервиса.Создать(Тип_SignerInfo);
	SignerInfo.IsJuridical		= ЭтоЮрЛицо;
	SignerInfo.OrganizationType	= ?(ЭтоЮрЛицо, "LegalEntity", "IndividualEntrepreneur");
	SignerInfo.Inn				= Организация.ИНН;
	SignerInfo.Position			= ?(Сертификат.Субъект.Свойство("T"), Сертификат.Субъект.T, "");
	SignerInfo.LastName			= ДанныеПодписанта.Фамилия;
	SignerInfo.FirstName		= ДанныеПодписанта.Имя;
	SignerInfo.MiddleName		= ДанныеПодписанта.Отчество;
	Если Не ЭтоЮрЛицо Тогда
		Если ЗначениеЗаполнено(Организация.СвидетельствоСерияНомер) И
		 	 ЗначениеЗаполнено(Организация.СвидетельствоДатаВыдачи) Тогда
  			SignerInfo.StateRegistrationCert = Организация.СвидетельствоСерияНомер + " от " + Формат(Организация.СвидетельствоДатаВыдачи, "ДЛФ=Д")
		Иначе
			SignerInfo.StateRegistrationCert = Организация.ОГРН;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		КонтентПОА = ExchangeService.GenerateRevocationOffer(Токен, Syn_ЯщикОрганизации, ИДДокумента, Комментарий, SignerInfo);
		Возврат Новый Структура("Контент, ИмяФайла", КонтентПОА.Content, КонтентПОА.Name);
	Исключение
		ИнОшибки = ИнформацияОбОшибке();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//Функция формирует XML-файл (контент) служебного документа "Извещение о получении (регламент ЭСФ)"
//
// Параметры:
//  Syn_Документ: документ сервиса, на который генерируем ИОП
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭлектронныйДокументИОПСФXML(Syn_Документ) Экспорт
	Попытка
		Документ_ДвоичныеДанные = ExchangeService.GenerateInvoiceReceipt(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id);
		СохранитьЭлектронныйДокументНаДиск(Документ_ДвоичныеДанные.Content, Документ_ДвоичныеДанные.Name,);
		
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", Документ_ДвоичныеДанные.Content);
		ДокументXML_Структура.Вставить("Документ_ИмяФайла", Документ_ДвоичныеДанные.Name);
		
		//Возврат ЭД_ДвоичныеДанные;
		Возврат ДокументXML_Структура;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <Извещение о получении> (" + Syn_Документ.FileName + "). "  + ОписаниеОшибкиСтрокой);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
КонецФункции

//Функция формирует XML-файл (контент) служебного документа "Извещение о получении (общий регламент)"
//
// Параметры:
//  Syn_Документ: документ сервиса, на который генерируем ИОП
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭлектронныйДокументИОПОбщXML(Syn_Документ) Экспорт
	Попытка
		Документ_ДвоичныеДанные = ExchangeService.GenerateDeliveryConfirmation(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id);
		СохранитьЭлектронныйДокументНаДиск(Документ_ДвоичныеДанные.Content, Документ_ДвоичныеДанные.Name,);
		
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", Документ_ДвоичныеДанные.Content);
		ДокументXML_Структура.Вставить("Документ_ИмяФайла", Документ_ДвоичныеДанные.Name);
		
		//Возврат ЭД_ДвоичныеДанные;
		Возврат ДокументXML_Структура;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <Извещение о получении> (" + Syn_Документ.FileName + "). "  + ОписаниеОшибкиСтрокой);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
КонецФункции

//Функция формирует XML-файл (контент) служебного документа "Уведомление об уточнении (регламент ЭСФ)"
//
// Параметры:
//  Syn_Документ: документ сервиса, на который генерируем УОУ
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭлектронныйДокументУОУСФXML(Syn_Документ, Комментарий) Экспорт
	Попытка
		Документ_ДвоичныеДанные = ExchangeService.GenerateInvoiceAmendmentRequest(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id, Комментарий);
		СохранитьЭлектронныйДокументНаДиск(Документ_ДвоичныеДанные.Content, Документ_ДвоичныеДанные.Name,);
		
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", Документ_ДвоичныеДанные.Content);
		ДокументXML_Структура.Вставить("Документ_ИмяФайла", Документ_ДвоичныеДанные.Name);
		
		//Возврат ЭД_ДвоичныеДанные;
		Возврат ДокументXML_Структура;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <Уведомление об уточнении> (" + Syn_Документ.FileName + "). "  + ОписаниеОшибкиСтрокой);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
КонецФункции

//Функция формирует XML-файл (контент) служебного документа "Уведомление об уточнении (общий регламент)"
//
// Параметры:
//  Syn_Документ: документ сервиса, на который генерируем УОУ
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭлектронныйДокументУОУОбщXML(Syn_Документ, Комментарий) Экспорт
	Попытка
		Документ_ДвоичныеДанные = ExchangeService.GenerateAmendmentRequest(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id, Комментарий);
		СохранитьЭлектронныйДокументНаДиск(Документ_ДвоичныеДанные.Content, Документ_ДвоичныеДанные.Name,);
		
		ДокументXML_Структура = Новый Структура;
		ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", Документ_ДвоичныеДанные.Content);
		ДокументXML_Структура.Вставить("Документ_ИмяФайла", Документ_ДвоичныеДанные.Name);
		
		//Возврат ЭД_ДвоичныеДанные;
		Возврат ДокументXML_Структура;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка при формированиии XML документа <Уведомление об уточнении> (" + Syn_Документ.FileName + "). "  + ОписаниеОшибкиСтрокой);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
КонецФункции

// Функция формирует контент документа с типом "Счет на оплату"
//
// Параметры:
// Документ: ссылка на учетный документ в 1С
//
// Возвращаемое значение:
// Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СоздатьЭлектронныйДокументСчетНаОплатуПродавец(Документ) Экспорт
	
	//Попытка
	МетаданныеДокумента = Документ.Метаданные();
	МетаданныеСправочникаОрганизации = Метаданные.Справочники.Организации;
	
	Попытка	
		SubjectInfo_Контрагент = ExchangeService.GetSubjectInfo(Токен, ПолучитьЯщик(Документ.Контрагент));
		ИдентификаторПолучателя = SubjectInfo_Контрагент.ServiceCode;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации о субъекте документооборота: " + ТекстОшибкиSynerdocs);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	Попытка
		SubjectInfo_Организация = ExchangeService.GetSubjectInfo(Токен, Syn_ЯщикОрганизации);
		ИдентификаторОтправителя = SubjectInfo_Организация.ServiceCode;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации о субъекте документооборота: " + ТекстОшибкиSynerdocs);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	Попытка
		SubjectInfo_ЭДО = ExchangeService.GetSpecialOperatorInfo(Токен);
		ИдентификаторЭДО = SubjectInfo_ЭДО.OperatorServiceCode;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации об операторе документооборота: " + ТекстОшибкиSynerdocs);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ИдентификаторОтправителя) Тогда
		ИдентификаторОтправителя = Документ.Организация.ИНН;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
		ИдентификаторПолучателя = Документ.Контрагент.ИНН;
	КонецЕсли;
	
	ИмяДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Счет на оплату № %1 от %2 '"), Документ.Номер, Формат(Документ.Дата,"ДЛФ=ДД"));
	ИмяДокумента = СтрЗаменить(ИмяДокумента,".","");
	
	КаталогЭД = КаталогВременныхФайлов();
	
	ВрФайлСчет = КаталогВременныхФайлов() + ИмяДокумента;
	ТабДок = ЗаполнитьТабличныйДокументСчетНаОплату(Документ);
	
	Если НЕ ТабДок = Неопределено Тогда
		ТабДок.Записать(ВрФайлСчет, ТипФайлаТабличногоДокумента.PDF);
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
	Документ_ДвоичныеДанные = Новый ДвоичныеДанные(ВрФайлСчет);
	
	ДокументXML_Структура = Новый Структура;
	ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", Документ_ДвоичныеДанные);
	ДокументXML_Структура.Вставить("Документ_ИмяФайла", ИмяДокумента);
	Возврат ДокументXML_Структура;	
	
	
КонецФункции

// Функция формирует XML-файл (контент) документа с типом "Счет на оплату"
//
// Параметры:
// Документ: ссылка на учетный документ в 1С
//
// Возвращаемое значение:
// Структура: двоичные данные (контент) и имя файла сформированного электронного документа
Функция ЗаполнитьТабличныйДокументСчетНаОплату(ДокументСсылка) Экспорт
	
	//Проверим валюту документа. 
	Если СокрЛП(ДокументСсылка.ВалютаДокумента.Код) <> "643" Тогда 
		Сообщить("Работа с иностранной валютой " + ДокументСсылка.ВалютаДокумента + " не поддерживается, невозможно сформировать документ [" + ДокументСсылка + "].");
		Возврат Неопределено;	
	КонецЕсли;

	Макет = ПолучитьМакет("СчетНаОплату");
	
	Руководители = ПолучитьОтветственныхЛицОрганизации(ДокументСсылка.Организация, ДокументСсылка.Дата);
	
	//Для бух
	БанковскийСчет = ДокументСсылка.СтруктурнаяЕдиница;
	
	АдресОрганизации = ПолучитьАдресКонтрагента(ДокументСсылка.Организация, Истина, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	АдресКонтрагента = ПолучитьАдресКонтрагента(ДокументСсылка.Контрагент, Неопределено, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	СтруктураСведенийГрузополучатель = Новый Структура;
	СтруктураСведенийГрузоотправитель = Новый Структура;
	
	Если ЕстьРеквизитДокумента("Грузополучатель", ДокументСсылка.Метаданные()) Тогда
		
		Если ЗначениеЗаполнено(ДокументСсылка.Грузополучатель) Тогда
			
			АдресГрузополучателя = ПолучитьАдресКонтрагента(ДокументСсылка.Грузополучатель, Неопределено,  Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			
			СтруктураСведенийГрузополучатель.Вставить("НаименованиеДляПечатныхФорм",ДокументСсылка.Грузополучатель.НаименованиеПолное);
			СтруктураСведенийГрузополучатель.Вставить("ИНН",ДокументСсылка.Грузополучатель.ИНН);
			СтруктураСведенийГрузополучатель.Вставить("КПП",ДокументСсылка.Грузополучатель.КПП);
			СтруктураСведенийГрузополучатель.Вставить("Телефоны",ПолучитьТелефон(ДокументСсылка.Грузополучатель));
			СтруктураСведенийГрузополучатель.Вставить("НомерСчета","");                   
			СтруктураСведенийГрузополучатель.Вставить("Банк","");
			СтруктураСведенийГрузополучатель.Вставить("БИК","");
			СтруктураСведенийГрузополучатель.Вставить("ФактическийАдрес",?(АдресГрузополучателя <> Неопределено, ?(АдресГрузополучателя.АдресРФ, АдресГрузополучателя.Представление, АдресГрузополучателя.АдрТекст), ""));
		Иначе
			СтруктураСведенийГрузополучатель.Вставить("НаименованиеДляПечатныхФорм",ДокументСсылка.Контрагент.НаименованиеПолное);
			СтруктураСведенийГрузополучатель.Вставить("ИНН",ДокументСсылка.Контрагент.ИНН);
			СтруктураСведенийГрузополучатель.Вставить("КПП",ДокументСсылка.Контрагент.КПП);
			СтруктураСведенийГрузополучатель.Вставить("Телефоны",ПолучитьТелефон(ДокументСсылка.Контрагент));
			СтруктураСведенийГрузополучатель.Вставить("НомерСчета","");                   
			СтруктураСведенийГрузополучатель.Вставить("Банк","");
			СтруктураСведенийГрузополучатель.Вставить("БИК","");
			СтруктураСведенийГрузополучатель.Вставить("ФактическийАдрес",?(АдресКонтрагента<>Неопределено, ?(АдресКонтрагента.АдресРФ, АдресКонтрагента.Представление, АдресКонтрагента.АдрТекст), ""));
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Грузоотправитель", ДокументСсылка.Метаданные()) Тогда
		
		
		Если ЗначениеЗаполнено(ДокументСсылка.Грузоотправитель) Тогда
			
			АдресГрузоотправителя = ПолучитьАдресКонтрагента(ДокументСсылка.Грузоотправитель, Неопределено,  Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			
			СтруктураСведенийГрузоотправитель.Вставить("НаименованиеДляПечатныхФорм",ДокументСсылка.Грузоотправитель.НаименованиеПолное);
			СтруктураСведенийГрузоотправитель.Вставить("ИНН",ДокументСсылка.Грузоотправитель.ИНН);
			СтруктураСведенийГрузоотправитель.Вставить("КПП",ДокументСсылка.Грузоотправитель.КПП);
			СтруктураСведенийГрузоотправитель.Вставить("Телефоны",ПолучитьТелефон(ДокументСсылка.Грузоотправитель));
			СтруктураСведенийГрузоотправитель.Вставить("НомерСчета","");                   
			СтруктураСведенийГрузоотправитель.Вставить("Банк","");
			СтруктураСведенийГрузоотправитель.Вставить("БИК","");
			СтруктураСведенийГрузоотправитель.Вставить("ФактическийАдрес",?(АдресГрузоотправителя <> Неопределено, ?(АдресГрузоотправителя.АдресРФ, АдресГрузоотправителя.Представление, АдресГрузоотправителя.АдрТекст), ""));
		Иначе
			СтруктураСведенийГрузоотправитель.Вставить("НаименованиеДляПечатныхФорм",ДокументСсылка.Контрагент.НаименованиеПолное);
			СтруктураСведенийГрузоотправитель.Вставить("ИНН",ДокументСсылка.Контрагент.ИНН);
			СтруктураСведенийГрузоотправитель.Вставить("КПП",ДокументСсылка.Контрагент.КПП);
			СтруктураСведенийГрузоотправитель.Вставить("Телефоны",ПолучитьТелефон(ДокументСсылка.Контрагент));
			СтруктураСведенийГрузоотправитель.Вставить("НомерСчета","");                   
			СтруктураСведенийГрузоотправитель.Вставить("Банк","");
			СтруктураСведенийГрузоотправитель.Вставить("БИК","");
			СтруктураСведенийГрузоотправитель.Вставить("ФактическийАдрес",?(АдресКонтрагента<>Неопределено, ?(АдресКонтрагента.АдресРФ, АдресКонтрагента.Представление, АдресКонтрагента.АдрТекст), ""));
		КонецЕсли;
	КонецЕсли;
	
	
	
	СтруктураСведенийОрганизация = Новый Структура;
	
	СтруктураСведенийОрганизация.Вставить("НаименованиеДляПечатныхФорм",ДокументСсылка.Организация.НаименованиеПолное);
	СтруктураСведенийОрганизация.Вставить("ИНН",ДокументСсылка.Организация.ИНН);
	СтруктураСведенийОрганизация.Вставить("КПП",ДокументСсылка.Организация.КПП);
	СтруктураСведенийОрганизация.Вставить("Телефоны",ПолучитьТелефон(ДокументСсылка.Организация));
	СтруктураСведенийОрганизация.Вставить("НомерСчета",БанковскийСчет.НомерСчета);                   
	СтруктураСведенийОрганизация.Вставить("Банк",БанковскийСчет.Банк.Наименование);
	СтруктураСведенийОрганизация.Вставить("БИК",БанковскийСчет.Банк.Код);
	СтруктураСведенийОрганизация.Вставить("ФактическийАдрес",?(АдресОрганизации <> Неопределено, ?(АдресОрганизации.АдресРФ, АдресОрганизации.Представление, АдресОрганизации.АдрТекст), ""));
	
	СтруктураСведенийПокупатель = Новый Структура;
	СтруктураСведенийПокупатель.Вставить("НаименованиеДляПечатныхФорм",ДокументСсылка.Контрагент.НаименованиеПолное);
	СтруктураСведенийПокупатель.Вставить("ИНН",ДокументСсылка.Контрагент.ИНН);
	СтруктураСведенийПокупатель.Вставить("КПП",ДокументСсылка.Контрагент.КПП);
	СтруктураСведенийПокупатель.Вставить("Телефоны",ПолучитьТелефон(ДокументСсылка.Контрагент));
	СтруктураСведенийПокупатель.Вставить("НомерСчета","");                   
	СтруктураСведенийПокупатель.Вставить("Банк","");
	СтруктураСведенийПокупатель.Вставить("БИК","");
	СтруктураСведенийПокупатель.Вставить("ФактическийАдрес",?(АдресКонтрагента<>Неопределено, ?(АдресКонтрагента.АдресРФ, АдресКонтрагента.Представление, АдресКонтрагента.АдрТекст),""));
	
	
	СведенияОбОрганизации 	=  "";
	СведенияОПокупателе 	=  ""; 
	
	ТабличныйДокумент	 					= Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
	// Заполним заголовок печатной формы
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
	ОбластьПоставщик = Макет.ПолучитьОбласть("ОбластьПоставщик");
	ОбластьПокупатель = Макет.ПолучитьОбласть("ОбластьПокупатель");
	ОбластьГрузоотправитель = Макет.ПолучитьОбласть("ОбластьГрузоотправитель");
	ОбластьГрузополучатель = Макет.ПолучитьОбласть("ОбластьГрузополучатель");
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	
	ОбластьМакета.Параметры.БанкПолучателяПредставление = БанковскийСчет.Банк.Наименование;
	ОбластьМакета.Параметры.БИКБанкаПолучателя = БанковскийСчет.Банк.Код;
	ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = БанковскийСчет.Банк.КоррСчет;
	ОбластьМакета.Параметры.СчетПолучателяПредставление = БанковскийСчет.НомерСчета;
	ОбластьМакета.Параметры.ИННПолучателя = ДокументСсылка.Организация.ИНН;
	ОбластьМакета.Параметры.КПППолучателя = ДокументСсылка.Организация.КПП;
	
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(
		СтруктураСведенийОрганизация,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны"
	);
	
	НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСсылка);
	ДатаДокумента = Формат(ДокументСсылка.Дата, "ДФ='дд ММММ гггг'");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Счет на оплату № %1 от %2 г.'"), НомерДокумента, ДатаДокумента);
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(
		СтруктураСведенийОрганизация,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны"
	);
	
	ОбластьПокупатель.Параметры.ПредставлениеПокупателя = ОписаниеОрганизации(
		СтруктураСведенийПокупатель,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны"
	);
	
	ОбластьГрузоотправитель.Параметры.ПредставлениеГрузоотправителя = ОписаниеОрганизации(
		СтруктураСведенийГрузоотправитель,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны"
	);
	
	ОбластьГрузополучатель.Параметры.ПредставлениеГрузополучателя = ОписаниеОрганизации(
		СтруктураСведенийГрузополучатель,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны"
	);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ТабличныйДокумент.Вывести(ОбластьПоставщик);
	
	Если ЕстьРеквизитДокумента("Грузоотправитель", ДокументСсылка.Метаданные()) Тогда
		ТабличныйДокумент.Вывести(ОбластьГрузоотправитель);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьПокупатель);
	
	Если ЕстьРеквизитДокумента("Грузополучатель", ДокументСсылка.Метаданные()) Тогда
		ТабличныйДокумент.Вывести(ОбластьГрузополучатель);
	КонецЕсли; 
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	НомерСтроки    = 0;
	
	Для Каждого Строка Из ДокументСсылка.Товары Цикл
		НомерСтроки = НомерСтроки + 1;
		НоменклатураНаименованиеПолное = СокрЛП(Строка.Номенклатура.НаименованиеПолное);
		НоменклатураНаименование = ?(ЗначениеЗаполнено(НоменклатураНаименованиеПолное), НоменклатураНаименованиеПолное, СокрЛП(Строка.Номенклатура.Наименование));
		
		ОбластьМакета.Параметры.НомерСтроки			= НомерСтроки;
		ОбластьМакета.Параметры.Артикул				= Строка.Номенклатура.Артикул;
		ОбластьМакета.Параметры.Товар				= НоменклатураНаименование;
		ОбластьМакета.Параметры.Количество			= Строка.Количество;
		ОбластьМакета.Параметры.ЕдиницаИзмерения	= Строка.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
		ОбластьМакета.Параметры.Цена				= Строка.Цена;
		ОбластьМакета.Параметры.Сумма				= Строка.Сумма;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Сумма    = Сумма    + Строка.Сумма;
		СуммаНДС = СуммаНДС + Строка.СуммаНДС;
	КонецЦикла;
	
	Для Каждого Строка Из ДокументСсылка.Услуги Цикл
		НомерСтроки = НомерСтроки + 1;
		НоменклатураНаименованиеПолное = СокрЛП(Строка.Номенклатура.НаименованиеПолное);
		НоменклатураНаименование = ?(ЗначениеЗаполнено(НоменклатураНаименованиеПолное), НоменклатураНаименованиеПолное, СокрЛП(Строка.Номенклатура.Наименование));
		
		ОбластьМакета.Параметры.НомерСтроки			= НомерСтроки;
		ОбластьМакета.Параметры.Артикул				= Строка.Номенклатура.Артикул;
		ОбластьМакета.Параметры.Товар				= НоменклатураНаименование;
		ОбластьМакета.Параметры.Количество			= Строка.Количество;
		ОбластьМакета.Параметры.ЕдиницаИзмерения	= Строка.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
		ОбластьМакета.Параметры.Цена				= Строка.Цена;
		ОбластьМакета.Параметры.Сумма				= Строка.Сумма;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Сумма    = Сумма    + Строка.Сумма;
		СуммаНДС = СуммаНДС + Строка.СуммаНДС;
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = Формат(Сумма,"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
	Если СуммаНДС <> 0 Тогда
		ОбластьМакета.Параметры.НДС     = ?(ДокументСсылка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ОбластьМакета.Параметры.ВсегоНДС = Формат(СуммаНДС,"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
	Иначе
		ОбластьМакета.Параметры.НДС     = "Без налога (НДС)";
		ОбластьМакета.Параметры.ВсегоНДС = "-";
	КонецЕсли;
	СуммаКОплате = Сумма + ?(ДокументСсылка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтогоКОплате = Формат(СуммаКОплате,"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0");
	
	СуммаКПрописи = Сумма + ?(ДокументСсылка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + НомерСтроки
	+ ", на сумму " + Формат(СуммаКПрописи,"ЧЦ=17; ЧДЦ=2; ЧРД='.'; ЧГ=0; ЧН=0") + " " + ДокументСсылка.ВалютаДокумента;
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, мВалютаРегламентированногоУчета);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ДокументСсылка.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		ОбластьМакета.Параметры.ФИОРуководителя = Руководители.Руководитель;
		ОбластьМакета.Параметры.ФИОБухгалтера   = Руководители.ГлавныйБухгалтер;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаПредприниматель");
		// Для КА, БУХ, УПП		
		Если ЕстьРеквизитСправочника("ИндивидуальныйПредприниматель", Метаданные.НайтиПоПолномуИмени("Справочник.Организации")) Тогда
			ОбластьМакета.Параметры.ФИОПредпринимателя = Строка(ДокументСсылка.Организация.ИндивидуальныйПредприниматель);
			// Для УТ	
		Иначе
			ОбластьМакета.Параметры.ФИОПредпринимателя = Строка(ДокументСсылка.Организация.НаименованиеПолное);
		КонецЕсли;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция создает карточку документа счет на оплату
// Параметры:
// Документ: ссылка на учетный документ в 1С
//
// Возвращаемое значение:
// Структура: двоичные данные (контент)
//
Функция СоздатьКарточкуДокументаСчетНаОплату(Документ) Экспорт
	 
	//Проверим валюту документа. 
	Если СокрЛП(Документ.ВалютаДокумента.Код) <> "643" Тогда 
		Сообщить("Работа с иностранной валютой " + Документ.ВалютаДокумента + " не поддерживается, невозможно сформировать документ [" + Документ + "].");
		Возврат Неопределено;	
	КонецЕсли;


	Фабрика = СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("XSD_SchetOpl").ПолучитьТекст());
	
	МетаданныеДокумента = Документ.Метаданные();
	МетаданныеСправочникаОрганизации = Метаданные.Справочники.Организации;
	
	Попытка
		SubjectInfo_Контрагент 	= ExchangeService.GetSubjectInfo(Токен, ПолучитьЯщик(Документ.Контрагент));
		Syn_Контрагент			= ExchangeService.GetOrganizationByInnKpp(Токен, Документ.Контрагент.ИНН, Документ.Контрагент.КПП);
		ИдентификаторПолучателя = Syn_Контрагент.ServiceCode;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации о субъекте документооборота: " + ТекстОшибкиSynerdocs);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	Попытка
		SubjectInfo_Организация 	= ExchangeService.GetSubjectInfo(Токен, Syn_ЯщикОрганизации);
		Syn_Организация				= ExchangeService.GetOrganizationByInnKpp(Токен, Документ.Организация.ИНН, Документ.Организация.КПП);
		ИдентификаторОтправителя 	= Syn_Организация.ServiceCode;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации о субъекте документооборота: " + ТекстОшибкиSynerdocs);
		
		Возврат НЕОПРЕДЕЛЕНО;
		
	КонецПопытки;
	
	Попытка
		SubjectInfo_ЭДО = ExchangeService.GetSpecialOperatorInfo(Токен);
		ИдентификаторЭДО = SubjectInfo_ЭДО.OperatorServiceCode;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения информации об операторе документооборота: " + ТекстОшибкиSynerdocs);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ИдентификаторОтправителя) Тогда
		ИдентификаторОтправителя = Документ.Организация.ИНН;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
		ИдентификаторПолучателя = Документ.Контрагент.ИНН;
	КонецЕсли;
	
	АдресОрганизации = ПолучитьАдресИзXDTO(Syn_Организация);
	Syn_ФИООрганизации = ПолучитьФИОИзXDTO(Syn_Организация);
	
	АдресКонтрагента = ПолучитьАдресИзXDTO(Syn_Контрагент);
	Syn_ФИОКонтрагента = ПолучитьФИОИзXDTO(Syn_Контрагент);
	
	ТипКодировки = "windows-1251";		
	ИмяФайлаЭД = ПолучитьИмяВременногоФайла("xml");
	Попытка
		//Определение типов XDTO
		ТипФайл						= Фабрика.Тип("http://synerdocs.ru/cardschemas/synerdocs_schet_opl.xsd", "Файл");
		ТипАдрес					= Фабрика.Тип("http://synerdocs.ru/cardschemas/synerdocs_schet_opl.xsd", "АдресТип");
		ТипАдресИно					= Фабрика.Тип("http://synerdocs.ru/cardschemas/synerdocs_schet_opl.xsd", "АдрИноТип");
		ТипАдресРФ					= Фабрика.Тип("http://synerdocs.ru/cardschemas/synerdocs_schet_opl.xsd", "АдрРФТип");
		ТипСвПродПок				= Фабрика.Тип("http://synerdocs.ru/cardschemas/synerdocs_schet_opl.xsd", "СвПродПокТип");
		ТипСумНДС					= Фабрика.Тип("http://synerdocs.ru/cardschemas/synerdocs_schet_opl.xsd", "СумНДСТип");
		ТипФИО						= Фабрика.Тип("http://synerdocs.ru/cardschemas/synerdocs_schet_opl.xsd", "ФИОТип");
		ТипБанкРекв					= Фабрика.Тип("http://synerdocs.ru/cardschemas/synerdocs_schet_opl.xsd", "БанкРеквТип");
		
		//Определение типов элементов XDTO
		ЭлементСвУчДокОбор			= ТипФайл.Свойства.Получить("СвУчДокОбор").Тип;
		ЭлементСвОЭДОтпр		= ЭлементСвУчДокОбор.Свойства.Получить("СвОЭДОтпр").Тип;
		ЭлементДокумент				= ТипФайл.Свойства.Получить("Документ").Тип;
		ЭлементСвСчОпл			= ЭлементДокумент.Свойства.Получить("СвСчОпл").Тип;
		ЭлементСвПрод		= ЭлементСвСчОпл.Свойства.Получить("СвПрод").Тип;
		ЭлементСвПокуп		= ЭлементСвСчОпл.Свойства.Получить("СвПокуп").Тип;
		ЭлементТаблСчОпл		= ЭлементДокумент.Свойства.Получить("ТаблСчОпл").Тип;
		ЭлементСведТов		= ЭлементТаблСчОпл.Свойства.Получить("СведТов").Тип;
		ЭлементВсегоОпл		= ЭлементТаблСчОпл.Свойства.Получить("ВсегоОпл").Тип;
		ЭлементПодписант		= ЭлементДокумент.Свойства.Получить("Подписант").Тип;
		ЭлементИП			= ЭлементПодписант.Свойства.Получить("ИП").Тип;
		ЭлементЮЛ			= ЭлементПодписант.Свойства.Получить("ЮЛ").Тип;
		
		//=========
		//Заполнение элементов, свойств и атрибутов XML
		//=========
		
		//Сведения об операторе ЭДО
		СвОЭДОтпр = Фабрика.Создать(ЭлементСвОЭДОтпр);
		СвОЭДОтпр.НаимОрг = SubjectInfo_ЭДО.Name;
		СвОЭДОтпр.ИННЮЛ = SubjectInfo_ЭДО.Inn;
		СвОЭДОтпр.ИдЭДО = ИдентификаторЭДО;
		
		//Счедения об участниках ЭДО	
		СвУчДокОбор = Фабрика.Создать(ЭлементСвУчДокОбор);
		СвУчДокОбор.СвОЭДОтпр = СвОЭДОтпр;
		СвУчДокОбор.ИдОтпр = ИдентификаторОтправителя;
		СвУчДокОбор.ИдПок = ИдентификаторПолучателя;
		
		//Сведения о документе
		СвСчОпл = Фабрика.Создать(ЭлементСвСчОпл);
		СвСчОпл.НомерСчОпл = ОбщегоНазначения.ПолучитьНомерНаПечать(Документ);
		СвСчОпл.ДатаСчОпл = Формат(Документ.Дата, "ДЛФ=Д");
		СвСчОпл.КодОКВ = КодОКВ(Документ.ВалютаДокумента.Код);
		//Сведения о продавце
		СвПрод = Фабрика.Создать(ТипСвПродПок);
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(ТипСвПродПок.Свойства.Получить("ИдСв").Тип);
		Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			//Юрлицо
			СвЮЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг = Документ.Организация.НаименованиеПолное;
			Если ЗначениеЗаполнено(Документ.Организация.ИНН) Тогда
				СвЮЛ.ИННЮЛ = Документ.Организация.ИНН;
			КонецЕсли;
			Если ЗначениеЗаполнено(Документ.Организация.КПП) Тогда
				СвЮЛ.КПП = Документ.Организация.КПП;
			КонецЕсли;
			ИдСв.СвЮЛ = СвЮЛ;
		Иначе
			//Физлицо (ИП)
			СвФЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Документ.Организация);
			Если ФИОИП = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			СвФЛ.ФИОИП = ФИОИП;
			
			ИдСв.СвФЛ = СвФЛ;

		КонецЕсли;
		СвПрод.ИдСв = ИдСв;
		//Адрес организации
		Адрес = Фабрика.Создать(ТипАдрес);
		Если Syn_Организация.IsForeignCompany Тогда
			//Иностранный адрес
			АдрИно = Фабрика.Создать(ТипАдресИно);
			АдрИно.КодСтр = Syn_Организация.LegalAddress.CountryCode;
			АдрИно.АдрТекст = Syn_Организация.LegalAddress.ForeignStreetAddress;
			Адрес.АдрИно = АдрИно;
		Иначе
			//Адрес РФ
			АдрРФ = Фабрика.Создать(ТипАдресРФ);
			АдрРФ.КодРегион = Syn_Организация.LegalAddress.RegionCode;
			Если ЗначениеЗаполнено(Syn_Организация.LegalAddress.PostalCode) Тогда
				АдрРФ.Индекс = Syn_Организация.LegalAddress.PostalCode;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Организация.LegalAddress.District) Тогда
				АдрРФ.Район = Syn_Организация.LegalAddress.District;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Организация.LegalAddress.City) Тогда
				АдрРФ.Город = Syn_Организация.LegalAddress.City;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Организация.LegalAddress.Locality) Тогда
				АдрРФ.НаселПункт = Syn_Организация.LegalAddress.Locality;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Организация.LegalAddress.Street) Тогда
				АдрРФ.Улица = Syn_Организация.LegalAddress.Street;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Организация.LegalAddress.House) Тогда
				АдрРФ.Дом = Syn_Организация.LegalAddress.House;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Организация.LegalAddress.Building) Тогда
				АдрРФ.Корпус = Syn_Организация.LegalAddress.Building;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Организация.LegalAddress.Apartment) Тогда
				АдрРФ.Кварт = Syn_Организация.LegalAddress.Apartment;
			КонецЕсли;
			Адрес.АдрРФ = АдрРФ;
		КонецЕсли;
		СвПрод.Адрес = Адрес;
		//Банковский счет продавца
		БСчет = Документ.СтруктурнаяЕдиница;
		Если ЗначениеЗаполнено(БСчет) Тогда
			БанкРекв = Фабрика.Создать(ТипБанкРекв);
			БанкРекв.НомерСчета = Документ.СтруктурнаяЕдиница.НомерСчета;
			СвБанк = Фабрика.Создать(БанкРекв.Тип().Свойства.Получить("СвБанк").Тип);
			СвБанк.БИК = БСчет.Банк.Код;
			Если ЗначениеЗаполнено(БСчет.Банк.Наименование) Тогда
				СвБанк.НаимБанк = БСчет.Банк.Наименование;
			КонецЕсли;
			Если ЗначениеЗаполнено(БСчет.Банк.КоррСчет) Тогда
				СвБанк.НомерСчета = БСчет.Банк.КоррСчет;
			КонецЕсли;
			БанкРекв.СвБанк = СвБанк;
			СвПрод.БанкРекв = БанкРекв;
		Иначе
			ОтправитьУведомлениеПользователю("В документе [" + Документ + "] не указан банковский счет получателя платежа!");
			Возврат Неопределено;
		КонецЕсли;
		СвСчОпл.СвПрод = СвПрод;
		//Сведения о покупателе (строки 6, 6а, 6б)
		СвПокуп = Фабрика.Создать(ТипСвПродПок);
		//Идентификационные сведения
		ИдСв = Фабрика.Создать(ТипСвПродПок.Свойства.Получить("ИдСв").Тип);
		Если Документ.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			//Юрлицо
			СвЮЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвЮЛ").Тип);
			СвЮЛ.НаимОрг = Документ.Контрагент.НаименованиеПолное;
			Если ЗначениеЗаполнено(Документ.Контрагент.ИНН) Тогда
				СвЮЛ.ИННЮЛ = Документ.Контрагент.ИНН;
			КонецЕсли;
			Если ЗначениеЗаполнено(Документ.Контрагент.КПП) Тогда
				СвЮЛ.КПП = Документ.Контрагент.КПП;
			КонецЕсли;
			ИдСв.СвЮЛ = СвЮЛ;
		Иначе
			//Физлицо (ИП)
			СвФЛ = Фабрика.Создать(ИдСв.Тип().Свойства.Получить("СвФЛ").Тип);
			Если ЗначениеЗаполнено(Документ.Контрагент.ИНН) Тогда
				СвФЛ.ИННФЛ = Документ.Контрагент.ИНН;
			КонецЕсли;
			
			ФИОИП = СоздатьОбъектФИОИзИП(Фабрика, ТипФИО, Документ.Контрагент);
			Если ФИОИП = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			СвФЛ.ФИОИП = ФИОИП;
			
			ИдСв.СвФЛ = СвФЛ;

		КонецЕсли;
		СвПокуп.ИдСв = ИдСв;
		//Адрес контрагента
		Адрес = Фабрика.Создать(ТипАдрес);
		Если Syn_Контрагент.IsForeignCompany Тогда
			//Иностранный адрес
			АдрИно = Фабрика.Создать(ТипАдресИно);
			АдрИно.КодСтр = Syn_Контрагент.LegalAddress.CountryCode;
			АдрИно.АдрТекст = Syn_Контрагент.LegalAddress.ForeignStreetAddress;
			Адрес.АдрИно = АдрИно;
		Иначе
			//Адрес РФ
			АдрРФ = Фабрика.Создать(ТипАдресРФ);
			АдрРФ.КодРегион = Syn_Контрагент.LegalAddress.RegionCode;
			Если ЗначениеЗаполнено(Syn_Контрагент.LegalAddress.PostalCode) Тогда
				АдрРФ.Индекс = Syn_Контрагент.LegalAddress.PostalCode;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Контрагент.LegalAddress.District) Тогда
				АдрРФ.Район = Syn_Контрагент.LegalAddress.District;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Контрагент.LegalAddress.City) Тогда
				АдрРФ.Город = Syn_Контрагент.LegalAddress.City;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Контрагент.LegalAddress.Locality) Тогда
				АдрРФ.НаселПункт = Syn_Контрагент.LegalAddress.Locality;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Контрагент.LegalAddress.Street) Тогда
				АдрРФ.Улица = Syn_Контрагент.LegalAddress.Street;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Контрагент.LegalAddress.House) Тогда
				АдрРФ.Дом = Syn_Контрагент.LegalAddress.House;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Контрагент.LegalAddress.Building) Тогда
				АдрРФ.Корпус = Syn_Контрагент.LegalAddress.Building;
			КонецЕсли;
			Если ЗначениеЗаполнено(Syn_Контрагент.LegalAddress.Apartment) Тогда
				АдрРФ.Кварт = Syn_Контрагент.LegalAddress.Apartment;
			КонецЕсли;
			Адрес.АдрРФ = АдрРФ;
		КонецЕсли;
		СвПокуп.Адрес = Адрес;
		СвСчОпл.СвПокуп = СвПокуп;
		
		ТаблСчОпл = Фабрика.Создать(ЭлементТаблСчОпл);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуПокупателюТовары.Номенклатура,
		|	СчетНаОплатуПокупателюТовары.Количество,
		|	СчетНаОплатуПокупателюТовары.Цена,
		|	СчетНаОплатуПокупателюТовары.Сумма,
		|	СчетНаОплатуПокупателюТовары.СтавкаНДС,
		|	СчетНаОплатуПокупателюТовары.СуммаНДС,
		|	СчетНаОплатуПокупателюТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ОКЕИ
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
		|ГДЕ
		|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетНаОплатуПокупателюУслуги.Номенклатура,
		|	СчетНаОплатуПокупателюУслуги.Количество,
		|	СчетНаОплатуПокупателюУслуги.Цена,
		|	СчетНаОплатуПокупателюУслуги.Сумма,
		|	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
		|	СчетНаОплатуПокупателюУслуги.СуммаНДС,
		|	СчетНаОплатуПокупателюУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
		|ГДЕ
		|	СчетНаОплатуПокупателюУслуги.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		НомерСтроки = 0;
		СтТовБезНДСВсего = 0;
		СтТовУчНалВсего = 0;
		СумНалВсего = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) Тогда
				НомерСтроки = НомерСтроки + 1;
				СведТов = Фабрика.Создать(ЭлементСведТов);
				НаименованиеТовараУслуги = СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.Наименование);
				НаименованиеТовараУслугиПолное = СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.НаименованиеПолное);
				Если НаименованиеТовараУслугиПолное = "" Тогда
					Если НаименованиеТовараУслуги = "" Тогда
						НаимТов = " ";
					Иначе
						НаимТов = НаименованиеТовараУслуги;
					КонецЕсли;
				Иначе
					НаимТов = НаименованиеТовараУслугиПолное;
				КонецЕсли;
				СведТов.НомСтр = Формат(НомерСтроки, "ЧГ=0");
				СведТов.НаимТов = НаимТов;
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура.Артикул) Тогда
					СведТов.Артикул = ВыборкаДетальныеЗаписи.Номенклатура.Артикул;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОКЕИ) Тогда
					СведТов.ОКЕИ_Тов = СокрЛП(ВыборкаДетальныеЗаписи.ОКЕИ);
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Количество) Тогда
					СведТов.КолТов = ВыборкаДетальныеЗаписи.Количество;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Цена) Тогда
					СведТов.ЦенаТов = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
				СведТов.СтТовУчНал = ?(Документ.СуммаВключаетНДС, ВыборкаДетальныеЗаписи.Сумма, ВыборкаДетальныеЗаписи.Сумма + ВыборкаДетальныеЗаписи.СуммаНДС);
				СведТов.СтТовБезНДС = ?(Документ.СуммаВключаетНДС, ВыборкаДетальныеЗаписи.Сумма - ВыборкаДетальныеЗаписи.СуммаНДС, ВыборкаДетальныеЗаписи.Сумма);
				
				Если Найти(ВыборкаДетальныеЗаписи.СтавкаНДС, "%") Тогда
					НалСтВел = СтрЗаменить(ВыборкаДетальныеЗаписи.СтавкаНДС, "%", "");
					Если Найти(НалСтВел,"/") Тогда
						НалСтВел = СтрЗаменить(НалСтВел," ","");
						НалСтТип = "дробь";
					Иначе
						НалСтТип = "процент";
					КонецЕсли;
				Иначе
					НалСтВел = "без НДС";
					НалСтТип = "текст";
				КонецЕсли;
				
				СведТов.НалСтВел = НалСтВел;
				СведТов.НалСтТип = НалСтТип;
				СведТов.СумНДС = ВыборкаДетальныеЗаписи.СуммаНДС;
				ТаблСчОпл.СведТов.Добавить(СведТов);
				СтТовБезНДСВсего = СтТовБезНДСВсего + СведТов.СтТовБезНДС;
				СтТовУчНалВсего = СтТовУчНалВсего + СведТов.СтТовУчНал;
			КонецЕсли;
		КонецЦикла;
		ВсегоОпл = Фабрика.Создать(ЭлементВсегоОпл);
		ВсегоОпл.СтТовБезНДСВсего = СтТовБезНДСВсего;
		ВсегоОпл.СтТовУчНалВсего = СтТовУчНалВсего;
		ВсегоОпл.СумНалВсего = СтТовУчНалВсего - СтТовБезНДСВсего;
		ТаблСчОпл.ВсегоОпл = ВсегоОпл;
		
		ДанныеПодписанта = ExchangeService.GetUserInfo(Токен,Syn_ЯщикОрганизации);
		
		Подписант = Фабрика.Создать(ЭлементПодписант);
		Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ИП = Фабрика.Создать(Подписант.Тип().Свойства.Получить("ИП").Тип);
			
			Если ЕстьРеквизитСправочника("ИндивидуальныйПредприниматель", МетаданныеСправочникаОрганизации) Тогда
				ИП.ИННФЛ = Документ.Организация.ИндивидуальныйПредприниматель.ИНН;
				Если ЗначениеЗаполнено(Документ.Организация.СвидетельствоСерияНомер) И ЗначениеЗаполнено(Документ.Организация.СвидетельствоДатавыдачи) Тогда
					СвГосРегИП = Документ.Организация.СвидетельствоСерияНомер + " от " + Формат(Документ.Организация.СвидетельствоДатавыдачи, "ДЛФ=Д");
				Иначе
					СвГосРегИП = Документ.Организация.ОГРН;
				КонецЕсли;
				ИП.СвГосРегИП = СвГосРегИП;
				ФИО = Фабрика.Создать(ТипФИО);
			
				ФИО.Фамилия = ДанныеПодписанта.LastName;
				ФИО.Имя = ДанныеПодписанта.FirstName;
				Если ЗначениеЗаполнено(ДанныеПодписанта.MiddleName) Тогда
					ФИО.Отчество = ДанныеПодписанта.MiddleName;
				КонецЕсли;
				ИП.ФИО = ФИО;
				Подписант.ИП = ИП;
			Иначе
				ИП.ИННФЛ = Документ.Организация.ИНН;
				
				Если ЗначениеЗаполнено(Документ.Организация.СвидетельствоСерияНомер) И ЗначениеЗаполнено(Документ.Организация.СвидетельствоДатавыдачи) Тогда
					СвГосРегИП = Документ.Организация.СвидетельствоСерияНомер + " от " + Формат(Документ.Организация.СвидетельствоДатавыдачи, "ДЛФ=Д");
				Иначе
					СвГосРегИП = Документ.Организация.ОГРН;
				КонецЕсли;
				ИП.СвГосРегИП = СвГосРегИП;
				ФИО = Фабрика.Создать(ТипФИО);
				
				ФИО.Фамилия = ДанныеПодписанта.LastName;
				ФИО.Имя = ДанныеПодписанта.FirstName;
				Если ЗначениеЗаполнено(ДанныеПодписанта.MiddleName) Тогда
					ФИО.Отчество = ДанныеПодписанта.MiddleName;
				КонецЕсли;
				ИП.ФИО = ФИО;
				Подписант.ИП = ИП;

			КонецЕсли;
		Иначе
			ЮЛ = Фабрика.Создать(Подписант.Тип().Свойства.Получить("ЮЛ").Тип);
			ЮЛ.ИННЮЛ = Документ.Организация.ИНН;
			Если ЗначениеЗаполнено(ДанныеПодписанта.Position) Тогда
				ЮЛ.Должн = ДанныеПодписанта.Position;
			КонецЕсли;
			ФИО = Фабрика.Создать(ТипФИО);
			ФИО.Фамилия = ДанныеПодписанта.LastName;
			ФИО.Имя = ДанныеПодписанта.FirstName;
			Если ЗначениеЗаполнено(ДанныеПодписанта.MiddleName) Тогда
				ФИО.Отчество = ДанныеПодписанта.MiddleName;
			КонецЕсли;
			ЮЛ.ФИО = ФИО;
			Подписант.ЮЛ = ЮЛ;
		КонецЕсли;
		
		ДокументXDTO = Фабрика.Создать(ЭлементДокумент);
		ДокументXDTO.СвСчОпл = СвСчОпл;
		ДокументXDTO.Подписант = Подписант;
		ДокументXDTO.ТаблСчОпл = ТаблСчОпл;
		
		Файл = Фабрика.Создать(ТипФайл);
		Файл.ВерсПрог = "Synerdocs 1С 1.8.1";
		Файл.СвУчДокОбор = СвУчДокОбор;
		Файл.Документ = ДокументXDTO;
		
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(ИмяФайлаЭД, ТипКодировки);
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		Фабрика.ЗаписатьXML(НоваяЗаписьXML, Файл);
		НоваяЗаписьXML.Закрыть();
		
		КарточкаЭД = Новый ДвоичныеДанные(ИмяФайлаЭД);
		Возврат КарточкаЭД;
		
		//ЭлементДокумент.ТаблСчОпл = ТаблСчОпл;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ОтправитьУведомлениеПользователю(ОписаниеОшибкиСтрокой);
	КонецПопытки;
	
КонецФункции

// Функция формирует структуру для заполнения уступочной надписи в зависимости от типа документа
// Параметры: Документ - Документ.Ссылка
// Возвращаемое значение: Структура
//
Функция ЗаполнитьСтруктуруУступочнойНадписи(Документ, Фактор) Экспорт
	
	СтруктураНастроек = МенеджерНастроек.НастройкиИР();
	
	ШаблонУступочнойНадписи = СтруктураНастроек.ШаблонУступочнойНадписи;

	ФакторНаим 	= Фактор.НаименованиеПолное;
	ФакторИНН 	= Фактор.ИНН;
	ФакторКПП 	= Фактор.КПП;
	
	Если НЕ ЭтоБГУ Тогда
		ФакторНомерСчет 	= ?(ЗначениеЗаполнено(Фактор.ОсновнойБанковскийСчет), Фактор.ОсновнойБанковскийСчет.НомерСчета, Неопределено);
		БанкФактора 		= ?(ЗначениеЗаполнено(Фактор.ОсновнойБанковскийСчет), Фактор.ОсновнойБанковскийСчет.Банк, Неопределено);
		ФакторКоррСчет 		= ?(ЗначениеЗаполнено(БанкФактора), БанкФактора.КоррСчет, Неопределено);
		ФакторНаимБанк 		= ?(ЗначениеЗаполнено(Фактор.ОсновнойБанковскийСчет), БанкФактора.Наименование, Неопределено);
		ФакторБИК 			= ?(ЗначениеЗаполнено(Фактор.ОсновнойБанковскийСчет), БанкФактора.Код, Неопределено);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеИКазначейскиеСчета.Ссылка
		|ИЗ
		|	Справочник.БанковскиеИКазначейскиеСчета КАК БанковскиеИКазначейскиеСчета
		|ГДЕ
		|	БанковскиеИКазначейскиеСчета.ПометкаУдаления = ЛОЖЬ
		|	И БанковскиеИКазначейскиеСчета.Закрыт = ЛОЖЬ
		|	И БанковскиеИКазначейскиеСчета.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Фактор);
		Результат = Запрос.Выполнить().Выбрать();
		ЛицевойСчет = ?(Результат.Следующий(), Результат.Ссылка, Неопределено);
		
		Если НЕ ЛицевойСчет = Неопределено Тогда
			ФакторНомерСчет 	= ?(ЗначениеЗаполнено(ЛицевойСчет.Код), СокрЛП(ЛицевойСчет.Код), Неопределено);
			БанкФактора 		= ?(ЗначениеЗаполнено(ЛицевойСчет.Код), ЛицевойСчет.КассовыйОрган, Неопределено);
			ФакторКоррСчет 		= ?(ЗначениеЗаполнено(БанкФактора), БанкФактора.КоррСчет, Неопределено);
			ФакторНаимБанк 		= ?(ЗначениеЗаполнено(БанкФактора), БанкФактора.Наименование, Неопределено);
			ФакторБИК			= ?(ЗначениеЗаполнено(БанкФактора), БанкФактора.Код, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	
	ФакторТел 	= ПолучитьТелефон(Фактор);
	Адрес 		= ПолучитьАдресКонтрагента(Фактор, Неопределено, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	Если НЕ Адрес = Неопределено Тогда
		//адрес РФ
		Если Адрес.АдресРФ Тогда
			
			Регион 	= ПолучитьПредставлениеРегиона(Адрес.КодРегион);
			Представление = "" + "Россия" +
			?(Адрес.Свойство("Индекс"), ", " + Адрес.Индекс, "") +
			?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
			?(Адрес.Свойство("Район"), ", " + Адрес.Район, "") +
			?(Адрес.Свойство("Город"), ", " + Адрес.Город, "") + 
			?(Адрес.Свойство("НаселПункт"), ", " + Адрес.НаселПункт, "") + 
			?(Адрес.Свойство("Улица"), ", " + Адрес.Улица, "") + 
			?(Адрес.Свойство("Дом"), ", дом " + Адрес.Дом, "") + 
			?(Адрес.Свойство("Корпус"), ", корпус " + Адрес.Корпус, "") + 
			?(Адрес.Свойство("Кварт"), ", кв. " + Адрес.Кварт, "");
			
			ПредставлениеАдреса = Представление;
			//адрес Ино
		Иначе 
			ПредставлениеАдреса = Адрес.АдрТекст;
		КонецЕсли;
		
	КонецЕсли;

	ФакторАдрес = ?(НЕ Адрес = Неопределено, ПредставлениеАдреса, Неопределено);
	
	//Замена атрибутов шаблона значениями
	ТекстУступочнойНадписи = СтрЗаменить(ШаблонУступочнойНадписи, "@ФакторНаимБанк", ФакторНаимБанк);
	ТекстУступочнойНадписи = СтрЗаменить(ТекстУступочнойНадписи, "@ФакторНаим", ФакторНаим);
	ТекстУступочнойНадписи = СтрЗаменить(ТекстУступочнойНадписи, "@ФакторИНН", ФакторИНН);
	ТекстУступочнойНадписи = СтрЗаменить(ТекстУступочнойНадписи, "@ФакторКПП", ФакторКПП);
	ТекстУступочнойНадписи = СтрЗаменить(ТекстУступочнойНадписи, "@ФакторНомерСчет", ФакторНомерСчет);
	ТекстУступочнойНадписи = СтрЗаменить(ТекстУступочнойНадписи, "@ФакторКоррСчет", ФакторКоррСчет);
	ТекстУступочнойНадписи = СтрЗаменить(ТекстУступочнойНадписи, "@ФакторБИК", ФакторБИК);
	ТекстУступочнойНадписи = СтрЗаменить(ТекстУступочнойНадписи, "@ФакторТел", ФакторТел);
	ТекстУступочнойНадписи = СтрЗаменить(ТекстУступочнойНадписи, "@ФакторАдрес", ФакторАдрес);
		
	// Возвращаемамя структура
	СтруктураУступочнойНадписи = Новый Структура;
	
	СтруктураУступочнойНадписи.Вставить("ФакторНаим", ?(ЗначениеЗаполнено(ФакторНаим), ФакторНаим, Неопределено));
	СтруктураУступочнойНадписи.Вставить("ФакторИНН", ?(ЗначениеЗаполнено(ФакторИНН), ФакторИНН, Неопределено));
	СтруктураУступочнойНадписи.Вставить("ФакторКПП", ?(ЗначениеЗаполнено(ФакторКПП), ФакторКПП, Неопределено));
	СтруктураУступочнойНадписи.Вставить("ФакторНомерСчет", ?(ЗначениеЗаполнено(ФакторНомерСчет), ФакторНомерСчет, Неопределено));
	СтруктураУступочнойНадписи.Вставить("ФакторКоррСчет", ?(ЗначениеЗаполнено(ФакторКоррСчет), ФакторКоррСчет, Неопределено));
	СтруктураУступочнойНадписи.Вставить("ФакторНаимБанк", ?(ЗначениеЗаполнено(ФакторНаимБанк), ФакторНаимБанк, Неопределено));
	СтруктураУступочнойНадписи.Вставить("ФакторБИК", ?(ЗначениеЗаполнено(ФакторБИК), ФакторБИК, Неопределено));
	СтруктураУступочнойНадписи.Вставить("ФакторТел", ?(ЗначениеЗаполнено(ФакторТел), ФакторТел, Неопределено));
	СтруктураУступочнойНадписи.Вставить("ФакторАдрес", ?(ЗначениеЗаполнено(ФакторАдрес), ФакторАдрес, Неопределено));
	СтруктураУступочнойНадписи.Вставить("ШаблонУступочнойНадписи", ШаблонУступочнойНадписи);
	СтруктураУступочнойНадписи.Вставить("ТекстУступочнойНадписи", ТекстУступочнойНадписи);
	
	Возврат СтруктураУступочнойНадписи;	
		
КонецФункции

//Разбор электронных документов (XML)

// Функция определяет версию формата счета-фактуры и вызывает соответствующий парсер
Функция РазобратьЭД_СчетФактура(Syn_Document) Экспорт
	
	Попытка
		Если Syn_Document.FileSize > 1000000 Тогда
			Документ_ДвоичныеДанные = ExchangeService.GetDocumentContent(Токен, Syn_ЯщикОрганизации, Syn_Document.Id);
		Иначе
			Документ_ДвоичныеДанные = Syn_Document.Content;
		КонецЕсли;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		ОтправитьУведомлениеПользователю("Ошибка получения контента (содержимого) ЭД: " + ТекстОшибкиSynerdocs);
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	//Проверим карточку (уступочная надпись)
	Если НЕ Syn_Document.Card = Неопределено Тогда
		ВрФайлКарточки 				= ПолучитьИмяВременногоФайла("xml");
		Карточка_ДвоичныыеДанные 	= Syn_Document.Card;
		Карточка_ДвоичныыеДанные.Записать(ВрФайлКарточки);
		ЕстьКарточка = Истина;
	Иначе 
		ЕстьКарточка = Ложь;
	КонецЕсли;
		
	ВрФайлЭД = ПолучитьИмяВременногоФайла("xml");
	Документ_ДвоичныеДанные.Записать(ВрФайлЭД);
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ВрФайлЭД);
	СтрокаПоиска = Текст.ПолучитьТекст();
	
	Если НЕ Найти(СтрокаПоиска, "ВерсФорм=""5.02""") = 0 Тогда
		//Парсим по новой схеме
		ЭтоНовыйФормат = Истина;
	Иначе
		//Парсим по старой схеме
		ЭтоНовыйФормат = Ложь;
	КонецЕсли;
	
	УстановитьПространствоИмен(ВрФайлЭД, "SFAKT");
	
	Если НЕ ЭтоНовыйФормат Тогда
		Возврат РазобратьЭД_СчетФактура_01(ВрФайлЭД);
	Иначе		
		Возврат РазобратьЭД_СчетФактура_02(ВрФайлЭД, ?(ЕстьКарточка, ВрФайлКарточки, Неопределено));
	КонецЕсли;			
	
КонецФункции

// Функция определяет версию формата торг-12 и вызывает соответствующий парсер
Функция РазобратьЭД_Торг12(Syn_Document) Экспорт
	
	Попытка
		Если Syn_Document.FileSize > 1000000 Тогда
			Документ_ДвоичныеДанные = ExchangeService.GetDocumentContent(Токен, Syn_ЯщикОрганизации, Syn_Document.Id);
		Иначе
			Документ_ДвоичныеДанные = Syn_Document.Content;
		КонецЕсли;
		
		FullDocumentInfo		= ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, Syn_Document.Id,);
		Syn_СлужебныеДокументы 	= FullDocumentInfo.ServiceDocuments;
		
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения контента (содержимого) ЭД: " + ТекстОшибкиSynerdocs);
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	//находим титул покупателя в случае если торг-12 подписан	
	Если НЕ Syn_СлужебныеДокументы = Неопределено Тогда
		Для Каждого СервисныйДокумент Из Syn_СлужебныеДокументы.ServiceDocument Цикл
			Если СервисныйДокумент.DocumentType = "WaybillBuyer" Тогда
				
				Попытка
					ТитулПокупателя_ДвоичныеДанные = ?(СервисныйДокумент.FileSize > 1000000, 
					ExchangeService.GetDocumentContent(Токен, Syn_ЯщикОрганизации, СервисныйДокумент.Id),
					СервисныйДокумент.Content);
				Исключение
					ОписаниеОшибкиСтрокой = ОписаниеОшибки();
					ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
					ОтправитьУведомлениеПользователю("Ошибка получения контента (содержимого) ЭД: " + ТекстОшибкиSynerdocs);
					Возврат НЕОПРЕДЕЛЕНО;
				КонецПопытки;							
				
				ВрФайлТитул = ПолучитьИмяВременногоФайла("xml");
				ТитулПокупателя_ДвоичныеДанные.Записать(ВрФайлТитул);
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВрФайлТитул = Неопределено;
	КонецЕсли;
	
	ВрФайлЭД = ПолучитьИмяВременногоФайла("xml");
	Документ_ДвоичныеДанные.Записать(ВрФайлЭД);
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ВрФайлЭД);
	СтрокаПоиска = Текст.ПолучитьТекст();
	
	Если НЕ Найти(СтрокаПоиска, "СвОЭДОтпрСФ") = 0 Тогда
		//Парсим по новой схеме
		
		ЭтоНовыйФормат = Истина;
		
	Иначе
		//Парсим по старой схеме
		
		ЭтоНовыйФормат = Ложь;
		
	КонецЕсли;
	
	УстановитьПространствоИмен(ВрФайлЭД, "OTORG12");
	
	// Дальше передаем отредактированный временный файл						
	Возврат РазобратьЭД_ТОРГ12_02(ВрФайлЭД, ВрФайлТитул, ЭтоНовыйФормат);
	
КонецФункции

//Функция разбирает XML-файл (контент) документа с типом "Счет-фактура" и возвращает данные в виде структуры
//
// Параметры:
//  Документ_ДвоичныеДанные: Двоичные данные документа
//
// Возвращаемое значение:
//	Структура: структурированные данные, полученные из XML
//
Функция РазобратьЭД_СчетФактура_01(ВрФайл)
	
	Фабрика = СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("ON_SFAKT_1_897_01_05_01_03").ПолучитьТекст());
	
	НовыйЧтениеXML = Новый ЧтениеXML;
	НовыйЧтениеXML.ОткрытьФайл(ВрФайл);
	
	//Создаем объект и закрываем xml
	ТипОбъектаXDTO = Фабрика.Тип("SFAKT", "Файл");
	ОбъектXDTO = Фабрика.ПрочитатьXML(НовыйЧтениеXML, ТипОбъектаXDTO);
	НовыйЧтениеXML.Закрыть();
	УдалитьФайлы(ВрФайл);
	
	Док 		= ОбъектXDTO.Документ;
	СвСчФакт 	= Док.СвСчФакт;
	СвПрод		= СвСчФакт.СвПрод;
	ГрузОт		= СвСчФакт.ГрузОт;
	ГрузПолуч	= СвСчФакт.ГрузПолуч;
	СвПокуп		= СвСчФакт.СвПокуп;	
	СведТов		= Док.ТаблСчФакт.СведТов;
	ВсегоОпл	= Док.ТаблСчФакт.ВсегоОпл;
	Подписант	= Док.Подписант;
	
	ТЗ_Товары = Новый ТаблицаЗначений;
	ТЗ_Товары.Колонки.Добавить("НомСтр");
	ТЗ_Товары.Колонки.Добавить("НаимТов");
	ТЗ_Товары.Колонки.Добавить("ОКЕИ_Тов");
	ТЗ_Товары.Колонки.Добавить("КолТов");
	ТЗ_Товары.Колонки.Добавить("ЦенаТов");
	ТЗ_Товары.Колонки.Добавить("СтТовБезНДС");
	ТЗ_Товары.Колонки.Добавить("СтТовУчНал");
	ТЗ_Товары.Колонки.Добавить("СумАкциз");
	ТЗ_Товары.Колонки.Добавить("НалСтВел");
	ТЗ_Товары.Колонки.Добавить("НалСтТип");
	ТЗ_Товары.Колонки.Добавить("СумНДС");
	ТЗ_Товары.Колонки.Добавить("КодПроисх");
	ТЗ_Товары.Колонки.Добавить("НомерТД");
	ТЗ_Товары.Колонки.Добавить("НалСт");
	
	ТЗ_ПРД = Новый ТаблицаЗначений;
	ТЗ_ПРД.Колонки.Добавить("НомерПРД");
	ТЗ_ПРД.Колонки.Добавить("ДатаПРД");
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Номер");
	ДанныеДляПечати.Вставить("Дата");
	ДанныеДляПечати.Вставить("Исправление", Ложь);
	ДанныеДляПечати.Вставить("ИсправлениеСФ_Номер");
	ДанныеДляПечати.Вставить("ИсправлениеСФ_Дата");
	ДанныеДляПечати.Вставить("Поставщик");
	ДанныеДляПечати.Вставить("Поставщик_Адрес");
	ДанныеДляПечати.Вставить("Поставщик_ИНН");
	ДанныеДляПечати.Вставить("Поставщик_КПП");
	ДанныеДляПечати.Вставить("Грузоотправитель");
	ДанныеДляПечати.Вставить("Грузоотправитель_Адрес");
	ДанныеДляПечати.Вставить("Грузополучатель");
	ДанныеДляПечати.Вставить("Грузополучатель_Адрес");
	ДанныеДляПечати.Вставить("ТЗ_ПРД", ТЗ_ПРД);
	ДанныеДляПечати.Вставить("Покупатель");
	ДанныеДляПечати.Вставить("Покупатель_Адрес");
	ДанныеДляПечати.Вставить("Покупатель_ИНН");
	ДанныеДляПечати.Вставить("Покупатель_КПП");
	ДанныеДляПечати.Вставить("КодВалюты");
	ДанныеДляПечати.Вставить("ТЗ_Товары", ТЗ_Товары);
	ДанныеДляПечати.Вставить("СуммаВсегоБезНДС");
	ДанныеДляПечати.Вставить("ВсегоНДС");
	ДанныеДляПечати.Вставить("СуммаВсегоСНДС");
	ДанныеДляПечати.Вставить("ПодписантЮЛ");
	ДанныеДляПечати.Вставить("ПодписантИП");
	ДанныеДляПечати.Вставить("Подписант_ИНН");
	ДанныеДляПечати.Вставить("Подписант_Должность");
	ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации");
	
	
	ДанныеДляПечати.Вставить("Номер", СвСчФакт.НомерСчФ);
	ДанныеДляПечати.Вставить("Дата", СвСчФакт.ДатаСчФ);
	ДанныеДляПечати.Вставить("КодВалюты", СвСчФакт.КодОКВ);
	//Это исправление
	Если НЕ СвСчФакт.ИспрСчФ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Исправление", Истина);
		ДанныеДляПечати.Вставить("ИсправлениеСФ_Номер", СвСчФакт.ИспрСчФ.НомИспрСчФ);
		ДанныеДляПечати.Вставить("ИсправлениеСФ_Дата", СвСчФакт.ИспрСчФ.ДатаИспрСчФ);
	КонецЕсли;
	
	//Поставщик
	ИдСв = СвПрод.ИдСв;
	Если НЕ ИдСв.СвЮЛ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Поставщик", СвПрод.ИдСв.СвЮЛ.НаимОрг);
		ДанныеДляПечати.Вставить("Поставщик_ИНН", СвПрод.ИдСв.СвЮЛ.ИННЮЛ);
		ДанныеДляПечати.Вставить("Поставщик_КПП", СвПрод.ИдСв.СвЮЛ.КПП);
	Иначе
		ДанныеДляПечати.Вставить("Поставщик", СвПрод.ИдСв.СвФЛ.ФИОИП.Фамилия + " " + СвПрод.ИдСв.СвФЛ.ФИОИП.Имя + " " + СвПрод.ИдСв.СвФЛ.ФИОИП.Отчество);
		ДанныеДляПечати.Вставить("Поставщик_ИНН", СвПрод.ИдСв.СвФЛ.ИННФЛ);
	КонецЕсли;
	
	Если НЕ СвПрод.Адрес = Неопределено Тогда
		//адрес РФ
		Если НЕ СвПрод.Адрес.АдрРФ = Неопределено Тогда
			АдрРФ 	= СвПрод.Адрес.АдрРФ;
			Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
			Представление = "" + "Россия" +
			?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
			?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
			?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
			?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
			?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
			ДанныеДляПечати.Вставить("Поставщик_Адрес", Представление);
			//адрес Ино
		Иначе 
			ДанныеДляПечати.Вставить("Поставщик_Адрес",  ГрузОт.ГрузОтпр.Адрес.АдрИно.АдрТекст);
		КонецЕсли;
	КонецЕсли;
	
	//Грузоотправитель
	Если НЕ ГрузОт = Неопределено Тогда
		Если НЕ ГрузОт.ГрузОтпр = Неопределено Тогда
			// ИП
			Если НЕ ГрузОт.ГрузОтпр.НаимГОП.ФИОИП = Неопределено Тогда
				ФИОИП = ГрузОт.ГрузОтпр.НаимГОП.ФИОИП;
				ДанныеДляПечати.Вставить("Грузоотправитель", ФИОИП.Фамилия + " " + ФИОИП.Имя + " " + ФИОИП.Отчество);
			Иначе
				ДанныеДляПечати.Вставить("Грузоотправитель", ГрузОт.ГрузОтпр.НаимГОП.НаимОрг);
			КонецЕсли;
			//Адрес
			Если НЕ ГрузОт.ГрузОтпр.Адрес = Неопределено Тогда
				//адрес РФ
				Если НЕ ГрузОт.ГрузОтпр.Адрес.АдрРФ = Неопределено Тогда
					АдрРФ 	= ГрузОт.ГрузОтпр.Адрес.АдрРФ;
					Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
					Представление = "" + "Россия" +
					?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
					?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
					?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
					?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
					?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
					?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
					?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
					?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
					?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
					ДанныеДляПечати.Вставить("Грузоотправитель_Адрес", Представление);
					//адрес Ино
				Иначе 
					ДанныеДляПечати.Вставить("Грузоотправитель_Адрес",  ГрузОт.ГрузОтпр.Адрес.АдрИно.АдрТекст);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДанныеДляПечати.Вставить("Грузоотправитель", "он же");
		КонецЕсли;
	КонецЕсли;
	
	//Грузополучатель
	Если НЕ ГрузПолуч = Неопределено Тогда
		Если НЕ ГрузПолуч.НаимГОП.ФИОИП = Неопределено Тогда
			ФИОИП = ГрузПолуч.НаимГОП.ФИОИП;
			ДанныеДляПечати.Вставить("Грузополучатель", ФИОИП.Фамилия + " " + ФИОИП.Имя + " " + ФИОИП.Отчество);
		Иначе
			ДанныеДляПечати.Вставить("Грузополучатель", ГрузПолуч.НаимГОП.НаимОрг);
		КонецЕсли;
		//Адрес	
		Если НЕ ГрузПолуч.Адрес = Неопределено Тогда
			//адрес РФ
			Если НЕ ГрузПолуч.Адрес.АдрРФ = Неопределено Тогда
				АдрРФ 	= ГрузПолуч.Адрес.АдрРФ;
				Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
				Представление = "" + "Россия" +
				?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
				?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
				?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
				?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
				?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
				ДанныеДляПечати.Вставить("Грузополучатель_Адрес", Представление);
				//адрес Ино
			Иначе 
				ДанныеДляПечати.Вставить("Грузополучатель_Адрес",  ГрузПолуч.Адрес.АдрИно.АдрТекст);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Покупатель
	ИдСв = СвПокуп.ИдСв;
	
	Если НЕ ИдСв.СвЮЛ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Покупатель", ИдСв.СвЮЛ.НаимОрг);	
		ДанныеДляПечати.Вставить("Покупатель_ИНН", ИдСв.СвЮЛ.ИННЮЛ);
		ДанныеДляПечати.Вставить("Покупатель_КПП", ИдСв.СвЮЛ.КПП);
	Иначе
		ФИОИП = ИдСв.СвФЛ.ФИОИП;
		ДанныеДляПечати.Вставить("Покупатель", ФИОИП.Фамилия + " " + ФИОИП.Имя + " " + ФИОИП.Отчество);
		ДанныеДляПечати.Вставить("Покупатель_ИНН", ИдСв.СвФЛ.ИННФЛ);
	КонецЕсли;
	//Адрес	
	Если НЕ СвПокуп.Адрес = Неопределено Тогда
		//адрес РФ
		Если НЕ СвПокуп.Адрес.АдрРФ = Неопределено Тогда
			АдрРФ 	= СвПокуп.Адрес.АдрРФ;
			Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
			Представление = "" + "Россия" +
			?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
			?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
			?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
			?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
			?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
			ДанныеДляПечати.Вставить("Покупатель_Адрес", Представление);
			//адрес Ино
		Иначе 
			ДанныеДляПечати.Вставить("Покупатель_Адрес",  СвПокуп.Адрес.АдрИно.АдрТекст);
		КонецЕсли;
	КонецЕсли;
	
	// Табличные части
	// Платежно-расчетные документы
	Для Каждого Элемент	Из СвСчФакт.СвПРД Цикл
		НовСтр = ТЗ_ПРД.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Элемент);		
	КонецЦикла;
	
	//Товары
	Для Каждого Элемент Из СведТов Цикл
		НовСтр = ТЗ_Товары.Добавить();
		НовСтр.НомСтр 		= Элемент.НомСтр;
		НовСтр.НаимТов  	= Элемент.НаимТов;
		НовСтр.ОКЕИ_Тов 	= Элемент.ОКЕИ_Тов;
		НовСтр.КолТов		= Элемент.КолТов;
		НовСтр.ЦенаТов		= Элемент.ЦенаТов;
		НовСтр.СтТовБезНДС	= Элемент.СтТовБезНДС;
		НовСтр.СтТовУчНал 	= Элемент.СтТовУчНал;
		НовСтр.СумАкциз		= Элемент.Акциз.СумАкциз;
		НовСтр.НалСтВел 	= Элемент.НалСт.НалСтВел;
		НовСтр.НалСтТип 	= Элемент.НалСт.НалСтТип;
		НовСтр.СумНДС 		= Элемент.СумНал.СумНДС;
		НовСтр.НалСт 		= Элемент.НалСт.НалСтВел;
		
		Для Каждого Элем Из Элемент.КодПроисх Цикл
			НовСтр.КодПроисх = Элем;	
		КонецЦикла;
		
		Для Каждого Элем Из Элемент.НомерТД Цикл
			НовСтр.НомерТД = Элем;	
		КонецЦикла;
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("СуммаВсегоБезНДС", ВсегоОпл.СтТовБезНДСВсего);
	ДанныеДляПечати.Вставить("СуммаВсегоСНДС", ВсегоОпл.СтТовУчНалВсего);
	ДанныеДляПечати.Вставить("ВсегоНДС", ?(НЕ ВсегоОпл.СумНалВсего.СумНДС = Неопределено, ВсегоОпл.СумНалВсего.СумНДС, ВсегоОпл.СумНалВсего.БезНДС));
	
	Если НЕ Подписант.ИП = Неопределено Тогда
		ФИО = Подписант.ИП.ФИО;
		ДанныеДляПечати.Вставить("ПодписантИП", ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
		ДанныеДляПечати.Вставить("Подписант_ИНН", Подписант.ИП.ИННФЛ);
		ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации", Подписант.ИП.СвГосРегИП);
	Иначе
		ФИО = Подписант.ЮЛ.ФИО;
		ДанныеДляПечати.Вставить("ПодписантЮЛ", ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
		ДанныеДляПечати.Вставить("Подписант_ИНН", Подписант.ЮЛ.ИННЮЛ);
		ДанныеДляПечати.Вставить("Подписант_Должность", Подписант.ЮЛ.Должн);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТЗ_Товары", ТЗ_Товары);
	ДанныеДляПечати.Вставить("ТЗ_ПРД", ТЗ_ПРД);
	
	Если Организация.ИНН = ДанныеДляПечати.Поставщик_ИНН Тогда
		// Исходящий
		ДанныеДляПечати.Вставить("флВходящийДок", Ложь);
	Иначе
		// Входящий
		ДанныеДляПечати.Вставить("флВходящийДок", Истина);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ВидДокумента", "СчФ");
	Возврат ДанныеДляПечати;
	
КонецФункции

//Функция разбирает XML-файл (контент) документа с типом "Счет-фактура" и возвращает данные в виде структуры
//
// Параметры:
//  Документ_ДвоичныеДанные: Двоичные данные документа
//
// Возвращаемое значение:
//	Структура: структурированные данные, полученные из XML
//
Функция РазобратьЭД_СчетФактура_02(ВрФайл, ВрФайлКарточки = Неопределено, ЭтоПревью = Ложь) Экспорт 
	
	Фабрика = СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("ON_SFAKT_1_897_01_05_02_01").ПолучитьТекст());
	
	НовыйЧтениеXML = Новый ЧтениеXML;
	НовыйЧтениеXML.ОткрытьФайл(ВрФайл);
	
	//Создаем объект и закрываем xml
	ТипОбъектаXDTO = Фабрика.Тип("SFAKT", "Файл");
	ОбъектXDTO = Фабрика.ПрочитатьXML(НовыйЧтениеXML, ТипОбъектаXDTO);
	НовыйЧтениеXML.Закрыть();
	УдалитьФайлы(ВрФайл);
	
	Док 		= ОбъектXDTO.Документ;
	СвСчФакт 	= Док.СвСчФакт;
	СвПрод		= СвСчФакт.СвПрод;
	ГрузОт		= СвСчФакт.ГрузОт;
	ГрузПолуч	= СвСчФакт.ГрузПолуч;
	СвПокуп		= СвСчФакт.СвПокуп;	
	СведТов		= Док.ТаблСчФакт.СведТов;
	ВсегоОпл	= Док.ТаблСчФакт.ВсегоОпл;
	Подписант	= Док.Подписант;
	
	ТЗ_Товары = Новый ТаблицаЗначений;
	ТЗ_Товары.Колонки.Добавить("НомСтр");
	ТЗ_Товары.Колонки.Добавить("НаимТов");
	ТЗ_Товары.Колонки.Добавить("ОКЕИ_Тов");
	ТЗ_Товары.Колонки.Добавить("КолТов");
	ТЗ_Товары.Колонки.Добавить("ЦенаТов");
	ТЗ_Товары.Колонки.Добавить("СтТовБезНДС");
	ТЗ_Товары.Колонки.Добавить("СтТовУчНал");
	ТЗ_Товары.Колонки.Добавить("СумАкциз");
	ТЗ_Товары.Колонки.Добавить("НалСтВел");
	ТЗ_Товары.Колонки.Добавить("НалСтТип");
	ТЗ_Товары.Колонки.Добавить("СумНДС");
	ТЗ_Товары.Колонки.Добавить("КодПроисх");
	ТЗ_Товары.Колонки.Добавить("НомерТД");
	ТЗ_Товары.Колонки.Добавить("НалСт");
	
	ТЗ_ПРД = Новый ТаблицаЗначений;
	ТЗ_ПРД.Колонки.Добавить("НомерПРД");
	ТЗ_ПРД.Колонки.Добавить("ДатаПРД");
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("УступочнаяНадпись");
	ДанныеДляПечати.Вставить("Номер");
	ДанныеДляПечати.Вставить("Дата");
	ДанныеДляПечати.Вставить("Исправление", Ложь);
	ДанныеДляПечати.Вставить("ИсправлениеСФ_Номер");
	ДанныеДляПечати.Вставить("ИсправлениеСФ_Дата");
	ДанныеДляПечати.Вставить("Поставщик");
	ДанныеДляПечати.Вставить("Поставщик_Адрес");
	ДанныеДляПечати.Вставить("Поставщик_ИНН");
	ДанныеДляПечати.Вставить("Поставщик_КПП");
	ДанныеДляПечати.Вставить("Грузоотправитель");
	ДанныеДляПечати.Вставить("Грузоотправитель_Адрес");
	ДанныеДляПечати.Вставить("Грузополучатель");
	ДанныеДляПечати.Вставить("Грузополучатель_Адрес");
	ДанныеДляПечати.Вставить("ТЗ_ПРД", ТЗ_ПРД);
	ДанныеДляПечати.Вставить("Покупатель");
	ДанныеДляПечати.Вставить("Покупатель_Адрес");
	ДанныеДляПечати.Вставить("Покупатель_ИНН");
	ДанныеДляПечати.Вставить("Покупатель_КПП");
	ДанныеДляПечати.Вставить("КодВалюты");
	ДанныеДляПечати.Вставить("ТЗ_Товары", ТЗ_Товары);
	ДанныеДляПечати.Вставить("СуммаВсегоБезНДС");
	ДанныеДляПечати.Вставить("ВсегоНДС");
	ДанныеДляПечати.Вставить("СуммаВсегоСНДС");
	ДанныеДляПечати.Вставить("ПодписантЮЛ");
	ДанныеДляПечати.Вставить("ПодписантИП");
	ДанныеДляПечати.Вставить("Подписант_ИНН");
	ДанныеДляПечати.Вставить("Подписант_Должность");
	ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации");
	ДанныеДляПечати.Вставить("УступочнаяНадпись");
	
	//Распарсим уступочную надпись
	Если НЕ ВрФайлКарточки = Неопределено Тогда
		ФабрикаКарточки = СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("cession_card_v1").ПолучитьТекст());
		НовыйЧтениеXML 	= Новый ЧтениеXML;
		НовыйЧтениеXML.ОткрытьФайл(ВрФайлКарточки);
		
		ОбъектXDTOКарточки = ФабрикаКарточки.ПрочитатьXML(НовыйЧтениеXML);
		
		НовыйЧтениеXML.Закрыть();
		УдалитьФайлы(ВрФайлКарточки);
		
		ШаблонУступочнойНадписи = ОбъектXDTOКарточки.ШаблонНадписи;
		
		ИнфПол = ОбъектXDTO.Документ.СвСчФакт.ИнфПол;
		
		Если НЕ ИнфПол = Неопределено Тогда                               
			Если НЕ ИнфПол.ТекстИнф = Неопределено Тогда
				
				Для Каждого Элемент Из ИнфПол.ТекстИнф Цикл
					Если Элемент.Идентиф = "ФакторНаимБанк" Тогда
						Параметр 				= "@" + Элемент.Идентиф;
						ЗначениеПараметра 		=  Элемент.Значен;
						ШаблонУступочнойНадписи = СтрЗаменить(ШаблонУступочнойНадписи, Параметр,ЗначениеПараметра);	
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого Элемент Из ИнфПол.ТекстИнф Цикл
					Параметр 				= "@" + Элемент.Идентиф;
					ЗначениеПараметра 		=  Элемент.Значен;
					ШаблонУступочнойНадписи = СтрЗаменить(ШаблонУступочнойНадписи, Параметр,ЗначениеПараметра);	
				КонецЦикла;
				ДанныеДляПечати.Вставить("УступочнаяНадпись", ШаблонУступочнойНадписи);
			КонецЕсли;
		КонецЕсли;
		//Нет карточки в документе (например веб-клиент), но заполнен инфопол	
	ИначеЕсли ВрФайлКарточки = Неопределено И НЕ ОбъектXDTO.Документ.СвСчФакт.ИнфПол = Неопределено Тогда
		Если НЕ ОбъектXDTO.Документ.СвСчФакт.ИнфПол.ТекстИнф.Количество() = 0 Тогда
			ИнфПол = ОбъектXDTO.Документ.СвСчФакт.ИнфПол;
			Если НЕ ИнфПол.ТекстИнф = Неопределено Тогда
				// Если превью, шаблон уст. надписи из настроек, иначе типовой
				Если НЕ ЭтоПревью Тогда
					ШаблонУступочнойНадписи = ПолучитьМакет("ШаблонУступочнойНадписи").ПолучитьТекст();
				Иначе
					СтруктураНастроек = МенеджерНастроек.НастройкиИР();
					
					ШаблонУступочнойНадписи = СтруктураНастроек.ШаблонУступочнойНадписи;
 				КонецЕсли;
				
				Для Каждого Элемент Из ИнфПол.ТекстИнф Цикл
					Если Элемент.Идентиф = "ФакторНаимБанк" Тогда
						Параметр 				= "@" + Элемент.Идентиф;
						ЗначениеПараметра 		=  Элемент.Значен;
						ШаблонУступочнойНадписи = СтрЗаменить(ШаблонУступочнойНадписи, Параметр,ЗначениеПараметра);	
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого Элемент Из ИнфПол.ТекстИнф Цикл
					Параметр 				= "@" + Элемент.Идентиф;
					ЗначениеПараметра 		=  Элемент.Значен;
					ШаблонУступочнойНадписи = СтрЗаменить(ШаблонУступочнойНадписи, Параметр,ЗначениеПараметра);	
				КонецЦикла;
				ДанныеДляПечати.Вставить("УступочнаяНадпись", ШаблонУступочнойНадписи);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("Номер", СвСчФакт.НомерСчФ);
	ДанныеДляПечати.Вставить("Дата", СвСчФакт.ДатаСчФ);
	ДанныеДляПечати.Вставить("КодВалюты", СвСчФакт.КодОКВ);
	//Это исправление
	Если НЕ СвСчФакт.ИспрСчФ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Исправление", Истина);
		ДанныеДляПечати.Вставить("ИсправлениеСФ_Номер", СвСчФакт.ИспрСчФ.НомИспрСчФ);
		ДанныеДляПечати.Вставить("ИсправлениеСФ_Дата", СвСчФакт.ИспрСчФ.ДатаИспрСчФ);
	КонецЕсли;
	
	//Поставщик
	ИдСв = СвПрод.ИдСв;
	Если НЕ ИдСв.СвЮЛ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Поставщик", СвПрод.ИдСв.СвЮЛ.НаимОрг);
		ДанныеДляПечати.Вставить("Поставщик_ИНН", СвПрод.ИдСв.СвЮЛ.ИННЮЛ);
		ДанныеДляПечати.Вставить("Поставщик_КПП", СвПрод.ИдСв.СвЮЛ.КПП);
	Иначе
		ДанныеДляПечати.Вставить("Поставщик", СвПрод.ИдСв.СвФЛ.ФИОИП.Фамилия + " " + СвПрод.ИдСв.СвФЛ.ФИОИП.Имя + " " + СвПрод.ИдСв.СвФЛ.ФИОИП.Отчество);
		ДанныеДляПечати.Вставить("Поставщик_ИНН", СвПрод.ИдСв.СвФЛ.ИННФЛ);
	КонецЕсли;
	
	Если НЕ СвПрод.Адрес = Неопределено Тогда
		//адрес РФ
		Если НЕ СвПрод.Адрес.АдрРФ = Неопределено Тогда
			АдрРФ 	= СвПрод.Адрес.АдрРФ;
			Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
			Представление = "" + "Россия" +
			?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
			?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
			?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
			?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
			?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
			ДанныеДляПечати.Вставить("Поставщик_Адрес", Представление);
			//адрес Ино
		Иначе 
			СтранаНаименование = Справочники.КлассификаторСтранМира.НайтиПоКоду(СвПрод.Адрес.АдрИно.КодСтр).Наименование;	
			ДанныеДляПечати.Вставить("Поставщик_Адрес",  ?(ЗначениеЗаполнено(СтранаНаименование), СтранаНаименование + ", " + СвПрод.Адрес.АдрИно.АдрТекст,
									Строка(СвПрод.Адрес.АдрИно.КодСтр) + ", " + СвПрод.Адрес.АдрИно.АдрТекст));
		КонецЕсли;
	КонецЕсли;
	
	//Грузоотправитель
	Если НЕ ГрузОт = Неопределено Тогда
		Если НЕ ГрузОт.ГрузОтпр = Неопределено Тогда
			// ИП
			Если НЕ ГрузОт.ГрузОтпр.НаимГОП.ФИОИП = Неопределено Тогда
				ФИОИП = ГрузОт.ГрузОтпр.НаимГОП.ФИОИП;
				ДанныеДляПечати.Вставить("Грузоотправитель", ФИОИП.Фамилия + " " + ФИОИП.Имя + " " + ФИОИП.Отчество);
			Иначе
				ДанныеДляПечати.Вставить("Грузоотправитель", ГрузОт.ГрузОтпр.НаимГОП.НаимОрг);
			КонецЕсли;
			//Адрес
			Если НЕ ГрузОт.ГрузОтпр.Адрес = Неопределено Тогда
				//адрес РФ
				Если НЕ ГрузОт.ГрузОтпр.Адрес.АдрРФ = Неопределено Тогда
					АдрРФ 	= ГрузОт.ГрузОтпр.Адрес.АдрРФ;
					Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
					Представление = "" + "Россия" +
					?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
					?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
					?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
					?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
					?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
					?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
					?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
					?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
					?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
					ДанныеДляПечати.Вставить("Грузоотправитель_Адрес", Представление);
					//адрес Ино
				Иначе
					СтранаНаименование = Справочники.КлассификаторСтранМира.НайтиПоКоду(ГрузОт.ГрузОтпр.Адрес.АдрИно.КодСтр).Наименование;	
					ДанныеДляПечати.Вставить("Грузоотправитель_Адрес",  ?(ЗначениеЗаполнено(СтранаНаименование), СтранаНаименование + ", " + ГрузОт.ГрузОтпр.Адрес.АдрИно.АдрТекст,
					Строка(ГрузОт.ГрузОтпр.Адрес.АдрИно.КодСтр) + ", " + ГрузОт.ГрузОтпр.Адрес.АдрИно.АдрТекст));

				//	ДанныеДляПечати.Вставить("Грузоотправитель_Адрес",  ГрузОт.ГрузОтпр.Адрес.АдрИно.АдрТекст);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДанныеДляПечати.Вставить("Грузоотправитель", "он же");
		КонецЕсли;
	КонецЕсли;
	
	//Грузополучатель
	Если НЕ ГрузПолуч = Неопределено Тогда
		Если НЕ ГрузПолуч.НаимГОП.ФИОИП = Неопределено Тогда
			ФИОИП = ГрузПолуч.НаимГОП.ФИОИП;
			ДанныеДляПечати.Вставить("Грузополучатель", ФИОИП.Фамилия + " " + ФИОИП.Имя + " " + ФИОИП.Отчество);
		Иначе
			ДанныеДляПечати.Вставить("Грузополучатель", ГрузПолуч.НаимГОП.НаимОрг);
		КонецЕсли;
		//Адрес	
		Если НЕ ГрузПолуч.Адрес = Неопределено Тогда
			//адрес РФ
			Если НЕ ГрузПолуч.Адрес.АдрРФ = Неопределено Тогда
				АдрРФ 	= ГрузПолуч.Адрес.АдрРФ;
				Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
				Представление = "" + "Россия" +
				?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
				?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
				?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
				?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
				?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
				ДанныеДляПечати.Вставить("Грузополучатель_Адрес", Представление);
				//адрес Ино
			Иначе
				СтранаНаименование = Справочники.КлассификаторСтранМира.НайтиПоКоду(ГрузПолуч.Адрес.АдрИно.КодСтр).Наименование;	
				ДанныеДляПечати.Вставить("Грузополучатель_Адрес",  ?(ЗначениеЗаполнено(СтранаНаименование), СтранаНаименование + ", " + ГрузПолуч.Адрес.АдрИно.АдрТекст,
				Строка(ГрузПолуч.Адрес.АдрИно.КодСтр) + ", " + ГрузПолуч.Адрес.АдрИно.АдрТекст));

			//	ДанныеДляПечати.Вставить("Грузополучатель_Адрес",  ГрузПолуч.Адрес.АдрИно.АдрТекст);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Покупатель
	ИдСв = СвПокуп.ИдСв;
	
	Если НЕ ИдСв.СвЮЛ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Покупатель", ИдСв.СвЮЛ.НаимОрг);	
		ДанныеДляПечати.Вставить("Покупатель_ИНН", ИдСв.СвЮЛ.ИННЮЛ);
		ДанныеДляПечати.Вставить("Покупатель_КПП", ИдСв.СвЮЛ.КПП);
	Иначе
		ФИОИП = ИдСв.СвФЛ.ФИОИП;
		ДанныеДляПечати.Вставить("Покупатель", ФИОИП.Фамилия + " " + ФИОИП.Имя + " " + ФИОИП.Отчество);
		ДанныеДляПечати.Вставить("Покупатель_ИНН", ИдСв.СвФЛ.ИННФЛ);
	КонецЕсли;
	//Адрес	
	Если НЕ СвПокуп.Адрес = Неопределено Тогда
		//адрес РФ
		Если НЕ СвПокуп.Адрес.АдрРФ = Неопределено Тогда
			АдрРФ 	= СвПокуп.Адрес.АдрРФ;
			Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
			Представление = "" + "Россия" +
			?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
			?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
			?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
			?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
			?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
			ДанныеДляПечати.Вставить("Покупатель_Адрес", Представление);
			//адрес Ино
		Иначе
			СтранаНаименование = Справочники.КлассификаторСтранМира.НайтиПоКоду(СвПокуп.Адрес.АдрИно.КодСтр).Наименование;	
			ДанныеДляПечати.Вставить("Покупатель_Адрес",  ?(ЗначениеЗаполнено(СтранаНаименование), СтранаНаименование + ", " + СвПокуп.Адрес.АдрИно.АдрТекст,
			Строка(СвПокуп.Адрес.АдрИно.КодСтр) + ", " + СвПокуп.Адрес.АдрИно.АдрТекст));

		//	ДанныеДляПечати.Вставить("Покупатель_Адрес",  СвПокуп.Адрес.АдрИно.АдрТекст);
		КонецЕсли;
	КонецЕсли;
	
	// Табличные части
	// Платежно-расчетные документы
	Для Каждого Элемент	Из СвСчФакт.СвПРД Цикл
		НовСтр = ТЗ_ПРД.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Элемент);		
	КонецЦикла;
	
	//Товары
	Для Каждого Элемент Из СведТов Цикл
		НовСтр = ТЗ_Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Элемент);
		
		НовСтр.СумНДС = ?(Элемент.СумНал.СумНДС = Неопределено, Элемент.СумНал.БезНДС, Элемент.СумНал.СумНДС);
		
		Если НЕ Элемент.Акциз = Неопределено Тогда
			НовСтр.СумАкциз = ?(Элемент.Акциз.СумАкциз = Неопределено, Элемент.Акциз.БезАкциз, Элемент.Акциз.СумАкциз); 
		КонецЕсли;
		
		Если НЕ Элемент.СвТД = Неопределено Тогда
			
			НомерТД = Новый Массив;
			КодСтраны = Новый Массив;
			
			Для Каждого Элем Из Элемент.СвТД Цикл
				НомерТД.Добавить(Элем.НомерТД);
				КодСтраны.Добавить(Элем.КодПроисх);
			КонецЦикла;
			
			НовСтр.НомерТД		= СтрСоединить2(НомерТД, Символы.ПС);
			НовСтр.КодПроисх	= СтрСоединить2(КодСтраны, Символы.ПС);
		
		КонецЕсли;
		
		Если Элемент.НалСт = "0%" Или Элемент.НалСт = "10%" Или Элемент.НалСт = "18%" Тогда
			НовСтр.НалСтВел = СтрЗаменить(Элемент.НалСт, "%", "");
			НовСтр.НалСтТип = "процент";
		ИначеЕсли Элемент.НалСт = "10/110" Или Элемент.НалСт = "18/118" Тогда
			НовСтр.НалСтВел = Элемент.НалСт;
			НовСтр.НалСтТип = "дробь";
		Иначе
			НовСтр.НалСтВел = Элемент.НалСт;
			НовСтр.НалСтТип = "текст";
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("СуммаВсегоБезНДС", ВсегоОпл.СтТовБезНДСВсего);
	ДанныеДляПечати.Вставить("СуммаВсегоСНДС", ВсегоОпл.СтТовУчНалВсего);
	ДанныеДляПечати.Вставить("ВсегоНДС", ?(НЕ ВсегоОпл.СумНалВсего.СумНДС = Неопределено, ВсегоОпл.СумНалВсего.СумНДС, ВсегоОпл.СумНалВсего.БезНДС));
	
	Если НЕ Подписант.ИП = Неопределено Тогда
		ФИО = Подписант.ИП.ФИО;
		ДанныеДляПечати.Вставить("ПодписантИП", ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
		ДанныеДляПечати.Вставить("Подписант_ИНН", Подписант.ИП.ИННФЛ);
		ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации", Подписант.ИП.СвГосРегИП);
	Иначе
		ФИО = Подписант.ЮЛ.ФИО;
		ДанныеДляПечати.Вставить("ПодписантЮЛ", ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
		ДанныеДляПечати.Вставить("Подписант_ИНН", Подписант.ЮЛ.ИННЮЛ);
		ДанныеДляПечати.Вставить("Подписант_Должность", Подписант.ЮЛ.Должн);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТЗ_Товары", ТЗ_Товары);
	ДанныеДляПечати.Вставить("ТЗ_ПРД", ТЗ_ПРД);
	
	Если Организация.ИНН = ДанныеДляПечати.Поставщик_ИНН Тогда
		// Исходящий
		ДанныеДляПечати.Вставить("флВходящийДок", Ложь);
	Иначе
		// Входящий
		ДанныеДляПечати.Вставить("флВходящийДок", Истина);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ВидДокумента", "СчФ");
	Возврат ДанныеДляПечати;
	
КонецФункции

// Функция определяет версию формата счета-фактуры и вызывает соответствующий парсер
Функция РазобратьЭД_КорректировочныйСчетФактура(Syn_Document) Экспорт
	
	Попытка
		Если Syn_Document.FileSize > 1000000 Тогда
			Документ_ДвоичныеДанные = ExchangeService.GetDocumentContent(Токен, Syn_ЯщикОрганизации, Syn_Document.Id);
		Иначе
			Документ_ДвоичныеДанные = Syn_Document.Content;
		КонецЕсли;
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения контента (содержимого) ЭД: " + ТекстОшибкиSynerdocs);
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	ВрФайлЭД = ПолучитьИмяВременногоФайла("xml");
	Документ_ДвоичныеДанные.Записать(ВрФайлЭД);
	
	//Проверим карточку (уступочная надпись)
	Если НЕ Syn_Document.Card = Неопределено Тогда
		ВрФайлКарточки 				= ПолучитьИмяВременногоФайла("xml");
		Карточка_ДвоичныыеДанные 	= Syn_Document.Card;
		Карточка_ДвоичныыеДанные.Записать(ВрФайлКарточки);
		ЕстьКарточка = Истина;
	Иначе 
		ЕстьКарточка = Ложь;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ВрФайлЭД);
	СтрокаПоиска = Текст.ПолучитьТекст();
	
	Если НЕ Найти(СтрокаПоиска, "ВерсФорм=""5.02""") = 0 Тогда
		//Парсим по новой схеме
		ЭтоНовыйФормат = Истина;
	Иначе
		//Парсим по старой схеме
		ЭтоНовыйФормат = Ложь;
	КонецЕсли;
	
	УстановитьПространствоИмен(ВрФайлЭД, "KSFAKT");
	
	Если НЕ ЭтоНовыйФормат Тогда
		Возврат РазобратьЭД_КорректировочныйСчетФактура_01(ВрФайлЭД);
	Иначе
		Возврат РазобратьЭД_КорректировочныйСчетФактура_02(ВрФайлЭД, ВрФайлКарточки);
	КонецЕсли;
	
КонецФункции

//Функция разбирает XML-файл (контент) документа с типом "Корректировочный счет-фактура" и возвращает данные в виде структуры
//
// Параметры:
//  Syn_Документ: документ сервиса (экземпляр класса Document)
//
// Возвращаемое значение:
//	Структура: структурированные данные, полученные из XML
//
Функция РазобратьЭД_КорректировочныйСчетФактура_01(ВрФайл)
	
	Фабрика = СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("ON_KORSFAKT_1_911_01_05_01_03").ПолучитьТекст());
	
	НовыйЧтениеXML = Новый ЧтениеXML;
	НовыйЧтениеXML.ОткрытьФайл(ВрФайл);
	
	//Создаем объект и закрываем xml
	ТипОбъектаXDTO = Фабрика.Тип("KSFAKT", "Файл");
	ОбъектXDTO = Фабрика.ПрочитатьXML(НовыйЧтениеXML, ТипОбъектаXDTO);
	НовыйЧтениеXML.Закрыть();
	УдалитьФайлы(ВрФайл);
	
	Док 		= ОбъектXDTO.Документ;
	СвКСчФ		= Док.СвКСчФ;
	СвПрод		= СвКСчФ.СвПрод;
	СвПокуп		= СвКСчФ.СвПокуп;
	СведТов		= Док.ТаблКСчФ.СведТов;
	Подписант	= Док.Подписант;
	
	ТЗ_Товары = Новый ТаблицаЗначений;
	ТЗ_Товары.Колонки.Добавить("НомСтр");
	ТЗ_Товары.Колонки.Добавить("НаимТов");
	ТЗ_Товары.Колонки.Добавить("ОКЕИ_ТовДо");
	ТЗ_Товары.Колонки.Добавить("ОКЕИ_ТовПосле");
	ТЗ_Товары.Колонки.Добавить("КолТовДо");
	ТЗ_Товары.Колонки.Добавить("КолТовПосле");
	ТЗ_Товары.Колонки.Добавить("ЦенаТовДо");
	ТЗ_Товары.Колонки.Добавить("ЦенаТовПосле");
	ТЗ_Товары.Колонки.Добавить("СтоимДоИзм");
	ТЗ_Товары.Колонки.Добавить("СтоимПослеИзм");
	ТЗ_Товары.Колонки.Добавить("СтоимУвел");
	ТЗ_Товары.Колонки.Добавить("СтоимУм");
	ТЗ_Товары.Колонки.Добавить("СумАкцизДо");
	ТЗ_Товары.Колонки.Добавить("СумАкцизПосле");
	ТЗ_Товары.Колонки.Добавить("СумАкцизУвел");
	ТЗ_Товары.Колонки.Добавить("СумАкцизУм");	
	ТЗ_Товары.Колонки.Добавить("НалСтВелДо");
	ТЗ_Товары.Колонки.Добавить("НалСтТипДо");
	ТЗ_Товары.Колонки.Добавить("НалСтВелПосле");
	ТЗ_Товары.Колонки.Добавить("НалСтТипПосле");
	ТЗ_Товары.Колонки.Добавить("СумНДСДо");
	ТЗ_Товары.Колонки.Добавить("СумНДСПосле");
	ТЗ_Товары.Колонки.Добавить("СумНСДУвел");
	ТЗ_Товары.Колонки.Добавить("СумНСДУм");
	ТЗ_Товары.Колонки.Добавить("ВсегоДоИзм");
	ТЗ_Товары.Колонки.Добавить("ВсегоПослеИзм");
	ТЗ_Товары.Колонки.Добавить("ВсегоУвел");
	ТЗ_Товары.Колонки.Добавить("ВсегоУм");
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("НомерКСФ");
	ДанныеДляПечати.Вставить("ДатаКСФ");
	ДанныеДляПечати.Вставить("НомерСФ");
	ДанныеДляПечати.Вставить("ДатаСФ");
	ДанныеДляПечати.Вставить("Исправление", Ложь);
	ДанныеДляПечати.Вставить("ИсправлениеСФ", Ложь);
	ДанныеДляПечати.Вставить("ИсправлениеКСФ_Номер");
	ДанныеДляПечати.Вставить("ИсправлениеКСФ_Дата");
	ДанныеДляПечати.Вставить("ИсправлениеСФ_Номер");
	ДанныеДляПечати.Вставить("ИсправлениеСФ_Дата");
	ДанныеДляПечати.Вставить("Поставщик");
	ДанныеДляПечати.Вставить("Поставщик_Адрес");
	ДанныеДляПечати.Вставить("Поставщик_ИНН");
	ДанныеДляПечати.Вставить("Поставщик_КПП");
	ДанныеДляПечати.Вставить("Покупатель");
	ДанныеДляПечати.Вставить("Покупатель_Адрес");
	ДанныеДляПечати.Вставить("Покупатель_ИНН");
	ДанныеДляПечати.Вставить("Покупатель_КПП");
	ДанныеДляПечати.Вставить("КодВалюты");
	ДанныеДляПечати.Вставить("ТЗ_Товары", ТЗ_Товары);
	ДанныеДляПечати.Вставить("СуммаБезНДСУвел");
	ДанныеДляПечати.Вставить("СуммаБезНДСУм");
	ДанныеДляПечати.Вставить("СуммаСНДСУвел");
	ДанныеДляПечати.Вставить("СуммаСНДСУм");
	ДанныеДляПечати.Вставить("НДСУвел");
	ДанныеДляПечати.Вставить("НДСУм");
	ДанныеДляПечати.Вставить("ПодписантЮЛ");
	ДанныеДляПечати.Вставить("ПодписантИП");
	ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации");
	
	НДСУм = 0;
	НДСУвел = 0;
	СуммаБезНДСУм = 0;
	СуммаСНДСУм = 0;
	СуммаБезНДСУвел = 0;
	СуммаСНДСУвел = 0;
	
	ДанныеДляПечати.Вставить("НомерКСФ", СвКСчФ.НомерКСчФ);
	ДанныеДляПечати.Вставить("ДатаКСФ", СвКСчФ.ДатаКСчФ);
	ДанныеДляПечати.Вставить("КодВалюты", СвКСчФ.КодОКВ);
	
	ДанныеДляПечати.Вставить("НомерСФ", СвКСчФ.НомерСчФ);
	ДанныеДляПечати.Вставить("ДатаСФ", СвКСчФ.ДатаСчФ);		
	
	Если НЕ СвКСчФ.ИспрСчФ = Неопределено Тогда
		ДанныеДляПечати.Вставить("ИсправлениеСФ", Истина);
		ДанныеДляПечати.Вставить("ИсправлениеСФ_Номер", СвКСчФ.ИспрСчФ.НомИспрСчФ);
		ДанныеДляПечати.Вставить("ИсправлениеСФ_Дата", СвКСчФ.ИспрСчФ.ДатаИспрСчФ);	
	КонецЕсли;
	
	Если НЕ СвКСчФ.ИспрКСчФ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Исправление", Истина);
		ДанныеДляПечати.Вставить("ИсправлениеКСФ_Номер", СвКСчФ.ИспрКСчФ.НомИспрКСчФ);
		ДанныеДляПечати.Вставить("ИсправлениеКСФ_Дата", СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ);
	КонецЕсли;
	
	//Продавец 
	ИдСв = СвПрод.ИдСв;
	
	Если НЕ ИдСв.СвЮЛ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Поставщик", ИдСв.СвЮЛ.НаимОрг);
		ДанныеДляПечати.Вставить("Поставщик_ИНН", ИдСв.СвЮЛ.ИННЮЛ);
		ДанныеДляПечати.Вставить("Поставщик_КПП", ИдСв.СвЮЛ.КПП);
	Иначе
		ФИО = ИдСв.СвФЛ.ФИОИП;
		ДанныеДляПечати.Вставить("Поставщик", ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
		ДанныеДляПечати.Вставить("Поставщик_ИНН", ИдСв.СвФЛ.ИННФЛ);
	КонецЕсли;
	
	Если НЕ СвПрод.Адрес = Неопределено Тогда
		//адрес РФ
		Если НЕ СвПрод.Адрес.АдрРФ = Неопределено Тогда
			АдрРФ 	= СвПрод.Адрес.АдрРФ;
			Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
			Представление = "" + "Россия" +
			?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
			?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
			?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
			?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
			?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
			ДанныеДляПечати.Вставить("Поставщик_Адрес", Представление);
			//адрес Ино
		Иначе 
			ДанныеДляПечати.Вставить("Поставщик_Адрес",  СвПрод.Адрес.АдрИно.АдрТекст);
		КонецЕсли;
	КонецЕсли;
	
	//Покупатель
	ИдСв = СвПокуп.ИдСв;
	
	Если НЕ ИдСв.СвЮЛ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Покупатель", ИдСв.СвЮЛ.НаимОрг);
		ДанныеДляПечати.Вставить("Покупатель_ИНН", ИдСв.СвЮЛ.ИННЮЛ);
		ДанныеДляПечати.Вставить("Покупатель_КПП", ИдСв.СвЮЛ.КПП);
	Иначе
		ФИО = ИдСв.СвФЛ.ФИОИП;
		ДанныеДляПечати.Вставить("Покупатель", ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
		ДанныеДляПечати.Вставить("Покупатель_ИНН", ИдСв.СвФЛ.ИННФЛ);
	КонецЕсли;
	
	Если НЕ СвПокуп.Адрес = Неопределено Тогда
		//адрес РФ
		Если НЕ СвПокуп.Адрес.АдрРФ = Неопределено Тогда
			АдрРФ 	= СвПокуп.Адрес.АдрРФ;
			Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
			Представление = "" + "Россия" +
			?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
			?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
			?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
			?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
			?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
			ДанныеДляПечати.Вставить("Покупатель_Адрес", Представление);
			//адрес Ино
		Иначе 
			ДанныеДляПечати.Вставить("Покупатель_Адрес",  СвПокуп.Адрес.АдрИно.АдрТекст);
		КонецЕсли;
	КонецЕсли;
	
	//Товары
	Для Каждого Элемент Из СведТов Цикл
		НовСтр 					= ТЗ_Товары.Добавить();
		НовСтр.НомСтр 			= Элемент.НомСтр;
		НовСтр.НаимТов 			= Элемент.НаимТов;
		НовСтр.ОКЕИ_ТовДо 		= Элемент.ОКЕИ_ТовДо;
		НовСтр.ОКЕИ_ТовПосле 	= Элемент.ОКЕИ_ТовПосле;
		НовСтр.КолТовДо 		= Элемент.КолТовДо;
		НовСтр.КолТовПосле 		= Элемент.КолТовПосле;
		НовСтр.ЦенаТовДо 		= Элемент.ЦенаТовДо;
		НовСтр.ЦенаТовПосле 	= Элемент.ЦенаТовПосле;
		
		НовСтр.СтоимДоИзм 		= Элемент.СтТовБезНДС.СтоимДоИзм;
		НовСтр.СтоимПослеИзм 	= Элемент.СтТовБезНДС.СтоимПослеИзм;
		НовСтр.СтоимУвел 		= Элемент.СтТовБезНДС.СтоимУвел;
		НовСтр.СтоимУм 			= Элемент.СтТовБезНДС.СтоимУм;
		НовСтр.СумАкцизДо 		= Элемент.АкцизДо.СумАкциз;
		НовСтр.СумАкцизПосле 	= Элемент.АкцизПосле.СумАкциз;
		НовСтр.СумАкцизУвел 	= Элемент.АкцизРазн.СумУвел;
		НовСтр.СумАкцизУм 		= Элемент.АкцизРазн.СумУм;	
		
		НовСтр.НалСтВелДо		= Элемент.НалСтДо.НалСтВел;
		НовСтр.НалСтТипДо 		= Элемент.НалСтДо.НалСтТип;
		
		НовСтр.НалСтВелПосле 	= Элемент.НалСтПосле.НалСтВел;
		НовСтр.НалСтТипПосле 	= Элемент.НалСтПосле.НалСтТип;
		
		НовСтр.СумНДСДо 	= ?(Элемент.СумНалДо.СумНДС = Неопределено, Элемент.СумНалДо.БезНДС, Элемент.СумНалДо.СумНДС);
		НовСтр.СумНДСПосле 	= ?(Элемент.СумНалПосле.СумНДС = Неопределено, Элемент.СумНалПосле.БезНДС, Элемент.СумНалПосле.СумНДС);
		НовСтр.СумНСДУвел 	= Элемент.СумНалРазн.СумУвел;
		НовСтр.СумНСДУм 	= Элемент.СумНалРазн.СумУм;
		
		НовСтр.ВсегоДоИзм 		= Элемент.СтТовУчНал.СтоимДоИзм;
		НовСтр.ВсегоПослеИзм 	= Элемент.СтТовУчНал.СтоимПослеИзм;
		НовСтр.ВсегоУвел 		= Элемент.СтТовУчНал.СтоимУвел;
		НовСтр.ВсегоУм 			= Элемент.СтТовУчНал.СтоимУм;
		
		//Итоги по странице
		НДСУм 				= НДСУм + ?(Элемент.СумНалРазн.СумУм = Неопределено, 0, Элемент.СумНалРазн.СумУм);
		НДСУвел 			= НДСУвел + ?(Элемент.СумНалРазн.СумУвел = Неопределено, 0,  Элемент.СумНалРазн.СумУвел);
		СуммаБезНДСУм 		= СуммаБезНДСУм + ?(Элемент.СтТовБезНДС.СтоимУм = Неопределено, 0, Элемент.СтТовБезНДС.СтоимУм);
		СуммаБезНДСУвел 	= СуммаБезНДСУвел + ?(Элемент.СтТовБезНДС.СтоимУвел = Неопределено, 0, Элемент.СтТовБезНДС.СтоимУвел);
		СуммаСНДСУм 		= СуммаСНДСУм + ?(Элемент.СтТовУчНал.СтоимУм = Неопределено, 0, Элемент.СтТовУчНал.СтоимУм);
		СуммаСНДСУвел 		= СуммаСНДСУвел + ?(Элемент.СтТовУчНал.СтоимУвел = Неопределено, 0, Элемент.СтТовУчНал.СтоимУвел);
		
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("СуммаБезНДСУвел", СуммаБезНДСУвел);
	ДанныеДляПечати.Вставить("СуммаБезНДСУм", СуммаБезНДСУм);
	ДанныеДляПечати.Вставить("СуммаСНДСУвел", СуммаСНДСУвел);
	ДанныеДляПечати.Вставить("СуммаСНДСУм", СуммаСНДСУм);
	ДанныеДляПечати.Вставить("НДСУвел", НДСУвел);
	ДанныеДляПечати.Вставить("НДСУм", НДСУм);
	
	//Подписант
	ДанныеДляПечати.Вставить("ПодписантЮЛ");
	ДанныеДляПечати.Вставить("ПодписантИП");
	ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации");
	
	Если НЕ Подписант.ИП = Неопределено Тогда
		ФИО = Подписант.ИП.ФИО;
		ДанныеДляПечати.Вставить("ПодписантИП", ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
		ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации", Подписант.ИП.СвГосРегИП);
	Иначе
		ФИО = Подписант.ЮЛ.ФИО;
		ДанныеДляПечати.Вставить("ПодписантЮЛ", ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТЗ_Товары", ТЗ_Товары);
	
	Если Организация.ИНН = ДанныеДляПечати.Поставщик_ИНН Тогда
		// Исходящий
		ДанныеДляПечати.Вставить("флВходящийДок", Ложь);
	Иначе
		// Входящий
		ДанныеДляПечати.Вставить("флВходящийДок", Истина);
	КонецЕсли;
	ДанныеДляПечати.Вставить("ВидДокумента", "КорСчФ");
	
	Возврат ДанныеДляПечати;
	
КонецФункции

//Функция разбирает XML-файл (контент) документа с типом "Корректировочный счет-фактура" с версией форм 5.02 и возвращает данные в виде структуры
//
// Параметры:
//  Syn_Документ: документ сервиса (экземпляр класса Document)
//
// Возвращаемое значение:
//	Структура: структурированные данные, полученные из XML
//
Функция РазобратьЭД_КорректировочныйСчетФактура_02(ВрФайл, ВрФайлКарточки = Неопределено, ЭтоПревью = Ложь) Экспорт
	
	Фабрика = СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("ON_KORSFAKT_1_911_01_05_02_01").ПолучитьТекст());
	
	НовыйЧтениеXML = Новый ЧтениеXML;
	НовыйЧтениеXML.ОткрытьФайл(ВрФайл);
	
	//Создаем объект и закрываем xml
	ТипОбъектаXDTO = Фабрика.Тип("KSFAKT", "Файл");
	ОбъектXDTO = Фабрика.ПрочитатьXML(НовыйЧтениеXML, ТипОбъектаXDTO);
	НовыйЧтениеXML.Закрыть();
	УдалитьФайлы(ВрФайл);
	
	Док 		= ОбъектXDTO.Документ;
	СвКСчФ		= Док.СвКСчФ;
	СвПрод		= СвКСчФ.СвПрод;
	СвПокуп		= СвКСчФ.СвПокуп;
	СведТов		= Док.ТаблКСчФ.СведТов;
	Подписант	= Док.Подписант;
	
	ТЗ_Товары = новый ТаблицаЗначений;
	ТЗ_Товары.Колонки.Добавить("НомСтр");
	ТЗ_Товары.Колонки.Добавить("НаимТов");
	ТЗ_Товары.Колонки.Добавить("ОКЕИ_ТовДо");
	ТЗ_Товары.Колонки.Добавить("ОКЕИ_ТовПосле");
	ТЗ_Товары.Колонки.Добавить("КолТовДо");
	ТЗ_Товары.Колонки.Добавить("КолТовПосле");
	ТЗ_Товары.Колонки.Добавить("ЦенаТовДо");
	ТЗ_Товары.Колонки.Добавить("ЦенаТовПосле");
	ТЗ_Товары.Колонки.Добавить("СтоимДоИзм");
	ТЗ_Товары.Колонки.Добавить("СтоимПослеИзм");
	ТЗ_Товары.Колонки.Добавить("СтоимУвел");
	ТЗ_Товары.Колонки.Добавить("СтоимУм");
	ТЗ_Товары.Колонки.Добавить("СумАкцизДо");
	ТЗ_Товары.Колонки.Добавить("СумАкцизПосле");
	ТЗ_Товары.Колонки.Добавить("СумАкцизУвел");
	ТЗ_Товары.Колонки.Добавить("СумАкцизУм");	
	ТЗ_Товары.Колонки.Добавить("НалСтВелДо");
	ТЗ_Товары.Колонки.Добавить("НалСтТипДо");
	ТЗ_Товары.Колонки.Добавить("НалСтВелПосле");
	ТЗ_Товары.Колонки.Добавить("НалСтТипПосле");
	ТЗ_Товары.Колонки.Добавить("СумНДСДо");
	ТЗ_Товары.Колонки.Добавить("СумНДСПосле");
	ТЗ_Товары.Колонки.Добавить("СумНСДУвел");
	ТЗ_Товары.Колонки.Добавить("СумНСДУм");
	ТЗ_Товары.Колонки.Добавить("ВсегоДоИзм");
	ТЗ_Товары.Колонки.Добавить("ВсегоПослеИзм");
	ТЗ_Товары.Колонки.Добавить("ВсегоУвел");
	ТЗ_Товары.Колонки.Добавить("ВсегоУм");
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("НомерКСФ");
	ДанныеДляПечати.Вставить("ДатаКСФ");
	ДанныеДляПечати.Вставить("НомерСФ");
	ДанныеДляПечати.Вставить("ДатаСФ");
	ДанныеДляПечати.Вставить("Исправление", Ложь);
	ДанныеДляПечати.Вставить("ИсправлениеСФ", Ложь);
	ДанныеДляПечати.Вставить("ИсправлениеКСФ_Номер");
	ДанныеДляПечати.Вставить("ИсправлениеКСФ_Дата");
	ДанныеДляПечати.Вставить("ИсправлениеСФ_Номер");
	ДанныеДляПечати.Вставить("ИсправлениеСФ_Дата");
	ДанныеДляПечати.Вставить("Поставщик");
	ДанныеДляПечати.Вставить("Поставщик_Адрес");
	ДанныеДляПечати.Вставить("Поставщик_ИНН");
	ДанныеДляПечати.Вставить("Поставщик_КПП");
	ДанныеДляПечати.Вставить("Покупатель");
	ДанныеДляПечати.Вставить("Покупатель_Адрес");
	ДанныеДляПечати.Вставить("Покупатель_ИНН");
	ДанныеДляПечати.Вставить("Покупатель_КПП");
	ДанныеДляПечати.Вставить("КодВалюты");
	ДанныеДляПечати.Вставить("ТЗ_Товары", ТЗ_Товары);
	ДанныеДляПечати.Вставить("СуммаБезНДСУвел");
	ДанныеДляПечати.Вставить("СуммаБезНДСУм");
	ДанныеДляПечати.Вставить("СуммаСНДСУвел");
	ДанныеДляПечати.Вставить("СуммаСНДСУм");
	ДанныеДляПечати.Вставить("НДСУвел");
	ДанныеДляПечати.Вставить("НДСУм");
	ДанныеДляПечати.Вставить("ПодписантЮЛ");
	ДанныеДляПечати.Вставить("ПодписантИП");
	ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации");
	ДанныеДляПечати.Вставить("УступочнаяНадпись");
	
		//Распарсим уступочную надпись
	Если НЕ ВрФайлКарточки = Неопределено Тогда
		ФабрикаКарточки = СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("cession_card_v1").ПолучитьТекст());
		НовыйЧтениеXML 	= Новый ЧтениеXML;
		НовыйЧтениеXML.ОткрытьФайл(ВрФайлКарточки);
		
		ОбъектXDTOКарточки = ФабрикаКарточки.ПрочитатьXML(НовыйЧтениеXML);
		
		НовыйЧтениеXML.Закрыть();
		УдалитьФайлы(ВрФайлКарточки);
		
		ШаблонУступочнойНадписи = ОбъектXDTOКарточки.ШаблонНадписи;
		
		ИнфПол = ОбъектXDTO.Документ.СвКСчФ.ИнфПол;
		
		Если НЕ ИнфПол = Неопределено Тогда                               
			Если НЕ ИнфПол.ТекстИнф = Неопределено Тогда
				
				Для Каждого Элемент Из ИнфПол.ТекстИнф Цикл
					Если Элемент.Идентиф = "ФакторНаимБанк" Тогда
						Параметр 				= "@" + Элемент.Идентиф;
						ЗначениеПараметра 		=  Элемент.Значен;
						ШаблонУступочнойНадписи = СтрЗаменить(ШаблонУступочнойНадписи, Параметр,ЗначениеПараметра);	
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого Элемент Из ИнфПол.ТекстИнф Цикл
					Параметр 				= "@" + Элемент.Идентиф;
					ЗначениеПараметра 		=  Элемент.Значен;
					ШаблонУступочнойНадписи = СтрЗаменить(ШаблонУступочнойНадписи, Параметр,ЗначениеПараметра);	
				КонецЦикла;
				ДанныеДляПечати.Вставить("УступочнаяНадпись", ШаблонУступочнойНадписи);
			КонецЕсли;
		КонецЕсли;
		//Нет карточки в документе (например веб-клиент), но заполнен инфопол	
	ИначеЕсли ВрФайлКарточки = Неопределено И НЕ ОбъектXDTO.Документ.СвКСчФ.ИнфПол = Неопределено Тогда
		Если НЕ ОбъектXDTO.Документ.СвКСчФ.ИнфПол.ТекстИнф.Количество() = 0 Тогда
			ИнфПол = ОбъектXDTO.Документ.СвКСчФ.ИнфПол;
			Если НЕ ИнфПол.ТекстИнф = Неопределено Тогда
				// Если превью, шаблон уст. надписи из настроек, иначе типовой
				Если НЕ ЭтоПревью Тогда
					ШаблонУступочнойНадписи = ПолучитьМакет("ШаблонУступочнойНадписи").ПолучитьТекст();
				Иначе
					СтруктураНастроек = МенеджерНастроек.НастройкиИР();
					
					ШаблонУступочнойНадписи = СтруктураНастроек.ШаблонУступочнойНадписи;
 				КонецЕсли;
				
				Для Каждого Элемент Из ИнфПол.ТекстИнф Цикл
					Если Элемент.Идентиф = "ФакторНаимБанк" Тогда
						Параметр 				= "@" + Элемент.Идентиф;
						ЗначениеПараметра 		=  Элемент.Значен;
						ШаблонУступочнойНадписи = СтрЗаменить(ШаблонУступочнойНадписи, Параметр,ЗначениеПараметра);	
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого Элемент Из ИнфПол.ТекстИнф Цикл
					Параметр 				= "@" + Элемент.Идентиф;
					ЗначениеПараметра 		=  Элемент.Значен;
					ШаблонУступочнойНадписи = СтрЗаменить(ШаблонУступочнойНадписи, Параметр,ЗначениеПараметра);	
				КонецЦикла;
				ДанныеДляПечати.Вставить("УступочнаяНадпись", ШаблонУступочнойНадписи);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НДСУм = 0;
	НДСУвел = 0;
	СуммаБезНДСУм = 0;
	СуммаСНДСУм = 0;
	СуммаБезНДСУвел = 0;
	СуммаСНДСУвел = 0;
	
	ДанныеДляПечати.Вставить("НомерКСФ", СвКСчФ.НомерКСчФ);
	ДанныеДляПечати.Вставить("ДатаКСФ", СвКСчФ.ДатаКСчФ);
	ДанныеДляПечати.Вставить("КодВалюты", СвКСчФ.КодОКВ);
	
	ТЗ_СчФ = Новый ТаблицаЗначений;
	ТЗ_СчФ.Колонки.Добавить("НомерСФ");
	ТЗ_СчФ.Колонки.Добавить("ДатаСФ");
	ТЗ_СчФ.Колонки.Добавить("ИспрСФ");
	
	// Сведения об исходных счетах-фактурах и их исправлениях
	Для Каждого ТекСФ Из ОбъектXDTO.Документ.СвКСчФ.СчФ Цикл
		НовСтр = ТЗ_СчФ.Добавить();
		НовСтр.НомерСФ = ТекСФ.НомерСчФ;
		НовСтр.ДатаСФ = ТекСФ.ДатаСчФ;		
		НовСтр.ИспрСФ = Новый ТаблицаЗначений;
		НовСтр.ИспрСФ.Колонки.Добавить("НомерИспрСчФ");
		НовСтр.ИспрСФ.Колонки.Добавить("ДатаИспрСчФ");
		
		Если НЕ ТекСФ.ИспрСчФ = Неопределено И ТекСФ.ИспрСчФ.Количество() > 0 Тогда
			Для Каждого ТекИспрСФ Из ТекСФ.ИспрСчФ Цикл
				ИспрСФ = НовСтр.ИспрСФ.Добавить();
				ИспрСФ.НомерИспрСчФ = ТекИспрСФ.НомИспрСчФ;
				ИспрСФ.ДатаИспрСчФ = ТекИспрСФ.ДатаИспрСчФ;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ДанныеДляПечати.Вставить("ТЗ_СчФ", ТЗ_СчФ);
	
	Если НЕ СвКСчФ.ИспрКСчФ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Исправление", Истина);
		ДанныеДляПечати.Вставить("ИсправлениеКСФ_Номер", СвКСчФ.ИспрКСчФ.НомИспрКСчФ);
		ДанныеДляПечати.Вставить("ИсправлениеКСФ_Дата", СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ);
	КонецЕсли;
	
	//Продавец 
	ИдСв = СвПрод.ИдСв;
	
	Если НЕ ИдСв.СвЮЛ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Поставщик", ИдСв.СвЮЛ.НаимОрг);
		ДанныеДляПечати.Вставить("Поставщик_ИНН", ИдСв.СвЮЛ.ИННЮЛ);
		ДанныеДляПечати.Вставить("Поставщик_КПП", ИдСв.СвЮЛ.КПП);
	Иначе
		ФИО = ИдСв.СвФЛ.ФИОИП;
		ДанныеДляПечати.Вставить("Поставщик", ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
		ДанныеДляПечати.Вставить("Поставщик_ИНН", ИдСв.СвФЛ.ИННФЛ);
	КонецЕсли;
	
	Если НЕ СвПрод.Адрес = Неопределено Тогда
		//адрес РФ
		Если НЕ СвПрод.Адрес.АдрРФ = Неопределено Тогда
			АдрРФ 	= СвПрод.Адрес.АдрРФ;
			Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
			Представление = "" + "Россия" +
			?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
			?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
			?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
			?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
			?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
			ДанныеДляПечати.Вставить("Поставщик_Адрес", Представление);
			//адрес Ино
		Иначе 
			ДанныеДляПечати.Вставить("Поставщик_Адрес",  СвПрод.Адрес.АдрИно.АдрТекст);
		КонецЕсли;
	КонецЕсли;
	
	//Покупатель
	ИдСв = СвПокуп.ИдСв;
	
	Если НЕ ИдСв.СвЮЛ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Покупатель", ИдСв.СвЮЛ.НаимОрг);
		ДанныеДляПечати.Вставить("Покупатель_ИНН", ИдСв.СвЮЛ.ИННЮЛ);
		ДанныеДляПечати.Вставить("Покупатель_КПП", ИдСв.СвЮЛ.КПП);
	Иначе
		ФИО = ИдСв.СвФЛ.ФИОИП;
		ДанныеДляПечати.Вставить("Покупатель", ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
		ДанныеДляПечати.Вставить("Покупатель_ИНН", ИдСв.СвФЛ.ИННФЛ);
	КонецЕсли;
	
	Если НЕ СвПокуп.Адрес = Неопределено Тогда
		//адрес РФ
		Если НЕ СвПокуп.Адрес.АдрРФ = Неопределено Тогда
			АдрРФ 	= СвПокуп.Адрес.АдрРФ;
			Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
			Представление = "" + "Россия" +
			?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
			?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
			?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
			?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
			?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
			ДанныеДляПечати.Вставить("Покупатель_Адрес", Представление);
			//адрес Ино
		Иначе 
			ДанныеДляПечати.Вставить("Покупатель_Адрес",  СвПокуп.Адрес.АдрИно.АдрТекст);
		КонецЕсли;
	КонецЕсли;
	
	//Товары
	Для Каждого Элемент Из СведТов Цикл
		НовСтр 					= ТЗ_Товары.Добавить();
		НовСтр.НомСтр 			= Элемент.НомСтр;
		НовСтр.НаимТов 			= Элемент.НаимТов;
		НовСтр.ОКЕИ_ТовДо 		= Элемент.ОКЕИ_ТовДо;
		НовСтр.ОКЕИ_ТовПосле 	= Элемент.ОКЕИ_ТовПосле;
		НовСтр.КолТовДо 		= Элемент.КолТовДо;
		НовСтр.КолТовПосле 		= Элемент.КолТовПосле;
		НовСтр.ЦенаТовДо 		= Элемент.ЦенаТовДо;
		НовСтр.ЦенаТовПосле 	= Элемент.ЦенаТовПосле;
		
		НовСтр.СтоимДоИзм = Элемент.СтТовБезНДС.СтоимДоИзм;
		НовСтр.СтоимПослеИзм = Элемент.СтТовБезНДС.СтоимПослеИзм;
		НовСтр.СтоимУвел = Элемент.СтТовБезНДС.СтоимУвел;
		НовСтр.СтоимУм = Элемент.СтТовБезНДС.СтоимУм;
		НовСтр.СумАкцизДо = ?(Элемент.АкцизДо.БезАкциз = Неопределено, Элемент.АкцизДо.СумАкциз, Элемент.АкцизДо.БезАкциз);
		НовСтр.СумАкцизПосле = ?(Элемент.АкцизПосле.БезАкциз = Неопределено, Элемент.АкцизПосле.СумАкциз, Элемент.АкцизПосле.БезАкциз);
		НовСтр.СумАкцизУвел = Элемент.АкцизРазн.СумУвел;
		НовСтр.СумАкцизУм = Элемент.АкцизРазн.СумУм;	
		
		Если Элемент.НалСтДо = "0%" ИЛИ
			Элемент.НалСтДо = "10%" ИЛИ
			Элемент.НалСтДо = "18%" Тогда
			НовСтр.НалСтВелДо = СтрЗаменить(Элемент.НалСтДо, "%", "");
			НовСтр.НалСтТипДо = "процент";
		ИначеЕсли Элемент.НалСтДо = "10/110" ИЛИ
			Элемент.НалСтДо = "18/118" Тогда
			НовСтр.НалСтВелДо = Элемент.НалСтДо;
			НовСтр.НалСтТипДо = "дробь";
		Иначе
			НовСтр.НалСтВелДо = Элемент.НалСтДо;
			НовСтр.НалСтТипДо = "текст";
		КонецЕсли;
		
		Если Элемент.НалСтПосле = "0%" ИЛИ
			Элемент.НалСтПосле = "10%" ИЛИ
			Элемент.НалСтПосле = "18%" Тогда
			НовСтр.НалСтВелПосле = СтрЗаменить(Элемент.НалСтПосле, "%", "");
			НовСтр.НалСтТипПосле = "процент";
		ИначеЕсли Элемент.НалСтПосле = "10/110" ИЛИ
			Элемент.НалСтПосле = "18/118" Тогда
			НовСтр.НалСтВелПосле = Элемент.НалСтПосле;
			НовСтр.НалСтТипПосле = "дробь";
		Иначе
			НовСтр.НалСтВелПосле = Элемент.НалСтПосле;
			НовСтр.НалСтТипПосле = "текст";
		КонецЕсли;
		
		НовСтр.СумНДСДо 	= ?(Элемент.СумНалДо.СумНДС = Неопределено, Элемент.СумНалДо.БезНДС, Элемент.СумНалДо.СумНДС);
		НовСтр.СумНДСПосле 	= ?(Элемент.СумНалПосле.СумНДС = Неопределено, Элемент.СумНалПосле.БезНДС, Элемент.СумНалПосле.СумНДС);
		НовСтр.СумНСДУвел 	= Элемент.СумНалРазн.СумУвел;
		НовСтр.СумНСДУм 	= Элемент.СумНалРазн.СумУм;
		
		НовСтр.ВсегоДоИзм 		= Элемент.СтТовУчНал.СтоимДоИзм;
		НовСтр.ВсегоПослеИзм 	= Элемент.СтТовУчНал.СтоимПослеИзм;
		НовСтр.ВсегоУвел 		= Элемент.СтТовУчНал.СтоимУвел;
		НовСтр.ВсегоУм 			= Элемент.СтТовУчНал.СтоимУм;
		
		
		//Итоги по странице
		НДСУм 				= НДСУм + ?(Элемент.СумНалРазн.СумУм = Неопределено, 0, Элемент.СумНалРазн.СумУм);
		НДСУвел 			= НДСУвел + ?(Элемент.СумНалРазн.СумУвел = Неопределено, 0,  Элемент.СумНалРазн.СумУвел);
		СуммаБезНДСУм 		= СуммаБезНДСУм + ?(Элемент.СтТовБезНДС.СтоимУм = Неопределено, 0, Элемент.СтТовБезНДС.СтоимУм);
		СуммаБезНДСУвел 	= СуммаБезНДСУвел + ?(Элемент.СтТовБезНДС.СтоимУвел = Неопределено, 0, Элемент.СтТовБезНДС.СтоимУвел);
		СуммаСНДСУм 		= СуммаСНДСУм + ?(Элемент.СтТовУчНал.СтоимУм = Неопределено, 0, Элемент.СтТовУчНал.СтоимУм);
		СуммаСНДСУвел 		= СуммаСНДСУвел + ?(Элемент.СтТовУчНал.СтоимУвел = Неопределено, 0, Элемент.СтТовУчНал.СтоимУвел);
		
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("СуммаБезНДСУвел", СуммаБезНДСУвел);
	ДанныеДляПечати.Вставить("СуммаБезНДСУм", СуммаБезНДСУм);
	ДанныеДляПечати.Вставить("СуммаСНДСУвел", СуммаСНДСУвел);
	ДанныеДляПечати.Вставить("СуммаСНДСУм", СуммаСНДСУм);
	ДанныеДляПечати.Вставить("НДСУвел", НДСУвел);
	ДанныеДляПечати.Вставить("НДСУм", НДСУм);
	
	//Подписант
	ДанныеДляПечати.Вставить("ПодписантЮЛ");
	ДанныеДляПечати.Вставить("ПодписантИП");
	ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации");
	
	Если НЕ Подписант.ИП = Неопределено Тогда
		ФИО = Подписант.ИП.ФИО;
		ДанныеДляПечати.Вставить("ПодписантИП", ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
		ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации", Подписант.ИП.СвГосРегИП);
	Иначе
		ФИО = Подписант.ЮЛ.ФИО;
		ДанныеДляПечати.Вставить("ПодписантЮЛ", ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТЗ_Товары", ТЗ_Товары);
	
	Если Организация.ИНН = ДанныеДляПечати.Поставщик_ИНН Тогда
		// Исходящий
		ДанныеДляПечати.Вставить("флВходящийДок", Ложь);
	Иначе
		// Входящий
		ДанныеДляПечати.Вставить("флВходящийДок", Истина);
	КонецЕсли;
	ДанныеДляПечати.Вставить("ВидДокумента", "КорСчФ");
	
	Возврат ДанныеДляПечати;
	
КонецФункции

//Функция разбирает XML-файл (контент) документа с типом "Торг-12" в новом формате и возвращает данные в виде структуры
//
// Параметры:
//  Документ_ДвоичныеДанные: Двоичные данные документа
//
// Возвращаемое значение:
//	Структура: структурированные данные, полученные из XML
//
Функция РазобратьЭД_ТОРГ12_02(ВрФайл, ВрФайлТитул, ЭтоНовыйФормат) Экспорт
	
	Если ЭтоНовыйФормат Тогда
		Фабрика = СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_OTORG12_1_986_00_05_01_02").ПолучитьТекст());
	Иначе
		Фабрика = СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_OTORG12_1_986_00_05_01_01").ПолучитьТекст());
	КонецЕсли;
	
	НовыйЧтениеXML = Новый ЧтениеXML;
	НовыйЧтениеXML.ОткрытьФайл(ВрФайл);
	
	//Создаем объект и закрываем xml
	ТипОбъектаXDTO = Фабрика.Тип("OTORG12", "Файл");
	ОбъектXDTO = Фабрика.ПрочитатьXML(НовыйЧтениеXML, ТипОбъектаXDTO);
	НовыйЧтениеXML.Закрыть();
	УдалитьФайлы(ВрФайл);
	
	Док 			= ОбъектXDTO.Документ;
	ГрузОт			= Док.СвТНО.ГрузОт;
	ГрузПолуч		= Док.СвТНО.ГрузПолуч;
	Поставщик		= Док.СвТНО.Поставщик;
	Плательщик		= Док.СвТНО.Плательщик;
	ТН				= Док.СвТНО.ТН;
	СвТов			= ТН.Таблица.СвТов;
	Подписант		= Док.Подписант;
	ИнфПол			= Док.СвТНО.ИнфПол;
	
	ТЗ_Товары = Новый ТаблицаЗначений;
	ТЗ_Товары.Колонки.Добавить("НомТов");
	ТЗ_Товары.Колонки.Добавить("НаимТов");
	ТЗ_Товары.Колонки.Добавить("ХарактерТов");
	ТЗ_Товары.Колонки.Добавить("СортТов");
	ТЗ_Товары.Колонки.Добавить("АртикулТов");
	ТЗ_Товары.Колонки.Добавить("КодТов");
	ТЗ_Товары.Колонки.Добавить("НаимЕдИзм");
	ТЗ_Товары.Колонки.Добавить("ОКЕИ_Тов");
	ТЗ_Товары.Колонки.Добавить("ВидУпак");
	ТЗ_Товары.Колонки.Добавить("Место");
	ТЗ_Товары.Колонки.Добавить("КолМест");
	ТЗ_Товары.Колонки.Добавить("Брутто");
	ТЗ_Товары.Колонки.Добавить("Нетто");
	ТЗ_Товары.Колонки.Добавить("Цена");
	ТЗ_Товары.Колонки.Добавить("СумБезНДС");
	ТЗ_Товары.Колонки.Добавить("СтавкаНДС");
	ТЗ_Товары.Колонки.Добавить("СумНДС");
	ТЗ_Товары.Колонки.Добавить("СумУчНДС");
	ТЗ_Товары.Колонки.Добавить("ИнфПолСтр");
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("НомерТН");
	ДанныеДляПечати.Вставить("ДатаТН");
	
	ДанныеДляПечати.Вставить("Грузоотправитель");
	ДанныеДляПечати.Вставить("Грузоотправитель_ОКДП");
	ДанныеДляПечати.Вставить("Грузоотправитель_ОКПО");
	ДанныеДляПечати.Вставить("Грузоотправитель_ОКОПФ");
	ДанныеДляПечати.Вставить("Грузоотправитель_ИНН");
	ДанныеДляПечати.Вставить("Грузоотправитель_КПП");
	ДанныеДляПечати.Вставить("Грузоотправитель_Адрес");
	ДанныеДляПечати.Вставить("Грузоотправитель_Телефон");
	ДанныеДляПечати.Вставить("Грузоотправитель_Факс");
	ДанныеДляПечати.Вставить("Грузоотправитель_БанковскийСчет");
	ДанныеДляПечати.Вставить("Грузоотправитель_Банк");
	ДанныеДляПечати.Вставить("Грузоотправитель_БИКБанка");
	ДанныеДляПечати.Вставить("Грузоотправитель_СтруктурноеПодразделение");
	
	ДанныеДляПечати.Вставить("Грузополучатель");
	ДанныеДляПечати.Вставить("Грузополучатель_ОКПО");
	ДанныеДляПечати.Вставить("Грузополучатель_ОКОПФ");
	ДанныеДляПечати.Вставить("Грузополучатель_ИНН");
	ДанныеДляПечати.Вставить("Грузополучатель_КПП");
	ДанныеДляПечати.Вставить("Грузополучатель_Адрес");
	ДанныеДляПечати.Вставить("Грузополучатель_Телефон");
	ДанныеДляПечати.Вставить("Грузополучатель_Факс");
	ДанныеДляПечати.Вставить("Грузополучатель_БанковскийСчет");
	ДанныеДляПечати.Вставить("Грузополучатель_Банк");
	ДанныеДляПечати.Вставить("Грузополучатель_БИКБанка");
	
	ДанныеДляПечати.Вставить("Поставщик");
	ДанныеДляПечати.Вставить("Поставщик_ОКПО");
	ДанныеДляПечати.Вставить("Поставщик_ОКОПФ");
	ДанныеДляПечати.Вставить("Поставщик_ИНН");
	ДанныеДляПечати.Вставить("Поставщик_КПП");
	ДанныеДляПечати.Вставить("Поставщик_Адрес");
	ДанныеДляПечати.Вставить("Поставщик_Телефон");
	ДанныеДляПечати.Вставить("Поставщик_Факс");
	ДанныеДляПечати.Вставить("Поставщик_БанковскийСчет");
	ДанныеДляПечати.Вставить("Поставщик_Банк");
	ДанныеДляПечати.Вставить("Поставщик_БИКБанка");
	
	ДанныеДляПечати.Вставить("Плательщик");
	ДанныеДляПечати.Вставить("Плательщик_ОКПО");
	ДанныеДляПечати.Вставить("Плательщик_ОКОПФ");
	ДанныеДляПечати.Вставить("Плательщик_ИНН");
	ДанныеДляПечати.Вставить("Плательщик_КПП");
	ДанныеДляПечати.Вставить("Плательщик_Адрес");
	ДанныеДляПечати.Вставить("Плательщик_Телефон");
	ДанныеДляПечати.Вставить("Плательщик_Факс");
	ДанныеДляПечати.Вставить("Плательщик_БанковскийСчет");
	ДанныеДляПечати.Вставить("Плательщик_Банк");
	ДанныеДляПечати.Вставить("Плательщик_БИКБанка");
	
	ДанныеДляПечати.Вставить("КодВалюты");
	ДанныеДляПечати.Вставить("Основание");
	ДанныеДляПечати.Вставить("Основание_Номер");
	ДанныеДляПечати.Вставить("Основание_Дата");
	ДанныеДляПечати.Вставить("Основание_Дополнительно");
	
	ДанныеДляПечати.Вставить("ТранспортнаяНакладная_Номер");
	ДанныеДляПечати.Вставить("ТранспортнаяНакладная_Дата");
	
	ДанныеДляПечати.Вставить("ВидОперации");
	
	ДанныеДляПечати.Вставить("ТЗ_Товары", ТЗ_Товары);
	ДанныеДляПечати.Вставить("КоличествоМест");
	ДанныеДляПечати.Вставить("Брутто");
	ДанныеДляПечати.Вставить("Нетто");
	ДанныеДляПечати.Вставить("СуммаБезНДС");
	ДанныеДляПечати.Вставить("ВсегоНДС");
	ДанныеДляПечати.Вставить("СуммаСНДС");
	
	ДанныеДляПечати.Вставить("КоличествоЗаписей");
	ДанныеДляПечати.Вставить("КоличествоЗаписейПрописью");
	ДанныеДляПечати.Вставить("КоличествоМестОбщ");
	ДанныеДляПечати.Вставить("КоличествоМестОбщПрописью");
	ДанныеДляПечати.Вставить("БруттоОбщ");
	ДанныеДляПечати.Вставить("БруттоОбщПрописью");
	ДанныеДляПечати.Вставить("НеттоОбщ");
	ДанныеДляПечати.Вставить("НеттоОбщПрописью");
	ДанныеДляПечати.Вставить("КоличествоПриложений");
	ДанныеДляПечати.Вставить("КоличествоПриложенийПрописью");
	ДанныеДляПечати.Вставить("СуммаОтпуска");
	ДанныеДляПечати.Вставить("СуммаОтпускаПрописью");
	ДанныеДляПечати.Вставить("ДатаОтпуска");
	
	ДанныеДляПечати.Вставить("ОтпускРазрешил");
	ДанныеДляПечати.Вставить("ОтпускРазрешил_Должность");
	ДанныеДляПечати.Вставить("Бухгалтер");
	ДанныеДляПечати.Вставить("Бухгалтер_Должность");
	ДанныеДляПечати.Вставить("ОтпускПроизвел");
	ДанныеДляПечати.Вставить("ОтпускПроизвел_Должность");
	
	ДанныеДляПечати.Вставить("ПодписантЮЛ");
	ДанныеДляПечати.Вставить("ПодписантИП");
	ДанныеДляПечати.Вставить("Подписант_ИНН");
	ДанныеДляПечати.Вставить("Подписант_Должность");
	ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации");
	
	ДанныеДляПечати.Вставить("Покупатель_ДоверенностьНомер");
	ДанныеДляПечати.Вставить("Покупатель_ДоверенностьДата");
	ДанныеДляПечати.Вставить("Покупатель_ДоверенностьВыданаКемОрганизация");
	ДанныеДляПечати.Вставить("Покупатель_ДоверенностьВыданаКемДолжность");
	ДанныеДляПечати.Вставить("Покупатель_ДоверенностьВыданаКемФИО");
	ДанныеДляПечати.Вставить("Покупатель_ДоверенностьВыданаКомуДолжность");
	ДанныеДляПечати.Вставить("Покупатель_ДоверенностьВыданаКомуФИО");
	ДанныеДляПечати.Вставить("Покупатель_ДолжностьГрузПринял");
	ДанныеДляПечати.Вставить("Покупатель_ФИОГрузПринял");
	ДанныеДляПечати.Вставить("Покупатель_ДолжностьГрузПолучил");
	ДанныеДляПечати.Вставить("Покупатель_ФИОГрузПолучил");
	ДанныеДляПечати.Вставить("Покупатель_ДатаПолученияГруза");
	
	ДанныеДляПечати.Вставить("УступочнаяНадпись");
	
	Для Каждого Элемент Из СвТов Цикл
		НовСтр = ТЗ_Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Элемент);
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("НомерТН", ТН.НомТН);
	ДанныеДляПечати.Вставить("ДатаТН", ТН.ДатаТН);
	
	//Грузоотправитель
	Если НЕ ГрузОт = Неопределено Тогда
		ИдСвГрузОт = ГрузОт.ГрузОтпр.ИдСв;
		ДанныеДляПечати.Вставить("Грузоотправитель_ОКДП", ГрузОт.ОКДП);
		ДанныеДляПечати.Вставить("Грузоотправитель_ОКПО", ГрузОт.ГрузОтпр.ОКПО);
		Если НЕ ИдСвГрузОт.СвЮЛ = Неопределено Тогда
			ДанныеДляПечати.Вставить("Грузоотправитель", ИдСвГрузОт.СвЮЛ.НаимОрг);
			ДанныеДляПечати.Вставить("Грузоотправитель_ОКОПФ", ИдСвГрузОт.СвЮЛ.ОКОПФ);
			ДанныеДляПечати.Вставить("Грузоотправитель_ИНН", ИдСвГрузОт.СвЮЛ.ИННЮЛ);
			ДанныеДляПечати.Вставить("Грузоотправитель_КПП", ИдСвГрузОт.СвЮЛ.КПП);
		Иначе
			ДанныеДляПечати.Вставить("Грузоотправитель", ИдСвГрузОт.СвФЛ.ФИОИП.Фамилия + " " + ИдСвГрузОт.СвФЛ.ФИОИП.Имя + " " + ИдСвГрузОт.СвФЛ.ФИОИП.Отчество);
			ДанныеДляПечати.Вставить("Грузоотправитель_ИНН", ИдСвГрузОт.СвФЛ.ИННФЛ);
		КонецЕсли;
		
		Если НЕ ГрузОт.ГрузОтпр.Адрес = Неопределено Тогда
			//адрес РФ
			Если НЕ ГрузОт.ГрузОтпр.Адрес.АдрРФ = Неопределено Тогда
				АдрРФ 	= ГрузОт.ГрузОтпр.Адрес.АдрРФ;
				Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
				Представление = "" + "Россия" +
				?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
				?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
				?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
				?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
				?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
				ДанныеДляПечати.Вставить("Грузоотправитель_Адрес", Представление);
				//адрес Ино
			ИначеЕсли НЕ ГрузОт.ГрузОтпр.Адрес.АдрИно = Неопределено Тогда 
				Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(ГрузОт.ГрузОтпр.Адрес.АдрИно.КодСтр).Наименование;
				Страна = ?(ЗначениеЗаполнено(Страна), Страна, ГрузОт.ГрузОтпр.Адрес.АдрИно.КодСтр); // не нашли в ОКСМ
				ДанныеДляПечати.Вставить("Грузоотправитель_Адрес",  ?(Страна = Неопределено, "", Страна) + ", " + ГрузОт.ГрузОтпр.Адрес.АдрИно.АдрТекст);
				// не структурированный	
			Иначе
				ДанныеДляПечати.Вставить("Грузоотправитель_Адрес",  ГрузОт.ГрузОтпр.Адрес.АдрТекст);
			КонецЕсли;
		КонецЕсли;
		// контакты
		Если НЕ ГрузОт.ГрузОтпр.Контакт = Неопределено Тогда
			ДанныеДляПечати.Вставить("Грузоотправитель_Телефон", ГрузОт.ГрузОтпр.Контакт.Тлф);
			ДанныеДляПечати.Вставить("Грузоотправитель_Факс", ГрузОт.ГрузОтпр.Контакт.Факс);
		КонецЕсли;
				
		//банк. ревкизиты
		Если НЕ ГрузОт.ГрузОтпр.БанкРекв = Неопределено Тогда
			ДанныеДляПечати.Вставить("Грузоотправитель_БанковскийСчет", ГрузОт.ГрузОтпр.БанкРекв.НомерСчета);
			ДанныеДляПечати.Вставить("Грузоотправитель_Банк", ГрузОт.ГрузОтпр.БанкРекв.СвБанк.НаимБанк);
			ДанныеДляПечати.Вставить("Грузоотправитель_БИКБанка", ГрузОт.ГрузОтпр.БанкРекв.СвБанк.БИК);
		КонецЕсли;
		ДанныеДляПечати.Вставить("Грузоотправитель_СтруктурноеПодразделение", ГрузОт.СтруктПодр);
	КонецЕсли;
	
	//Грузополучатель
	Если НЕ ГрузПолуч = Неопределено Тогда
		ИдСвГрузПолуч = ГрузПолуч.ИдСв;
		ДанныеДляПечати.Вставить("Грузополучатель_ОКПО", ГрузПолуч.ОКПО);
		Если НЕ ИдСвГрузПолуч.СвЮЛ = Неопределено Тогда
			ДанныеДляПечати.Вставить("Грузополучатель", ИдСвГрузПолуч.СвЮЛ.НаимОрг);
			ДанныеДляПечати.Вставить("Грузополучатель_ИНН", ИдСвГрузПолуч.СвЮЛ.ИННЮЛ);
			ДанныеДляПечати.Вставить("Грузополучатель_КПП", ИдСвГрузПолуч.СвЮЛ.КПП);
			ДанныеДляПечати.Вставить("Грузополучатель_ОКОПФ", ИдСвГрузПолуч.СвЮЛ.ОКОПФ);
		Иначе
			ДанныеДляПечати.Вставить("Грузополучатель", ИдСвГрузПолуч.СвФЛ.ФИОИП.Фамилия + " " + ИдСвГрузПолуч.СвФЛ.ФИОИП.Имя + " " + ИдСвГрузПолуч.СвФЛ.ФИОИП.Отчество);
			ДанныеДляПечати.Вставить("Грузополучатель_ИНН", ИдСвГрузПолуч.СвФЛ.ИННФЛ);
		КонецЕсли;
		
		Если НЕ ГрузПолуч.Адрес = Неопределено Тогда
			//адрес РФ
			Если НЕ ГрузПолуч.Адрес.АдрРФ = Неопределено Тогда
				АдрРФ = ГрузПолуч.Адрес.АдрРФ; 
				Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
				Представление = "" + "Россия" +
				?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
				?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
				?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
				?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
				?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
				ДанныеДляПечати.Вставить("Грузополучатель_Адрес", Представление);
				//адрес Ино
			ИначеЕсли НЕ ГрузПолуч.Адрес.АдрИно = Неопределено Тогда
				Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(ГрузПолуч.Адрес.АдрИно.КодСтр).Наименование;
				Страна = ?(ЗначениеЗаполнено(Страна), Страна, ГрузПолуч.Адрес.АдрИно.КодСтр); // не нашли в ОКСМ
				ДанныеДляПечати.Вставить("Грузополучатель_Адрес",  ?(Страна = Неопределено, "", Страна) + ", " + ГрузПолуч.Адрес.АдрИно.АдрТекст);
				// не структурированный	
			Иначе
				ДанныеДляПечати.Вставить("Грузополучатель_Адрес",  ГрузПолуч.Адрес.АдрТекст);
			КонецЕсли;
		КонецЕсли;
		
		// контакты
		Если НЕ ГрузПолуч.Контакт = Неопределено Тогда
			ДанныеДляПечати.Вставить("Грузополучатель_Телефон", ГрузПолуч.Контакт.Тлф);
			ДанныеДляПечати.Вставить("Грузополучатель_Факс", ГрузПолуч.Контакт.Факс);
		КонецЕсли;
		//банк. ревкизиты
		Если НЕ ГрузПолуч.БанкРекв = Неопределено Тогда
			ДанныеДляПечати.Вставить("Грузополучатель_БанковскийСчет", ГрузПолуч.БанкРекв.НомерСчета);
			ДанныеДляПечати.Вставить("Грузополучатель_Банк", ГрузПолуч.БанкРекв.СвБанк.НаимБанк);
			ДанныеДляПечати.Вставить("Грузополучатель_БИКБанка", ГрузПолуч.БанкРекв.СвБанк.БИК);
		КонецЕсли;		
	КонецЕсли;
	
	//Поставщик
	Если НЕ Поставщик = Неопределено Тогда
		ИдСвПоставщик	= Поставщик.ИдСв;
		ДанныеДляПечати.Вставить("Поставщик_ОКПО", Поставщик.ОКПО);
		Если НЕ ИдСвПоставщик.СвЮЛ = Неопределено Тогда
			ДанныеДляПечати.Вставить("Поставщик", ИдСвПоставщик.СвЮЛ.НаимОрг);
			ДанныеДляПечати.Вставить("Поставщик_ИНН", ИдСвПоставщик.СвЮЛ.ИННЮЛ);
			ДанныеДляПечати.Вставить("Поставщик_КПП", ИдСвПоставщик.СвЮЛ.КПП);
			ДанныеДляПечати.Вставить("Поставщик_ОКОПФ", ИдСвПоставщик.СвЮЛ.ОКОПФ)
		Иначе
			ДанныеДляПечати.Вставить("Поставщик", ИдСвПоставщик.СвФЛ.ФИОИП.Фамилия + " " + ИдСвПоставщик.СвФЛ.ФИОИП.Имя + " " + ИдСвПоставщик.СвФЛ.ФИОИП.Отчество);
			ДанныеДляПечати.Вставить("Поставщик_ИНН", ИдСвПоставщик.СвФЛ.ИННФЛ);
		КонецЕсли;
		
		Если НЕ Поставщик.Адрес = Неопределено Тогда
			//адрес РФ
			Если НЕ Поставщик.Адрес.АдрРФ = Неопределено Тогда
				АдрРФ = Поставщик.Адрес.АдрРФ; 
				Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
				Представление = "" + "Россия" +
				?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
				?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
				?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
				?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
				?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
				ДанныеДляПечати.Вставить("Поставщик_Адрес", Представление);
				//адрес Ино
			ИначеЕсли НЕ Поставщик.Адрес.АдрИно = Неопределено Тогда 
				Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(Поставщик.Адрес.АдрИно.КодСтр).Наименование;
				Страна = ?(ЗначениеЗаполнено(Страна), Страна, Поставщик.Адрес.АдрИно.КодСтр);
				ДанныеДляПечати.Вставить("Поставщик_Адрес",  ?(Страна = Неопределено, "", Страна) + ", " + Поставщик.Адрес.АдрИно.АдрТекст);
				// не структурированный	
			Иначе
				ДанныеДляПечати.Вставить("Поставщик_Адрес",  Поставщик.Адрес.АдрТекст);
			КонецЕсли;
		КонецЕсли;
		// контакты
		Если НЕ Поставщик.Контакт = Неопределено Тогда
			ДанныеДляПечати.Вставить("Поставщик_Телефон", Поставщик.Контакт.Тлф);
			ДанныеДляПечати.Вставить("Поставщик_Факс", Поставщик.Контакт.Факс);
		КонецЕсли;
		//банк. ревкизиты
		Если НЕ Поставщик.БанкРекв = Неопределено Тогда
			ДанныеДляПечати.Вставить("Поставщик_БанковскийСчет", Поставщик.БанкРекв.НомерСчета);
			ДанныеДляПечати.Вставить("Поставщик_Банк", Поставщик.БанкРекв.СвБанк.НаимБанк);
			ДанныеДляПечати.Вставить("Поставщик_БИКБанка", Поставщик.БанкРекв.СвБанк.БИК);
		КонецЕсли;		
	КонецЕсли;
	
	//Плательщик
	Если НЕ Плательщик = Неопределено Тогда
		ИдСвПлательщик	= Плательщик.ИдСв;
		ДанныеДляПечати.Вставить("Плательщик_ОКПО", Плательщик.ОКПО);
		Если НЕ ИдСвПлательщик.СвЮЛ = Неопределено Тогда
			ДанныеДляПечати.Вставить("Плательщик", ИдСвПлательщик.СвЮЛ.НаимОрг);
			ДанныеДляПечати.Вставить("Плательщик_ИНН", ИдСвПлательщик.СвЮЛ.ИННЮЛ);
			ДанныеДляПечати.Вставить("Плательщик_КПП", ИдСвПлательщик.СвЮЛ.КПП);
			ДанныеДляПечати.Вставить("Плательщик_ОКОПФ", ИдСвПлательщик.СвЮЛ.ОКОПФ)
		Иначе
			ДанныеДляПечати.Вставить("Плательщик", ИдСвПлательщик.СвФЛ.ФИОИП.Фамилия + " " + ИдСвПлательщик.СвФЛ.ФИОИП.Имя + " " + ИдСвПлательщик.СвФЛ.ФИОИП.Отчество);
			ДанныеДляПечати.Вставить("Плательщик_ИНН", ИдСвПлательщик.СвФЛ.ИННФЛ);
		КонецЕсли;
		
		Если НЕ Плательщик.Адрес = Неопределено Тогда
			//адрес РФ
			Если НЕ Плательщик.Адрес.АдрРФ = Неопределено Тогда
				АдрРФ = Плательщик.Адрес.АдрРФ; 
				Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
				Представление = "" + "Россия" +
				?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
				?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
				?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
				?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
				?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
				?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
				ДанныеДляПечати.Вставить("Плательщик_Адрес", Представление);
				//адрес Ино
			ИначеЕсли НЕ Плательщик.Адрес.АдрИно = Неопределено Тогда 
				Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(Плательщик.Адрес.АдрИно.КодСтр).Наименование;
				Страна = ?(ЗначениеЗаполнено(Страна), Страна, Плательщик.Адрес.АдрИно.КодСтр);
				ДанныеДляПечати.Вставить("Плательщик_Адрес",  ?(Страна = Неопределено, "", Страна) + ", " + Плательщик.Адрес.АдрИно.АдрТекст);
				// не структурированный	
			Иначе
				ДанныеДляПечати.Вставить("Плательщик_Адрес",  Плательщик.Адрес.АдрТекст);
			КонецЕсли;
		КонецЕсли;
		// контакты
		Если НЕ Плательщик.Контакт = Неопределено Тогда
			ДанныеДляПечати.Вставить("Плательщик_Телефон",Плательщик.Контакт.Тлф);
			ДанныеДляПечати.Вставить("Плательщик_Факс", Плательщик.Контакт.Факс);
		КонецЕсли;
		//банк. ревкизиты
		Если НЕ Плательщик.БанкРекв = Неопределено Тогда
			ДанныеДляПечати.Вставить("Плательщик_БанковскийСчет", Плательщик.БанкРекв.НомерСчета);
			ДанныеДляПечати.Вставить("Плательщик_Банк", Плательщик.БанкРекв.СвБанк.НаимБанк);
			ДанныеДляПечати.Вставить("Плательщик_БИКБанка", Плательщик.БанкРекв.СвБанк.БИК);
		КонецЕсли;
	КонецЕсли;
	
	//Основание
	Если Док.СвТНО.Основание <> Неопределено Тогда
		ДанныеДляПечати.Вставить("Основание", Док.СвТНО.Основание.НаимОсн);
		ДанныеДляПечати.Вставить("Основание_Номер", Док.СвТНО.Основание.НомОсн);
		ДанныеДляПечати.Вставить("Основание_Дата", Док.СвТНО.Основание.ДатаОсн);
		ДанныеДляПечати.Вставить("Основание_Дополнительно", Док.СвТНО.Основание.ДопСвОсн);
	КонецЕсли;
	
	//Транспортная накладная
	Если Док.СвТНО.ТранНакл <> Неопределено Тогда
		ДанныеДляПечати.Вставить("ТранспортнаяНакладная_Номер", Док.СвТНО.ТранНакл.НомТранНакл);
		ДанныеДляПечати.Вставить("ТранспортнаяНакладная_Дата", Док.СвТНО.ТранНакл.ДатаТранНакл);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ВидОперации", Док.СвТНО.ВидОперации);
	
	ДанныеДляПечати.Вставить("ТЗ_Товары", ТЗ_Товары);
	
	ДанныеДляПечати.Вставить("КоличествоМест", ТН.Таблица.ВсегоНакл.КолМестВс);
	ДанныеДляПечати.Вставить("Брутто", ТН.Таблица.ВсегоНакл.БруттоВс);
	ДанныеДляПечати.Вставить("Нетто", ТН.Таблица.ВсегоНакл.НеттоВс);
	ДанныеДляПечати.Вставить("СуммаБезНДС", ТН.Таблица.ВсегоНакл.СумБезНДСВс);
	ДанныеДляПечати.Вставить("ВсегоНДС", ТН.Таблица.ВсегоНакл.СумНДСВс);
	ДанныеДляПечати.Вставить("СуммаСНДС", ТН.Таблица.ВсегоНакл.СумУчНДСВс);
	
	Если ТН.ТНОбщ <> Неопределено Тогда
		ДанныеДляПечати.Вставить("КоличествоЗаписей", ТН.ТНОбщ.КолНомЗап);
		ДанныеДляПечати.Вставить("КоличествоЗаписейПрописью", ТН.ТНОбщ.КолНомЗапПр);
		ДанныеДляПечати.Вставить("КоличествоМестОбщ", ТН.ТНОбщ.ВсМест);
		ДанныеДляПечати.Вставить("КоличествоМестОбщПрописью", ТН.ТНОбщ.ВсМестПр);
		ДанныеДляПечати.Вставить("БруттоОбщ", ТН.ТНОбщ.Брутто);
		ДанныеДляПечати.Вставить("БруттоОбщПрописью", ТН.ТНОбщ.БруттоПр);
		ДанныеДляПечати.Вставить("НеттоОбщ", ТН.ТНОбщ.Нетто);
		ДанныеДляПечати.Вставить("НеттоОбщПрописью", ТН.ТНОбщ.НеттоПр);
	КонецЕсли;
	
	Если ИнфПол <> Неопределено Тогда
		УступочнаяНадпись = ИнфПол.ТекстИнф;
		ДанныеДляПечати.Вставить("УступочнаяНадпись", УступочнаяНадпись);
	КонецЕсли;
	
	ОтпускГруз = Док.СвТНО.ОтпускГруз;
	
	Если ОтпускГруз <> Неопределено Тогда
		
		ДанныеДляПечати.Вставить("КоличествоПриложений", Док.СвТНО.ОтпускГруз.КолПрил);
		ДанныеДляПечати.Вставить("КоличествоПриложенийПрописью", Док.СвТНО.ОтпускГруз.КолПрилПр);
		ДанныеДляПечати.Вставить("СуммаОтпуска", Док.СвТНО.ОтпускГруз.СумОтпуск);
		ДанныеДляПечати.Вставить("СуммаОтпускаПрописью", Док.СвТНО.ОтпускГруз.СумОтпускПр);
		ДанныеДляПечати.Вставить("ДатаОтпуска", Док.СвТНО.ОтпускГруз.ДатаОтпуск);
		
		Если Док.СвТНО.ОтпускГруз.ОтпускРазреш <> Неопределено Тогда
			ОтпРазрешил = Док.СвТНО.ОтпускГруз.ОтпускРазреш;
			ДанныеДляПечати.Вставить("ОтпускРазрешил", ОтпРазрешил.ФИО.Фамилия + " " + ОтпРазрешил.ФИО.Имя + " " + ОтпРазрешил.ФИО.Отчество);
			ДанныеДляПечати.Вставить("ОтпускРазрешил_Должность", ОтпРазрешил.Должность); 
		КонецЕсли;
		
		Если Док.СвТНО.ОтпускГруз.Бухгалтер <> Неопределено Тогда
			Бух = Док.СвТНО.ОтпускГруз.Бухгалтер;
			ДанныеДляПечати.Вставить("Бухгалтер", Бух.ФИО.Фамилия + " " + Бух.ФИО.Имя + " " + Бух.ФИО.Отчество);
			ДанныеДляПечати.Вставить("Бухгалтер_Должность", Бух.Должность);
		КонецЕсли;
		
		Если ОтпускГруз.ОтпускПроизв <> Неопределено Тогда
			Если ОтпускГруз.КолПрилПр <> Неопределено Тогда
				ДанныеДляПечати.Вставить("КолПрилПр", ОтпускГруз.КолПрилПр);
			КонецЕсли;
						
			ОтпПроизвел = ОтпускГруз.ОтпускПроизв;
			ДанныеДляПечати.Вставить("ОтпускПроизвел", ОтпПроизвел.ФИО.Фамилия + " " + ОтпПроизвел.ФИО.Имя + " " + ОтпПроизвел.ФИО.Отчество);
			ДанныеДляПечати.Вставить("ОтпускПроизвел_Должность", ОтпПроизвел.Должность);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Подписант <> Неопределено Тогда
		Если Подписант.ЮЛ <> Неопределено Тогда
			ДанныеДляПечати.Вставить("ПодписантЮЛ", Подписант.ЮЛ.ФИО.Фамилия + " " + Подписант.ЮЛ.ФИО.Имя + " " + Подписант.ЮЛ.ФИО.Отчество);
			ДанныеДляПечати.Вставить("Подписант_ИНН", Подписант.ЮЛ.ИННЮЛ);
			ДанныеДляПечати.Вставить("Подписант_ИНН", Подписант.ЮЛ.Должн);
		Иначе
			ДанныеДляПечати.Вставить("ПодписантИП", Подписант.ИП.ФИО.Фамилия + " " + Подписант.ИП.ФИО.Имя + " " + Подписант.ИП.ФИО.Отчество);
			ДанныеДляПечати.Вставить("Подписант_ИНН", Подписант.ИП.ИННФЛ);
			ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации", Подписант.ИП.СвГосРегИП);
		КонецЕсли;
	КонецЕсли;
	
	//титул покупателя
	Если ВрФайлТитул <> Неопределено Тогда
		
		ПространствоИмен = "PTORG12";
		
		Чтение = Новый ЧтениеXML;
		Чтение.ОткрытьФайл(ВрФайлТитул);
		
		ПостроительDOM = Новый ПостроительDOM;
		ТитулDOM = ПостроительDOM.Прочитать(Чтение);
		
		Чтение.Закрыть();
		УдалитьФайлы(ВрФайлТитул);
		
		
		ТитулDOM.ЭлементДокумента.УстановитьСоответствиеПространстваИмен("", ПространствоИмен);
		
		МенеджерПространствИмен = Новый РазыменовательПространствИменDOM(ТитулDOM);
		ЕстьЭлементВТитуле = ТитулDOM.ВычислитьВыражениеXPath("//СвОЭДОтпрСФ", ТитулDOM, МенеджерПространствИмен, ТипРезультатаDOMXPath.Булево);
		
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(ТитулDOM, Запись);
		
		ТитулТекст = Запись.Закрыть();
		
		
		УТитулаНовыйФормат = ЕстьЭлементВТитуле.БулевоЗначение;
		
		Схема = ?(
			УТитулаНовыйФормат, 
			ПолучитьМакет("XSD_PTORG12_02").ПолучитьТекст(), 
			ПолучитьМакет("XSD_PTORG12_01").ПолучитьТекст()
		);
		
		
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(ТитулТекст);
		
		//Создаем объект и закрываем xml
		Фабрика			= СоздатьОбъектXDTOИзСхемы(Схема); //: Фабрика = ФабрикаXDTO;
		ТипОбъектаXDTO	= Фабрика.Тип(ПространствоИмен, "Файл");
		ОбъектXDTO		= Фабрика.ПрочитатьXML(Чтение, ТипОбъектаXDTO);
		
		Чтение.Закрыть();
		
		
		Покупатель 			= ОбъектXDTO.Документ.СвТНП.ПолучилГруз;
		Подписант 			= ОбъектXDTO.Документ.Подписант;
		
		Если Подписант.ЮЛ <> Неопределено Тогда
			ФИОТитул = Подписант.ЮЛ.ФИО; 
			ДанныеДляПечати.Вставить("ПодписантТитулаФИО", ФИОТитул.Фамилия + " " + ФИОТитул.Имя + " " + ФИОТитул.Отчество);
			ДанныеДляПечати.Вставить("ПодписантТитулаДолжность", Подписант.ЮЛ.Должн);
		Иначе
			ФИОТитул = Подписант.ИП.ФИО; 
			ДанныеДляПечати.Вставить("ПодписантТитулаФИО", ФИОТитул.Фамилия + " " + ФИОТитул.Имя + " " + ФИОТитул.Отчество);
		КонецЕсли;
		
		Попытка
			Доверенность    = Покупатель.Доверенность;
		Исключение
			Доверенность	= Неопределено; 	
		КонецПопытки;
		
		Если Доверенность <> Неопределено Тогда
			Попытка
				ДанныеДляПечати.Вставить("Покупатель_ДоверенностьНомер", Доверенность.НомДоверен);
				ДанныеДляПечати.Вставить("Покупатель_ДоверенностьДата", Доверенность.ДатаДоверен);
				ДанныеДляПечати.Вставить("Покупатель_ДоверенностьВыданаКемОрганизация", Доверенность.ВыданаКем.НаимОргКем);
				ДанныеДляПечати.Вставить("Покупатель_ДоверенностьВыданаКемДолжность", Доверенность.ВыданаКем.ДолжнКем);
				ДанныеДляПечати.Вставить("Покупатель_ДоверенностьВыданаКемФИО", Доверенность.ВыданаКем.ФИО.Фамилия + " " + Доверенность.ВыданаКем.ФИО.Имя + " " + Доверенность.ВыданаКем.ФИО.Отчество);
			Исключение
				// нет данных
			КонецПопытки;
			ДанныеДляПечати.Вставить("Покупатель_ДоверенностьВыданаКомуДолжность", Доверенность.ВыданаКому.Должн);
			ДанныеДляПечати.Вставить("Покупатель_ДоверенностьВыданаКомуФИО", Доверенность.ВыданаКому.ФИО.Фамилия + " " + Доверенность.ВыданаКому.ФИО.Имя + " " + Доверенность.ВыданаКому.ФИО.Отчество);
		КонецЕсли;
		Попытка
			ДанныеДляПечати.Вставить("Покупатель_ДолжностьГрузПринял", Покупатель.ГрузПринял.Должность);
			ДанныеДляПечати.Вставить("Покупатель_ФИОГрузПринял", Покупатель.ГрузПринял.ФИО.Фамилия + " " + Покупатель.ГрузПринял.ФИО.Имя + " " + Покупатель.ГрузПринял.ФИО.Отчество);
		Исключение
		КонецПопытки;
		
		Попытка
			ДанныеДляПечати.Вставить("Покупатель_ДолжностьГрузПолучил", Покупатель.ГрузПолучил.Должность);
			ДанныеДляПечати.Вставить("Покупатель_ФИОГрузПолучил", Покупатель.ГрузПолучил.ФИО.Фамилия + " " + Покупатель.ГрузПолучил.ФИО.Имя + " " + Покупатель.ГрузПолучил.ФИО.Отчество);
			ДанныеДляПечати.Вставить("Покупатель_ДатаПолученияГруза", Покупатель.ДатаПолуч);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Если Организация.ИНН = ДанныеДляПечати.Поставщик_ИНН Тогда
		// Исходящий
		ДанныеДляПечати.Вставить("флВходящийДок", Ложь);
	Иначе
		// Входящий
		ДанныеДляПечати.Вставить("флВходящийДок", Истина);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ВидДокумента", "Торг12");	
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция Новый_ТЗРаботы()
	
	ТипСумма		= ОписаниеТипаИзСтроки("Число,17,2");
	ТипКоличество	= ОписаниеТипаИзСтроки("Число,14,2");
	ТипБулево		= ОписаниеТипаИзСтроки("Булево");
	
	ТЗ_Работы = Новый ТаблицаЗначений;
	ТЗ_Работы.Колонки.Добавить("Номер");
	ТЗ_Работы.Колонки.Добавить("НаимРабот");
	ТЗ_Работы.Колонки.Добавить("НаимЕдИзм");
	ТЗ_Работы.Колонки.Добавить("ОКЕИ");
	ТЗ_Работы.Колонки.Добавить("Цена");
	ТЗ_Работы.Колонки.Добавить("Количество", ТипКоличество);
	ТЗ_Работы.Колонки.Добавить("СумБезНДС", ТипСумма);
	ТЗ_Работы.Колонки.Добавить("СумНДС", ТипСумма);
	ТЗ_Работы.Колонки.Добавить("СумУчНДС", ТипСумма);
	ТЗ_Работы.Колонки.Добавить("ИнфПолСтр");
	ТЗ_Работы.Колонки.Добавить("Описание");
	ТЗ_Работы.Колонки.Добавить("БезНДС", ТипБулево);
	
	Возврат ТЗ_Работы;
	
КонецФункции

//Функция разбирает XML-файл (контент) документа с типом "Акт" и возвращает данные в виде структуры
//
// Параметры:
//  Syn_Документ: документ сервиса (экземпляр класса Document)
//
// Возвращаемое значение:
//	Структура: структурированные данные, полученные из XML
//
Функция РазобратьЭД_АктПродавец(Syn_Документ) Экспорт
	
	// TODO: Так как тип объекта один и тот же на сервисе, выделить получение документа в общий метод для всех парсеров документов
	
	НовыйЧтениеXML = Новый ЧтениеXML;
	
	Попытка	
		Документ_ДвоичныеДанные = ?(Syn_Документ.FileSize > 1000000, 
		ExchangeService.GetDocumentContent(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id),
		Syn_Документ.Content);
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
		
		ОтправитьУведомлениеПользователю("Ошибка получения контента (содержимого) ЭД: " + ТекстОшибкиSynerdocs);
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла("xml");
	Документ_ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	Текст 				= Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяВременногоФайла);
	СтрокаПоиска 		= Текст.ПолучитьТекст();
	
	Если НЕ Найти(СтрокаПоиска, "СвОЭДОтпрСФ") = 0 Тогда
		ЭтоНовыйФормат = Истина;
	Иначе
		ЭтоНовыйФормат = Ложь;
	КонецЕсли;
	
	УстановитьПространствоИмен(ИмяВременногоФайла, "IAKTPRM");
	
	НовыйЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	
	Если НЕ ЭтоНовыйФормат Тогда
		Фабрика 	= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_IAKTPRM_1_987_00_05_01_01").ПолучитьТекст());
	Иначе
		Фабрика 	= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_IAKTPRM_1_987_00_05_01_02").ПолучитьТекст());
	КонецЕсли;
	 	
	ТипОбъектаXDTO 	= Фабрика.Тип("IAKTPRM", "Файл");
	ОбъектXDTO 		= Фабрика.ПрочитатьXML(НовыйЧтениеXML, ТипОбъектаXDTO);
	НовыйЧтениеXML.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	
	ТипСумма		= ОписаниеТипаИзСтроки("Число,17,2");
	ТипКоличество	= ОписаниеТипаИзСтроки("Число,14,2");
	ТипБулево		= ОписаниеТипаИзСтроки("Булево");
	
	// TODO: Использовать методы-конструкторы
	// TODO: Всегда задавать типы для колонок
	ТЗ_ОписаниеРабот = Новый ТаблицаЗначений;
	ТЗ_ОписаниеРабот.Колонки.Добавить("НачалоРабот");
	ТЗ_ОписаниеРабот.Колонки.Добавить("КонецРабот");
	ТЗ_ОписаниеРабот.Колонки.Добавить("СуммаБезНДС", ТипСумма);
	ТЗ_ОписаниеРабот.Колонки.Добавить("СуммаНДС", ТипСумма);
	ТЗ_ОписаниеРабот.Колонки.Добавить("СуммаСНДС", ТипСумма);
	ТЗ_ОписаниеРабот.Колонки.Добавить("Работы");
	
	ТЗ_Работы = Новый_ТЗРаботы();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("НомерАкта");
	ДанныеДляПечати.Вставить("ДатаАкта");
	ДанныеДляПечати.Вставить("Заголовок");
	
	ДанныеДляПечати.Вставить("Исполнитель");
	ДанныеДляПечати.Вставить("Исполнитель_ОКПО");
	ДанныеДляПечати.Вставить("Исполнитель_ОКОПФ");
	ДанныеДляПечати.Вставить("Исполнитель_ИНН");
	ДанныеДляПечати.Вставить("Исполнитель_КПП");
	ДанныеДляПечати.Вставить("Исполнитель_Адрес");
	ДанныеДляПечати.Вставить("Исполнитель_Телефон");
	ДанныеДляПечати.Вставить("Исполнитель_Факс");
	ДанныеДляПечати.Вставить("Исполнитель_БанковскийСчет");
	ДанныеДляПечати.Вставить("Исполнитель_Банк");
	ДанныеДляПечати.Вставить("Исполнитель_БИКБанка");
	
	ДанныеДляПечати.Вставить("ТЗ_ОписаниеРабот", ТЗ_ОписаниеРабот);
	
	ДанныеДляПечати.Вставить("ДатаПодписиИсполнителем");
	ДанныеДляПечати.Вставить("ДоверенноеЛицо");
	ДанныеДляПечати.Вставить("ДоверенноЛицо_Должность");
	ДанныеДляПечати.Вставить("Доверенность_Номер");
	ДанныеДляПечати.Вставить("Доверенность_Дата");
	ДанныеДляПечати.Вставить("Доверенность_ВыданаОрганизацией");
	ДанныеДляПечати.Вставить("Доверенность_ДолжностьВыданаКем");
	ДанныеДляПечати.Вставить("Доверенность_ВыданаКемДопСведения");
	ДанныеДляПечати.Вставить("Доверенность_ВыданаКем");
	ДанныеДляПечати.Вставить("Доверенность_ДолжностьВыданаКому");
	ДанныеДляПечати.Вставить("Доверенность_ВыданаКомуДопСведения");
	ДанныеДляПечати.Вставить("Доверенность_ВыданаКому");
	
	ДанныеДляПечати.Вставить("ПодписантЮЛ");
	ДанныеДляПечати.Вставить("ПодписантИП");
	ДанныеДляПечати.Вставить("Подписант_ИНН");
	ДанныеДляПечати.Вставить("Подписант_Должность");
	ДанныеДляПечати.Вставить("Подписант_СвидетельствоГосРегистрации");
	
	ДанныеДляПечати.Вставить("ПодписьИсполнителяФИО");
	ДанныеДляПечати.Вставить("ПодписьИсполнителяДолжность");
	
	ДанныеДляПечати.Вставить("Заказчик");
	
	ДанныеДляПечати.Вставить("УступочнаяНадпись");
	
	Док 		= ОбъектXDTO.Документ;
	СвАктИ  	= Док.СвАктИ;
	Исполнитель = СвАктИ.Исполнитель;
	ОписРабот	= СвАктИ.ОписРабот;
	Сдал		= СвАктИ.Сдал;
	Подписант	= Док.Подписант;
	ИнфПол		= СвАктИ.ИнфПол;	
	
	ДанныеДляПечати.Вставить("НомерАкта", СвАктИ.НомАкт);
	ДанныеДляПечати.Вставить("ДатаАкта", СвАктИ.ДатаАкт);
	ДанныеДляПечати.Вставить("Заголовок", СвАктИ.Заголовок);
	
	Если НЕ Док.Подписант.ЮЛ = Неопределено Тогда
		ДанныеДляПечати.Вставить("ПодписьИсполнителяДолжность", Док.Подписант.ЮЛ.Должн);
		ДанныеДляПечати.Вставить("ПодписьИсполнителяФИО", Док.Подписант.ЮЛ.ФИО.Фамилия + " " + Док.Подписант.ЮЛ.ФИО.Имя + " " + Док.Подписант.ЮЛ.ФИО.Отчество);
	Иначе 
		
	КонецЕсли;
		
	ДанныеДляПечати.Вставить("Исполнитель_ОКПО", Исполнитель.ОКПО);
	ИдСв = Исполнитель.ИдСв;
	Если НЕ ИдСв.СвЮЛ = Неопределено Тогда
		ДанныеДляПечати.Вставить("Исполнитель", ИдСв.СвЮЛ.НаимОрг);
		ДанныеДляПечати.Вставить("Исполнитель_ОКОПФ", ИдСв.СвЮЛ.ОКОПФ);
		ДанныеДляПечати.Вставить("Исполнитель_ИНН", ИдСв.СвЮЛ.ИННЮЛ);
		ДанныеДляПечати.Вставить("Исполнитель_КПП", ИдСв.СвЮЛ.КПП);
	Иначе
		ДанныеДляПечати.Вставить("Исполнитель", ИдСв.СвФЛ.ФИОИП.Фамилия + " " + ИдСв.СвФЛ.ФИОИП.Имя + " " + ИдСв.СвФЛ.ФИОИП.Отчество);
		ДанныеДляПечати.Вставить("Исполнитель_ИНН", ИдСв.СвФЛ.ИННФЛ);
	КонецЕсли;
	
	Если НЕ Исполнитель.Адрес = Неопределено Тогда
		//адрес РФ
		Если НЕ Исполнитель.Адрес.АдрРФ = Неопределено Тогда
			АдрРФ 	= Исполнитель.Адрес.АдрРФ; 
			Регион 	= ПолучитьПредставлениеРегиона(АдрРФ.КодРегион);
			Представление = "" + "Россия" +
			?(ЗначениеЗаполнено(АдрРФ.Индекс), ", " + АдрРФ.Индекс, "") +
			?(ЗначениеЗаполнено(Регион), ", " + Регион, "")	+
			?(ЗначениеЗаполнено(АдрРФ.Район), ", " + АдрРФ.Район, "") +
			?(ЗначениеЗаполнено(АдрРФ.Город), ", " + АдрРФ.Город, "") + 
			?(ЗначениеЗаполнено(АдрРФ.НаселПункт), ", " + АдрРФ.НаселПункт, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Улица), ", " + АдрРФ.Улица, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Дом), ", дом " + АдрРФ.Дом, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Корпус), ", корпус " + АдрРФ.Корпус, "") + 
			?(ЗначениеЗаполнено(АдрРФ.Кварт), ", кв. " + АдрРФ.Кварт, "");
			ДанныеДляПечати.Вставить("Исполнитель_Адрес", Представление);
			//адрес Ино
		ИначеЕсли НЕ Исполнитель.Адрес.АдрИно = Неопределено Тогда 
			ДанныеДляПечати.Вставить("Исполнитель_Адрес",  Исполнитель.Адрес.АдрИно.АдрТекст);
			// не структурированный	
		Иначе
			ДанныеДляПечати.Вставить("Исполнитель_Адрес",  Исполнитель.Адрес.АдрТекст);
		КонецЕсли;
	КонецЕсли;
	
	// контакты
	Если НЕ Исполнитель.Контакт = Неопределено Тогда
		ДанныеДляПечати.Вставить("Исполнитель_Телефон", Исполнитель.Контакт.Тлф);
		ДанныеДляПечати.Вставить("Исполнитель_Факс", Исполнитель.Контакт.Факс);
	КонецЕсли;
	
	//банк. ревкизиты
	Если НЕ Исполнитель.БанкРекв = Неопределено Тогда
		ДанныеДляПечати.Вставить("Исполнитель_БанковскийСчет", Исполнитель.БанкРекв.НомерСчета);
		ДанныеДляПечати.Вставить("Исполнитель_Банк", Исполнитель.БанкРекв.СвБанк.НаимБанк);
		ДанныеДляПечати.Вставить("Исполнитель_БИКБанка", Исполнитель.БанкРекв.СвБанк.БИК);
	КонецЕсли;
	
	// Сдал
	ДанныеДляПечати.Вставить("Сдал");
	Если Не ОбъектXDTO.Документ.СвАктИ.Сдал = Неопределено Тогда
		ДанныеДляПечати.Сдал = Новый Структура("ДатаИсполн, ПодписьИсполн, ДоверенИсполн");
		ДанныеДляПечати.Сдал.ДатаИсполн = ОбъектXDTO.Документ.СвАктИ.Сдал.ДатаИсполн;
		Если Не ОбъектXDTO.Документ.СвАктИ.Сдал.ПодписьИсполн = Неопределено Тогда
			ДанныеДляПечати.Сдал.ПодписьИсполн = Новый Структура("Должность, ФИО");
			ДанныеДляПечати.Сдал.ПодписьИсполн.Должность = ОбъектXDTO.Документ.СвАктИ.Сдал.ПодписьИсполн.Должность;
			Если Не ОбъектXDTO.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО = Неопределено Тогда
				ДанныеДляПечати.Сдал.ПодписьИсполн.ФИО = Новый Структура("Фамилия, Имя, Отчество");
				ДанныеДляПечати.Сдал.ПодписьИсполн.ФИО.Фамилия = ОбъектXDTO.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Фамилия;
				ДанныеДляПечати.Сдал.ПодписьИсполн.ФИО.Имя = ОбъектXDTO.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Имя;
				ДанныеДляПечати.Сдал.ПодписьИсполн.ФИО.Отчество = ОбъектXDTO.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО.Отчество;
			КонецЕсли;
		КонецЕсли;
		Если Не ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн = Неопределено Тогда
			ДанныеДляПечати.Сдал.ДоверенИсполн = Новый Структура("НомДоверен, ДатаДоверен, ВыданаКем, ВыданаКому");
			ДанныеДляПечати.Сдал.ДоверенИсполн.НомДоверен = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.НомДоверен;
			ДанныеДляПечати.Сдал.ДоверенИсполн.ДатаДоверен = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ДатаДоверен;
			Если Не ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКем = Неопределено Тогда
				ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКем = Новый Структура("НаимОргКем, ДолжнКем, ДопСведКем, ФИО");
				ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКем.НаимОргКем = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКем.НаимОргКем;
				ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКем.ДолжнКем = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКем.ДолжнКем;
				ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКем.ДопСведКем = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКем.ДопСведКем;
				Если Не ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКем.ФИО = Неопределено Тогда
					ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКем.ФИО = Новый Структура("Фамилия, Имя, Отчество");
					ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКем.ФИО.Фамилия = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКем.ФИО.Фамилия;
					ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКем.ФИО.Имя = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКем.ФИО.Имя;
					ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКем.ФИО.Отчество = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКем.ФИО.Отчество;
				КонецЕсли;
			КонецЕсли;
			Если Не ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому = Неопределено Тогда
				ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКому = Новый Структура("Должн, ДопСведКому, ФИО");
				ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКому.Должн = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.Должн;
				ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКому.ДопСведКому = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.ДопСведКому;
				Если Не ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.ФИО = Неопределено Тогда
					ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКому.ФИО = Новый Структура("Фамилия, Имя, Отчество");
					ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКому.ФИО.Фамилия = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.ФИО.Фамилия;
					ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКому.ФИО.Имя = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.ФИО.Имя;
					ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКому.ФИО.Отчество = ОбъектXDTO.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому.ФИО.Отчество;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Подписант
	ДанныеДляПечати.Вставить("Подписант", Новый Структура("ИП, ЮЛ"));
	Если Не ОбъектXDTO.Документ.Подписант.ИП = Неопределено Тогда
		ДанныеДляПечати.Подписант.ИП = Новый Структура("ИННФЛ, СвГосРегИП, ФИО");
		ДанныеДляПечати.Подписант.ИП.ИННФЛ = ОбъектXDTO.Документ.Подписант.ИП.ИННФЛ;
		ДанныеДляПечати.Подписант.ИП.СвГосРегИП = ОбъектXDTO.Документ.Подписант.ИП.СвГосРегИП;
		ДанныеДляПечати.Подписант.ИП.ФИО = Новый Структура("Фамилия, Имя, Отчество");
		ДанныеДляПечати.Подписант.ИП.ФИО.Фамилия = ОбъектXDTO.Документ.Подписант.ИП.ФИО.Фамилия;
		ДанныеДляПечати.Подписант.ИП.ФИО.Имя = ОбъектXDTO.Документ.Подписант.ИП.ФИО.Имя;
		ДанныеДляПечати.Подписант.ИП.ФИО.Отчество = ОбъектXDTO.Документ.Подписант.ИП.ФИО.Отчество;
	Иначе
		ДанныеДляПечати.Подписант.ЮЛ = Новый Структура("ИННЮЛ, Должн, ФИО");
		ДанныеДляПечати.Подписант.ЮЛ.ИННЮЛ = ОбъектXDTO.Документ.Подписант.ЮЛ.ИННЮЛ;
		ДанныеДляПечати.Подписант.ЮЛ.Должн = ОбъектXDTO.Документ.Подписант.ЮЛ.Должн;
		ДанныеДляПечати.Подписант.ЮЛ.ФИО = Новый Структура("Фамилия, Имя, Отчество");
		ДанныеДляПечати.Подписант.ЮЛ.ФИО.Фамилия = ОбъектXDTO.Документ.Подписант.ЮЛ.ФИО.Фамилия;
		ДанныеДляПечати.Подписант.ЮЛ.ФИО.Имя = ОбъектXDTO.Документ.Подписант.ЮЛ.ФИО.Имя;
		ДанныеДляПечати.Подписант.ЮЛ.ФИО.Отчество = ОбъектXDTO.Документ.Подписант.ЮЛ.ФИО.Отчество;
	КонецЕсли;
	
	Для Каждого Элемент Из ОписРабот Цикл
		НовСтр 				= ТЗ_ОписаниеРабот.Добавить();
		НовСтр.НачалоРабот 	= Элемент.НачРабот;	
		НовСтр.КонецРабот 	= Элемент.КонРабот;
		НовСтр.СуммаБезНДС	= Элемент.СумБезНДСИт;
		НовСтр.СуммаНДС 	= Элемент.СумНДСИт;
		НовСтр.СуммаСНДС	= Элемент.СумУчНДСИт;
		
		
		ТЗ_Работы = Новый_ТЗРаботы();

		Для Каждого Элемент Из Элемент.Работа Цикл
			НовСтр1 = ТЗ_Работы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр1, Элемент);
			НовСтр1.БезНДС = (Элемент.СумНДС = Неопределено);
		КонецЦикла;

		НовСтр.Работы = ТЗ_Работы;
		
	КонецЦикла;
	
	//Сдал
	Если НЕ Сдал = Неопределено Тогда
		ДанныеДляПечати.Вставить("ДатаПодписиИсполнителем", Сдал.ДатаИсполн);
		Если НЕ Сдал.ПодписьИсполн = Неопределено Тогда
			ДанныеДляПечати.Вставить("ДоверенноеЛицо", Сдал.ПодписьИсполн.ФИО.Фамилия + " " + Сдал.ПодписьИсполн.ФИО.Имя + " " + Сдал.ПодписьИсполн.ФИО.Отчество);
			ДанныеДляПечати.Вставить("ДоверенноЛицо_Должность", Сдал.ПодписьИсполн.Должность);
		КонецЕсли;
		
		Если НЕ Сдал.ДоверенИсполн = Неопределено Тогда
			ДанныеДляПечати.Вставить("Доверенность_Номер", Сдал.ДоверенИсполн.НомДоверен);
			ДанныеДляПечати.Вставить("Доверенность_Дата", Сдал.ДоверенИсполн.ДатаДоверен);
			
			Если НЕ Сдал.ДоверенИсполн.ВыданаКем = Неопределено Тогда
				ДанныеДляПечати.Вставить("Доверенность_ВыданаОрганизацией", Сдал.ДоверенИсполн.ВыданаКем.НаимОргКем);
				ДанныеДляПечати.Вставить("Доверенность_ДолжностьВыданаКем", Сдал.ДоверенИсполн.ВыданаКем.ДолжнКем);
				ДанныеДляПечати.Вставить("Доверенность_ВыданаКемДопСведения", Сдал.ДоверенИсполн.ВыданаКем.ДопСведКем);
				Если НЕ Сдал.ДоверенИсполн.ВыданаКем.ФИО = Неопределено Тогда
					ДанныеДляПечати.Вставить("Доверенность_ВыданаКем", Сдал.ДоверенИсполн.ВыданаКем.ФИО.Фамилия + " " + Сдал.ДоверенИсполн.ВыданаКем.ФИО.Имя + " " + Сдал.ДоверенИсполн.ВыданаКем.ФИО.Отчество);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Сдал.ДоверенИсполн.ВыданаКому = Неопределено Тогда
				ДанныеДляПечати.Вставить("ПодписьИсполнителяДолжность", Сдал.ДоверенИсполн.ВыданаКому.Должн);
				ДанныеДляПечати.Вставить("Доверенность_ВыданаКомуДопСведения", Сдал.ДоверенИсполн.ВыданаКому.ДопСведКому);
				Если НЕ Сдал.ДоверенИсполн.ВыданаКому.ФИО = Неопределено Тогда
					ДанныеДляПечати.Вставить("ПодписьИсполнителяФИО", Сдал.ДоверенИсполн.ВыданаКому.ФИО.Фамилия + " " + Сдал.ДоверенИсполн.ВыданаКому.ФИО.Имя + " " + Сдал.ДоверенИсполн.ВыданаКому.ФИО.Отчество);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИнфПол = Неопределено Тогда
		УступочнаяНадпись = ИнфПол.ТекстИнф;
		ДанныеДляПечати.Вставить("УступочнаяНадпись", УступочнаяНадпись);
	КонецЕсли;
	
	//Так как заказчика нет в XML, находим его в синердоксе
	FullDocumentInfo = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, Syn_Документ.Id, );
	
	//Проверяем, входящий или исходящий документ (from или to)
	Если FullDocumentInfo.To = Syn_ЯщикОрганизации Тогда
		//Наша организация - заказчик
		ДанныеДляПечати.Вставить("Заказчик", Организация);
		ДанныеДляПечати.Вставить("Заказчик_ИНН", Организация.ИНН);
		ДанныеДляПечати.Вставить("Заказчик_КПП", Организация.КПП);
	Иначе
		//Наша организация - исполнитель, контрагент - заказчик
		Syn_ЯщикКонтрагента = FullDocumentInfo.To;
		Контрагент = ПолучитьОбъектПоЗначениюСвойства("Syn_ЯщикКонтрагента", Syn_ЯщикКонтрагента);
		//Ищем контрагента по ящику
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ДанныеДляПечати.Вставить("Заказчик", Контрагент.Наименование);
			ДанныеДляПечати.Вставить("Заказчик_ИНН", Контрагент.ИНН);
			ДанныеДляПечати.Вставить("Заказчик_КПП", Контрагент.КПП);
		Иначе
			Попытка
				InnKppName = ExchangeService.GetInnKppNameByBoxId(Токен, Syn_ЯщикКонтрагента);
				Если InnKppName <> НЕОПРЕДЕЛЕНО Тогда
					ДанныеДляПечати.Вставить("Заказчик", InnKppName.Name);
					ДанныеДляПечати.Вставить("Заказчик_ИНН", InnKppName.INN);
					ДанныеДляПечати.Вставить("Заказчик_КПП", InnKppName.KPP);
				КонецЕсли;
			Исключение
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
				
				ОтправитьУведомлениеПользователю("Ошибка получения информации о контрагенте по его ящику: " + ТекстОшибкиSynerdocs);
				
				Возврат НЕОПРЕДЕЛЕНО;
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	НовыйЧтениеXML.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	
	//титул покупателя
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьНомер");
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьДата");
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКемОрганизация");
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКемДолжность");
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКемФИО");
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКомуДолжность");
	ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКомуФИО");
	ДанныеДляПечати.Вставить("Заказчик_ДолжностьДолжностногоЛица");
	ДанныеДляПечати.Вставить("Заказчик_ФИОДолжностногоЛица");
	ДанныеДляПечати.Вставить("Заказчик_ДолжностьПодписанта");
	ДанныеДляПечати.Вставить("Заказчик_ФИОПодписанта");
	ДанныеДляПечати.Вставить("Заказчик_ДатаПодписанияАкта");
	ДанныеДляПечати.Вставить("Заказчик_Претензии");
	
	//находим титул покупателя в случае если акт подписан
	Syn_СлужебныеДокументы = FullDocumentInfo.ServiceDocuments;
	
	Если НЕ Syn_СлужебныеДокументы = Неопределено Тогда
		Для Каждого СервисныйДокумент Из Syn_СлужебныеДокументы.ServiceDocument Цикл
			Если СервисныйДокумент.DocumentType = "ActOfWorkBuyer" Тогда
				
				Попытка
					ТитулПокупателя_ДвоичныеДанные = ?(СервисныйДокумент.FileSize > 1000000, 
					ExchangeService.GetDocumentContent(Токен, Syn_ЯщикОрганизации, СервисныйДокумент.Id),
					СервисныйДокумент.Content);
				Исключение
					ОписаниеОшибкиСтрокой = ОписаниеОшибки();
					ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
					ОтправитьУведомлениеПользователю("Ошибка получения контента (содержимого) ЭД: " + ТекстОшибкиSynerdocs);
					Возврат НЕОПРЕДЕЛЕНО;
				КонецПопытки;							
				
				ВрФайлТитул = ПолучитьИмяВременногоФайла("xml");
				ТитулПокупателя_ДвоичныеДанные.Записать(ВрФайлТитул);
				
				Текст 				= Новый ТекстовыйДокумент;
				Текст.Прочитать(ВрФайлТитул);
				СтрокаПоиска 		= Текст.ПолучитьТекст();
				
				Если НЕ Найти(СтрокаПоиска, "СвОЭДОтпрСФ") = 0 Тогда
					ЭтоНовыйФормат = Истина;
				Иначе
					ЭтоНовыйФормат = Ложь;
				КонецЕсли;
				
				// Заменим/добавим наше пространство имен
				НачалоПрИмен		= Найти(СтрокаПоиска, "<Файл") + 5;
				КонецПрИмен			= Найти(СтрокаПоиска, "ИдФайл=");
				УдаляемаяСтрока 	= Сред(СтрокаПоиска, НачалоПрИмен, КонецПрИмен - НачалоПрИмен);
				ПрИмен 				= """synerdocs_zakt502""";
				СтрокаПодстановки 	= " xmlns=" + ПрИмен + " xmlns:xs=" + """http://www.w3.org/2001/XMLSchema""" +
				" xmlns:xsi=" + """http://www.w3.org/2001/XMLSchema-instance"" ";
				
				Если НЕ УдаляемаяСтрока = " " Тогда
					// Заменяем пространство имен в xml на наше
					СтрокаПоиска = СтрЗаменить(СтрокаПоиска, УдаляемаяСтрока, СтрокаПодстановки);	
				Иначе
					// Нет пространства имен в xml, подставляем наше
					СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "<Файл", "<Файл" + СтрокаПодстановки);
				КонецЕсли;
				
				Текст.УстановитьТекст(СтрокаПоиска);
				Текст.Записать(ВрФайлТитул, КодировкаТекста.Системная);
				
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВрФайлТитул = Неопределено;
	КонецЕсли;
	
	Если НЕ ВрФайлТитул = Неопределено Тогда
		
		НовыйЧтениеXML 	= Новый ЧтениеXML;
		НовыйЧтениеXML.ОткрытьФайл(ВрФайлТитул);
		
		//Создаем объект и закрываем xml
		Если НЕ ЭтоНовыйФормат Тогда
			Фабрика 	= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_ZAKTPRM_1_990_00_05_01_01").ПолучитьТекст());
		Иначе
			Фабрика 	= СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("DP_ZAKTPRM_1_990_00_05_01_02").ПолучитьТекст());
		КонецЕсли;
		
		ТипОбъектаXDTO 	= Фабрика.Тип("synerdocs_zakt502", "Файл");
		ОбъектXDTO 		= Фабрика.ПрочитатьXML(НовыйЧтениеXML, ТипОбъектаXDTO);
		
		НовыйЧтениеXML.Закрыть();
		УдалитьФайлы(ВрФайлТитул);
		
		Принял = ОбъектXDTO.Документ.СвАктИ.Принял;
		
		//Приняд
		Если НЕ Принял = Неопределено Тогда
			ДанныеДляПечати.Вставить("Заказчик_ДатаПодписанияАкта", Принял.ДатаЗаказ);
			ДанныеДляПечати.Вставить("Заказчик_Претензии", Принял.Претенз);
			Если НЕ Принял.ПодписьЗаказ = Неопределено Тогда
				ДанныеДляПечати.Вставить("Заказчик_ДолжностьДолжностногоЛица", Принял.ПодписьЗаказ.Должность);
				Если НЕ Принял.ПодписьЗаказ.ФИО = Неопределено Тогда 
					ДанныеДляПечати.Вставить("Заказчик_ФИОДолжностногоЛица", Принял.ПодписьЗаказ.ФИО.Фамилия + " " + Принял.ПодписьЗаказ.ФИО.Имя + " " + Принял.ПодписьЗаказ.ФИО.Отчество);
				КонецЕсли;
			КонецЕсли;
			//доверенность
			Если НЕ Принял.ДоверенЗаказ = Неопределено Тогда
				ДанныеДляПечати.Вставить("Заказчик_ДоверенностьНомер", Принял.ДоверенЗаказ.НомДоверен);
				ДанныеДляПечати.Вставить("Заказчик_ДоверенностьДата", Принял.ДоверенЗаказ.ДатаДоверен);
				Если НЕ Принял.ДоверенЗаказ.ВыданаКем = Неопределено Тогда
					ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКемОрганизация", Принял.ДоверенЗаказ.ВыданаКем.НаимОргКем);
					ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКемДолжность", Принял.ДоверенЗаказ.ВыданаКем.ДолжнКем);
					Если НЕ Принял.ДоверенЗаказ.ВыданаКем.ФИО = Неопределено Тогда 
						ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКемФИО", Принял.ДоверенЗаказ.ВыданаКем.ФИО.Фамилия + " " + Принял.ДоверенЗаказ.ВыданаКем.ФИО.Имя + " " + Принял.ДоверенЗаказ.ВыданаКем.ФИО.Отчество); 
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ Принял.ДоверенЗаказ.ВыданаКому = Неопределено Тогда
					ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКомуДолжность", Принял.ДоверенЗаказ.ВыданаКому.Должн);
					Если НЕ Принял.ДоверенЗаказ.ВыданаКому.ФИО = Неопределено Тогда
						ДанныеДляПечати.Вставить("Заказчик_ДоверенностьВыданаКомуФИО", Принял.ДоверенЗаказ.ВыданаКому.ФИО.Фамилия + " " + Принял.ДоверенЗаказ.ВыданаКому.ФИО.Имя + " " + Принял.ДоверенЗаказ.ВыданаКому.ФИО.Отчество);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПодписантТитула = ОбъектXDTO.Документ.Подписант;
		
		Если НЕ ПодписантТитула.ЮЛ = Неопределено Тогда
			ДанныеДляПечати.Вставить("Заказчик_ДолжностьПодписанта", ПодписантТитула.ЮЛ.Должн);	
			ДанныеДляПечати.Вставить("Заказчик_ФИОПодписанта", ПодписантТитула.ЮЛ.ФИО.Фамилия + " " + ПодписантТитула.ЮЛ.ФИО.Имя + " " + ПодписантТитула.ЮЛ.ФИО.Отчество);
		Иначе	
			ДанныеДляПечати.Вставить("Заказчик_ДолжностьПодписанта", "--");	
			ДанныеДляПечати.Вставить("Заказчик_ФИОПодписанта", ПодписантТитула.ИП.ФИО.Фамилия + " " + ПодписантТитула.ИП.ФИО.Имя + " " + ПодписантТитула.ИП.ФИО.Отчество);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Организация.ИНН = ДанныеДляПечати.Исполнитель_ИНН Тогда
		// Исходящий
		ДанныеДляПечати.Вставить("флВходящийДок", Ложь);
	Иначе
		// Входящий
		ДанныеДляПечати.Вставить("флВходящийДок", Истина);
	КонецЕсли;
	ДанныеДляПечати.Вставить("ВидДокумента", "Акт");
	
	НовыйЧтениеXML.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

//Функция разбирает XML-файл (контент) документа с типом "Счет на оплату" и возвращает данные в виде структуры
//
// Параметры:
//  Syn_Документ: документ сервиса (экземпляр класса Document)
//
// Возвращаемое значение:
//	Структура: структурированные данные, полученные из XML
// 
Функция РазобратьЭД_СчетНаОплату(Документ_ДвоичныеДанные, ЯщикЗаказчика) Экспорт
	
	Если Документ_ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВрФайлЭД = ПолучитьИмяВременногоФайла("xml");
	Документ_ДвоичныеДанные.Записать(ВрФайлЭД);
	
	Фабрика = СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("XSD_SchetOpl").ПолучитьТекст());
	
	НовыйЧтениеXML = Новый ЧтениеXML;
	НовыйЧтениеXML.ОткрытьФайл(ВрФайлЭД);
	
	ТипОбъектаXDTO = Фабрика.Тип("http://synerdocs.ru/cardschemas/synerdocs_schet_opl.xsd", "Файл");
	ОбъектXDTO = Фабрика.ПрочитатьXML(НовыйЧтениеXML, ТипОбъектаXDTO);
	НовыйЧтениеXML.Закрыть();
	
	ДокументXDTO = ОбъектXDTO.Документ;
	ИдСвПродавца = ДокументXDTO.СвСчОпл.СвПрод.ИдСв;
	ИдСвПокупателя = ДокументXDTO.СвСчОпл.СвПокуп.ИдСв;
	БанкРеквПрод = ДокументXDTO.СвСчОпл.СвПрод.БанкРекв;
	
	СтруктураДокумента = Новый Структура;
	
	// Реквизиты документа
	СтруктураДокумента.Вставить("НомерДокумента", ДокументXDTO.СвСчОпл.НомерСчОпл);
	СтруктураДокумента.Вставить("ДатаДокумента", ДокументXDTO.СвСчОпл.ДатаСчОпл);
	СтруктураДокумента.Вставить("Валюта", ДокументXDTO.СвСчОпл.КодОКВ);
	
	// Данные продавца
	Если ИдСвПродавца.СвФЛ = Неопределено Тогда
		СтруктураДокумента.Вставить("Продавец", СокрЛП(ИдСвПродавца.СвЮЛ.НаимОрг));
		СтруктураДокумента.Вставить("ПродавецИНН", ИдСвПродавца.СвЮЛ.ИННЮЛ);
		СтруктураДокумента.Вставить("ПродавецКПП", ИдСвПродавца.СвЮЛ.КПП);
	Иначе
		СтруктураДокумента.Вставить("Продавец", СокрЛП(ИдСвПродавца.СвФЛ.ФИОИП.Фамилия + " " + ИдСвПродавца.СвФЛ.ФИОИП.Имя + " " + ИдСвПродавца.СвФЛ.ФИОИП.Отчество));
		СтруктураДокумента.Вставить("ПродавецИНН", ИдСвПродавца.СвФЛ.ИННФЛ);
		СтруктураДокумента.Вставить("ПродавецКПП", Неопределено);
	КонецЕсли;
	
	Если Не БанкРеквПрод = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерСчетаПрод", ?(ЗначениеЗаполнено(БанкРеквПрод.НомерСчета), БанкРеквПрод.НомерСчета, ""));
		СтруктураДокумента.Вставить("БИКПрод", ?(ЗначениеЗаполнено(БанкРеквПрод.СвБанк.БИК), БанкРеквПрод.СвБанк.БИК, ""));
		СтруктураДокумента.Вставить("НаимБанкПрод", ?(ЗначениеЗаполнено(БанкРеквПрод.СвБанк.НаимБанк), БанкРеквПрод.СвБанк.НаимБанк, ""));
		СтруктураДокумента.Вставить("КоррСчетПрод", ?(ЗначениеЗаполнено(БанкРеквПрод.СвБанк.НомерСчета), БанкРеквПрод.СвБанк.НомерСчета, ""));		
	КонецЕсли;
	
	// Данные покупателя
	Если ИдСвПокупателя.СвФЛ = Неопределено Тогда
		СтруктураДокумента.Вставить("Покупатель", СокрЛП(ИдСвПокупателя.СвЮЛ.НаимОрг));
		СтруктураДокумента.Вставить("ПокупательИНН", ИдСвПокупателя.СвЮЛ.ИННЮЛ);
		СтруктураДокумента.Вставить("ПокупательКПП", ИдСвПокупателя.СвЮЛ.КПП);
	Иначе
		СтруктураДокумента.Вставить("Покупатель", СокрЛП(ИдСвПокупателя.СвФЛ.ФИОИП.Фамилия + " " + ИдСвПокупателя.СвФЛ.ФИОИП.Имя + " " + ИдСвПокупателя.СвФЛ.ФИОИП.Отчество));
		СтруктураДокумента.Вставить("ПокупательИНН", ИдСвПокупателя.СвФЛ.ИННФЛ);
		СтруктураДокумента.Вставить("ПокупательКПП", Неопределено);
	КонецЕсли;
	
	// Табличная часть документа
	МассивСтрокТЧ = Новый Массив;
	Для Каждого СтрокаТЧДокумента Из ДокументXDTO.ТаблСчОпл.СведТов Цикл
		СтрокаТЧ = Новый Структура();
		СтрокаТЧ.Вставить("НаимТов", СтрокаТЧДокумента.НаимТов);
		СтрокаТЧ.Вставить("Артикул", СтрокаТЧДокумента.Артикул);
		СтрокаТЧ.Вставить("ОКЕИ_Тов", СтрокаТЧДокумента.ОКЕИ_Тов);
		СтрокаТЧ.Вставить("КолТов", СтрокаТЧДокумента.КолТов);
		СтрокаТЧ.Вставить("ЦенаТов", СтрокаТЧДокумента.ЦенаТов);
		СтрокаТЧ.Вставить("СтТовБезНДС", СтрокаТЧДокумента.СтТовБезНДС);
		СтрокаТЧ.Вставить("СтТовУчНал", СтрокаТЧДокумента.СтТовУчНал);
		СтрокаТЧ.Вставить("НалСтВел", СтрокаТЧДокумента.НалСтВел);
		СтрокаТЧ.Вставить("НалСтТип", СтрокаТЧДокумента.НалСтТип);
		СтрокаТЧ.Вставить("СумНДС", СтрокаТЧДокумента.СумНДС);
		СтрокаТЧ.Вставить("ИнфПолСтр", СтрокаТЧДокумента.ИнфПолСтр);
		МассивСтрокТЧ.Добавить(СтрокаТЧ);
	КонецЦикла;
	СтруктураДокумента.Вставить("ТЗ_Товары", МассивСтрокТЧ);
	
	СтруктураДокумента.Вставить("флВходящийДок", ?(Организация.Ссылка.ИНН = СтруктураДокумента.ПокупательИНН, Истина, Ложь));
	СтруктураДокумента.Вставить("ВидДокумента", "СчетНаОплату");
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция РазобратьЭД_ПОА(Документ_ДвоичныеДанные)
	
	Если Документ_ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВрФайлЭД = ПолучитьИмяВременногоФайла("xml");
	Документ_ДвоичныеДанные.Записать(ВрФайлЭД);
	ПроверитьИсправитьПрвоИмен(ВрФайлЭД, "PRANNUL");
	
	Фабрика = СоздатьОбъектXDTOИзСхемы(ПолучитьМакет("XSD_PRANNUL").ПолучитьТекст());
	
	НовыйЧтениеXML = Новый ЧтениеXML;
    НовыйЧтениеXML.ОткрытьФайл(ВрФайлЭД);
	
	ТипОбъектаXDTO = Фабрика.Тип("PRANNUL", "Файл");
	ОбъектXDTO = Фабрика.ПрочитатьXML(НовыйЧтениеXML, ТипОбъектаXDTO);
	НовыйЧтениеXML.Закрыть();
	
	Результат = Новый Структура;
		Результат.Вставить("ВерсПрог", ОбъектXDTO.ВерсПрог);
		Результат.Вставить("ВерсФорм", ОбъектXDTO.ВерсФорм);
		Результат.Вставить("ИдФайл", ОбъектXDTO.ИдФайл);
		Результат.Вставить("Документ", Новый Структура);
			Результат.Документ.Вставить("НапрПредАн", Новый Структура);
				Результат.Документ.НапрПредАн.Вставить("ИдУчастЭДО", ОбъектXDTO.Документ.НапрПредАн.ИдУчастЭДО);
				Результат.Документ.НапрПредАн.Вставить("ИП");
				Результат.Документ.НапрПредАн.Вставить("ЮЛ");
				УчИП = ОбъектXDTO.Документ.НапрПредАн.ИП;
				УчЮЛ = ОбъектXDTO.Документ.НапрПредАн.ЮЛ;
				Если УчИП <> Неопределено Тогда
					Результат.Документ.НапрПредАн.ИП = Новый Структура;
						Результат.Документ.НапрПредАн.ИП.Вставить("ИННФЛ", ОбъектXDTO.Документ.НапрПредАн.ИП.ИННФЛ);
						Результат.Документ.НапрПредАн.ИП.Вставить("ФИО", Новый Структура);
							Результат.Документ.НапрПредАн.ИП.ФИО.Вставить("Фамилия", ОбъектXDTO.Документ.НапрПредАн.ИП.ФИО.Фамилия);
							Результат.Документ.НапрПредАн.ИП.ФИО.Вставить("Имя", ОбъектXDTO.Документ.НапрПредАн.ИП.ФИО.Имя);
							Результат.Документ.НапрПредАн.ИП.ФИО.Вставить("Отчество", ОбъектXDTO.Документ.НапрПредАн.ИП.ФИО.Отчество);
				ИначеЕсли УчЮЛ <> Неопределено Тогда
					Результат.Документ.НапрПредАн.ЮЛ = Новый Структура;
						Результат.Документ.НапрПредАн.ЮЛ.Вставить("ИННЮЛ", ОбъектXDTO.Документ.НапрПредАн.ЮЛ.ИННЮЛ);
						Результат.Документ.НапрПредАн.ЮЛ.Вставить("КПП", ОбъектXDTO.Документ.НапрПредАн.ЮЛ.КПП);
						Результат.Документ.НапрПредАн.ЮЛ.Вставить("НаимОрг", ОбъектXDTO.Документ.НапрПредАн.ЮЛ.НаимОрг);
				КонецЕсли;
			Результат.Документ.Вставить("УчастЭДО", Новый Структура);
				Результат.Документ.УчастЭДО.Вставить("ИдУчастЭДО", ОбъектXDTO.Документ.УчастЭДО.ИдУчастЭДО);
				Результат.Документ.УчастЭДО.Вставить("ИП");
				Результат.Документ.УчастЭДО.Вставить("ЮЛ");
				УчИП = ОбъектXDTO.Документ.УчастЭДО.ИП;
				УчЮЛ = ОбъектXDTO.Документ.УчастЭДО.ЮЛ;
				Если УчИП <> Неопределено Тогда
					Результат.Документ.УчастЭДО.ИП = Новый Структура;
						Результат.Документ.УчастЭДО.ИП.Вставить("ИННФЛ", ОбъектXDTO.Документ.УчастЭДО.ИП.ИННФЛ);
						Результат.Документ.УчастЭДО.ИП.Вставить("ФИО", Новый Структура);
							Результат.Документ.УчастЭДО.ИП.ФИО.Вставить("Фамилия", ОбъектXDTO.Документ.УчастЭДО.ИП.ФИО.Фамилия);
							Результат.Документ.УчастЭДО.ИП.ФИО.Вставить("Имя", ОбъектXDTO.Документ.УчастЭДО.ИП.ФИО.Имя);
							Результат.Документ.УчастЭДО.ИП.ФИО.Вставить("Отчество", ОбъектXDTO.Документ.УчастЭДО.ИП.ФИО.Отчество);
				ИначеЕсли УчЮЛ <> Неопределено Тогда
					Результат.Документ.УчастЭДО.ЮЛ = Новый Структура;
						Результат.Документ.УчастЭДО.ЮЛ.Вставить("ИННЮЛ", ОбъектXDTO.Документ.УчастЭДО.ЮЛ.ИННЮЛ);
						Результат.Документ.УчастЭДО.ЮЛ.Вставить("КПП", ОбъектXDTO.Документ.УчастЭДО.ЮЛ.КПП);
						Результат.Документ.УчастЭДО.ЮЛ.Вставить("НаимОрг", ОбъектXDTO.Документ.УчастЭДО.ЮЛ.НаимОрг);
				КонецЕсли;
			Результат.Документ.Вставить("СвПредАн", Новый Структура);
				Результат.Документ.СвПредАн.Вставить("ТекстПредАн", ОбъектXDTO.Документ.СвПредАн.ТекстПредАн);
				Результат.Документ.СвПредАн.Вставить("СведАнФайл", Новый Структура);
					Результат.Документ.СвПредАн.СведАнФайл.Вставить("ИмяАнФайла", ОбъектXDTO.Документ.СвПредАн.СведАнФайл.ИмяАнФайла);
					Результат.Документ.СвПредАн.СведАнФайл.Вставить("ЭЦПАнФайл", Новый Массив);
					Для Каждого ЭЦПАнФайл Из ОбъектXDTO.Документ.СвПредАн.СведАнФайл.ЭЦПАнФайл Цикл
						Результат.Документ.СвПредАн.СведАнФайл.ЭЦПАнФайл.Добавить(Base64Значение(ЭЦПАнФайл));
					КонецЦикла;
			Результат.Документ.Вставить("Подписант", Новый Структура);
				Результат.Документ.Подписант.Вставить("Должность", ОбъектXDTO.Документ.Подписант.Должность);
				Результат.Документ.Подписант.Вставить("ФИО", Новый Структура);
					Результат.Документ.Подписант.ФИО.Вставить("Фамилия", ОбъектXDTO.Документ.Подписант.ФИО.Фамилия);
					Результат.Документ.Подписант.ФИО.Вставить("Имя", ОбъектXDTO.Документ.Подписант.ФИО.Имя);
					Результат.Документ.Подписант.ФИО.Вставить("Отчество", ОбъектXDTO.Документ.Подписант.ФИО.Отчество);
	
	МассивПодписей = Новый Массив;
	Если МенеджерКриптографии <> Неопределено Тогда
		Для Каждого ДанныеЭП Из Результат.Документ.СвПредАн.СведАнФайл.ЭЦПАнФайл Цикл
			Если ДанныеЭП = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ПодписиВДокументе = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеЭП);
				Подпись = ПодписиВДокументе[0];
				
				ПолеФИО = Новый Массив;
				ПолеФИО.Добавить(ПолучитьЗначениеПоляСубъекта(Подпись.Субъект, "SN"));
				ПолеФИО.Добавить(ПолучитьЗначениеПоляСубъекта(Подпись.Субъект, "GN"));
				ПолеФИО = СтрСоединить2(ПолеФИО, " ");
				
				ПолеОрганизация = ПолучитьЗначениеПоляСубъекта(Подпись.Субъект, "O");
				Если ПустаяСтрока(ПолеОрганизация) Тогда
					ПолеОрганизация = ПолеФИО;
				КонецЕсли;
				
				СтруктураПодписи = Новый Структура;
				СтруктураПодписи.Вставить("Организация", ПолеОрганизация);
				СтруктураПодписи.Вставить("ФИО", ПолеФИО);
				СтруктураПодписи.Вставить("Должность", ПолучитьЗначениеПоляСубъекта(Подпись.Субъект, "T"));
				СтруктураПодписи.Вставить("СерийныйНомерЭП", СтрЗаменить(Подпись.СерийныйНомер, " ", ""));
				СтруктураПодписи.Вставить("ИздательЭП", Подпись.Издатель.CN);
				МассивПодписей.Добавить(СтруктураПодписи);
			Исключение
				
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Результат.Документ.Вставить("ПодписиАнДок", МассивПодписей);

	Возврат Результат;
	
КонецФункции

Процедура ПроверитьИсправитьПрвоИмен(ИмяФайла, ПрвоИмен)
	
	УстановитьПространствоИмен(ИмяФайла, ПрвоИмен);
	
КонецПроцедуры


//Процедура сохраняет двоичные данные электронного документа в файл на диске:
//либо в каталог, указанный в параметрах, либо в каталог, указанный в настройках модуля
//
// Параметры:
//	Документ_ДвоичныеДанные: двоичные данные электронного документа
//	Документ_ИмяФайла: имя файла электронного документа
//	КаталогСохранения: путь к каталогу, в который сохраняется файл
//
Процедура СохранитьЭлектронныйДокументНаДиск(Документ_ДвоичныеДанные, Документ_ИмяФайла, КаталогСохранения = "") Экспорт
	
	// Экранируем спецсимволы в имени файла
	Документ_ИмяФайла = СтрЗаменить(Документ_ИмяФайла, "\", "-");
	Документ_ИмяФайла = СтрЗаменить(Документ_ИмяФайла, "/", "-");
	Документ_ИмяФайла = СтрЗаменить(Документ_ИмяФайла, "|", "-");
	Документ_ИмяФайла = СтрЗаменить(Документ_ИмяФайла, ">", "-");
	Документ_ИмяФайла = СтрЗаменить(Документ_ИмяФайла, "<", "-");
	Документ_ИмяФайла = СтрЗаменить(Документ_ИмяФайла, ":", "-");
	Документ_ИмяФайла = СтрЗаменить(Документ_ИмяФайла, "*", "-");
	Документ_ИмяФайла = СтрЗаменить(Документ_ИмяФайла, "?", "-");
	Документ_ИмяФайла = СтрЗаменить(Документ_ИмяФайла, """", "");
	
	Попытка
		
		МаксимальноРазрешеннаяДлинаИмениФайла = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("МаксимальноРазрешеннаяДлинаИмениФайла");
		
		КаталогСохранения = ?(Не ПустаяСтрока(КаталогСохранения), КаталогСохранения, КаталогВременныхФайлов());
		//Документ_ДвоичныеДанные.Записать(КаталогСохранения + "\" + Документ_ИмяФайла + ".xml");
		//смотрим наличие расширения в имени: если нет,  то добавляем по умолчанию "xml"
		Поз_Точка = Найти(Документ_ИмяФайла, ".");
		Если Поз_Точка > 0 Тогда
			ПолноеИмяФайла = КаталогСохранения + "\" + Документ_ИмяФайла;
			ИмяФайлаБезРасширения = Лев(Документ_ИмяФайла, Поз_Точка - 1);
			Расширение = Сред(Документ_ИмяФайла, Поз_Точка);
			//			Документ_ДвоичныеДанные.Записать(КаталогСохранения + "\" + Документ_ИмяФайла);
		Иначе
			ПолноеИмяФайла = КаталогСохранения + "\" + Документ_ИмяФайла + ".xml";
			ИмяФайлаБезРасширения = Документ_ИмяФайла;
			Расширение = ".xml";
			//			Документ_ДвоичныеДанные.Записать(КаталогСохранения + "\" + Документ_ИмяФайла + ".xml");
		КонецЕсли;
		
		//проверяем длину имени файла (вычитаем расширение с точкой)
		Если СтрДлина(ПолноеИмяФайла) > МаксимальноРазрешеннаяДлинаИмениФайла Тогда
			ВариантСохраненияФайловСДлиннымиИменами = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("ВариантСохраненияФайловСДлиннымиИменами");
			
			Если ВариантСохраненияФайловСДлиннымиИменами = 1 Тогда
				//Автоматически обрезаем локальное имя файла
				НужноОбрезать = СтрДлина(ПолноеИмяФайла) - МаксимальноРазрешеннаяДлинаИмениФайла + 1;
				Документ_ОбрезанноеИмяФайла = Лев(ИмяФайлаБезРасширения, СтрДлина(ИмяФайлаБезРасширения) - НужноОбрезать) + Расширение;
				ПолноеИмяФайла = КаталогСохранения + "\" + Документ_ОбрезанноеИмяФайла;
			Иначе
				//Запрос к пользователю
				ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
				ДиалогСохраненияФайла.Каталог = КаталогСохранения;
				ДиалогСохраненияФайла.ПолноеИмяФайла = ПолноеИмяФайла;
				ДиалогСохраненияФайла.Расширение = Прав(Расширение, 3);
				ДиалогСохраненияФайла.Заголовок = "Длина имени файла документа превышает допустимую (" + МаксимальноРазрешеннаяДлинаИмениФайла + " симв.). Необходимо переименовать файл.";
				Если ДиалогСохраненияФайла.Выбрать() Тогда
					ПолноеИмяФайла = ДиалогСохраненияФайла.ПолноеИмяФайла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрДлина(ПолноеИмяФайла) > МаксимальноРазрешеннаяДлинаИмениФайла Тогда
			Сообщить("Длина полного имени файла документа <" + ПолноеИмяФайла + "> (" + СтрДлина(ПолноеИмяФайла) + " симв.) превышает предельно допустимую (" + МаксимальноРазрешеннаяДлинаИмениФайла + " симв.). Файл не сохранен");
		Иначе
			Документ_ДвоичныеДанные.Записать(ПолноеИмяФайла);
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//Процедура сохраняет двоичные данные подписи в файл на диске:
//либо в каталог, указанный в параметрах, либо в каталог, указанный в настройках модуля
//
// Параметры:
//	ЭЦП_ДвоичныеДанные: двоичные данные ЭЦП
//	ЭЦП_ИмяФайла: имя файла ЭЦП
//	КаталогСохранения: путь к каталогу, в который сохраняется файл
//
Процедура СохранитьЭЦПНаДиск(ЭЦП_ДвоичныеДанные, ЭЦП_ИмяФайла, КаталогСохранения = "") Экспорт
	Попытка
		МаксимальноРазрешеннаяДлинаИмениФайла = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("МаксимальноРазрешеннаяДлинаИмениФайла");
		
		КаталогСохранения = ?(Не ПустаяСтрока(КаталогСохранения), КаталогСохранения, КаталогВременныхФайлов());
		ПолноеИмяФайла = КаталогСохранения + "\" + ЭЦП_ИмяФайла + "." + РасширениеФайлаЭЦП;
		ИмяФайлаБезРасширения = ЭЦП_ИмяФайла;
		Расширение = "." + РасширениеФайлаЭЦП;
		
		//проверяем длину имени файла (вычитаем расширение с точкой)
		Если СтрДлина(ПолноеИмяФайла) > МаксимальноРазрешеннаяДлинаИмениФайла Тогда
			ВариантСохраненияФайловСДлиннымиИменами = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("ВариантСохраненияФайловСДлиннымиИменами");
			
			Если ВариантСохраненияФайловСДлиннымиИменами = 1 Тогда
				//Автоматически обрезаем локальное имя файла
				НужноОбрезать = СтрДлина(ПолноеИмяФайла) - МаксимальноРазрешеннаяДлинаИмениФайла + 1;
				Документ_ОбрезанноеИмяФайла = Лев(ИмяФайлаБезРасширения, СтрДлина(ИмяФайлаБезРасширения) - НужноОбрезать) + Расширение;
				ПолноеИмяФайла = КаталогСохранения + "\" + Документ_ОбрезанноеИмяФайла;
			Иначе
				//Запрос к пользователю
				ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
				ДиалогСохраненияФайла.Каталог = КаталогСохранения;
				ДиалогСохраненияФайла.ПолноеИмяФайла = ПолноеИмяФайла;
				ДиалогСохраненияФайла.Расширение = Прав(Расширение, 3);
				ДиалогСохраненияФайла.Заголовок = "Длина имени файла подписи превышает допустимую (" + МаксимальноРазрешеннаяДлинаИмениФайла + " симв.). Необходимо переименовать файл.";
				Если ДиалогСохраненияФайла.Выбрать() Тогда
					ПолноеИмяФайла = ДиалогСохраненияФайла.ПолноеИмяФайла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрДлина(ПолноеИмяФайла) > МаксимальноРазрешеннаяДлинаИмениФайла Тогда
			Сообщить("Длина полного имени файла подписи <" + ПолноеИмяФайла + "> (" + СтрДлина(ПолноеИмяФайла) + " симв.) превышает предельно допустимую (" + МаксимальноРазрешеннаяДлинаИмениФайла + " симв.). Файл не сохранен");
		Иначе
			ЭЦП_ДвоичныеДанные.Записать(ПолноеИмяФайла);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//Процедура формирует контент отправляемых документов, формирует подписи
//и отправляет в сервис пакет документов с подписями
//
// Параметры:
//	ТаблицаДокументов: таблица документов 1С, отправляемых в одном сообщении (по сути - связанные документы)
//	Контрагент: элемент справочника "Контрагенты" (получатель документов)
//
Процедура СформироватьПодписатьИОтправитьЭД(ТаблицаДокументов, Контрагент) Экспорт
	
	ТЗ_Documents = Новый ТаблицаЗначений;
	ТЗ_Documents.Колонки.Добавить("Документ");
	ТЗ_Documents.Колонки.Добавить("Syn_Документ");
	ТЗ_Documents.Колонки.Добавить("НеобходимРодительскийДокумент");
	ТЗ_Documents.Колонки.Добавить("РодительскийДокумент");
	
	м_Signs = Новый Массив;
	
	//Создаем массив документов
	Тип_ArrayOfDocument = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfDocument");
	ArrayOfDocument = ExchangeService.ФабрикаXDTO.Создать(Тип_ArrayOfDocument);
	
	//Создаем массив ЭЦП
	Тип_ArrayOfSign = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfSign");
	ArrayOfSign = ExchangeService.ФабрикаXDTO.Создать(Тип_ArrayOfSign);
	
	//ЯщикКонтрагента = ПолучитьЗначениеСвойстваПоОбъекту(Контрагент, "Syn_ЯщикКонтрагента");
	ЯщикКонтрагента = ПолучитьЯщик(Контрагент);
	Если ЯщикКонтрагента = Неопределено Тогда
		
		Сообщить("Обмен с данным контрагентом невозможен. Проверьте список доступных контрагентов и при необходимости выполните синхронизацию");
		
	Иначе
		
		Для Каждого СтрокаДокумент Из ТаблицаДокументов Цикл
			
			НоваяСтрока = ТЗ_Documents.Добавить();
			НоваяСтрока.РодительскийДокумент = НЕОПРЕДЕЛЕНО;
			НоваяСтрока.НеобходимРодительскийДокумент = Ложь;
			НоваяСтрока.Документ = СтрокаДокумент.Документ;
			
			Если НЕ ЭтоБГУ Тогда
				
				Если ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					
					Если СтрокаДокумент.Документ.Товары.Количество() > 0 Тогда
						ТипЭД = "Торг12Продавец";
					Иначе
						ТипЭД = "АктПродавец";
					КонецЕсли;
					
				ИначеЕсли Метаданные.Документы.Найти("АктОбОказанииПроизводственныхУслуг") <> Неопределено И ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
					
					ТипЭД = "АктПродавец";
					
				ИначеЕсли ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					
					Если СтрокаДокумент.Документ.Товары.Количество() > 0 Тогда
						ТипЭД = "КорректировкаТорг12Продавец";
					Иначе
						ТипЭД = "КорректировкаАктПродавец";
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					
					Если СтрокаДокумент.Документ.Товары.Количество() > 0 Тогда
						ТипЭД = "Торг12Покупатель";
					Иначе
						ТипЭД = "АктПокупатель";
					КонецЕсли;
									
				ИначеЕсли ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
					
					ТипЭД = "СчетНаОплату";
					
				КонецЕсли;
				
			// БГУ
			Иначе
				
				Если ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.УслугиОказанные") Тогда
					
					ТипЭД = "АктПродавец";
					
				ИначеЕсли (ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.ОС_Реализация"))
						ИЛИ (ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.МЗ_Реализация")) Тогда
						
					ТипЭД = "Торг12Продавец";
					
				КонецЕсли;
				
			КонецЕсли;
			
			//формируем XML
			ДокументXML_Структура = СформироватьЭД(СтрокаДокумент.Документ, ТипЭД, , , , Неопределено);
			
			//Если Документ_ДвоичныеДанные <> НЕОПРЕДЕЛЕНО Тогда
			Если ДокументXML_Структура <> НЕОПРЕДЕЛЕНО И
				ДокументXML_Структура.Документ_ДвоичныеДанные <> НЕОПРЕДЕЛЕНО Тогда
				//создаем Document в СО
				//Syn_Документ = СоздатьОбъект_Document(СтрокаДокумент.Документ, Документ_ДвоичныеДанные, ТипЭД, , , СтрокаДокумент.Комментарий);
				Syn_Документ = СоздатьОбъект_Document(СтрокаДокумент.Документ, ДокументXML_Структура.Документ_ДвоичныеДанные, ТипЭД, ДокументXML_Структура.Документ_ИмяФайла, , СтрокаДокумент.Комментарий);
				
				//Формируем ЭЦП к документу
				//ЭЦП_ДвоичныеДанные = СформироватьЭЦПДокумента(СтрокаДокумент.Документ, Документ_ДвоичныеДанные, );
				ЭЦП_ДвоичныеДанные = СформироватьЭЦПДокумента(СтрокаДокумент.Документ, ДокументXML_Структура.Документ_ДвоичныеДанные, ДокументXML_Структура.Документ_ИмяФайла);
				
				//создаем Подпись в СО
				Syn_ЭЦП = СоздатьОбъект_Sign(Syn_Документ.Id, ЭЦП_ДвоичныеДанные);
				
				//м_Documents.Добавить(Syn_Документ); 
				НоваяСтрока.Syn_Документ = Syn_Документ;
				
				м_Signs.Добавить(Syn_ЭЦП);
				
				ArrayOfDocument.Document.Добавить(Syn_Документ);
				ArrayOfSign.Sign.Добавить(Syn_ЭЦП);
			КонецЕсли;
		КонецЦикла;
		
		//Создаем сообщение в СО и отправляем его
		Тип_Message = ExchangeService.ФабрикаXDTO.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "Message");
		Message = ExchangeService.ФабрикаXDTO.Создать(Тип_Message);
		Message.Documents = ArrayOfDocument;
		Message.From = Syn_ЯщикОрганизации;
		Message.Signs = ArrayOfSign;
		Message.To = ЯщикКонтрагента;
		Message.Id = Строка(Новый УникальныйИдентификатор());
		
		Результат = ОтправитьСообщениеВСервисОбмена(Message);
		
		Если Результат <> Неопределено Тогда
			
			Для Каждого Идентификатор Из Результат.DocumentIds.LocalServerId Цикл
				
				Если НЕ ЭтоБГУ Тогда
					Документ = ПолучитьОбъектПоЗначениюСвойства("Syn_LocalIDДокумента", Идентификатор.LocalId);
				Иначе 
					Документ = ПолучитьОбъектПоЗначениюСвойстваБГУ("Syn_LocalIDДокумента", Идентификатор.LocalId, ТипЭД);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Документ) Тогда
					ОтметитьОтправкуДокумента(Документ, Идентификатор.ServiceID, Результат.SentDate, Документ.Комментарий, ПолучитьНаименованиеПоЯщику(ЯщикКонтрагента)); // запись доп.сведений о документе
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Сообщить("Документы не отправлены");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры                                                  

Функция СформироватьИОтправитьСообщение(МассивПолучателей, МассивДокументов, КомментарийКПакету = Неопределено, СвязатьДокументы, Факторинг = Ложь, Пересылка = Ложь) Экспорт
	
	ФабрикаСервиса				= ExchangeService.ФабрикаXDTO;
		
	Тип_Document				= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "Document");
	Тип_ArrayOfDocument			= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfDocument");
	Тип_ArrayOfSign				= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfSign");
	Тип_ArrayOfRecipients		= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfMessageRecipient");
	Тип_Recipient				= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "MessageRecipient");
	Тип_Message					= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "Message");
	Тип_ForwardMessage      	= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ForwardMessage");
	Тип_ArrayOfForwardDocument  = ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfForwardDocument");
	Тип_ForwardDocument			= ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ForwardDocument");	
	
	// Массив получателей документа
	ArrayOfRecipients = ФабрикаСервиса.Создать(Тип_ArrayOfRecipients);
	Для Каждого Получатель Из МассивПолучателей Цикл
		Recipient = ФабрикаСервиса.Создать(Тип_Recipient);
		Recipient.OrganizationBoxId = Получатель.Ящик;
		Recipient.DepartmentId = Получатель.Подразделение;
		ArrayOfRecipients.MessageRecipient.Добавить(Recipient);
	КонецЦикла;
	
	// Массив документов и массив подписей к ним для обычных документов
	ArrayOfDocument			= ФабрикаСервиса.Создать(Тип_ArrayOfDocument);
	ArrayOfSign				= ФабрикаСервиса.Создать(Тип_ArrayOfSign);
	
	// Массив документов для пересылаемых документов
	ArrayOfForwardDocument  = ФабрикаСервиса.Создать(Тип_ArrayOfForwardDocument);
	
	Для Каждого Документ Из МассивДокументов Цикл
		
		// Обыячный документ
		Если НЕ Документ.ЭтоПересылка Тогда
			
			Document = ФабрикаСервиса.Создать(Тип_Document);
			Если Документ.Тип = "Неформализованный" Тогда
				
				Если ТипЗнч(Документ.Документ) = Тип("Строка") Тогда
					// Документ загружен из файла
					ЗаполнитьДокументНеформализованный(Document, Документ);
				ИначеЕсли ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
					// Счет на оплату
					
				Иначе
					// Все остальные неформализованные документы 1С не поддерживаются
					ОтправитьУведомлениеПользователю("Тип документа [" + Документ.Документ + "] не поддерживается");
				КонецЕсли;
				
			Иначе
				
				// Формализованные документы
				СтруктураДокумента = Новый Структура;
				СтруктураДокумента.Вставить("РодительскийДокумент", Неопределено);
				СтруктураДокумента.Вставить("НеобходимРодительскийДокумент", Ложь);
				
				Если НЕ ТипЗнч(Документ.Документ) = Тип("Строка") Тогда
					
					Если НЕ ЭтоБГУ Тогда
						
						Если ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
							
							Если Документ.Документ.Товары.Количество() > 0 Тогда
								ТипЭД = "Торг12Продавец";
							Иначе
								ТипЭД = "АктПродавец";
							КонецЕсли;
							
						ИначеЕсли Метаданные.Документы.Найти("АктОбОказанииПроизводственныхУслуг") <> Неопределено И ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
							
							ТипЭД = "АктПродавец";
							//ИначеЕсли ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
							//	ТипЭД = "АктПродавецОУ";
							
						ИначеЕсли ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
							
							Если Документ.Документ.Товары.Количество() > 0 Тогда
								ТипЭД = "КорректировкаТорг12Продавец";
							Иначе
								ТипЭД = "КорректировкаАктПродавец";
							КонецЕсли;
							
						ИначеЕсли ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
							
							Если Документ.Документ.Товары.Количество() > 0 Тогда
								ТипЭД = "Торг12Покупатель";
							Иначе
								ТипЭД = "АктПокупатель";
							КонецЕсли;
							
						ИначеЕсли ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
							
							ТипЭД = "СчетНаОплату";
							
						КонецЕсли;
						
					// *** БГУ ***	
					Иначе

						Если ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.УслугиОказанные") Тогда
							
							ТипЭД = "АктПродавец";
							
						ИначеЕсли (ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.ОС_Реализация"))
								ИЛИ (ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.МЗ_Реализация")) Тогда
							
							ТипЭД = "Торг12Продавец";
							
						КонецЕсли;
						
					КонецЕсли;
					
				//Формализованный документ из файла	
				Иначе
					
					ТипЭД 					= Документ.Тип;
					ДокументXML_Структура 	= Новый Структура;
					ДокументXML_Структура.Вставить("Документ_ДвоичныеДанные", Новый ДвоичныеДанные(Документ.Документ));
					ДокументXML_Структура.Вставить("Документ_ИмяФайла", Документ.Документ);
					
				КонецЕсли;
				
				Подписант = ПолучитьВладельцаСертификата();
				Подписант.Вставить("ЯщикКонтрагента", МассивПолучателей[0].Ящик);
				
				Если НЕ ТипЗнч(Документ.Документ) = Тип("Строка") Тогда
					ДокументXML_Структура = СформироватьЭД(Документ.Документ, ТипЭД, , Подписант, Неопределено, Документ.СтруктураУступочнойНадписи);
				КонецЕсли;
				
				Если ДокументXML_Структура <> Неопределено И ДокументXML_Структура.Документ_ДвоичныеДанные <> Неопределено Тогда
					
					Document.Comment		= Документ.Комментарий;
					Document.Content		= ДокументXML_Структура.Документ_ДвоичныеДанные;
					Document.DocumentType	= СоответствиеТиповЭД_1С_Synerdocs.Получить(ТипЭД);
					Document.FileName		= ДокументXML_Структура.Документ_ИмяФайла + ?(ТипЭД = "СчетНаОплату", ".pdf", ".xml");
					Document.Id				= Документ.УИ;
					Document.Name			= ДокументXML_Структура.Документ_ИмяФайла;
					Document.NeedSign		= Ложь;
					
					Если ТипЭД = "СчетНаОплату" Тогда
						Document.UntypedKind = "Счет на оплату";
						Document.Card =  СоздатьКарточкуДокументаСчетНаОплату(Документ.Документ);
					КонецЕсли;
					
				Иначе
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЭПДвоичныеДанные = СформироватьЭЦПДокумента( , Document.Content, Document.FileName);
			Sign = СоздатьОбъект_Sign(Document.Id, ЭПДвоичныеДанные);
			ArrayOfDocument.Document.Добавить(Document);
			ArrayOfSign.Sign.Добавить(Sign);
			
		// Пересылаемый документ	
		Иначе
			
			ForwardDocument 					= ФабрикаСервиса.Создать(Тип_ForwardDocument);
			ForwardDocument.Comment 			= Документ.Комментарий;
			ForwardDocument.NeedSign    		= Документ.НужнаПодпись;
			ForwardDocument.OriginalDocumentId 	= Документ.IDДокумента;
			
			ArrayOfForwardDocument.ForwardDocument.Добавить(ForwardDocument);
		
		КонецЕсли;
	КонецЦикла;
		
	// Заполнение связанных документов
	Если СвязатьДокументы Тогда
		
		Тип_ArrayOfstring = ExchangeService.ФабрикаXDTO.Тип("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "ArrayOfstring");
		Для Каждого ТекДокумент Из ArrayOfDocument.Document Цикл
			
			ArrayOfString = ExchangeService.ФабрикаXDTO.Создать(Тип_ArrayOfstring);
			Для Каждого Документ Из ArrayOfDocument.Document Цикл
				Если Документ.ID <> ТекДокумент.ID Тогда
					ArrayOfString.string.Добавить(Документ.ID);
				КонецЕсли;
			КонецЦикла;
           			
			ТекДокумент.RelatedDocumentIds = ArrayOfString;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Решаем, что отправлять, Message или ForwardMessage
	Если НЕ Пересылка Тогда
		Message				= ФабрикаСервиса.Создать(Тип_Message);
		Message.From 		= Syn_ЯщикОрганизации;
		Message.Recipients 	= ArrayOfRecipients;
		Message.Documents 	= ArrayOfDocument;
		Message.Signs 		= ArrayOfSign;
		Message.Id 			= Строка(Новый УникальныйИдентификатор());
	Иначе
		Message						= ФабрикаСервиса.Создать(Тип_ForwardMessage);
		Message.From				= Syn_ЯщикОрганизации;
		Message.Recipients 			= ArrayOfRecipients;
		Message.Documents 			= ArrayOfDocument;
		Message.Signs 				= ArrayOfSign;
		Message.ForwardDocuments 	= ArrayOfForwardDocument;
	КонецЕсли;

	Результат = ОтправитьСообщениеВСервисОбмена(Message, Пересылка);
	
	Если Результат <> Неопределено И НЕ Результат.DocumentIds = Неопределено Тогда
		
		Для Каждого Идентификатор Из Результат.DocumentIds.LocalServerId Цикл
			Для Каждого Документ Из МассивДокументов Цикл
				Если Документ.Тип <> "Неформализованный" И НЕ ТипЗнч(Документ.Документ) = Тип("Строка") Тогда
					Если Документ.УИ = Идентификатор.LocalID Тогда
						ОтметитьОтправкуДокумента(Документ.Документ, Идентификатор.ServiceID, Результат.SentDate, Документ.Комментарий, ПолучитьНаименованиеПоЯщику(МассивПолучателей[0].Ящик)); // запись доп.сведений о документе
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли Результат = Неопределено Тогда
		
		Сообщить("Пакет документов не отправлен");
		
	КонецЕсли;
	
	Возврат (Результат <> Неопределено);
	
КонецФункции

Процедура ОтметитьОтправкуДокумента(Документ, Идентификатор, ДатаОтправки, Комментарий, ИДКонтрагента = "")
	
	Если НЕ ЭтоБГУ Тогда
		УстановитьЗначениеСвойства(Документ, "Syn_IDДокумента", Идентификатор);
	Иначе
		УстановитьЗначениеСвойстваБГУ(Документ, "Syn_IDДокумента", Идентификатор);
	КонецЕсли;
	
	Если Найти(Документ.Комментарий, "Synerdocs") = 0 Тогда
		Попытка
			ДокОбъект = Документ.ПолучитьОбъект();
			ДокОбъект.Комментарий = "[Отправлено через сервис обмена Synerdocs] " + ДокОбъект.Комментарий;
			ДокОбъект.Записать();
		Исключение
			ОписаниеОшибкиСтрокой = ОписаниеОшибки();
			ОтправитьУведомлениеПользователю(ОписаниеОшибкиСтрокой);
		КонецПопытки;
	КонецЕсли;
	
	//УстановитьЗначениеСвойства(Документ, "Syn_Комментарий", Комментарий);
КонецПроцедуры

Процедура ЗаполнитьДокументНеформализованный(Document, ПараметрыОтправки, Карточка = Неопределено)
	ДокументДвоичныеДанные	= Новый ДвоичныеДанные(ПараметрыОтправки.Документ);
	ДокументФайл			= Новый Файл(ПараметрыОтправки.Документ);
	
	Document.Comment		= ПараметрыОтправки.Комментарий;
	Document.Content		= ДокументДвоичныеДанные;
	Document.DocumentType	= "Untyped";
	Document.FileName		= ДокументФайл.Имя;
	Document.Id				= ПараметрыОтправки.УИ;
	Document.Name			= ДокументФайл.Имя;
	Document.NeedSign		= ПараметрыОтправки.НужнаПодпись;
КонецПроцедуры

Функция ПолучитьВладельцаСертификата() Экспорт
	
	ИмяОтчество = Сертификат.Субъект.GN;
	Разделитель = Найти(ИмяОтчество, " ");
	Имя = Лев(ИмяОтчество, Разделитель - 1);
	Отчество = Прав(ИмяОтчество, СтрДлина(ИмяОтчество) - Разделитель);
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Должность", ?(Сертификат.Субъект.Свойство("T"), Сертификат.Субъект.T, "-"));
	СтруктураОтвета.Вставить("Фамилия", Сертификат.Субъект.SN);
	СтруктураОтвета.Вставить("Имя", Имя);
	СтруктураОтвета.Вставить("Отчество", Отчество);
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПолучитьНаименованиеПоЯщику(Ящик) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Ящик", Ящик);
	НайденныеСтроки = Контрагенты_Авторизованные.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат = НайденныеСтроки[0].КонтрагентПредставление;
		Возврат Результат;
	КонецЕсли;
	
	НайденныеСтроки = Контрагенты_Заблокированные.НайтиСтроки(ПараметрыОтбора);
		
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат = НайденныеСтроки[0].КонтрагентПредставление;
		Возврат Результат;
	КонецЕсли;	
		
	НайденныеСтроки = Контрагенты_Заблокировавшие.НайтиСтроки(ПараметрыОтбора);
		
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат = НайденныеСтроки[0].КонтрагентПредставление;
		Возврат Результат;
	КонецЕсли;		
	
	НайденныеСтроки = Контрагенты_ТребуетсяОтвет.НайтиСтроки(ПараметрыОтбора);
		
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат = НайденныеСтроки[0].КонтрагентПредставление;
		Возврат Результат;
	КонецЕсли;		
	
	НайденныеСтроки = Контрагенты_ОжидаетсяОтвет.НайтиСтроки(ПараметрыОтбора);
		
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат = НайденныеСтроки[0].КонтрагентПредставление;
		Возврат Результат;
	КонецЕсли;		
	
	Возврат Неопределено;
	
КонецФункции

//Функция распараллеливает формирование электронного документа в зависимости от типа
//
// Параметры:
//  Документ: ссылка на учетный документ 1С
//  ТипЭД: тип электронного документа
//  Комментарий: комментарий для уведомления об уточнении
//  Подписант: информация о лице, подписывающем документ (экземпляр класса SignerInfo) - для титула покупателя
//  ТитулПокупателя: структура с информацией о лице, получающем груз, лице, принимающим груз, и по доверенности - для титула покупателя
//
// Возвращаемое значение:
//	Структура: двоичные данные (контент) и имя файла сформированного электронного документа
//
Функция СформироватьЭД(Документ, ТипЭД, Комментарий = "", Подписант = НЕОПРЕДЕЛЕНО, ТитулПокупателя = НЕОПРЕДЕЛЕНО, СтруктураУступочнойНадписи) Экспорт
	//Комментарий - только для уточнений
	//Подписант и дата подтверждения - только для титулов покупателя
	
	Если ТипЭД = "Торг12Продавец" Тогда
		//Торг-12
		//формируем XML для реализации
		Если НЕ ЭтоБГУ Тогда
			ДокументXML_Структура = СоздатьЭДТОРГ12Продавец(Документ, Неопределено, СтруктураУступочнойНадписи); 
		Иначе
			ДокументXML_Структура = СоздатьЭДТОРГ12ПродавецБГУ(Документ, Неопределено, СтруктураУступочнойНадписи);
		КонецЕсли;                                  	
	ИначеЕсли ТипЭД = "АктПродавец" Тогда
		//Акт
		//формируем XML для реализации
		Если НЕ ЭтоБГУ Тогда
			ДокументXML_Структура = СоздатьЭДАктПродавец(Документ, Неопределено, СтруктураУступочнойНадписи);
		Иначе
			ДокументXML_Структура = СоздатьЭДАктПродавецБГУ(Документ, Неопределено, СтруктураУступочнойНадписи);
		КонецЕсли;
	ИначеЕсли ТипЭД = "Торг12Покупатель" Тогда
		//формируем XML для реализации		
		ДокументXML_Структура = СоздатьЭлектронныйДокументТорг12ПокупательXML(Документ, Подписант, ТитулПокупателя);
	ИначеЕсли ТипЭД = "АктПокупатель" Тогда
		//формируем XML для реализации
		ДокументXML_Структура = СоздатьЭлектронныйДокументАктПокупательXML(Документ, Подписант, ТитулПокупателя);
	ИначеЕсли ТипЭД = "СчетНаОплату" Тогда
		ДокументXML_Структура = СоздатьЭлектронныйДокументСчетНаОплатуПродавец(Документ);
	ИначеЕсли ТипЭД = "АктОбУстановленномРасхождении" Тогда
		ДокументXML_Структура = СоздатьЭлектронныйДокументТОРГ2ПокупательXML(Документ, Подписант, ТитулПокупателя);
	ИначеЕсли ТипЭД = "ИзвещениеСФ" Тогда
		ДокументXML_Структура = СоздатьЭлектронныйДокументИОПСФXML(Документ);
	ИначеЕсли ТипЭД = "ИзвещениеОбщ" Тогда
		ДокументXML_Структура = СоздатьЭлектронныйДокументИОПОбщXML(Документ);
	ИначеЕсли ТипЭД = "УточнениеСФ" Тогда
		ДокументXML_Структура = СоздатьЭлектронныйДокументУОУСФXML(Документ, Комментарий);
	ИначеЕсли ТипЭД = "УточнениеОбщ" Тогда
		ДокументXML_Структура = СоздатьЭлектронныйДокументУОУОбщXML(Документ, Комментарий);
	Иначе
		ДокументXML_Структура = НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	Попытка
		Если Не ДокументXML_Структура = Неопределено Тогда
			КаталогЭД = КаталогВременныхФайлов();
			УдалитьФайлы(КаталогЭД + ДокументXML_Структура.Документ_ИмяФайла + ".xml");
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	Возврат ДокументXML_Структура;
	
КонецФункции

Функция ПолучитьЯщик(СправочникСсылка) Экспорт
	
	Если ТипЗнч(СправочникСсылка) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Syn_ЯщикОрганизации;
	Иначе		
		НайденнаяСтрока = Контрагенты_Авторизованные.Найти(СправочникСсылка, "Контрагент");
		Если НайденнаяСтрока = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат НайденнаяСтрока.Ящик;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
//Процедуры и функции печати ЭД

Процедура УстановитьПоляТабДокумента(ТабДокумент, ПолеСверху = 0, ПолеСнизу = 20, ПолеСлева = 0, ПолеСправа = 0, ОриентацияСтр = Неопределено)
	
	ТабДокумент.ПолеСверху         = ПолеСверху;
	ТабДокумент.ПолеСлева          = ПолеСлева;
	ТабДокумент.ПолеСнизу          = ПолеСнизу;
	ТабДокумент.ПолеСправа         = ПолеСправа;
	ТабДокумент.ОриентацияСтраницы = ?(ОриентацияСтр = Неопределено, ОриентацияСтраницы.Ландшафт, ОриентацияСтр);
	
КонецПроцедуры

Процедура Печать_ПОА(ДанныеДляПечати, ТабДокумент, СтруктураШтампа)
	
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабДокумент.Очистить();
	УстановитьПоляТабДокумента(ТабДокумент);
	Макет = ПолучитьМакет("ПОА");
	
	ОбластьМакетаШтампШапка = Макет.ПолучитьОбласть("ШтампШапка");
	ОбластьМакетаШтампСтрока = Макет.ПолучитьОбласть("ШтампСтрока");
	ОбластьМакетаШтампПодвал = Макет.ПолучитьОбласть("ШтампПодвал");
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаАнДок = Макет.ПолучитьОбласть("АнДок");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Если Не СтруктураШтампа = Неопределено Тогда
		// Штамп Synerdocs сверху
		ОбластьМакетаШтампШапка.Параметры.ШтампИД = СтруктураШтампа.ДополнительныеСведения.ИдентификаторДокумента;
		ТабДокумент.Вывести(ОбластьМакетаШтампШапка);
		
		Для Каждого Подпись Из СтруктураШтампа.МассивПодписей Цикл
			ОбластьМакетаШтампСтрока.Параметры.ШтампОрганизация = Подпись.Организация;
			ОбластьМакетаШтампСтрока.Параметры.ШтампСертификат = Подпись.ФИО + ", " + Подпись.Должность + Символы.ПС
																	+ Подпись.СерийныйНомерЭП + ", " + Подпись.ИздательЭП;
			ОбластьМакетаШтампСтрока.Параметры.ШтампСтатус = ?(Подпись.Подпись, "Подписан квалифицированной ЭП,", "Отказано") + Символы.ПС + Подпись.ДатаВремяПодписи;
			
			ТабДокумент.Вывести(ОбластьМакетаШтампСтрока);
		КонецЦикла;

		ТабДокумент.Вывести(ОбластьМакетаШтампПодвал);
		
		// Колонтитул Synerdocs снизу
		ТабДокумент.НижнийКолонтитул.Выводить = Истина;
		ТабДокумент.РазмерКолонтитулаСнизу = 16;
		ТабДокумент.НижнийКолонтитул.НачальнаяСтраница = 2;
		ТабДокумент.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
		ТабДокумент.НижнийКолонтитул.ТекстСправа =	"ИД оригинала документа в Synerdocs:
													|" + СтруктураШтампа.ДополнительныеСведения.ИдентификаторДокумента + "
													|Отправлен " + СтруктураШтампа.ДополнительныеСведения.ДатаВремяОтправки + "
													|Страница [&НомерСтраницы] из [&СтраницВсего]";
	КонецЕсли;
	
	// Шапка
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	// Первая сторона соглашения
	ОбластьМакетаСтрокаСтороны = Макет.ПолучитьОбласть("СтрокаСтороны");
	Если ДанныеДляПечати.Документ.НапрПредАн.ИП = Неопределено Тогда
		ОбластьМакетаСтрокаСтороны.Параметры.Наименование = ДанныеДляПечати.Документ.НапрПредАн.ЮЛ.НаимОрг;
		ОбластьМакетаСтрокаСтороны.Параметры.ИНН = ДанныеДляПечати.Документ.НапрПредАн.ЮЛ.ИННЮЛ;
		ОбластьМакетаСтрокаСтороны.Параметры.КПП = ДанныеДляПечати.Документ.НапрПредАн.ЮЛ.КПП;
	Иначе
		ОбластьМакетаСтрокаСтороны.Параметры.Наименование = ДанныеДляПечати.Документ.НапрПредАн.ИП.ФИО.Фамилия + " " + ДанныеДляПечати.Документ.НапрПредАн.ИП.ФИО.Имя + " " + ДанныеДляПечати.Документ.НапрПредАн.ИП.ФИО.Отчество;
		ОбластьМакетаСтрокаСтороны.Параметры.ИНН = ДанныеДляПечати.Документ.НапрПредАн.ИП.ИННФЛ;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакетаСтрокаСтороны);
	
	// Вторая сторона соглашения
	ОбластьМакетаСтрокаСтороны = Макет.ПолучитьОбласть("СтрокаСтороны");
	Если ДанныеДляПечати.Документ.УчастЭДО.ИП = Неопределено Тогда
		ОбластьМакетаСтрокаСтороны.Параметры.Наименование = ДанныеДляПечати.Документ.УчастЭДО.ЮЛ.НаимОрг;
		ОбластьМакетаСтрокаСтороны.Параметры.ИНН = ДанныеДляПечати.Документ.УчастЭДО.ЮЛ.ИННЮЛ;
		ОбластьМакетаСтрокаСтороны.Параметры.КПП = ДанныеДляПечати.Документ.УчастЭДО.ЮЛ.КПП;
	Иначе
		ОбластьМакетаСтрокаСтороны.Параметры.Наименование = ДанныеДляПечати.Документ.УчастЭДО.ИП.ФИО.Фамилия + " " + ДанныеДляПечати.Документ.УчастЭДО.ИП.ФИО.Имя + " " + ДанныеДляПечати.Документ.УчастЭДО.ИП.ФИО.Отчество;
		ОбластьМакетаСтрокаСтороны.Параметры.ИНН = ДанныеДляПечати.Документ.УчастЭДО.ИП.ИННФЛ;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакетаСтрокаСтороны);
	
	// Аннулируемый документ
	ОбластьМакетаАнДок.Параметры.АнДокумент = ДанныеДляПечати.Документ.СвПредАн.СведАнФайл.ИмяАнФайла;
	ТабДокумент.Вывести(ОбластьМакетаАнДок);
	
	// Подписи к аннулируемому документу
	Для Каждого ПодписьАнДок Из ДанныеДляПечати.Документ.ПодписиАнДок Цикл
		ОбластьМакетаАнДокПодписант = Макет.ПолучитьОбласть("АнДокПодписант");
		ОбластьМакетаАнДокПодписант.Параметры.Наименование = ПодписьАнДок.Организация;
		ОбластьМакетаАнДокПодписант.Параметры.Сертификат = ПодписьАнДок.ФИО + ", " + ПодписьАнДок.Должность + Символы.ПС +
															ПодписьАнДок.СерийныйНомерЭП + ", " + ПодписьАнДок.ИздательЭП;
		ТабДокумент.Вывести(ОбластьМакетаАнДокПодписант);
	КонецЦикла;
	
	// Причина аннулирования
	ОбластьМакетаПодвал.Параметры.ПричинаАннулирования = ДанныеДляПечати.Документ.СвПредАн.ТекстПредАн;
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
КонецПроцедуры

//Процедура выводит печатную форму для электронного документа с типом "Счет-фактура"
//
// Параметры:
//	ДанныеДляПечати: структура с данными, полученными из XML
//  ТабДокумент: табличный документ, в который выводится печатная форма
//
Процедура ПечатьЭД_СчетФактура1137(ДанныеДляПечати, ТабДокумент, СтруктураШтампа) Экспорт
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура1137";
	Макет = ПолучитьМакет("СчетФактура1137");
	
	ОбластьМакетаШтампШапка			= Макет.ПолучитьОбласть("ШтампШапка");
	ОбластьМакетаШтампСтрока		= Макет.ПолучитьОбласть("ШтампСтрока");
	ОбластьМакетаШтампПодвал		= Макет.ПолучитьОбласть("ШтампПодвал");
	
	ОбластьМакетаУступочнаяНадпись  = Макет.ПолучитьОбласть("УступочнаяНадпись");
	
	// Заполняем и выводим штамп
	ОбластьМакетаШтампШапка.Параметры.ШтампИД = СтруктураШтампа.ДополнительныеСведения.ИдентификаторДокумента;
	ТабДокумент.Вывести(ОбластьМакетаШтампШапка);
	
	Для Каждого Подпись Из СтруктураШтампа.МассивПодписей Цикл
		ОбластьМакетаШтампСтрока.Параметры.ШтампОрганизация = Подпись.Организация;
		ОбластьМакетаШтампСтрока.Параметры.ШтампСертификат = Подпись.ФИО + ", " + Подпись.Должность + Символы.ПС
		+ Подпись.СерийныйНомерЭП + ", " + Подпись.ИздательЭП;
		ОбластьМакетаШтампСтрока.Параметры.ШтампСтатус = ?(Подпись.Подпись, "Подписан квалифицированной ЭП,", "Отказано") + Символы.ПС + Подпись.ДатаВремяПодписи;
		
		ТабДокумент.Вывести(ОбластьМакетаШтампСтрока);
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаШтампПодвал);
	
	// Уступочная надпись
	Если ДанныеДляПечати.Свойство("УступочнаяНадпись") Тогда
		Если НЕ ДанныеДляПечати.УступочнаяНадпись = Неопределено Тогда
			ОбластьМакетаУступочнаяНадпись.Параметры.УстНадпись = ДанныеДляПечати.УступочнаяНадпись;
			ТабДокумент.Вывести(ОбластьМакетаУступочнаяНадпись);
		КонецЕсли;
	КонецЕсли;
		
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Номер = "Счет-фактура № " + ДанныеДляПечати.Номер + " от " + Формат(ДанныеДляПечати.Дата, "ДФ='дд ММММ гггг'") + " г.";;
	Если ДанныеДляПечати.Исправление Тогда
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № " + ДанныеДляПечати.ИсправлениеСФ_Номер + " от " + Формат(ДанныеДляПечати.ИсправлениеСФ_Дата, "ДФ='дд ММММ гггг'") + " г.";
	Иначе 	
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № -- от --";
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " + ДанныеДляПечати.Поставщик;
	ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " + ДанныеДляПечати.Поставщик_Адрес;
	ОбластьМакета.Параметры.ИННПоставщика = "ИНН/КПП продавца: " + ДанныеДляПечати.Поставщик_ИНН + "/" + ДанныеДляПечати.Поставщик_КПП;
	Если ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель) Тогда
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: " + ДанныеДляПечати.Грузоотправитель +
		?(ДанныеДляПечати.Грузоотправитель = "он же", "", ", " + ДанныеДляПечати.Грузоотправитель_Адрес);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: --";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель) Тогда
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " + ДанныеДляПечати.Грузополучатель + ", " + ДанныеДляПечати.Грузополучатель_Адрес;
	Иначе
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = "Грузополучатель и его адрес: --";
	КонецЕсли;
	
	
	СтрокаПоДокументу = "";
	Для Каждого ПРД Из ДанныеДляПечати.ТЗ_ПРД Цикл
		
		Если НЕ ЗначениеЗаполнено(ПРД.НомерПРД)
			И НЕ ЗначениеЗаполнено(ПРД.ДатаПРД) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаПоДокументу = СтрокаПоДокументу
		+ ?(ПустаяСтрока(СтрокаПоДокументу), "К платежно-расчетному документу № ",", ")
		+ ПРД.НомерПРД 
		+ " от " + Формат(ПРД.ДатаПРД, "ДФ=dd.MM.yyyy") + " г.";
		
	КонецЦикла; 
	Если ПустаяСтрока(СтрокаПоДокументу) Тогда
		СтрокаПоДокументу = "К платежно-расчетному документу №    от";
	КонецЕсли; 
	ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
	
	
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " + ДанныеДляПечати.Покупатель;
	ОбластьМакета.Параметры.АдресПокупателя = "Адрес: " + ДанныеДляПечати.Покупатель_Адрес;
	ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: " + ДанныеДляПечати.Покупатель_ИНН + "/" + ДанныеДляПечати.Покупатель_КПП;
	
	Валюта = Справочники.Валюты.НайтиПоКоду(ДанныеДляПечати.КодВалюты);
	ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код " + ?(ЗначениеЗаполнено(Валюта), Валюта.НаименованиеПолное + ", " + Валюта.Код, "---, " + ДанныеДляПечати.КодВалюты);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	//ВывестиРеквизитыКомиссионера(ДанныеДляПечати.Организация, ДанныеДляПечати.Поставщик, ДанныеДляПечати.Покупатель, Макет, ТабДокумент);
	
	// Выводим заголовок таблицы
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	
	//// Дополнительная подготовка данных для вывода в табличную часть
	
	ВыборкаСтрокТовары = ДанныеДляПечати.ТЗ_Товары;
	
	// Выводим строки таблицы
	
	ОбластьМакета       = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	НомерСтроки = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	
	//ИтогоСтоимость = 0;
	//ИтогоСуммаНДС  = 0;
	//ИтогоВсего     = 0;
	
	Для Каждого ТекСтрока Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ТекСтрока.НаимТов);
		ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = ТекСтрока.ОКЕИ_Тов;
		ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ТекСтрока.ОКЕИ_Тов), Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ТекСтрока.ОКЕИ_Тов), "");
		ОбластьМакета.Параметры.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ЕдиницаИзмерения), ЕдиницаИзмерения, "--");
		ОбластьМакета.Параметры.Количество = ТекСтрока.КолТов;
		ОбластьМакета.Параметры.Цена = ТекСтрока.ЦенаТов;
		ОбластьМакета.Параметры.Стоимость = ТекСтрока.СтТовБезНДС;
		ОбластьМакета.Параметры.Акциз = ТекСтрока.СумАкциз;
		ОбластьМакета.Параметры.СтавкаНДС = ?(ЗначениеЗаполнено(ТекСтрока.НалСтВел), ТекСтрока.НалСтВел +
		?(ЗначениеЗаполнено(ТекСтрока.НалСтТип) И ТекСтрока.НалСтТип <> "текст", "%", ""), "");
		ОбластьМакета.Параметры.СуммаНДС = ТекСтрока.СумНДС;
		ОбластьМакета.Параметры.Всего = ТекСтрока.СтТовУчНал;
		
		Если ЗначениеЗаполнено(ТекСтрока.КодПроисх) Тогда
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = ТекСтрока.КодПроисх;
			ОбластьМакета.Параметры.ПредставлениеСтраны = Справочники.КлассификаторСтранМира.НайтиПоКоду(ТекСтрока.КодПроисх);
			ОбластьМакета.Параметры.ПредставлениеГТД    = ТекСтрока.НомерТД;
		Иначе
			//Россия
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		КонецЕсли;
		
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
		
		//Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
		//	
		//	Если КоличествоСтрок > 0 Тогда
		//		// Вывод разделителя и заголовка таблицы на новой странице
		//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		//		ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	
	Если ВыборкаСтрокТовары.Количество() > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	// Выводим строку "Всего к оплате"
	
	ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ДанныеДляПечати.СуммаВсегоБезНДС;
	ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ДанныеДляПечати.ВсегоНДС;
	ОбластьМакетаИтого.Параметры.ИтогоВсего = ДанныеДляПечати.СуммаВсегоСНДС;
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// Выводим подвал
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя = ДанныеДляПечати.ПодписантЮЛ;
	ОбластьМакетаПодвал.Параметры.ФИОПБОЮЛ = ДанныеДляПечати.ПодписантИП;
	ОбластьМакетаПодвал.Параметры.Свидетельство = ДанныеДляПечати.Подписант_СвидетельствоГосРегистрации;
	ОбластьМакетаПодвал.Параметры.ЭП_ЮЛ = ?(ДанныеДляПечати.ПодписантЮЛ = Неопределено, "", "электронная подпись");
	ОбластьМакетаПодвал.Параметры.ЭП_ИП = ?(ДанныеДляПечати.ПодписантИП = Неопределено, "", "электронная подпись");
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	// Устанавливаем параметры печати и колонтитулы
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 13;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 20;
	ТабДокумент.ПолеСправа = 0;
	
	ТабДокумент.НижнийКолонтитул.Выводить = Истина;
	ТабДокумент.РазмерКолонтитулаСнизу = 20;
	ТабДокумент.НижнийКолонтитул.НачальнаяСтраница = 2;
	
	ТабДокумент.НижнийКолонтитул.ТекстСправа = "ИД оригинального документа в Synerdocs:" + Символы.ПС + 
	СтруктураШтампа.ДополнительныеСведения.ИдентификаторДокумента + Символы.ПС +
	СтруктураШтампа.ДополнительныеСведения.ДатаВремяОтправки + Символы.ПС + 
	"Страница " + "[&НомерСтраницы] из [&СтраницВсего]";
КонецПроцедуры

//Процедура выводит печатную форму для электронного документа с типом "Корректировочный счет-фактура"
//
// Параметры:
//	ДанныеДляПечати: структура с данными, полученными из XML
//  ТабДокумент: табличный документ, в который выводится печатная форма
//
Процедура ПечатьЭД_КорректировочныйСчетФактура1137(ДанныеДляПечати, ТабДокумент, СтруктураШтампа) Экспорт
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочныйСчетФактура1137";
	Макет = ПолучитьМакет("КорректировочныйСчетФактура1137");
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 20;
	ТабДокумент.ПолеСправа = 0;
	
	ОбластьМакетаШтампШапка			= Макет.ПолучитьОбласть("ШтампШапка");
	ОбластьМакетаШтампСтрока		= Макет.ПолучитьОбласть("ШтампСтрока");
	ОбластьМакетаШтампПодвал		= Макет.ПолучитьОбласть("ШтампПодвал");
	
	ОбластьУступочнаяНадпись    	= Макет.ПолучитьОбласть("УступочнаяНадпись");
	
	// Заполняем и выводим штамп
	ОбластьМакетаШтампШапка.Параметры.ШтампИД = СтруктураШтампа.ДополнительныеСведения.ИдентификаторДокумента;
	ТабДокумент.Вывести(ОбластьМакетаШтампШапка);
	
	Для Каждого Подпись Из СтруктураШтампа.МассивПодписей Цикл
		ОбластьМакетаШтампСтрока.Параметры.ШтампОрганизация = Подпись.Организация;
		ОбластьМакетаШтампСтрока.Параметры.ШтампСертификат = Подпись.ФИО + ", " + Подпись.Должность + Символы.ПС
		+ Подпись.СерийныйНомерЭП + ", " + Подпись.ИздательЭП;
		ОбластьМакетаШтампСтрока.Параметры.ШтампСтатус = ?(Подпись.Подпись, "Подписан квалифицированной ЭП,", "Отказано") + Символы.ПС + Подпись.ДатаВремяПодписи;
		
		ТабДокумент.Вывести(ОбластьМакетаШтампСтрока);
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаШтампПодвал);
	
	Если ДанныеДляПечати.Свойство("УступочнаяНадпись") Тогда
		Если НЕ ДанныеДляПечати.УступочнаяНадпись = НЕОПРЕДЕЛЕНО Тогда   
			ОбластьУступочнаяНадпись.Параметры.УстНадпись = ДанныеДляПечати.УступочнаяНадпись;
			ТабДокумент.Вывести(ОбластьУступочнаяНадпись);
		КонецЕсли;
	КонецЕсли;
	
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Номер = ДанныеДляПечати.НомерКСФ;
	ОбластьМакета.Параметры.Дата = Формат(ДанныеДляПечати.ДатаКСФ, "ДФ='дд ММММ гггг'") + " г.";
	Если ДанныеДляПечати.Исправление Тогда
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = ДанныеДляПечати.ИсправлениеКСФ_Номер;
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = Формат(ДанныеДляПечати.ИсправлениеКСФ_Дата, "ДФ='дд ММММ гггг'") + " г."
	Иначе 	
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = "--";
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = "--";
	КонецЕсли;
	
	СтрокаСчФ = "";
	Для Каждого ТекСтр Из ДанныеДляПечати.ТЗ_СчФ Цикл
		Если ЗначениеЗаполнено(СтрокаСчФ) Тогда
			СтрокаСчФ = СтрокаСчФ + Символы.ПС;
		КонецЕсли;
		СтрокаСчФ = СтрокаСчФ + "№ " + ТекСтр.НомерСФ + " от " +  ТекСтр.ДатаСФ + " г.";
		Если ТекСтр.ИспрСФ.Количество() > 0 Тогда
			ТекСтр.ИспрСФ.Сортировать("ДатаИспрСчФ Убыв, НомерИспрСчФ Убыв");
			СтрокаСчФ = СтрокаСчФ + ", с учетом исправления № " + ТекСтр.ИспрСФ[0].НомерИспрСчФ + " от " + ТекСтр.ИспрСФ[0].ДатаИспрСчФ + " г.";
		КонецЕсли;
	КонецЦикла;
	ОбластьМакета.Параметры.СтрокаСчФ = СтрокаСчФ;
	
	ОбластьМакета.Параметры.НаименованиеПродавца = ДанныеДляПечати.Поставщик;
	ОбластьМакета.Параметры.АдресПродавца = ДанныеДляПечати.Поставщик_Адрес;
	ОбластьМакета.Параметры.ИННКПППродавца = ДанныеДляПечати.Поставщик_ИНН + "/" + ДанныеДляПечати.Поставщик_КПП;
	ОбластьМакета.Параметры.НаименованиеПокупателя = ДанныеДляПечати.Покупатель;
	ОбластьМакета.Параметры.АдресПокупателя = ДанныеДляПечати.Покупатель_Адрес;
	ОбластьМакета.Параметры.ИННКПППокупателя = ДанныеДляПечати.Покупатель_ИНН + "/" + ДанныеДляПечати.Покупатель_КПП;
	
	Валюта = Справочники.Валюты.НайтиПоКоду(ДанныеДляПечати.КодВалюты);
	ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код " + ?(ЗначениеЗаполнено(Валюта), Валюта.НаименованиеПолное + ", " + Валюта.Код, "---, " + ДанныеДляПечати.КодВалюты);	
	ТабДокумент.Вывести(ОбластьМакета);
	
	//ВывестиРеквизитыКомиссионера(ДанныеДляПечати.Организация, ДанныеДляПечати.Поставщик, ДанныеДляПечати.Покупатель, Макет, ТабДокумент);
	
	// Выводим заголовок таблицы
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	
	//// Дополнительная подготовка данных для вывода в табличную часть
	ВыборкаСтрокТовары = ДанныеДляПечати.ТЗ_Товары;
	
	// Выводим строки таблицы
	
	ОбластьМакета       = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	НомерСтроки = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	
	//ИтогоСтоимость = 0;
	//ИтогоСуммаНДС  = 0;
	//ИтогоВсего     = 0;
	
	Для Каждого ТекСтрока Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.НаименованиеНоменклатуры = СокрЛП(ТекСтрока.НаимТов);
		ОбластьМакета.Параметры.ЕдиницаИзмеренияКодДоИзменения = ТекСтрока.ОКЕИ_ТовДо;
		ОбластьМакета.Параметры.ЕдиницаИзмеренияКодПослеИзменения = ТекСтрока.ОКЕИ_ТовПосле;
		ЕдиницаИзмеренияДо = ?(ЗначениеЗаполнено(ТекСтрока.ОКЕИ_ТовДо), Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ТекСтрока.ОКЕИ_ТовДо), "");
		ЕдиницаИзмеренияПосле = ?(ЗначениеЗаполнено(ТекСтрока.ОКЕИ_ТовПосле), Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ТекСтрока.ОКЕИ_ТовПосле), "");
		ОбластьМакета.Параметры.НаименованиеЕдиницыИзмеренияДоИзменения = ?(ЗначениеЗаполнено(ЕдиницаИзмеренияДо), ЕдиницаИзмеренияДо, "--");
		ОбластьМакета.Параметры.НаименованиеЕдиницыИзмеренияПослеИзменения = ?(ЗначениеЗаполнено(ЕдиницаИзмеренияПосле), ЕдиницаИзмеренияПосле, "--");
		ОбластьМакета.Параметры.КоличествоДоИзменения = ТекСтрока.КолТовДо;
		ОбластьМакета.Параметры.КоличествоПослеИзменения = ТекСтрока.КолТовПосле;
		ОбластьМакета.Параметры.ЦенаДоИзменения = ТекСтрока.ЦенаТовДо;
		ОбластьМакета.Параметры.ЦенаПослеИзменения = ТекСтрока.ЦенаТовПосле;
		
		ОбластьМакета.Параметры.СтоимостьБезНДСДоИзменения = ТекСтрока.СтоимДоИзм;
		ОбластьМакета.Параметры.СтоимостьБезНДСПослеИзменения = ТекСтрока.СтоимПослеИзм;
		ОбластьМакета.Параметры.РазницаБезНДСУвеличение = ?(ТекСтрока.СтоимУвел <> НЕОПРЕДЕЛЕНО, ТекСтрока.СтоимУвел, "0.00");
		ОбластьМакета.Параметры.РазницаБезНДСУменьшение = ?(ТекСтрока.СтоимУм <> НЕОПРЕДЕЛЕНО, ТекСтрока.СтоимУм, "0.00");
		
		ОбластьМакета.Параметры.СуммаАкцизаДоИзменения = ТекСтрока.СумАкцизДо;
		ОбластьМакета.Параметры.СуммаАкцизаПослеИзменения = ТекСтрока.СумАкцизПосле;
		ОбластьМакета.Параметры.РазницаАкцизаУвеличение = ?(ТекСтрока.СумАкцизУвел <> НЕОПРЕДЕЛЕНО, ТекСтрока.СумАкцизУвел, "0.00" );
		ОбластьМакета.Параметры.РазницаАкцизаУменьшение = ?(ТекСтрока.СумАкцизУм <> НЕОПРЕДЕЛЕНО, ТекСтрока.СумАкцизУм, "0.00" );
		
		ОбластьМакета.Параметры.СтавкаНДСДоИзменения = ?(ЗначениеЗаполнено(ТекСтрока.НалСтВелДо), ТекСтрока.НалСтВелДо +
		?(ЗначениеЗаполнено(ТекСтрока.НалСтТипДо) И ТекСтрока.НалСтТипДо <> "текст", "%", ""), "");
		
		ОбластьМакета.Параметры.СтавкаНДСПослеИзменения = ?(ЗначениеЗаполнено(ТекСтрока.НалСтВелПосле), ТекСтрока.НалСтВелПосле +
		?(ЗначениеЗаполнено(ТекСтрока.НалСтТипПосле) И ТекСтрока.НалСтТипПосле <> "текст", "%", ""), "");
		
		ОбластьМакета.Параметры.СуммаНДСДоИзменения = ТекСтрока.СумНДСДо;
		ОбластьМакета.Параметры.СуммаНДСПослеИзменения = ТекСтрока.СумНДСПосле;
		ОбластьМакета.Параметры.РазницаНДСУвеличение = ?(ТекСтрока.СумНСДУвел <> НЕОПРЕДЕЛЕНО, ТекСтрока.СумНСДУвел, "0.00" );
		ОбластьМакета.Параметры.РазницаНДСУменьшение = ?(ТекСтрока.СумНСДУм <> НЕОПРЕДЕЛЕНО, ТекСтрока.СумНСДУм, "0.00" );
		
		ОбластьМакета.Параметры.СтоимостьСНДСДоИзменения = ТекСтрока.ВсегоДоИзм;
		ОбластьМакета.Параметры.СтоимостьСНДСПослеИзменения = ТекСтрока.ВсегоПослеИзм;
		ОбластьМакета.Параметры.РазницаСНДСУвеличение = ?(ТекСтрока.ВсегоУвел <> НЕОПРЕДЕЛЕНО, ТекСтрока.ВсегоУвел, "0.00" );
		ОбластьМакета.Параметры.РазницаСНДСУменьшение = ?(ТекСтрока.ВсегоУм <> НЕОПРЕДЕЛЕНО, ТекСтрока.ВсегоУм, "0.00" );
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
		
		//Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
		//	
		//	Если КоличествоСтрок > 0 Тогда
		//		// Вывод разделителя и заголовка таблицы на новой странице
		//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		//		ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	
	Если ВыборкаСтрокТовары.Количество() > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаИтого.Параметры.РазницаБезНДСУменьшение = ДанныеДляПечати.СуммаБезНДСУм;
	ОбластьМакетаИтого.Параметры.РазницаБезНДСУвеличение = ДанныеДляПечати.СуммаБезНДСУвел;
	
	ОбластьМакетаИтого.Параметры.РазницаСНДСУменьшение   = ДанныеДляПечати.СуммаСНДСУм;
	ОбластьМакетаИтого.Параметры.РазницаСНДСУвеличение   = ДанныеДляПечати.СуммаСНДСУвел;
	ОбластьМакетаИтого.Параметры.РазницаНДСУменьшение    = ДанныеДляПечати.НДСУм;
	ОбластьМакетаИтого.Параметры.РазницаНДСУвеличение    = ДанныеДляПечати.НДСУвел;
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// Выводим подвал
	
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
	
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя = ДанныеДляПечати.ПодписантЮЛ;
	ОбластьМакетаПодвал.Параметры.ФИОПБОЮЛ = ДанныеДляПечати.ПодписантИП;
	ОбластьМакетаПодвал.Параметры.Свидетельство = ДанныеДляПечати.Подписант_СвидетельствоГосРегистрации;
	ОбластьМакетаПодвал.Параметры.ЭП_ЮЛ = ?(ДанныеДляПечати.ПодписантЮЛ = Неопределено, "", "электронная подпись");
	ОбластьМакетаПодвал.Параметры.ЭП_ИП = ?(ДанныеДляПечати.ПодписантИП = Неопределено, "", "электронная подпись");
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	// Устанавливаем параметры печати и колонтитулы
	
	ТабДокумент.НижнийКолонтитул.Выводить = Истина;
	ТабДокумент.РазмерКолонтитулаСнизу = 20;
	ТабДокумент.НижнийКолонтитул.НачальнаяСтраница = 2;
	
	ТабДокумент.НижнийКолонтитул.ТекстСправа = "ИД оригинального документа в Synerdocs:" + Символы.ПС + 
	СтруктураШтампа.ДополнительныеСведения.ИдентификаторДокумента + Символы.ПС +
	СтруктураШтампа.ДополнительныеСведения.ДатаВремяОтправки + Символы.ПС + 
	"Страница " + "[&НомерСтраницы] из [&СтраницВсего]";
	
КонецПроцедуры

//Процедура выводит печатную форму для электронного документа с типом "Торг12"
//
// Параметры:
//	ДанныеДляПечати: структура с данными, полученными из XML
//  ТабДокумент: табличный документ, в который выводится печатная форма
//
Процедура ПечатьЭД_ТОРГ12(ДанныеДляПечати, ТабДокумент, СписокАктов = Неопределено, СтруктураШтампа) Экспорт
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 20;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	//	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
	
	Макет = ПолучитьМакет("ТОРГ12");
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("НаименованиеДляПечатныхФорм", СокрЛП(ДанныеДляПечати.Грузоотправитель));
	СведенияОГрузоотправителе.Вставить("ИНН",              ДанныеДляПечати.Грузоотправитель_ИНН);
	СведенияОГрузоотправителе.Вставить("КПП",              ДанныеДляПечати.Грузоотправитель_КПП);
	СведенияОГрузоотправителе.Вставить("Телефоны",         ДанныеДляПечати.Грузоотправитель_Телефон);
	СведенияОГрузоотправителе.Вставить("Факсы",            ДанныеДляПечати.Грузоотправитель_Факс);
	СведенияОГрузоотправителе.Вставить("НомерСчета",       ДанныеДляПечати.Грузоотправитель_БанковскийСчет);
	СведенияОГрузоотправителе.Вставить("Банк",             ДанныеДляПечати.Грузоотправитель_Банк);
	СведенияОГрузоотправителе.Вставить("БИК",              ДанныеДляПечати.Грузоотправитель_БИКБанка);
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес", ДанныеДляПечати.Грузоотправитель_Адрес);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("НаименованиеДляПечатныхФорм", СокрЛП(ДанныеДляПечати.Грузополучатель));
	СведенияОГрузополучателе.Вставить("ИНН",              ДанныеДляПечати.Грузополучатель_ИНН);
	СведенияОГрузополучателе.Вставить("КПП",              ДанныеДляПечати.Грузополучатель_КПП);
	СведенияОГрузополучателе.Вставить("Телефоны",         ДанныеДляПечати.Грузополучатель_Телефон);
	СведенияОГрузополучателе.Вставить("Факсы",         	  ДанныеДляПечати.Грузополучатель_Факс);
	СведенияОГрузополучателе.Вставить("НомерСчета",       ДанныеДляПечати.Грузополучатель_БанковскийСчет);
	СведенияОГрузополучателе.Вставить("Банк",             ДанныеДляПечати.Грузополучатель_Банк);
	СведенияОГрузополучателе.Вставить("БИК",              ДанныеДляПечати.Грузополучатель_БИКБанка);
	СведенияОГрузополучателе.Вставить("ФактическийАдрес", ДанныеДляПечати.Грузополучатель_Адрес);
	
	СведенияОПоставщике = Новый Структура;
	СведенияОПоставщике.Вставить("НаименованиеДляПечатныхФорм", СокрЛП(ДанныеДляПечати.Поставщик));
	СведенияОПоставщике.Вставить("ИНН",              ДанныеДляПечати.Поставщик_ИНН);         
	СведенияОПоставщике.Вставить("КПП",              ДанныеДляПечати.Поставщик_КПП);
	СведенияОПоставщике.Вставить("Телефоны",         ДанныеДляПечати.Поставщик_Телефон);
	СведенияОПоставщике.Вставить("Факсы",         	 ДанныеДляПечати.Поставщик_Факс);
	СведенияОПоставщике.Вставить("НомерСчета",       ДанныеДляПечати.Поставщик_БанковскийСчет);
	СведенияОПоставщике.Вставить("Банк",             ДанныеДляПечати.Поставщик_Банк);
	СведенияОПоставщике.Вставить("БИК",              ДанныеДляПечати.Поставщик_БИКБанка);
	СведенияОПоставщике.Вставить("ФактическийАдрес", ДанныеДляПечати.Поставщик_Адрес);
	
	СведенияОПокупателе = Новый Структура;
	СведенияОПокупателе.Вставить("НаименованиеДляПечатныхФорм", СокрЛП(ДанныеДляПечати.Плательщик));
	СведенияОПокупателе.Вставить("ИНН",              ДанныеДляПечати.Плательщик_ИНН);
	СведенияОПокупателе.Вставить("КПП",              ДанныеДляПечати.Плательщик_КПП);
	СведенияОПокупателе.Вставить("Телефоны",         ДанныеДляПечати.Плательщик_Телефон);
	СведенияОПокупателе.Вставить("Факсы",            ДанныеДляПечати.Плательщик_Факс);
	СведенияОПокупателе.Вставить("НомерСчета",       ДанныеДляПечати.Плательщик_БанковскийСчет);
	СведенияОПокупателе.Вставить("Банк",             ДанныеДляПечати.Плательщик_Банк);
	СведенияОПокупателе.Вставить("БИК",              ДанныеДляПечати.Плательщик_БИКБанка);
	СведенияОПокупателе.Вставить("ФактическийАдрес", ДанныеДляПечати.Плательщик_Адрес);
	
	ОбластьМакетаШапка            	= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы 	= Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           	= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  	= Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            	= Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           	= Макет.ПолучитьОбласть("Подвал");
	ОбластьДанныеАкта			  	= Макет.ПолучитьОбласть("ДанныеАкта");
	ОбластьМакетаШтампШапка			= Макет.ПолучитьОбласть("ШтампШапка");
	ОбластьМакетаШтампСтрока		= Макет.ПолучитьОбласть("ШтампСтрока");
	ОбластьМакетаШтампПодвал		= Макет.ПолучитьОбласть("ШтампПодвал");
	ОбластьМакетаУстНадпись			= Макет.ПолучитьОбласть("УступочнаяНадпись");
	
	// Заполняем и выводим штамп
	ОбластьМакетаШтампШапка.Параметры.ШтампИД = СтруктураШтампа.ДополнительныеСведения.ИдентификаторДокумента;
	
	ТабДокумент.Вывести(ОбластьМакетаШтампШапка);
	
	ГрузПринял  = СтрЗаменить(ДанныеДляПечати.Покупатель_ФИОГрузПринял, " ", "");
	ГрузПолучил = СтрЗаменить(ДанныеДляПечати.Покупатель_ФИОГрузПолучил, " ", "");
	
	Для Каждого Подпись Из СтруктураШтампа.МассивПодписей Цикл
		ОбластьМакетаШтампСтрока.Параметры.ШтампОрганизация = Подпись.Организация;
		ОбластьМакетаШтампСтрока.Параметры.ШтампСертификат = Подпись.ФИО + ", " + Подпись.Должность + Символы.ПС
		+ Подпись.СерийныйНомерЭП + ", " + Подпись.ИздательЭП;
		ОбластьМакетаШтампСтрока.Параметры.ШтампСтатус = ?(Подпись.Подпись, "Подписан квалифицированной ЭП,", "Отказано") + Символы.ПС + Подпись.ДатаВремяПодписи;
		
		ТабДокумент.Вывести(ОбластьМакетаШтампСтрока);
		
		Если СтрЗаменить(Подпись.ФИО, " ", "") = ГрузПринял ИЛИ
			СтрЗаменить(Подпись.ФИО, " ", "") = ГрузПолучил Тогда
			ПредставлениеПодписантаТитула = СтрЗаменить(Подпись.ФИО, " ", "");
		КонецЕсли;
			
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаШтампПодвал);
	
	// Выводим уступочную надпись
	Если НЕ ДанныеДляПечати.УступочнаяНадпись = Неопределено Тогда
		ОбластьМакетаУстНадпись.Параметры.УстНадпись = ДанныеДляПечати.УступочнаяНадпись;
		ТабДокумент.Вывести(ОбластьМакетаУстНадпись);
	КонецЕсли;
		
	// Выводим общие реквизиты шапки
	ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(
		СведенияОГрузоотправителе,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны,Факсы,НомерСчета,Банк,БИК"
	);
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПодразделения = ДанныеДляПечати.Грузоотправитель_СтруктурноеПодразделение;
	
	ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ОписаниеОрганизации(
		СведенияОГрузополучателе,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны,Факсы,НомерСчета,Банк,БИК"
	);
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(
		СведенияОПоставщике,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны,Факсы,НомерСчета,Банк,БИК"
	);
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ОписаниеОрганизации(
		СведенияОПокупателе,
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны,Факсы,НомерСчета,Банк,БИК"
	);
	
	ОбластьМакетаШапка.Параметры.Основание = ДанныеДляПечати.Основание;
	
	ОбластьМакетаШапка.Параметры.НомерДокумента = ДанныеДляПечати.НомерТН;
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = ДанныеДляПечати.ДатаТН;
	
	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = ДанныеДляПечати.Грузоотправитель_ОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = ДанныеДляПечати.Грузоотправитель_ОКДП;
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = ДанныеДляПечати.Грузополучатель_ОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = ДанныеДляПечати.Поставщик_ОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = ДанныеДляПечати.Плательщик_ОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер             = ДанныеДляПечати.Основание_Номер;
	ОбластьМакетаШапка.Параметры.ОснованиеДата              = ДанныеДляПечати.Основание_Дата;
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = ДанныеДляПечати.ТранспортнаяНакладная_Номер;
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = ДанныеДляПечати.ТранспортнаяНакладная_Дата;
	
	Если ДанныеДляПечати.Свойство("ВидОперации") Тогда
		ОбластьМакетаШапка.Параметры.ВидОперации				= ДанныеДляПечати.ВидОперации;
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	// Инициализация счетчика страниц
	НомерСтраницы = 1;
	
	// Инициализация итогов по странице
	ИтогоМестНаСтранице       	= 0;
	ИтогоКоличествоНаСтранице 	= 0;
	ИтогоСуммаНаСтранице      	= 0;
	ИтогоНДСНаСтранице        	= 0;
	ИтогоСуммаСНДСНаСтранице  	= 0;
	ИтогоМассаБруттоПоСтранице 	= 0;
	
	// Инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ДанныеДляПечати.ТЗ_Товары.Количество();
	
	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ДанныеДляПечати.ТЗ_Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.НаимТов) + 
		?(ЗначениеЗаполнено(ВыборкаСтрок.ХарактерТов), ", " + СокрЛП(ВыборкаСтрок.ХарактерТов), "") +
		?(ЗначениеЗаполнено(ВыборкаСтрок.СортТов), ", " + СокрЛП(ВыборкаСтрок.СортТов), "") +
		?(ЗначениеЗаполнено(ВыборкаСтрок.АртикулТов), ", " + СокрЛП(ВыборкаСтрок.АртикулТов), "");
		ОбластьМакетаСтрока.Параметры.ТоварКод = ВыборкаСтрок.КодТов;
		ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаНаименование = ВыборкаСтрок.НаимЕдИзм;
		ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаКодПоОКЕИ = ВыборкаСтрок.ОКЕИ_Тов;
		ОбластьМакетаСтрока.Параметры.ВидУпаковки = ВыборкаСтрок.ВидУпак;
		ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = ВыборкаСтрок.Место;
		ОбластьМакетаСтрока.Параметры.КоличествоМест = ВыборкаСтрок.КолМест;
		ОбластьМакетаСтрока.Параметры.МассаБрутто = ВыборкаСтрок.Брутто;
		ОбластьМакетаСтрока.Параметры.Количество = ВыборкаСтрок.Нетто;
		ОбластьМакетаСтрока.Параметры.Цена = ВыборкаСтрок.Цена;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = ВыборкаСтрок.СумБезНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС = ?(НЕ ВыборкаСтрок.СтавкаНДС = Неопределено, Строка(ВыборкаСтрок.СтавкаНДС) + "%", "без НДС");
		ОбластьМакетаСтрока.Параметры.СуммаНДС = ?(НЕ ВыборкаСтрок.СтавкаНДС = Неопределено, ВыборкаСтрок.СумНДС, "без НДС");
		ОбластьМакетаСтрока.Параметры.СуммаСНДС = ВыборкаСтрок.СумУчНДС;
		
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КолМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
			
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		
		// Увеличим итоги по странице
		ИтогоМестНаСтранице       	= ИтогоМестНаСтранице       + ?(ЗначениеЗаполнено(ВыборкаСтрок.КолМест), ВыборкаСтрок.КолМест, 0);
		ИтогоКоличествоНаСтранице 	= ИтогоКоличествоНаСтранице + ?(ЗначениеЗаполнено(ВыборкаСтрок.Нетто), ВыборкаСтрок.Нетто, 0);
		ИтогоСуммаНаСтранице      	= ИтогоСуммаНаСтранице      + ?(ЗначениеЗаполнено(ВыборкаСтрок.СумБезНДС), ВыборкаСтрок.СумБезНДС, 0);
		ИтогоНДСНаСтранице        	= ИтогоНДСНаСтранице        + ?(ЗначениеЗаполнено(ВыборкаСтрок.СумНДС), ВыборкаСтрок.СумНДС, 0);
		ИтогоСуммаСНДСНаСтранице  	= ИтогоСуммаСНДСНаСтранице  + ?(ЗначениеЗаполнено(ВыборкаСтрок.СумУчНДС), ВыборкаСтрок.СумУчНДС, 0);
		ИтогоМассаБруттоПоСтранице 	= ИтогоМассаБруттоПоСтранице + ?(ЗначениеЗаполнено(ВыборкаСтрок.Брутто), ВыборкаСтрок.Брутто, 0);
		
		// Увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + ?(ЗначениеЗаполнено(ВыборкаСтрок.КолМест), ВыборкаСтрок.КолМест, 0);
		ИтогоКоличество = ИтогоКоличество + ?(ЗначениеЗаполнено(ВыборкаСтрок.Нетто), ВыборкаСтрок.Нетто, 0);
		ИтогоСумма      = ИтогоСумма      + ?(ЗначениеЗаполнено(ВыборкаСтрок.СумБезНДС), ВыборкаСтрок.СумБезНДС, 0);
		ИтогоНДС        = ИтогоНДС        + ?(ЗначениеЗаполнено(ВыборкаСтрок.СумНДС), ВыборкаСтрок.СумНДС, 0);
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + ?(ЗначениеЗаполнено(ВыборкаСтрок.СумУчНДС), ВыборкаСтрок.СумУчНДС, 0);
		
	КонецЦикла;
	
	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       	= ИтогоМестНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице 	= ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      	= ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        	= ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  	= ИтогоСуммаСНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогоМассаБруттоПоСтранице;
	
	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогМест       	= ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогКоличество 	= ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      	= ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        	= ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  	= ИтогоСуммаСНДС;
	ОбластьМакетаВсего.Параметры.ИтогМассаБрутто	= ДанныеДляПечати.Брутто;
	
	ТабДокумент.Вывести(ОбластьМакетаВсего);
	
	// Выводим подвал документа
	
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = ДанныеДляПечати.ОтпускРазрешил;
	ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = ДанныеДляПечати.Бухгалтер;
	ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = ДанныеДляПечати.ОтпускРазрешил_Должность;
	ОбластьМакетаПодвал.Параметры.ФИОКладовщика			= ДанныеДляПечати.ОтпускПроизвел;
	ОбластьМакетаПодвал.Параметры.ДолжностьКладовщика	= ДанныеДляПечати.ОтпускПроизвел_Должность;
	
	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ?(ЗначениеЗаполнено(ИтогоСуммаСНДС), СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета), "");
	
	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ?(ЗначениеЗаполнено(ДанныеДляПечати.КоличествоЗаписейПрописью), ДанныеДляПечати.КоличествоЗаписейПрописью, ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0"));
	ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью = ?(ЗначениеЗаполнено(ДанныеДляПечати.КоличествоМестОбщПрописью), ДанныеДляПечати.КоличествоМестОбщПрописью, ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")));
	ОбластьМакетаПодвал.Параметры.СуммаПрописью = ?(ЗначениеЗаполнено(ДанныеДляПечати.СуммаОтпускаПрописью), ДанныеДляПечати.СуммаОтпускаПрописью, ?(ЗначениеЗаполнено(ИтогоСуммаСНДС), СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета), ""));
	
	Если ЗначениеЗаполнено(ДанныеДляПечати.НеттоОбщПрописью) Тогда
		ОбластьМакетаПодвал.Параметры.МассаНеттоПрописью = ДанныеДляПечати.НеттоОбщПрописью;
	ИначеЕсли ЗначениеЗаполнено(ДанныеДляПечати.НеттоОбщ) Тогда
		ОбластьМакетаПодвал.Параметры.МассаНеттоПрописью = ЧислоПрописью(Число(ДанныеДляПечати.НеттоОбщ), ,",,,,,,,,0");
	Иначе
		ОбластьМакетаПодвал.Параметры.МассаНеттоПрописью = "";
	КонецЕсли;
	
	Попытка
		ОбластьМакетаПодвал.Параметры.МассаНеттоПрописью = ?(ЗначениеЗаполнено(ДанныеДляПечати.НеттоОбщ), ЧислоПрописью(Число(ДанныеДляПечати.НеттоОбщ), ,",,,,,,,,0"), "");
	Исключение
		ОбластьМакетаПодвал.Параметры.МассаНеттоПрописью = "";
	КонецПопытки;
	
	
	Если ЗначениеЗаполнено(ДанныеДляПечати.Брутто) Тогда
		ОбластьМакетаПодвал.Параметры.МассаГрузаПрописью = ЧислоПрописью(Число(ДанныеДляПечати.Брутто), ,",,,,,,,,0");
	ИначеЕсли ЗначениеЗаполнено(ДанныеДляПечати.Брутто) Тогда
		ОбластьМакетаПодвал.Параметры.МассаГрузаПрописью = ЧислоПрописью(Число(ДанныеДляПечати.Брутто), ,",,,,,,,,0");
	Иначе
		ОбластьМакетаПодвал.Параметры.МассаГрузаПрописью = "";
	КонецЕсли;
	
	Попытка
		ОбластьМакетаПодвал.Параметры.МассаГрузаПрописью = ?(ЗначениеЗаполнено(ДанныеДляПечати.БруттоОбщ), ЧислоПрописью(Число(ДанныеДляПечати.БруттоОбщ), ,",,,,,,,,0"), "");
	Исключение
		ОбластьМакетаПодвал.Параметры.МассаГрузаПрописью = "";
	КонецПопытки;
	
	ОбластьМакетаПодвал.Параметры.МассаНетто = ДанныеДляПечати.НеттоОбщ;
	ОбластьМакетаПодвал.Параметры.МассаГруза = ДанныеДляПечати.БруттоОбщ;
	
	МассивДатаДок = РазложитьСтрокуВМассивПодстрок(ДанныеДляПечати.ДатаТН, ".");
	ПолнаяДатаДокумента = Формат(Дата(МассивДатаДок[2], МассивДатаДок[1], МассивДатаДок[0]), "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
	ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
	
	// Количество приложений прописью
	Если ДанныеДляПечати.Свойство("КолПрилПр") Тогда
		ОбластьМакетаПодвал.Параметры.КолПрилПр = ДанныеДляПечати.КолПрилПр;
	КонецЕсли;
		
	ПодписантПредставление = СтрЗаменить(?(ЗначениеЗаполнено(ДанныеДляПечати.ПодписантЮЛ), ДанныеДляПечати.ПодписантЮЛ, ДанныеДляПечати.ПодписантИП), " ", "");

	//титул покупателя
	Если ЗначениеЗаполнено(ДанныеДляПечати.Покупатель_ДатаПолученияГруза) Тогда
		ОбластьМакетаПодвал.Параметры.ДоверенностьНомер   	  = ДанныеДляПечати.Покупатель_ДоверенностьНомер;
		ОбластьМакетаПодвал.Параметры.ДоверенностьДата   	  = ДанныеДляПечати.Покупатель_ДоверенностьДата;
		ОбластьМакетаПодвал.Параметры.ДоверенностьВыданаКем   = ?(ЗначениеЗаполнено(ДанныеДляПечати.Покупатель_ДоверенностьВыданаКемОрганизация), ДанныеДляПечати.Покупатель_ДоверенностьВыданаКемОрганизация + " ", "") +
		?(ЗначениеЗаполнено(ДанныеДляПечати.Покупатель_ДоверенностьВыданаКемДолжность), ДанныеДляПечати.Покупатель_ДоверенностьВыданаКемДолжность + " ", "") +
		?(ЗначениеЗаполнено(ДанныеДляПечати.Покупатель_ДоверенностьВыданаКемФИО), ДанныеДляПечати.Покупатель_ДоверенностьВыданаКемФИО, "");
		
		ОбластьМакетаПодвал.Параметры.ДоверенностьВыданаКому  = ?(ЗначениеЗаполнено(ДанныеДляПечати.Покупатель_ДоверенностьВыданаКомуДолжность), ДанныеДляПечати.Покупатель_ДоверенностьВыданаКомуДолжность + " ", "") +
		?(ЗначениеЗаполнено(ДанныеДляПечати.Покупатель_ДоверенностьВыданаКомуФИО), ДанныеДляПечати.Покупатель_ДоверенностьВыданаКомуФИО, "");
		
		ОбластьМакетаПодвал.Параметры.ДолжностьГрузПринял     = ДанныеДляПечати.Покупатель_ДолжностьГрузПринял;
		ОбластьМакетаПодвал.Параметры.ФИОГрузПринял   		  = ДанныеДляПечати.Покупатель_ФИОГрузПринял;
		ОбластьМакетаПодвал.Параметры.ДолжностьГрузПолучил    = ДанныеДляПечати.Покупатель_ДолжностьГрузПолучил;
		ОбластьМакетаПодвал.Параметры.ФИОГрузПолучил   		  = ДанныеДляПечати.Покупатель_ФИОГрузПолучил;
		ОбластьМакетаПодвал.Параметры.ДатаПолученияГруза   	  = ДанныеДляПечати.Покупатель_ДатаПолученияГруза;
		
		Если ДанныеДляПечати.Свойство("ПодписантТитулаФИО") Тогда
			ОбластьМакетаПодвал.Параметры.ГрузПринялПодпись		= ?(ЗначениеЗаполнено(ДанныеДляПечати.Покупатель_ФИОГрузПринял) И ДанныеДляПечати.Покупатель_ФИОГрузПринял = ДанныеДляПечати.ПодписантТитулаФИО, "электронная подпись", ""); 
			ОбластьМакетаПодвал.Параметры.ГрузПолучилПодпись	= ?(ЗначениеЗаполнено(ДанныеДляПечати.Покупатель_ФИОГрузПолучил) И ДанныеДляПечати.Покупатель_ФИОГрузПолучил = ДанныеДляПечати.ПодписантТитулаФИО, "электронная подпись", ""); 	
		КонецЕсли;
	КонецЕсли;
	
	Разрешил = СтрЗаменить(ДанныеДляПечати.ОтпускРазрешил, " ", "");
	Произвел = СтрЗаменить(ДанныеДляПечати.ОтпускПроизвел, " ", "");
	Бух		 = СтрЗаменить(ДанныеДляПечати.Бухгалтер, " ", "");
	
	ОбластьМакетаПодвал.Параметры.БухгалтерПодпись		= ?(ЗначениеЗаполнено(ДанныеДляПечати.Бухгалтер) И Бух = ПодписантПредставление, "электронная подпись", ""); 
	ОбластьМакетаПодвал.Параметры.ОтпускРазрешилПодпись = ?(ЗначениеЗаполнено(ДанныеДляПечати.ОтпускРазрешил) И Разрешил = ПодписантПредставление, "электронная подпись", "");
	ОбластьМакетаПодвал.Параметры.ОтпускПроизвелПодпись = ?(Произвел = ПодписантПредставление, "электронная подпись", "");
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	Если Не СписокАктов.Количество() = 0 Тогда
		СтрокаОписания = "";                                                      
		Для Каждого Элемент Из СписокАктов Цикл
			СтрокаОписания = СтрокаОписания + Элемент.Значение + Символы.ПС;
		КонецЦикла;
		ОбластьДанныеАкта.Параметры.ИнформацияОбАктах = СтрокаОписания;
		ТабДокумент.Вывести(ОбластьДанныеАкта);
	КонецЕсли;
	
	ТабДокумент.НижнийКолонтитул.Выводить = Истина;
	ТабДокумент.РазмерКолонтитулаСнизу = 20;
	ТабДокумент.НижнийКолонтитул.НачальнаяСтраница = 2;
	
	ТабДокумент.НижнийКолонтитул.ТекстСправа = "ИД оригинального документа в Synerdocs:" + Символы.ПС + 
	СтруктураШтампа.ДополнительныеСведения.ИдентификаторДокумента + Символы.ПС +
	СтруктураШтампа.ДополнительныеСведения.ДатаВремяОтправки + Символы.ПС + 
	"Страница " + "[&НомерСтраницы] из [&СтраницВсего]";
	
КонецПроцедуры // ПечатьТОРГ12()

//Процедура выводит печатную форму для электронного документа с типом "Акт"
//
// Параметры:
//	ДанныеДляПечати: структура с данными, полученными из XML
//  ТабДокумент: табличный документ, в который выводится печатная форма
//
Процедура Печать_АктОбОказанииУслуг(ДанныеДляПечати, ТабДокумент, СтруктураШтампа) Экспорт
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет = ПолучитьМакет("Акт");
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         	= 0;
	ТабДокумент.ПолеСлева          	= 0;
	ТабДокумент.ПолеСнизу          	= 20;
	ТабДокумент.ПолеСправа         	= 0;
	ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	
	ОбластьМакетаШтампШапка			= Макет.ПолучитьОбласть("ШтампШапка");
	ОбластьМакетаШтампСтрока		= Макет.ПолучитьОбласть("ШтампСтрока");
	ОбластьМакетаШтампПодвал		= Макет.ПолучитьОбласть("ШтампПодвал");
	
	ОбластьМакетаЗаголовок			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаШапка				= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаСтрока				= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьМакетаПодвалТаблицы		= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьМакетаПодвал				= Макет.ПолучитьОбласть("Подвал");
	
	// Заполняем и выводим штамп
	ОбластьМакетаШтампШапка.Параметры.ШтампИД = СтруктураШтампа.ДополнительныеСведения.ИдентификаторДокумента;
	
	ТабДокумент.Вывести(ОбластьМакетаШтампШапка);
	
	Для Каждого Подпись Из СтруктураШтампа.МассивПодписей Цикл
		ОбластьМакетаШтампСтрока.Параметры.ШтампОрганизация = Подпись.Организация;
		ОбластьМакетаШтампСтрока.Параметры.ШтампСертификат = Подпись.ФИО + ", " + Подпись.Должность + Символы.ПС
		+ Подпись.СерийныйНомерЭП + ", " + Подпись.ИздательЭП;
		ОбластьМакетаШтампСтрока.Параметры.ШтампСтатус = ?(Подпись.Подпись, "Подписан квалифицированной ЭП,", "Отказано") + Символы.ПС + Подпись.ДатаВремяПодписи;
		
		ТабДокумент.Вывести(ОбластьМакетаШтампСтрока);		
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаШтампПодвал);
			
	// Выводим шапку
	ОбластьМакета = ОбластьМакетаЗаголовок;
	
	Если НЕ ДанныеДляПечати.УступочнаяНадпись = Неопределено Тогда
		ОбластьМакета.Параметры.УступочнаяНадпись = ДанныеДляПечати.УступочнаяНадпись;	
	КонецЕсли;

	ОбластьМакета.Параметры.АктНомер 					= ДанныеДляПечати.НомерАкта;
	ОбластьМакета.Параметры.АктДата 					= Формат(ДанныеДляПечати.ДатаАкта, "ДФ='дд ММММ гггг'") + " г.";	
	
	СведенияОбИсполнителе = Новый Структура;
	СведенияОбИсполнителе.Вставить("НаименованиеДляПечатныхФорм", СокрЛП(ДанныеДляПечати.Исполнитель));
	СведенияОбИсполнителе.Вставить("ИНН",				ДанныеДляПечати.Исполнитель_ИНН);
	СведенияОбИсполнителе.Вставить("КПП",				ДанныеДляПечати.Исполнитель_КПП);
	СведенияОбИсполнителе.Вставить("Телефоны",			ДанныеДляПечати.Исполнитель_Телефон);
	СведенияОбИсполнителе.Вставить("НомерСчета",		ДанныеДляПечати.Исполнитель_БанковскийСчет);
	СведенияОбИсполнителе.Вставить("Банк",				ДанныеДляПечати.Исполнитель_Банк);
	СведенияОбИсполнителе.Вставить("БИК",				ДанныеДляПечати.Исполнитель_БИКБанка);
	СведенияОбИсполнителе.Вставить("ФактическийАдрес",	ДанныеДляПечати.Исполнитель_Адрес);
	СведенияОбИсполнителе.Вставить("Факсы",				ДанныеДляПечати.Исполнитель_Факс);
    	
	ОбластьМакета.Параметры.ПредставлениеИсполнителя 	= ОписаниеОрганизации(
		СведенияОбИсполнителе, 
		"НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны,Факсы,НомерСчета,Банк,БИК"
	);
	ОбластьМакета.Параметры.Заголовок 					= ДанныеДляПечати.Заголовок;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = ОбластьМакетаШапка;
	
	ИтогоСНДСПоДокументу 	= 0;
	ИтогоНДСПоДокументу		= 0;
	
	Для Каждого ТекСтрокаОписание Из ДанныеДляПечати.ТЗ_ОписаниеРабот Цикл
		
		ОбластьМакета.Параметры.НачРабот = ТекСтрокаОписание.НачалоРабот;
		ОбластьМакета.Параметры.КонРабот = ТекСтрокаОписание.КонецРабот;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		НомерСтроки = 0;
       
		Для Каждого ТекСтрокаРаботы Из ТекСтрокаОписание.Работы Цикл
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.НомСтр = НомерСтроки;
			
			// Если описание заполнено, выводим его. 
			Если НЕ СокрЛП(ТекСтрокаРаботы.Описание) = "" Тогда
				ОбластьМакетаСтрока.Параметры.ПредставлениеУслуги = СокрЛП(ТекСтрокаРаботы.НаимРабот) + " (" + СокрЛП(ТекСтрокаРаботы.Описание) + ")";
			Иначе 
				ОбластьМакетаСтрока.Параметры.ПредставлениеУслуги = СокрЛП(ТекСтрокаРаботы.НаимРабот);
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.КодЕИ		= ТекСтрокаРаботы.ОКЕИ;
			ОбластьМакетаСтрока.Параметры.НаимЕИ 	= ТекСтрокаРаботы.НаимЕдИзм;
			
			ОбластьМакетаСтрока.Параметры.Цена 			= ТекСтрокаРаботы.Цена;
			ОбластьМакетаСтрока.Параметры.Количество 	= ТекСтрокаРаботы.Количество;
			
			ОбластьМакетаСтрока.Параметры.СтоимБезНДС	= ТекСтрокаРаботы.СумБезНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДС		= ТекСтрокаРаботы.СумНДС;
			ОбластьМакетаСтрока.Параметры.СтоимУчНДС	= ТекСтрокаРаботы.СумУчНДС; 
			
			ТабДокумент.Вывести(ОбластьМакетаСтрока);

		КонецЦикла;
			
		ОбластьМакетаПодвалТаблицы.Параметры.ВсегоБезНДС	= ОбщегоНазначения.ФорматСумм(ТекСтрокаОписание.СуммаБезНДС);
		ОбластьМакетаПодвалТаблицы.Параметры.ВсегоНДС		= ОбщегоНазначения.ФорматСумм(ТекСтрокаОписание.СуммаНДС);
		ОбластьМакетаПодвалТаблицы.Параметры.ВсегоСНДС 		= ОбщегоНазначения.ФорматСумм(ТекСтрокаОписание.СуммаСНДС);
		
		ИтогоСНДСПоДокументу	= ИтогоСНДСПоДокументу + ТекСтрокаОписание.СуммаСНДС;
		ИтогоНДСПоДокументу		= ИтогоНДСПоДокументу + ТекСтрокаОписание.СуммаНДС;

		ТабДокумент.Вывести(ОбластьМакетаПодвалТаблицы);
	КонецЦикла;
		
	ОбластьМакета = ОбластьМакетаПодвал;
		
	ОбластьМакета.Параметры.ИтогоСуммаСНДС 	= ?(ИтогоСНДСПоДокументу > 0, СформироватьСуммуПрописью(ИтогоСНДСПоДокументу, мВалютаРегламентированногоУчета), "");;
	ОбластьМакета.Параметры.ИтогоСуммаНДС 	= ?(ИтогоНДСПоДокументу > 0, СформироватьСуммуПрописью(ИтогоНДСПоДокументу, мВалютаРегламентированногоУчета), "");;
	
	Если Не ДанныеДляПечати.Сдал = Неопределено Тогда
		// Сдал
		Если Не ДанныеДляПечати.Сдал.ПодписьИсполн = Неопределено Тогда
			ОбластьМакета.Параметры.СдалДолжность = ДанныеДляПечати.Сдал.ПодписьИсполн.Должность;
			Если Не ДанныеДляПечати.Сдал.ПодписьИсполн.ФИО = Неопределено Тогда
				ФИОСдал = ДанныеДляПечати.Сдал.ПодписьИсполн.ФИО;
				ОбластьМакета.Параметры.СдалФИО = ФИОСдал.Фамилия + " " + ФИОСдал.Имя + " " + ФИОСдал.Отчество;
			КонецЕсли;
		КонецЕсли;
		
		// Доверенность
		Если Не ДанныеДляПечати.Сдал.ДоверенИсполн = Неопределено Тогда
			ОбластьМакета.Параметры.СдалДовНомер = ДанныеДляПечати.Сдал.ДоверенИсполн.НомДоверен;
			ОбластьМакета.Параметры.СдалДовДата = ДанныеДляПечати.Сдал.ДоверенИсполн.ДатаДоверен;
			// Выдана кем
			Если Не ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКем = Неопределено Тогда
				ОбластьМакета.Параметры.СдалДовНаименование = ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКем.НаимОргКем;
				СтрКем = ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКем.ДолжнКем;
				КемФИО = ДанныеДляПечати.Сдал.ДоверенИсполн.ВыданаКем.ФИО;
				Если Не КемФИО = Неопределено Тогда
					СтрКем = ?(ЗначениеЗаполнено(СтрКем), СтрКем + " ", "") + КемФИО.Фамилия + " " + КемФИО.Имя + " " + КемФИО.Отчество;
				КонецЕсли;
				ОбластьМакета.Параметры.СдалДовВыданаКем = СтрКем;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПодписантДолжность = "";
	Если Не ДанныеДляПечати.Подписант.ИП = Неопределено Тогда
		ПодписантФИО = ДанныеДляПечати.Подписант.ИП.ФИО;
	Иначе
		ПодписантДолжность = ДанныеДляПечати.Подписант.ЮЛ.Должн;
		ПодписантФИО = ДанныеДляПечати.Подписант.ЮЛ.ФИО;
	КонецЕсли;
	ОбластьМакета.Параметры.ПодписьИспДолжность	= ПодписантДолжность;
	ОбластьМакета.Параметры.ПодписьИспФИО		= ПодписантФИО.Фамилия + " " + ПодписантФИО.Имя + " " + ПодписантФИО.Отчество;
	
	//Доверка заказчик
	ОбластьМакета.Параметры.ПринялДолжность   	= ?(ЗначениеЗаполнено(ДанныеДляПечати.Заказчик_ДоверенностьВыданаКомуДолжность), ДанныеДляПечати.Заказчик_ДоверенностьВыданаКомуДолжность, ДанныеДляПечати.Заказчик_ДолжностьДолжностногоЛица);
	ОбластьМакета.Параметры.ПринялФИО			= ?(ЗначениеЗаполнено(ДанныеДляПечати.Заказчик_ДоверенностьВыданаКомуФИО), ДанныеДляПечати.Заказчик_ДоверенностьВыданаКомуФИО, ДанныеДляПечати.Заказчик_ФИОДолжностногоЛица);
	
	ОбластьМакета.Параметры.ПринялДовНомер			= ДанныеДляПечати.Заказчик_ДоверенностьНомер;
	ОбластьМакета.Параметры.ПринялДовДата			= ДанныеДляПечати.Заказчик_ДоверенностьДата;
	ОбластьМакета.Параметры.ПринялДовНаименование   = ДанныеДляПечати.Заказчик_ДоверенностьВыданаКемОрганизация;
	ОбластьМакета.Параметры.ПринялДовВыданаКем		= Строка(ДанныеДляПечати.Заказчик_ДоверенностьВыданаКемДолжность) + " " + Строка(ДанныеДляПечати.Заказчик_ДоверенностьВыданаКемФИО);
	
	ОбластьМакета.Параметры.ПодписьЗакДолжность		= ДанныеДляПечати.Заказчик_ДолжностьПодписанта; 
	ОбластьМакета.Параметры.ПодписьЗакФИО           = ДанныеДляПечати.Заказчик_ФИОПодписанта;
		
	ТабДокумент.Вывести(ОбластьМакета);
 		
	ТабДокумент.НижнийКолонтитул.Выводить = Истина;
	ТабДокумент.РазмерКолонтитулаСнизу = 20;
	ТабДокумент.НижнийКолонтитул.НачальнаяСтраница = 2;
	
	ТабДокумент.НижнийКолонтитул.ТекстСправа = "ИД оригинального документа в Synerdocs:" + Символы.ПС + 
	СтруктураШтампа.ДополнительныеСведения.ИдентификаторДокумента + Символы.ПС +
	СтруктураШтампа.ДополнительныеСведения.ДатаВремяОтправки + Символы.ПС + 
	"Страница " + "[&НомерСтраницы] из [&СтраницВсего]";
	
	
КонецПроцедуры // ПечатьАктаОбОказанииУслуг()

//Процедура распараллеливает печать электронного документа в зависимости от типа
//
// Параметры:
//  Syn_IDДокумента: ID документа в сервисе
//  ТипЭД: тип электронного документа
//  ТабДок: табличный документ, в который выводится печатная форма
//
Процедура ПечатьЭД(FullDocumentInfo, ТабДок, СписокАктов = Неопределено) Экспорт
	
	Если FullDocumentInfo = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипЭД = ?(ЗначениеЗаполнено(FullDocumentInfo.Document.UntypedKind), FullDocumentInfo.Document.UntypedKind, FullDocumentInfo.Document.DocumentTypeEnum.Description);
	
	ДополнительныеСведения = Новый Структура;
	ДополнительныеСведения.Вставить("НаименованиеДокумента", FullDocumentInfo.Document.Name);
	ДополнительныеСведения.Вставить("ИдентификаторДокумента", FullDocumentInfo.Document.Id);
	ДополнительныеСведения.Вставить("ДатаВремяОтправки", ДатаВремяUTC(FullDocumentInfo.SentDate));
	
	// Данные о подписях к документу
	МассивПодписей = Новый Массив;
	Если МенеджерКриптографии = Неопределено Тогда
		Сообщить("Не удалось получить информацию о подписях в документе");
	Иначе
		// Подписи к документу
		Для Каждого ТекПодпись Из FullDocumentInfo.Signs.Sign Цикл
			Попытка
				ПодписиВДокументе = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ТекПодпись.Raw);
				Подпись = ПодписиВДокументе[0];
				СтруктураПодписи = Новый Структура;
				СтруктураПодписи.Вставить("Организация", ПолучитьЗначениеПоляСубъекта(Подпись.Субъект, "O"));
				СтруктураПодписи.Вставить("ФИО", ПолучитьЗначениеПоляСубъекта(Подпись.Субъект, "CN"));
				СтруктураПодписи.Вставить("Должность", ПолучитьЗначениеПоляСубъекта(Подпись.Субъект, "T"));
				СтруктураПодписи.Вставить("СерийныйНомерЭП", СтрЗаменить(Подпись.СерийныйНомер, " ", ""));
				СтруктураПодписи.Вставить("ИздательЭП", Подпись.Издатель.CN);
				СтруктураПодписи.Вставить("ДатаВремяПодписи", ДатаВремяUTC(ТекПодпись.SentDate));
				СтруктураПодписи.Вставить("Подпись", Истина);
				МассивПодписей.Добавить(СтруктураПодписи);
			Исключение
				Сообщить("Не удалось получить информацию о подписи " + ТекПодпись.Subject);
			КонецПопытки;
		КонецЦикла;
		
		// Подписи к служебным документам
		Для Каждого ТекДокумент Из FullDocumentInfo.ServiceDocuments.ServiceDocument Цикл
			ТипСД = ТекДокумент.DocumentType;
			Если ТипСД = "WaybillBuyer" Или ТипСД = "ActOfWorkBuyer" Или ТипСД = "ServiceAmendmentRequest" Или ТипСД = "ServiceInvoiceAmendmentRequest" Тогда
				Попытка
					ПодписиВДокументе = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ТекДокумент.SignRaw);
					Подпись = ПодписиВДокументе[0];
					СтруктураПодписи = Новый Структура;
					СтруктураПодписи.Вставить("Организация", ПолучитьЗначениеПоляСубъекта(Подпись.Субъект, "O"));
					СтруктураПодписи.Вставить("ФИО", ПолучитьЗначениеПоляСубъекта(Подпись.Субъект, "CN"));
					СтруктураПодписи.Вставить("Должность", ПолучитьЗначениеПоляСубъекта(Подпись.Субъект, "T"));
					СтруктураПодписи.Вставить("СерийныйНомерЭП", СтрЗаменить(Подпись.СерийныйНомер, " ", ""));
					СтруктураПодписи.Вставить("ИздательЭП", Подпись.Издатель.CN);
					СтруктураПодписи.Вставить("ДатаВремяПодписи", ДатаВремяUTC(ТекДокумент.SignDate));
					СтруктураПодписи.Вставить("Подпись", Найти(ТипСД, "AmendmentRequest") = 0);
					МассивПодписей.Добавить(СтруктураПодписи);
				Исключение
					Сообщить("Не удалось получить информацию о подписи к документу [" + ТекДокумент.DocumentTypeEnum.Description + "]");
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураШтампа = Новый Структура;
	СтруктураШтампа.Вставить("МассивПодписей", МассивПодписей);
	СтруктураШтампа.Вставить("ДополнительныеСведения", ДополнительныеСведения);
	
	Если ТипЭД = "Счет-фактура" Или ТипЭД = "Исправленный счет-фактура" Тогда			
		ДанныеДляПечати = РазобратьЭД_СчетФактура(FullDocumentInfo.Document);
		ПечатьЭД_СчетФактура1137(ДанныеДляПечати, ТабДок, СтруктураШтампа);
	ИначеЕсли ТипЭД = "Корректировочный счет-фактура"  Или ТипЭД = "Исправленный корректировочный счет-фактура" Тогда
		ДанныеДляПечати = РазобратьЭД_КорректировочныйСчетФактура(FullDocumentInfo.Document);
		ПечатьЭД_КорректировочныйСчетФактура1137(ДанныеДляПечати, ТабДок, СтруктураШтампа);
	ИначеЕсли ТипЭД = "Товарная накладная" Тогда
		ДанныеДляПечати = РазобратьЭД_Торг12(FullDocumentInfo.Document);
		ПечатьЭД_ТОРГ12(ДанныеДляПечати, ТабДок, СписокАктов, СтруктураШтампа);
	ИначеЕсли ТипЭД = "Акт выполненных работ" Тогда
		ДанныеДляПечати = РазобратьЭД_АктПродавец(FullDocumentInfo.Document);
		Печать_АктОбОказанииУслуг(ДанныеДляПечати, ТабДок, СтруктураШтампа);
	ИначеЕсли ТипЭД = "Соглашение об аннулировании" Тогда
		ДанныеДляПечати = РазобратьЭД_ПОА(FullDocumentInfo.Document.Content);
		Печать_ПОА(ДанныеДляПечати, ТабДок, СтруктураШтампа);
	Иначе
		Печать.Печать_Врем(ТабДок, FullDocumentInfo);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
//Процедуры и функции создания документов и синхронизаиця справочников 1С

Функция ПолучитьКонтрагента(ДанныеДокумента)
	Если ДанныеДокумента.ВидДокумента = "Акт" Тогда
		КонтрНаименование =	?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Исполнитель, ДанныеДокумента.Заказчик);
		КонтрИНН =			?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Исполнитель_ИНН, ДанныеДокумента.Заказчик_ИНН);
		КонтрКПП =			?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Исполнитель_КПП, ДанныеДокумента.Заказчик_КПП);
	ИначеЕсли ДанныеДокумента.ВидДокумента = "Торг12" Тогда
		КонтрНаименование =	?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик, ДанныеДокумента.Плательщик);
		КонтрИНН =			?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик_ИНН, ДанныеДокумента.Плательщик_ИНН);
		КонтрКПП =			?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик_КПП, ДанныеДокумента.Плательщик_КПП);
	ИначеЕсли ДанныеДокумента.ВидДокумента = "СчетНаОплату" Тогда
		КонтрНаименование  = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Продавец,ДанныеДокумента.Покупатель);
		КонтрИНН = 			?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.ПродавецИНН, ДанныеДокумента.ПокупательИНН);
		КонтрКПП = 			?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.ПродавецКПП, ДанныеДокумента.ПокупательКПП);
	КонецЕсли;
	
	СтруктураОснования = Новый Структура;
	Попытка
		СтруктураОснования.Вставить("Договор",ДанныеДокумента.Основание);
		СтруктураОснования.Вставить("НомерДоговора",ДанныеДокумента.Основание_Номер);
		СтруктураОснования.Вставить("ДатаДоговора",?(ЗначениеЗаполнено(ДанныеДокумента.Основание_Дата),ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.Основание_Дата),НЕОПРЕДЕЛЕНО));
	Исключение
		СтруктураОснования.Вставить("Договор",НЕОПРЕДЕЛЕНО);
		СтруктураОснования.Вставить("НомерДоговора",НЕОПРЕДЕЛЕНО);
		СтруктураОснования.Вставить("ДатаДоговора",НЕОПРЕДЕЛЕНО);
	КонецПопытки;
	
	
	Если ЗначениеЗаполнено(СтруктураОснования.Договор) Тогда
		ЕстьОснование = Истина;
	Иначе
		ЕстьОснование = Ложь;
	КонецЕсли;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН");
	Запрос.УстановитьПараметр("ИНН", КонтрИНН);
	Если ЗначениеЗаполнено(КонтрКПП) Тогда
		Запрос.Текст = Запрос.Текст + " И Контрагенты.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КонтрКПП);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Контрагент = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Контрагенты.ПустаяСсылка());
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		//создаем нового контрагента (открываем карточку)
		//Задаем вопрос пользователю о создании нового контрагента в 1С
		Ответ = Вопрос("Контрагент <" + КонтрНаименование + " (ИНН " + КонтрИНН + ?(ЗначениеЗаполнено(КонтрКПП), ", КПП " + КонтрКПП, "") + ")> отсутствует в базе 1С" + Символы.ПС + "Для продолжения необходимо создать контрагента. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "ВНИМАНИЕ!!!");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			//получаем данные о контрагенте по ИНН и КПП
			Попытка
				Syn_Контрагент = ExchangeService.GetOrganizationByInnKpp(Токен, КонтрИНН, КонтрКПП);
				
				Форма_КарточкаКонтрагентаSynerdocs = ПолучитьФорму("Форма_КарточкаКонтрагентаSynerdocs");
				Форма_КарточкаКонтрагентаSynerdocs.РежимСозданияКонтрагента = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.Наименование = КонтрНаименование;
				Форма_КарточкаКонтрагентаSynerdocs.ИНН = КонтрИНН;
				Форма_КарточкаКонтрагентаSynerdocs.КПП = КонтрКПП;
				Форма_КарточкаКонтрагентаSynerdocs.Покупатель = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.Поставщик = Истина;
				
				Если НЕ ЭтоБГУ Тогда
					Форма_КарточкаКонтрагентаSynerdocs.ЮрФизЛицо = ?(Syn_Контрагент.IsJuridical, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
				КонецЕсли;	
				
				Форма_КарточкаКонтрагентаSynerdocs.Syn_IDКонтрагента = Syn_Контрагент.OrganizationId;
				
				Контрагент = Форма_КарточкаКонтрагентаSynerdocs.ОткрытьМодально();
				
				Если ЗначениеЗаполнено(Контрагент) Тогда
					УстановитьЗначениеСвойства(Контрагент, "Syn_IDКонтрагента", Syn_Контрагент.OrganizationID);
				КонецЕсли;
			Исключение
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
				
				ОтправитьУведомлениеПользователю("Ошибка получения информации о контрагенте по ИНН и КПП: <" + ДанныеДокумента.Поставщик_ИНН + "/" + ДанныеДокумента.Поставщик_КПП + ">. " + ТекстОшибкиSynerdocs);
				
				Возврат НЕОПРЕДЕЛЕНО;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	// Определяем договор контрагента с организацией
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Если НЕ ЭтоБГУ Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДоговорыКонтрагентов.Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Контрагент
			|	И ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
			|	И ВЫБОР
			|			КОГДА &ЕстьОснование
			|					И &Номер <> НЕОПРЕДЕЛЕНО
			|				ТОГДА ДоговорыКонтрагентов.Номер = &Номер
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|	И ВЫБОР
			|			КОГДА &ЕстьОснование
			|					И &Дата <> НЕОПРЕДЕЛЕНО
			|				ТОГДА ДоговорыКонтрагентов.Дата = &Дата
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|	И ВЫБОР
			|			КОГДА &ЕстьОснование
			|				ТОГДА ДоговорыКонтрагентов.Наименование = &Наименование
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДоговорыКонтрагентов.Код УБЫВ");
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ЕстьОснование", ЕстьОснование);
			Запрос.УстановитьПараметр("Наименование",СтруктураОснования.Договор);
			Запрос.УстановитьПараметр("Дата",СтруктураОснования.ДатаДоговора);
			Запрос.УстановитьПараметр("Номер",СтруктураОснования.НомерДоговора);
			Запрос.УстановитьПараметр("ВидДоговора", ?(ДанныеДокумента.флВходящийДок, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем));
			Выборка = Запрос.Выполнить().Выбрать();
			ДоговорКонтрагента = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			
			//Договор - обязательный реквизит, поэтому если его нет, то создаем
			Если Не ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ЕстьОснование Тогда
				МетаданныеСправочникаДоговоры = Метаданные.Справочники.ДоговорыКонтрагентов;
				
				Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				Договор.Организация = Организация;
				Договор.Владелец = Контрагент;
				Договор.ВидДоговора = ?(ДанныеДокумента.флВходящийДок, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				Договор.Владелец = Контрагент;
				Договор.Наименование = "Договор с поставщиком б/н";
				Договор.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
				
				Если ЕстьРеквизитСправочника("ВедениеВзаиморасчетов",МетаданныеСправочникаДоговоры) Тогда
					Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
				КонецЕсли;
				
				Договор.Комментарий = "Создан автоматически при загрузке из Synerdocs пользователем <" + Пользователь + "> от " + ТекущаяДата();
				
				Попытка
					Договор.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			ИначеЕсли Не ЗначениеЗаполнено(ДоговорКонтрагента) И ЕстьОснование Тогда
				МетаданныеСправочникаДоговоры = Метаданные.Справочники.ДоговорыКонтрагентов;
				
				Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				Договор.Организация = Организация;
				Договор.Владелец = Контрагент;
				Договор.ВидДоговора = ?(ДанныеДокумента.флВходящийДок, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				Договор.Наименование = ДанныеДокумента.Основание;
				Договор.Дата = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.Основание_Дата);
				Договор.Номер = ДанныеДокумента.Основание_Номер;
				Договор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
				Если ЕстьРеквизитСправочника("ВедениеВзаиморасчетов",МетаданныеСправочникаДоговоры) Тогда
					Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
				КонецЕсли;
				
				//	Договор.УстановитьНовыйКод("Syn");
				Договор.Комментарий = "Создан автоматически при загрузке из Synerdocs пользователем <" + Пользователь + "> от " + ТекущаяДата();
				
				Попытка
					Договор.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;
			
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДоговорыКонтрагентов.Ссылка
			|ИЗ
			|	Справочник.Договоры КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Контрагент = &Контрагент
			|	И ДоговорыКонтрагентов.Учреждение = &Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДоговорыКонтрагентов.Код УБЫВ");
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			Выборка = Запрос.Выполнить().Выбрать();
			ДоговорКонтрагента = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Договоры.ПустаяСсылка());
			
			//Договор - обязательный реквизит, поэтому если его нет, то создаем
			Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				МетаданныеСправочникаДоговоры = Метаданные.Справочники.Договоры;
				
				Договор = Справочники.Договоры.СоздатьЭлемент();
				Договор.Учреждение = Организация;
				Договор.Контрагент = Контрагент;
				Договор.Наименование = "Договор с поставщиком б/н";
				
				Попытка
					Договор.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Контрагент;
КонецФункции

//Функция распараллеливает создание документа 1С в зависимости от типа электронного документа
//В случае ошибок при создании документа, открывается форма отказа от подписи (уведомления об уточнении)
//
// Параметры:
//  Syn_Документ: документ сервиса (экземпляр класса Document)
//
// Возвращаемое значение:
//	Документ 1С: документы типа "Поступление товаров и услуг", "Счет-фактура полученный"
//
Функция СоздатьДокумент1С(Syn_Документ, СтруктураИнформации) Экспорт
	//ТипЭД = СоответствиеТиповЭД_Synerdocs_1C.Получить(?(ЗначениеЗаполнено(Syn_Документ.UntypedKind), Syn_Документ.UntypedKind, Syn_Документ.DocumentType));
	ТипЭД = Syn_Документ.DocumentTypeEnum.Description;
	ВидЭД = Syn_Документ.UntypedKind;
	ТекстОшибокXML = "";
	Документ1С = НЕОПРЕДЕЛЕНО;
	
	Если ТипЭД = "Счет-фактура" Или
		ТипЭД = "Исправленный счет-фактура" Или 
		ТипЭД = "Исправленный корректировочный счет-фактура" Тогда
		ДанныеДляСоздания = РазобратьЭД_СчетФактура(Syn_Документ);
		
		//получаем связанные документы для заполнения документа-основания
		ТЗ_СвязанныеДокументы = ПолучитьСвязанныеДокументыSynerdocs(Syn_Документ, Ложь, Истина);
		
		//Проверяем заполненность обязательных реквизитов для создания документа 1С
		Если ПроверкаЗаполненияОбязательныхРеквизитовXMLДля1С(ТипЭД, ДанныеДляСоздания, ТекстОшибокXML) Тогда
			Если НЕ ЭтоБГУ Тогда
				Документ1С = СоздатьДокумент1С_СчетФактура(ДанныеДляСоздания, ТЗ_СвязанныеДокументы);
			Иначе
				Если ТипЭД = "Счет-фактура" Тогда
					Документ1С = СоздатьДокумент1С_СчетФактураБГУ(ДанныеДляСоздания, ТЗ_СвязанныеДокументы);
				ИначеЕсли ТипЭД = "Исправленный счет-фактура" Тогда
					Документ1С = СоздатьДокумент1С_ИсправительныйСчетФактураБГУ(ДанныеДляСоздания, ТЗ_СвязанныеДокументы, СтруктураИнформации);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЭД = "Корректировочный счет-фактура" Тогда
		ДанныеДляСоздания = РазобратьЭД_КорректировочныйСчетФактура(Syn_Документ);
		
		//получаем связанные документы для заполнения документа-основания
		ТЗ_СвязанныеДокументы = ПолучитьСвязанныеДокументыSynerdocs(Syn_Документ, Ложь, Истина);
		
		//Проверяем заполненность обязательных реквизитов для создания документа 1С
		Если ПроверкаЗаполненияОбязательныхРеквизитовXMLДля1С(ТипЭД, ДанныеДляСоздания, ТекстОшибокXML) Тогда
			Если НЕ ЭтоБГУ Тогда
				Документ1С = СоздатьДокумент1С_КорректировочныйСчетФактура(ДанныеДляСоздания, ТЗ_СвязанныеДокументы, СтруктураИнформации);
			Иначе
				Документ1С = СоздатьДокумент1С_КорректировочныйСчетФактураБГУ(ДанныеДляСоздания, ТЗ_СвязанныеДокументы, СтруктураИнформации);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЭД = "Товарная накладная" Тогда
		ДанныеДляСоздания = РазобратьЭД_Торг12(Syn_Документ);
		
		//Проверяем заполненность обязательных реквизитов для создания документа 1С
		Если ПроверкаЗаполненияОбязательныхРеквизитовXMLДля1С(ТипЭД, ДанныеДляСоздания, ТекстОшибокXML) Тогда
			Если НЕ ЭтоБГУ Тогда
				Документ1С = СоздатьДокумент1С_ТОРГ12(ДанныеДляСоздания,СтруктураИнформации);
			Иначе
				Документ1С = СоздатьДокумент1С_ТОРГ12БГУ(ДанныеДляСоздания,СтруктураИнформации);
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ТипЭД = "Акт выполненных работ" Тогда
		ДанныеДляСоздания = РазобратьЭД_АктПродавец(Syn_Документ);
		
		Если НЕ ЭтоБГУ Тогда
			ВидАкта = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("ВидАкта");
			
			Если (ВидАкта = 3) ИЛИ (ВидАкта = 0) Тогда
				КнопкиОтвета = Новый СписокЗначений;
				КнопкиОтвета.Добавить(1, "Поступление товаров и услуг");
				КнопкиОтвета.Добавить(2, "Поступление доп. расходов");
				ВидАкта = Вопрос("Какой вид документа требуется создать?", КнопкиОтвета, , , "Выберите вид документа");
			КонецЕсли;
			
			Если ВидАКта = 1 Тогда
				Документ1С = СоздатьДокумент1С_Акт(ДанныеДляСоздания, СтруктураИнформации);
			ИначеЕсли ВидАкта = 2 Тогда
				Если ДанныеДляСоздания.ТЗ_ОписаниеРабот.Количество() = 1 Тогда
					Если ДанныеДляСоздания.ТЗ_ОписаниеРабот[0].Работы.Количество() = 1 Тогда
						Документ1С = СоздатьДокумент1С_АктДоп(ДанныеДляСоздания);
					Иначе
						Сообщить("Из выбранного акта не может быть создан документ Поступление доп.расходов");
					КонецЕсли;					
				Иначе
					Сообщить("Из выбранного акта не может быть создан документ Поступление доп.расходов");
				КонецЕсли;
			Иначе
				//WTF?
			КонецЕсли;
			// БГУ (Создаем документ "Услуги сторонних организаций")	
		Иначе
			Документ1С = СоздатьДокумент1С_АктБГУ(ДанныеДляСоздания, СтруктураИнформации);
		КонецЕсли;
	ИначеЕсли ВидЭД = "Счет на оплату" Тогда
		// в БП нет счета на оплату поставщика
		Если Метаданные.НайтиПоПолномуИмени("Документ.СчетНаОплатуПоставщика") <> Неопределено Тогда
			
			Если Syn_Документ.Card = Неопределено Тогда
				Документ1С = Неопределено;
				Сообщить("Документ не содержит данных для создания в 1С");
				Возврат Неопределено;
			КонецЕсли;
			
			ДанныеДляСоздания = РазобратьЭД_СчетНаОплату(Syn_Документ.Card,Syn_IDОрганизации);
			Если НЕ ЭтоБГУ Тогда
				Документ1С = СоздатьДокумент1С_СчетНаОплату(ДанныеДляСоздания, СтруктураИнформации);
			КонецЕсли;
		Иначе	
			Документ1С = Неопределено;
			Сообщить("Создание документа ""Счет на оплату поставщика"" невозможно в текущей конфигурации.");
		КонецЕсли;
		
	КонецЕсли;
	
	//Если отменили синхронизацию, документ не создан, предупредим пользователя
	Если НЕ ЗначениеЗаполнено(Документ1С) Тогда
		Сообщить("Синхронизация отменена, документ не создан!");
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Документ1С) Тогда
		//Делаем запись в РСВ "Значения свойств объектов
		Если НЕ ЭтоБГУ Тогда
			УстановитьЗначениеСвойства(Документ1С, "Syn_IDДокумента", Syn_Документ.ID);
		Иначе
			УстановитьЗначениеСвойстваБГУ(Документ1С, "Syn_IDДокумента", Syn_Документ.ID);
		КонецЕсли;
		
		//Обновим статус "Учтен в 1С" в разделе входящие
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("IDДокумента", Syn_Документ.Id);
		МассивСтрок = ВходящиеДокументы.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаДокумента = МассивСтрок.Получить(0);
			СтрокаДокумента.УчтенВ1С = Истина;
			СтрокаДокумента.Документ = Документ1С;
		КонецЕсли;
		
		
	ИначеЕсли СокрЛП(ТекстОшибокXML) <> "" Тогда
		ТекстОшибок = "ОШИБКИ ЗАПОЛНЕНИЯ XML:" + Символы.ПС + ТекстОшибокXML;
		
		ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + Документ1С + " (" + ТекстОшибок + ")");
		
	КонецЕсли;
	
	Возврат Документ1С;
	
КонецФункции

// Функция создает и проводит документ с типом "Торг12"
// Параметры:
// ДанныеДокумента: структура с данными, полученными из XML
// 
// Возвращаемое значение:
// Документ 1С: документ типа "Поступление товаров и услуг"
// 
// Примечение:
// Недостающие реквизиты (которых нет в XML, но обязательны для 1С) подставляются из настроек пользователей
// и различных регистров (например, РСВ "Счета учета номенклатуры")
// В случае, если документ провести не удается (например, не все обязательные реквизиты заполнены),
// документ открывается для ручного редактирования пользователем
// 
Функция СоздатьДокумент1С_ТОРГ12(ДанныеДокумента,СтруктураИнформации) Экспорт
	//Определим, входящий документ или исходящий
	Если ДанныеДокумента.флВходящийДок Тогда
		// Входящий
		док1С = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		док1С.Дата = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаТН);
		док1С.НомерВходящегоДокумента = ДанныеДокумента.НомерТН;
		док1С.ДатаВходящегоДокумента  = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаТН);
	Иначе
		// Исходящий
		док1С = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		док1С.Дата = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаТН);
		док1С.Номер = ДанныеДокумента.НомерТН;
	КонецЕсли;
	
	МетаданныеДокумента = док1С.Метаданные();
	МетаданныеСправочникаНоменклатуры = Метаданные.Справочники.Номенклатура;
	док1С.Организация = Организация;
	док1С.Комментарий = "[Получено через сервис Synerdocs]";
	
	Контрагент = ПолучитьКонтрагента(ДанныеДокумента);
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		//контрагент не создан, отказываем в создании
		ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Контрагент не определен в 1С)");
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	док1С.Контрагент = Контрагент;
	
	СтруктураОснования = Новый Структура;
	СтруктураОснования.Вставить("Договор",ДанныеДокумента.Основание);
	СтруктураОснования.Вставить("НомерДоговора",ДанныеДокумента.Основание_Номер);
	СтруктураОснования.Вставить("ДатаДоговора",ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.Основание_Дата));
	
	Если ЗначениеЗаполнено(СтруктураОснования.Договор) Тогда
		ЕстьОснование = Истина;
	Иначе
		ЕстьОснование = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И ВЫБОР
	|			КОГДА &ЕстьОснование
	|					И &Номер <> НЕОПРЕДЕЛЕНО
	|				ТОГДА ДоговорыКонтрагентов.Номер = &Номер
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЕстьОснование
	|					И &Дата <> НЕОПРЕДЕЛЕНО
	|				ТОГДА ДоговорыКонтрагентов.Дата = &Дата
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЕстьОснование
	|				ТОГДА ДоговорыКонтрагентов.Наименование = &Наименование
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Код УБЫВ");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЕстьОснование",ЕстьОснование);
	Запрос.УстановитьПараметр("Номер", СтруктураОснования.НомерДоговора);
	Запрос.УстановитьПараметр("Дата", СтруктураОснования.ДатаДоговора);
	Запрос.УстановитьПараметр("Наименование",СтруктураОснования.Договор);
	Запрос.УстановитьПараметр("ВидДоговора", ?(ДанныеДокумента.флВходящийДок, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем));
	Выборка = Запрос.Выполнить().Выбрать();
	док1С.ДоговорКонтрагента = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	//Для Бух
	Если ЗначениеЗаполнено(ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию("ОсновнойТипЦенПокупки")) Тогда
		док1С.ТипЦен = ?(ЗначениеЗаполнено(док1С.ДоговорКонтрагента) И ЗначениеЗаполнено(док1С.ДоговорКонтрагента.ТипЦен), док1С.ДоговорКонтрагента.ТипЦен, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойТипЦенПокупки"));
	КонецЕсли;
	
	//Для Бух
	Если ЕстьРеквизитДокумента("Склад", МетаданныеДокумента) Тогда
		док1С.Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойСклад");
		//Для КА и УТ
	ИначеЕсли ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) Тогда
		док1С.СкладОрдер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойСклад");
	КонецЕсли;
	
	//Для КА и УТ
	Если ЕстьРеквизитДокумента("ВидПоступления", МетаданныеДокумента) Тогда
		док1С.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	КонецЕсли;
	
	док1С.Ответственный = Пользователь;
	//Для Бух
	Если ЕстьРеквизитДокумента("СпособЗачетаАвансов", МетаданныеДокумента) Тогда
		док1С.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	док1С.УчитыватьНДС = Истина;
	док1С.СуммаВключаетНДС = Ложь;
	Если НалоговыйУчетПрименениеУСН(Организация, док1С.Дата) Тогда
		док1С.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(док1С.ДоговорКонтрагента) Тогда
		СпособЗаполненияЦен = ?(ДанныеДокумента.флВходящийДок, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
		СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(док1С);
		ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(док1С, док1С.ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, ?(ДанныеДокумента.флВходящийДок, "Покупка", "Продажа"), "Товары", док1С.ДоговорКонтрагента);
	КонецЕсли;
	
	//определяем грузоотправителя
	Если ЗначениеЗаполнено(ДанныеДокумента.Грузоотправитель) Тогда
		//Ищем по наименованию
		Грузоотправитель = Справочники.Контрагенты.НайтиПоНаименованию(ДанныеДокумента.Грузоотправитель);
		
		Если Не ЗначениеЗаполнено(Грузоотправитель) И
			ЗначениеЗаполнено(ДанныеДокумента.Грузоотправитель_ИНН) Тогда
			//Ищем по ИНН и КПП
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН");
			Запрос.УстановитьПараметр("ИНН", ДанныеДокумента.Грузоотправитель_ИНН);
			Если ЗначениеЗаполнено(ДанныеДокумента.Грузоотправитель_КПП) Тогда
				Запрос.Текст = Запрос.Текст + " И Контрагенты.КПП = &КПП";
				Запрос.УстановитьПараметр("КПП", ДанныеДокумента.Грузоотправитель_КПП);
			КонецЕсли;
			Выборка = Запрос.Выполнить().Выбрать();
			Грузоотправитель = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Контрагенты.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	док1С.Грузоотправитель = Грузоотправитель;
	
	//определяем грузополучателя
	Если ЗначениеЗаполнено(ДанныеДокумента.Грузополучатель) Тогда
		//Ищем по наименованию
		Грузополучатель = Справочники.Контрагенты.НайтиПоНаименованию(ДанныеДокумента.Грузополучатель);
		
		Если Не ЗначениеЗаполнено(Грузополучатель) И
			ЗначениеЗаполнено(ДанныеДокумента.Грузополучатель_ИНН) Тогда
			//Ищем по ИНН и КПП
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН");
			Запрос.УстановитьПараметр("ИНН", ДанныеДокумента.Грузополучатель_ИНН);
			Если ЗначениеЗаполнено(ДанныеДокумента.Грузополучатель_КПП) Тогда
				Запрос.Текст = Запрос.Текст + " И Контрагенты.КПП = &КПП";
				Запрос.УстановитьПараметр("КПП", ДанныеДокумента.Грузополучатель_КПП);
			КонецЕсли;
			Выборка = Запрос.Выполнить().Выбрать();
			Грузополучатель = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Контрагенты.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	док1С.Грузополучатель = Грузополучатель;
	
	//Для Бух и КА
	Если ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		Если ЗначениеЗаполнено(ДанныеДокумента.ВидОперации) И
			ДанныеДокумента.ВидОперации = "Оборудование" Тогда
			док1С.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
		Иначе
			док1С.ВидОперации = ?(ДанныеДокумента.флВходящийДок, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия, Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
		КонецЕсли;
	КонецЕсли;
	
	док1С.ВалютаДокумента = ?(ЗначениеЗаполнено(ДанныеДокумента.КодВалюты), Справочники.Валюты.НайтиПоКоду(ДанныеДокумента.КодВалюты), мВалютаРегламентированногоУчета);
	док1С.СуммаДокумента = ДанныеДокумента.СуммаСНДС;
	
	//Синхронизируем номенклатуру
	ТЗ_СинхронизированныеТовары = ПодготовитьТаблицуНоменклатуры(СтруктураИнформации, Контрагент, ДанныеДокумента.ТЗ_Товары);
	//Если пришло Null тогда отменяем создание документа
	Если НЕ ЗначениеЗаполнено(ТЗ_СинхронизированныеТовары) Тогда
		Возврат НЕОПРЕДЕЛЕНО;		
	КонецЕсли;
	
	
	НомерСтроки = 0;
	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ТЗ_СинхронизированныеТовары Цикл
		НомерСтроки = НомерСтроки + 1;
		
		Если Не ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = док1С.Товары.Добавить();
		НоваяСтрока.Номенклатура = ВыборкаСтрок.Номенклатура;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, "Товары") И
			ЗначениеЗаполнено(ВыборкаСтрок.ХарактеристикаНоменклатуры) Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаСтрок.ХарактеристикаНоменклатуры;
		КонецЕсли;
		
		НоваяСтрока.ЕдиницаИзмерения = ВыборкаСтрок.ЕдИзмОстатков;
				
		Если ЗначениеЗаполнено(ВыборкаСтрок.ЕдиницаИзмеренияУпак) Тогда
			//Для УТ и КА
			Если НЕ Метаданные.Имя = "БухгалтерияПредприятия" И НЕ Метаданные.Имя = "БухгалтерияПредприятияКОРП" И НЕ ЭтоБГУ Тогда
				НоваяСтрока.ЕдиницаИзмеренияМест = ВыборкаСтрок.ЕдиницаИзмеренияУпак;
				НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмеренияМест.Коэффициент;
				НоваяСтрока.КоличествоМест = ВыборкаСтрок.КолМест;
			Иначе
				НоваяСтрока.КоличествоМест 		= ВыборкаСтрок.КолМест;
				НоваяСтрока.Коэффициент			= ВыборкаСтрок.Место;
				НоваяСтрока.ЕдиницаИзмерения 	= ВыборкаСтрок.ЕдиницаИзмеренияУпакПоКлассификатору;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Количество = ВыборкаСтрок.Нетто;
        						
		//считаем, что НДС не включен в стоимость
		НоваяСтрока.Сумма = ВыборкаСтрок.СумБезНДС;
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСИзСтроки(ВыборкаСтрок.СтавкаНДС);
		НоваяСтрока.СуммаНДС = ВыборкаСтрок.СумНДС;
		НоваяСтрока.Цена = ?(НоваяСтрока.Количество <> 0, Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2), 0);
		
		//для Бух и КА (в УТ нет понятия УСН)
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, "Товары") Тогда
			Если НалоговыйУчетПрименениеУСН(Организация, док1С.Дата) Тогда
				НоваяСтрока.ОтражениеВУСН = Истина;
			КонецЕсли;
		КонецЕсли;
		
		//Только для Бух
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НомерГТД", МетаданныеДокумента, "Товары") И
			ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтранаПроисхождения", МетаданныеДокумента, "Товары") Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НоваяСтрока);
		КонецЕсли;
		
		//Для Бух и КА (для УТ счетов нет)
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, "Товары") Тогда
			док1С.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Истина, Истина);
		КонецЕсли;
		
		
		//Для УПП, КА, УТ
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры",МетаданныеДокумента,"Товары") И
			ЗначениеЗаполнено(ВыборкаСтрок.НомерГТД) Тогда
			
			СерияНоменклатуры = Справочники.СерииНоменклатуры.НайтиПоРеквизиту("НомерГТД",ВыборкаСтрок.НомерГТД,НоваяСтрока.Номенклатура,);
			
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры = СерияНоменклатуры;
			Иначе
				ВестиУчетПоСериям = НоваяСтрока.Номенклатура.ВестиУчетПоСериям;
				
				Если Не ВестиУчетПоСериям Тогда
					НоменклатураОбъект = НоваяСтрока.Номенклатура.ПолучитьОбъект();
					НоменклатураОбъект.ВестиУчетПоСериям = Истина;
					НоменклатураОбъект.Записать();
				КонецЕсли;
				
				НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
				НоваяСерия.Владелец = НоваяСтрока.Номенклатура;
				НоваяСерия.СтранаПроисхождения = ВыборкаСтрок.КодСтраны;
				НоваяСерия.НомерГТД = ВыборкаСтрок.НомерГТД;
				НоваяСерия.Наименование = Строка(НоваяСерия.СтранаПроисхождения) + ", " + Строка(НоваяСерия.НомерГТД);
				
				НоваяСерия.Записать();
				
				НоваяСтрока.СерияНоменклатуры = НоваяСерия.Ссылка;
				
			КонецЕсли;
			// БУХ	
		ИначеЕсли ЕстьРеквизитСправочника("НомерГТД",МетаданныеСправочникаНоменклатуры) И ЗначениеЗаполнено(ВыборкаСтрок.НомерГТД) Тогда
			НоваяСтрока.НомерГТД = ВыборкаСтрок.НомерГТД;
			НоваяСтрока.СтранаПроисхождения = ВыборкаСтрок.КодСтраны;
		КонецЕсли;
		
	КонецЦикла;
	
	//Для КА
	Если ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВБухгалтерскомУчете = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВНалоговомУчете = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВУправленческомУчете = Истина;
	КонецЕсли;
	
	//Для Бух и КА (для УТ счетов нет)
	Если ЕстьРеквизитДокумента("СчетУчетаРасчетовСКонтрагентом", МетаданныеДокумента) Тогда
		СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, док1С.Контрагент, док1С.ДоговорКонтрагента);
		Попытка
			//Бух
			док1С.ЗаполнитьСчетаУчетаРасчетов(СчетаУчета);
		Исключение
			//КА
			ЗаполнитьЗначенияСвойств(док1С, док1С.ЗаполнитьСтруктуруСчетовУчетаШапки());
		КонецПопытки;
	КонецЕсли;	
	
	Попытка
		док1С.Записать(РежимЗаписиДокумента.Проведение);
		
		ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
		
		Возврат док1С.Ссылка;
	Исключение
		//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
		док1С.ПолучитьФорму().ОткрытьМодально();
		Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			Возврат док1С.Ссылка;
			
		Иначе
			
			ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (" + ОписаниеОшибки() + ")");
			
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции // ПечатьТОРГ12()

// Функция создает и проводит документ с типом "Акт"
// Параметры:
// ДанныеДокумента: структура с данными, полученными из XML
// Возвращаемое значение:
// Документ 1С: документ типа "Поступление товаров и услуг"
// Примечение:
// Недостающие реквизиты (которых нет в XML, но обязательны для 1С) подставляются из настроек пользователей
// и различных регистров (например, РСВ "Счета учета номенклатуры")
// В случае, если документ провести не удается (например, не все обязательные реквизиты заполнены),
// документ открывается для ручного редактирования пользователем
//
Функция СоздатьДокумент1С_Акт(ДанныеДокумента, СтруктураИнформации) Экспорт
	//Определим, входящий документ или исходящий
	Если ДанныеДокумента.флВходящийДок Тогда
		// Входящий
		док1С = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		док1С.Дата = ТекущаяДата();
		док1С.НомерВходящегоДокумента = ДанныеДокумента.НомерАкта;
		док1С.ДатаВходящегоДокумента  = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаАкта);
	Иначе
		// Исходящий
		док1С = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		док1С.Дата = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаАкта);
		док1С.Номер = ДанныеДокумента.НомерАкта;
	КонецЕсли;
	
	МетаданныеДокумента = док1С.Метаданные();
	док1С.Организация = Организация;
	док1С.Комментарий = "[Получено через сервис Synerdocs]";
	
	Контрагент = ПолучитьКонтрагента(ДанныеДокумента);
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		//контрагент не создан, отказываем в создании
		ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Контрагент не определен в 1С)");
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	док1С.Контрагент = Контрагент;
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Код УБЫВ");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидДоговора", ?(ДанныеДокумента.флВходящийДок, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем));
	Выборка = Запрос.Выполнить().Выбрать();
	док1С.ДоговорКонтрагента = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	//Для Бух
	Если ЗначениеЗаполнено(ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию("ОсновнойТипЦенПокупки")) Тогда
		док1С.ТипЦен = ?(ЗначениеЗаполнено(док1С.ДоговорКонтрагента) И ЗначениеЗаполнено(док1С.ДоговорКонтрагента.ТипЦен), док1С.ДоговорКонтрагента.ТипЦен, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойТипЦенПокупки"));
	КонецЕсли;
	
	//Для Бух
	Если ЕстьРеквизитДокумента("Склад", МетаданныеДокумента) Тогда
		док1С.Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойСклад");
		//Для КА и УТ
	ИначеЕсли ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) Тогда
		док1С.СкладОрдер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойСклад");
	КонецЕсли;
	
	//Для КА и УТ
	Если ЕстьРеквизитДокумента("ВидПоступления", МетаданныеДокумента) Тогда
		док1С.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	КонецЕсли;
	
	док1С.Ответственный = Пользователь;
	//Для Бух
	Если ЕстьРеквизитДокумента("СпособЗачетаАвансов", МетаданныеДокумента) Тогда
		док1С.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	док1С.УчитыватьНДС = Истина;
	док1С.СуммаВключаетНДС = Ложь;
	Если НалоговыйУчетПрименениеУСН(Организация, док1С.Дата) Тогда
		док1С.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(док1С.ДоговорКонтрагента) Тогда
		СпособЗаполненияЦен = ?(ДанныеДокумента.флВходящийДок, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
		СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(док1С);
		ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(док1С, док1С.ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, ?(ДанныеДокумента.флВходящийДок, "Покупка", "Продажа"), "Товары", док1С.ДоговорКонтрагента);
	КонецЕсли;
	
	//Для Бух и КА
	Если ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		док1С.ВидОперации = ?(ДанныеДокумента.флВходящийДок, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия, Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
	КонецЕсли;
	
	//док1С.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(ДанныеДокумента.КодВалюты);	
	док1С.ВалютаДокумента = ?(ЗначениеЗаполнено(док1С.ДоговорКонтрагента), док1С.ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета);
	док1С.СуммаДокумента = ДанныеДокумента.ТЗ_ОписаниеРабот.Итог("СуммаСНДС");
	
	// Выводим многострочную часть документа
	
	//Синхронизируем номенклатуру
	ТЗ_СинхронизированныеУслуги = Новый ТаблицаЗначений;
	
	//Переименовываем колонки в нужные нам
	Для Каждого ТекСтрока Из ДанныеДокумента.ТЗ_ОписаниеРабот Цикл
		ТекСтрока.Работы.Колонки["НаимРабот"].Имя = "НаимТов";
		ТекСтрока.Работы.Колонки["ОКЕИ"].Имя = "ОКЕИ_Тов";
		//Добавляем недостающие колонки
		ТекСтрока.Работы.Колонки.Добавить("ХарактерТов");
		ТекСтрока.Работы.Колонки.Добавить("АртикулТов");
		ТекСтрока.Работы.Колонки.Добавить("КодТов");
		ТекСтрока.Работы.Колонки.Добавить("ВидУпак");
		ТекСтрока.Работы.Колонки.Добавить("СтавкаНДС");
	    ТЗ_ТекущиеРаботы = ПодготовитьТаблицуНоменклатуры(СтруктураИнформации, Контрагент, ТекСтрока.Работы, Истина);
		
		Если ТЗ_СинхронизированныеУслуги.Количество() = 0 Тогда
			Если ТЗ_ТекущиеРаботы = Неопределено Тогда
				Возврат Неопределено;
			Иначе
				ТЗ_СинхронизированныеУслуги = ТЗ_ТекущиеРаботы.Скопировать();
			КонецЕсли;	
		Иначе
			Для Каждого ТекСтр ИЗ ТЗ_ТекущиеРаботы Цикл
				НовСтрСинхр = ТЗ_СинхронизированныеУслуги.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрСинхр, ТекСтр);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
	//Если отменили синхронизацию, не создаем документ
	Если НЕ ЗначениеЗаполнено(ТЗ_СинхронизированныеУслуги) Тогда
		Возврат НЕОПРЕДЕЛЕНО;		
	КонецЕсли;
	
	НомерСтроки = 0;
	//Для Каждого ВыборкаСтрок Из ДанныеДокумента.ТЗ_Работы Цикл
	Для Каждого ВыборкаСтрок Из ТЗ_СинхронизированныеУслуги Цикл
		НомерСтроки = НомерСтроки + 1;
		
		//Номенклатура = ВыборкаСтрок.НаимРабот;
		Если Не ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = док1С.Услуги.Добавить();
		
		НоваяСтрока.Номенклатура = ВыборкаСтрок.Номенклатура;
		
		НоваяСтрока.Содержание = ВыборкаСтрок.Описание;
		
		Если ПустаяСтрока(НоваяСтрока.Содержание) Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(НоваяСтрока, док1С);
		КонецЕсли;
		НоваяСтрока.Количество = ВыборкаСтрок.Количество;
		
		//считаем, что НДС не включен в стоимость
		//НоваяСтрока.Цена = ВыборкаСтрок.Цена;
		НоваяСтрока.Сумма = ВыборкаСтрок.СумБезНДС;
		НоваяСтрока.СуммаНДС = ВыборкаСтрок.СумНДС;
		
		//рассчитаем ставку НДС из суммы НДС и суммы без НДС
		Если Не ВыборкаСтрок.БезНДС Тогда
			НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСИзСтроки(?(НоваяСтрока.Сумма > 0, Строка(Окр(НоваяСтрока.СуммаНДС / НоваяСтрока.Сумма * 100, 0)), НЕОПРЕДЕЛЕНО));
		Иначе
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаСтрок.Количество) Тогда
			НоваяСтрока.Цена = ?(НоваяСтрока.Количество <> 0, Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2), 0);
		Иначе
			НоваяСтрока.Цена = ВыборкаСтрок.Цена;
		КонецЕсли;
		
		
		//Только для Бух и КА (в УТ нет понятия УСН)
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, "Услуги") Тогда
			Если НалоговыйУчетПрименениеУСН(Организация, док1С.Дата) Тогда
				НоваяСтрока.ОтражениеВУСН = Истина;
			КонецЕсли;
		КонецЕсли;
		
		//Для Бух и КА (для УТ счетов нет)
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетЗатрат", МетаданныеДокумента, "Услуги") Тогда
			док1С.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги", Истина, Истина);
			
			Если ЗначениеЗаполнено(НоваяСтрока.СчетЗатрат) Тогда
				Если НоваяСтрока.СчетЗатрат.ВидыСубконто.Количество() > 0 И
					НоваяСтрока.СчетЗатрат.ВидыСубконто[0].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
					НоваяСтрока.Субконто1 = НоваяСтрока.Номенклатура.СтатьяЗатрат;
				КонецЕсли;
				Если НоваяСтрока.СчетЗатрат.ВидыСубконто.Количество() > 1 И
					НоваяСтрока.СчетЗатрат.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
					НоваяСтрока.Субконто2 = НоваяСтрока.Номенклатура.СтатьяЗатрат;
				КонецЕсли;
				Если НоваяСтрока.СчетЗатрат.ВидыСубконто.Количество() > 2 И
					НоваяСтрока.СчетЗатрат.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
					НоваяСтрока.Субконто3 = НоваяСтрока.Номенклатура.СтатьяЗатрат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Для КА
	Если ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВБухгалтерскомУчете = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВНалоговомУчете = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВУправленческомУчете = Истина;
	КонецЕсли;
	
	//Для Бух и КА (для УТ счетов нет)
	Если ЕстьРеквизитДокумента("СчетУчетаРасчетовСКонтрагентом", МетаданныеДокумента) Тогда
		СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, док1С.Контрагент, док1С.ДоговорКонтрагента);
		Попытка
			//Бух
			док1С.ЗаполнитьСчетаУчетаРасчетов(СчетаУчета);
		Исключение
			//КА
			ЗаполнитьЗначенияСвойств(док1С, док1С.ЗаполнитьСтруктуруСчетовУчетаШапки());
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		док1С.Записать(РежимЗаписиДокумента.Проведение);
		
		ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
		
		Возврат док1С.Ссылка;
	Исключение
		//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
		док1С.ПолучитьФорму().ОткрытьМодально();
		Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			Возврат док1С.Ссылка;
			
		Иначе
			
			ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (" + ОписаниеОшибки() + ")");
			
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

Функция СоздатьДокумент1С_АктДоп(ДанныеДокумента) Экспорт
	//Определим, входящий документ или исходящий
	Если ДанныеДокумента.флВходящийДок Тогда
		// Входящий
		док1С = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
		док1С.Дата = ТекущаяДата(); 
		док1С.КратностьВзаиморасчетов = 1;
		док1С.КурсВзаиморасчетов = 1;
		док1С.НомерВходящегоДокумента = ДанныеДокумента.НомерАкта;
		док1С.ДатаВходящегоДокумента  = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаАкта);
	Иначе
		// Исходящий - не предусмотрено
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеДокумента = док1С.Метаданные();
	док1С.Организация = Организация;
	док1С.Комментарий = "[Получено через сервис Synerdocs]";
	
	Контрагент = ПолучитьКонтрагента(ДанныеДокумента);
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		//контрагент не создан, отказываем в создании
		ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Контрагент не определен в 1С)");
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	док1С.Контрагент = Контрагент;
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Код УБЫВ");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидДоговора", ?(ДанныеДокумента.флВходящийДок, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем));
	Выборка = Запрос.Выполнить().Выбрать();
	док1С.ДоговорКонтрагента = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	//Для Бух
	Если ЗначениеЗаполнено(ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию("ОсновнойТипЦенПокупки")) Тогда
		док1С.ТипЦен = ?(ЗначениеЗаполнено(док1С.ДоговорКонтрагента) И ЗначениеЗаполнено(док1С.ДоговорКонтрагента.ТипЦен), док1С.ДоговорКонтрагента.ТипЦен, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойТипЦенПокупки"));
	КонецЕсли;
	
	док1С.Ответственный = Пользователь;
	
	док1С.УчитыватьНДС = Истина;
	док1С.СуммаВключаетНДС = Ложь;
	Если НалоговыйУчетПрименениеУСН(Организация, док1С.Дата) Тогда
		док1С.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	
	док1С.ВалютаДокумента = ?(ЗначениеЗаполнено(док1С.ДоговорКонтрагента), док1С.ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета);
	док1С.СуммаДокумента = ДанныеДокумента.ТЗ_ОписаниеРабот.Итог("СуммаСНДС");
	
	СтрокаТЗ = ДанныеДокумента.ТЗ_ОписаниеРабот[0].Работы[0];
	док1С.Содержание = СтрокаТЗ.НаимРабот + " (" + СтрокаТЗ.Описание + ")";
	док1С.Сумма = СтрокаТЗ.СумБезНДС;
	док1С.СуммаНДС = СтрокаТЗ.СумНДС;
	док1С.СтавкаНДС = ПолучитьСтавкуНДСИзСтроки(?(док1С.Сумма > 0, Строка(Окр(док1С.СуммаНДС / док1С.Сумма * 100, 0)), НЕОПРЕДЕЛЕНО));
	
	Попытка
		док1С.Записать(РежимЗаписиДокумента.Проведение);
		
		ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
		
		Возврат док1С.Ссылка;
	Исключение
		//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
		док1С.ПолучитьФорму().ОткрытьМодально();
		Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			Возврат док1С.Ссылка;
			
		Иначе
			
			ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (" + ОписаниеОшибки() + ")");
			
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

//Функция создает и проводит документ с типом "Счет-фактура"
//
// Параметры:
//	ДанныеДокумента: структура с данными, полученными из XML
//
// Возвращаемое значение:
//	Документ 1С: документ типа "Поступление товаров и услуг"
//
// Примечение:
//	Недостающие реквизиты (которых нет в XML, но обязательны для 1С) подставляются из настроек пользователей
//	и различных регистров (например, РСВ "Счета учета номенклатуры")
//	В случае, если документ провести не удается (например, не все обязательные реквизиты заполнены),
//	документ открывается для ручного редактирования пользователем
//
Функция СоздатьДокумент1С_СчетФактура(ДанныеДокумента, ТЗ_СвязанныеДокументы) Экспорт
	
	Для Каждого СвязанныйДокумент Из ТЗ_СвязанныеДокументы Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СчетФактураВыданныйДокументыОснования.Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование
		|	И СчетФактураВыданныйДокументыОснования.ДокументОснование <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураПолученныйДокументыОснования.Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументОснование
		|	И СчетФактураПолученныйДокументыОснования.ДокументОснование <> НЕОПРЕДЕЛЕНО";
		Запрос.УстановитьПараметр("ДокументОснование", СвязанныйДокумент.Документ1С);
		НайденныеСчФ = Запрос.Выполнить().Выбрать();
		Если НайденныеСчФ.Следующий() И НЕ НайденныеСчФ.ТипЗаписи() = НЕОПРЕДЕЛЕНО  Тогда
			Если Вопрос("На основании связанных документов уже введен счет-фактура. Все равно продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Неопределено;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	док1С = ?(ДанныеДокумента.флВходящийДок, Документы.СчетФактураПолученный.СоздатьДокумент(), Документы.СчетФактураВыданный.СоздатьДокумент());
	МетаданныеДокумента = док1С.Метаданные();
	
	Если ДанныеДокумента.флВходящийДок Тогда
		док1С.НомерВходящегоДокумента = ДанныеДокумента.Номер;
		док1С.ДатаВходящегоДокумента  = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.Дата);
		док1С.КодСпособаПолучения = 2;
		док1С.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
	Иначе
		док1С.КодСпособаВыставления = 2;
		док1С.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	КонецЕсли;
	Если ДанныеДокумента.Исправление Тогда
		док1С.Исправление = ДанныеДокумента.Исправление;
		док1С.НомерИсправления = ДанныеДокумента.ИсправлениеСФ_Номер;
		док1С.ДатаИсправления = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ИсправлениеСФ_Дата);
	КонецЕсли;	
	
	док1С.Дата = док1С.ДатаВходящегоДокумента;
	док1С.Организация = Организация;
	док1С.Комментарий = "[Получено через сервис Synerdocs]";
	
	// Определяем поставщика
	КонтрагентНаименование = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик, ДанныеДокумента.Покупатель);
	КонтрагентИНН = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик_ИНН, ДанныеДокумента.Покупатель_ИНН);
	КонтрагентКПП = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик_КПП, ДанныеДокумента.Покупатель_КПП);
	
	Если ЗначениеЗаполнено(КонтрагентИНН) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН");
		Запрос.УстановитьПараметр("ИНН", КонтрагентИНН);
		Если ЗначениеЗаполнено(КонтрагентКПП) Тогда
			Запрос.Текст = Запрос.Текст + " И Контрагенты.КПП = &КПП";
			Запрос.УстановитьПараметр("КПП", КонтрагентКПП);
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Контрагент = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	
	// Если контрагент не найден - предлагаем создать
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Ответ = Вопрос("Контрагент <" + КонтрагентНаименование + " (ИНН " + КонтрагентИНН + ", КПП " + КонтрагентКПП + ")> отсутствует в базе 1С" + Символы.ПС + "Для продолжения необходимо создать контрагента. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "ВНИМАНИЕ!!!");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Попытка
				Syn_Контрагент = ExchangeService.GetOrganizationByInnKpp(Токен, КонтрагентИНН, КонтрагентКПП);
				
				Форма_КарточкаКонтрагентаSynerdocs = ПолучитьФорму("Форма_КарточкаКонтрагентаSynerdocs");
				Форма_КарточкаКонтрагентаSynerdocs.РежимСозданияКонтрагента = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.Наименование = КонтрагентНаименование;
				Форма_КарточкаКонтрагентаSynerdocs.ИНН = КонтрагентИНН;
				Форма_КарточкаКонтрагентаSynerdocs.КПП = КонтрагентКПП;
				Форма_КарточкаКонтрагентаSynerdocs.Покупатель = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.Поставщик = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.ЮрФизЛицо = ?(Syn_Контрагент.IsJuridical, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
				Форма_КарточкаКонтрагентаSynerdocs.Syn_IDКонтрагента = Syn_Контрагент.OrganizationId;
				
				Контрагент = Форма_КарточкаКонтрагентаSynerdocs.ОткрытьМодально();
				
				Если ЗначениеЗаполнено(Контрагент) Тогда
					УстановитьЗначениеСвойства(Контрагент, "Syn_IDКонтрагента", Syn_Контрагент.OrganizationID);
				КонецЕсли;
			Исключение
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
				
				ОтправитьУведомлениеПользователю("Ошибка получения информации о контрагенте по ИНН и КПП: <" + КонтрагентИНН + "/" + КонтрагентКПП + ">." + ТекстОшибкиSynerdocs);
				
				Возврат НЕОПРЕДЕЛЕНО;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		//контрагент не создан, отказываем в создании
		ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Контрагент <" + КонтрагентНаименование + "> не определен в 1С)");
		
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	док1С.Контрагент = Контрагент;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		//определяем договор контрагента с организацией
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.Код УБЫВ");
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидДоговора", ?(ДанныеДокумента.флВходящийДок, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем));
		Выборка = Запрос.Выполнить().Выбрать();
		док1С.ДоговорКонтрагента = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		
		//Договор - обязательный реквизит, поэтому если его нет, то создаем
		Если Не ЗначениеЗаполнено(док1С.ДоговорКонтрагента) Тогда
			МетаданныеСправочникаДоговоры = Метаданные.Справочники.ДоговорыКонтрагентов;
			
			Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			Договор.Организация = Организация;
			Договор.Владелец = Контрагент;
			Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			Договор.Наименование = "Договор с поставщиком б/н";
			Договор.Комментарий = "Создан автоматически при загрузке из Synerdocs пользователем <" + Пользователь + "> от " + ТекущаяДата();
			Договор.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
			//Для КА и УТ
			Если ЕстьРеквизитСправочника("ВедениеВзаиморасчетов", МетаданныеСправочникаДоговоры) Тогда
				Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
			КонецЕсли;
			
			Договор.Записать();
			
			док1С.ДоговорКонтрагента = Договор.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	док1С.Ответственный = Пользователь;
	док1С.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(ДанныеДокумента.КодВалюты);	
	док1С.СуммаДокумента = ДанныеДокумента.СуммаВсегоСНДС;
	док1С.СуммаНДСДокумента = ДанныеДокумента.ВсегоНДС;
	док1С.УстановитьКодВидаОперации();
	
	Если ТЗ_СвязанныеДокументы.Количество() > 0 Тогда
		//определяем документ-основание
		Если Не ДанныеДокумента.Исправление Тогда
			//обычная СФ
			Для Каждого Строка_СвязанныйДокумент Из ТЗ_СвязанныеДокументы Цикл
				Если ЗначениеЗаполнено(Строка_СвязанныйДокумент.Документ1С) И
					ТипЗнч(Строка_СвязанныйДокумент.Документ1С) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
					ТипЗнч(Строка_СвязанныйДокумент.Документ1С) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
					НоваяСтрока = док1С.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = Строка_СвязанныйДокумент.Документ1С;
				КонецЕсли;
			КонецЦикла;
		Иначе
			//исправленная СФ
			Для Каждого Строка_СвязанныйДокумент Из ТЗ_СвязанныеДокументы Цикл
				Если ЗначениеЗаполнено(Строка_СвязанныйДокумент.Документ1С) И
					ТипЗнч(Строка_СвязанныйДокумент.Документ1С) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					НоваяСтрока = док1С.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = Строка_СвязанныйДокумент.Документ1С.ДокументОснование;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		док1С.ДокументОснование = ?(док1С.ДокументыОснования.Количество() > 0, док1С.ДокументыОснования[0].ДокументОснование, НЕОПРЕДЕЛЕНО);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(док1С.ДокументОснование) Тогда
		Предупреждение("Ошибка при создании документа 1С: " + док1С + " (Не найден документ-основание. Необходимо указать документ-основание вручную)",,"ВНИМАНИЕ!!!");
		
		//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
		док1С.ПолучитьФорму().ОткрытьМодально();
		Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			
			Возврат док1С.Ссылка;
			
		Иначе
			
			ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Заполнены не все обязательные реквизиты)");
			
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
	Иначе
		
		Попытка
			док1С.Записать(РежимЗаписиДокумента.Проведение);
			
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			Возврат док1С.Ссылка;
		Исключение
			//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
			док1С.ПолучитьФорму().ОткрытьМодально();
			Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
				ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
				
				Возврат док1С.Ссылка;
				
			Иначе
				
				ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Заполнены не все обязательные реквизиты)");
				
				Возврат НЕОПРЕДЕЛЕНО;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
КонецФункции

//Функция создает и проводит документы с типом "Корректировочный счет-фактура" и "Корректировка поступления"
//
// Параметры:
//	ДанныеДокумента: структура с данными, полученными из XML
//
// Возвращаемое значение:
//	Документ 1С: документ типа "Поступление товаров и услуг"
//
// Примечение:
//	Недостающие реквизиты (которых нет в XML, но обязательны для 1С) подставляются из настроек пользователей
//	и различных регистров (например, РСВ "Счета учета номенклатуры")
//	В случае, если документ провести не удается (например, не все обязательные реквизиты заполнены),
//	документ открывается для ручного редактирования пользователем
//
Функция СоздатьДокумент1С_КорректировочныйСчетФактура(ДанныеДокумента, ТЗ_СвязанныеДокументы,СтруктураИнформации ) Экспорт
	
	док1С = ?(ДанныеДокумента.флВходящийДок, Документы.СчетФактураПолученный.СоздатьДокумент(), Документы.СчетФактураВыданный.СоздатьДокумент());
	МетаданныеДокумента = док1С.Метаданные();
	
	Если ДанныеДокумента.флВходящийДок Тогда
		док1С.НомерВходящегоДокумента = ДанныеДокумента.НомерКСФ;
		док1С.ДатаВходящегоДокумента  = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаКСФ);
		док1С.КодСпособаПолучения = 2;
		док1С.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
	Иначе
		док1С.КодСпособаВыставления = 2;
		док1С.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	КонецЕсли;
	
	док1С.Исправление = ДанныеДокумента.Исправление;
	док1С.НомерИсправления = ДанныеДокумента.ИсправлениеКСФ_Номер;
	док1С.ДатаИсправления = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ИсправлениеКСФ_Дата);
	
	док1С.НомерИсходногоДокумента = ДанныеДокумента.НомерСФ;
	док1С.ДатаИсходногоДокумента  = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаСФ);
	
	док1С.Дата = ТекущаяДата();
	док1С.Организация = Организация;
	
	
	// Определяем поставщика
	КонтрагентНаименование = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик, ДанныеДокумента.Покупатель);
	КонтрагентИНН = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик_ИНН, ДанныеДокумента.Покупатель_ИНН);
	КонтрагентКПП = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик_КПП, ДанныеДокумента.Покупатель_КПП);
	Если ЗначениеЗаполнено(КонтрагентИНН) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН");
		Запрос.УстановитьПараметр("ИНН", КонтрагентИНН);
		Если ЗначениеЗаполнено(КонтрагентКПП) Тогда
			Запрос.Текст = Запрос.Текст + " И Контрагенты.КПП = &КПП";
			Запрос.УстановитьПараметр("КПП", КонтрагентКПП);
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Контрагент = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	
	// Если контрагент не найден - предлагаем создать
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Ответ = Вопрос("Контрагент <" + КонтрагентНаименование + " (ИНН " + КонтрагентИНН + ", КПП " + КонтрагентКПП + ")> отсутствует в базе 1С" + Символы.ПС + "Для продолжения необходимо создать контрагента. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "ВНИМАНИЕ!!!");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Попытка
				Syn_Контрагент = ExchangeService.GetOrganizationByInnKpp(Токен, КонтрагентИНН, КонтрагентКПП);
				
				Форма_КарточкаКонтрагентаSynerdocs = ПолучитьФорму("Форма_КарточкаКонтрагентаSynerdocs");
				Форма_КарточкаКонтрагентаSynerdocs.РежимСозданияКонтрагента = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.Наименование = КонтрагентНаименование;
				Форма_КарточкаКонтрагентаSynerdocs.ИНН = КонтрагентИНН;
				Форма_КарточкаКонтрагентаSynerdocs.КПП = КонтрагентКПП;
				Форма_КарточкаКонтрагентаSynerdocs.Покупатель = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.Поставщик = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.ЮрФизЛицо = ?(Syn_Контрагент.IsJuridical, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
				Форма_КарточкаКонтрагентаSynerdocs.Syn_IDКонтрагента = Syn_Контрагент.OrganizationId;
				
				Контрагент = Форма_КарточкаКонтрагентаSynerdocs.ОткрытьМодально();
				
				Если ЗначениеЗаполнено(Контрагент) Тогда
					УстановитьЗначениеСвойства(Контрагент, "Syn_IDКонтрагента", Syn_Контрагент.OrganizationID);
				КонецЕсли;
			Исключение
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
				
				ОтправитьУведомлениеПользователю("Ошибка получения информации о контрагенте по ИНН и КПП: <" + КонтрагентИНН + "/" + КонтрагентКПП + ">." + ТекстОшибкиSynerdocs);
				
				Возврат НЕОПРЕДЕЛЕНО;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		//контрагент не создан, отказываем в создании
		ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Контрагент <" + КонтрагентНаименование + "> не определен в 1С)");
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	док1С.Контрагент = Контрагент;
	док1С.Комментарий = "[Получено через сервис Synerdocs]";
	
	Если ЗначениеЗаполнено(док1С.Контрагент) Тогда
		//определяем договор контрагента с организацией
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.Код УБЫВ");
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидДоговора", ?(ДанныеДокумента.флВходящийДок, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем));
		Выборка = Запрос.Выполнить().Выбрать();
		док1С.ДоговорКонтрагента = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		
		//Договор - обязательный реквизит, поэтому если его нет, то создаем
		Если Не ЗначениеЗаполнено(док1С.ДоговорКонтрагента) Тогда
			МетаданныеСправочникаДоговоры = Метаданные.Справочники.ДоговорыКонтрагентов;
			
			Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			Договор.Организация = Организация;
			Договор.Владелец = Контрагент;
			Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			Договор.Наименование = "Договор с поставщиком б/н";
			Договор.Комментарий = "Создан автоматически при загрузке из Synerdocs пользователем <" + Пользователь + "> от " + ТекущаяДата();
			Договор.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
			//Для КА и УТ
			Если ЕстьРеквизитСправочника("ВедениеВзаиморасчетов", МетаданныеСправочникаДоговоры) Тогда
				Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
			КонецЕсли;
			
			Договор.Записать();
			
			док1С.ДоговорКонтрагента = Договор.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	док1С.Ответственный = Пользователь;
	док1С.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(ДанныеДокумента.КодВалюты);	
	
	
	док1С.СуммаУвеличение = ДанныеДокумента.СуммаСНДСУвел;
	док1С.СуммаУменьшение = ДанныеДокумента.СуммаСНДСУм;
	док1С.СуммаНДСУвеличение = ДанныеДокумента.НДСУвел;
	док1С.СуммаНДСУменьшение = ДанныеДокумента.НДСУм;
	
	док1С.УстановитьКодВидаОперации();
	
	ПервоначальнаяСФ = ?(ДанныеДокумента.флВходящийДок, Документы.СчетФактураПолученный.ПустаяСсылка(), Документы.СчетФактураВыданный.ПустаяСсылка());
	
	Если ТЗ_СвязанныеДокументы.Количество() > 0 Тогда
		//определяем документ-основание
		Для Каждого Строка_СвязанныйДокумент Из ТЗ_СвязанныеДокументы Цикл
			Если ЗначениеЗаполнено(Строка_СвязанныйДокумент.Документ1С) И
				ТипЗнч(Строка_СвязанныйДокумент.Документ1С) = ?(ДанныеДокумента.флВходящийДок, Тип("ДокументСсылка.СчетФактураПолученный"), Тип("ДокументСсылка.СчетФактураВыданный")) Тогда
				ПервоначальнаяСФ = Строка_СвязанныйДокумент.Документ1С;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПервоначальнаяСФ) Тогда
		ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (не найден первоначальный счет-фактура. Корректировочный счет-фактура не может быть создан раньше первоначального)");
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	//создаем документ-основание для КСФ
	док1С_КорректировкаПоступления = Документы.КорректировкаПоступления.СоздатьДокумент();
	МетаданныеДокумента = док1С_КорректировкаПоступления.Метаданные();
	
	док1С_КорректировкаПоступления.НомерВходящегоДокумента = док1С.НомерВходящегоДокумента;
	док1С_КорректировкаПоступления.ДатаВходящегоДокумента = док1С.ДатаВходящегоДокумента;
	док1С_КорректировкаПоступления.Дата = док1С.Дата;
	док1С_КорректировкаПоступления.Организация = док1С.Организация;
	
	ТипЭД_ДокументОснованиеКСФ = "Торг12";
	Если ЗначениеЗаполнено(ПервоначальнаяСФ) Тогда
		док1С_КорректировкаПоступления.ДокументПоступления = ПервоначальнаяСФ.ДокументОснование;
		//Определяем тип ЭД (Торг-12 или Акт)
		IDДокументаОснования = ПолучитьЗначениеСвойстваПоОбъекту(ПервоначальнаяСФ.ДокументОснование, "Syn_IDДокумента");
		Если ЗначениеЗаполнено(IDДокументаОснования) Тогда
			Попытка
				FullDocumentInfo = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, IDДокументаОснования,);
				ТипЭД_ДокументОснованиеКСФ = СоответствиеТиповЭД_Synerdocs_1C.Получить(FullDocumentInfo.Document.DocumentType);
			Исключение
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
				
				ОтправитьУведомлениеПользователю("Ошибка получения информации об ЭД: " + ТекстОшибкиSynerdocs);
				
				Возврат НЕОПРЕДЕЛЕНО;
			КонецПопытки;
			
		КонецЕсли;
	Иначе
		док1С_КорректировкаПоступления.ДокументПоступления = НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	док1С_КорректировкаПоступления.КорректироватьБУиНУ = Истина;
	
	//определяем поставщика
	док1С_КорректировкаПоступления.Контрагент = док1С.Контрагент;
	док1С_КорректировкаПоступления.ДоговорКонтрагента = док1С.ДоговорКонтрагента;
	
	//док1С_КорректировкаПоступления.ТипЦен = ?(ЗначениеЗаполнено(док1С_КорректировкаПоступления.ДоговорКонтрагента) И ЗначениеЗаполнено(док1С_КорректировкаПоступления.ДоговорКонтрагента.ТипЦен), док1С_КорректировкаПоступления.ДоговорКонтрагента.ТипЦен, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойТипЦенПокупки"));
	//Для Бух
	Если ЗначениеЗаполнено(ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию("ОсновнойТипЦенПокупки")) Тогда
		док1С_КорректировкаПоступления.ТипЦен = ?(ЗначениеЗаполнено(док1С_КорректировкаПоступления.ДоговорКонтрагента) И ЗначениеЗаполнено(док1С_КорректировкаПоступления.ДоговорКонтрагента.ТипЦен), док1С_КорректировкаПоступления.ДоговорКонтрагента.ТипЦен, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойТипЦенПокупки"));
	КонецЕсли;
	
	//Для Бух и КА
	Если ЕстьРеквизитДокумента("Склад", МетаданныеДокумента) Тогда
		док1С_КорректировкаПоступления.Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойСклад");
		//Для УТ
	ИначеЕсли ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) Тогда
		док1С_КорректировкаПоступления.СкладОрдер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойСклад");
	КонецЕсли;
	
	док1С_КорректировкаПоступления.Ответственный = Пользователь;
	
	док1С_КорректировкаПоступления.УчитыватьНДС = Истина;
	док1С_КорректировкаПоступления.СуммаВключаетНДС = Ложь;
	Если НалоговыйУчетПрименениеУСН(Организация, док1С_КорректировкаПоступления.Дата) Тогда
		док1С_КорректировкаПоступления.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	
	//Для Бух и КА
	Если ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		док1С_КорректировкаПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	КонецЕсли;
	
	док1С_КорректировкаПоступления.ВалютаДокумента = док1С.ВалютаДокумента;	
	док1С_КорректировкаПоступления.СуммаДокумента = ДанныеДокумента.ТЗ_Товары.Итог("ВсегоПослеИзм");
	
	
	//Синхронизируем номенклатуру
	
	//Переименовываем колонки в нужные нам
	ДанныеДокумента.ТЗ_Товары.Колонки["ОКЕИ_ТовПосле"].Имя = "ОКЕИ_Тов";
	//Добавляем недостающие колонки
	ДанныеДокумента.ТЗ_Товары.Колонки.Добавить("ХарактерТов");
	ДанныеДокумента.ТЗ_Товары.Колонки.Добавить("АртикулТов");
	ДанныеДокумента.ТЗ_Товары.Колонки.Добавить("КодТов");
	ДанныеДокумента.ТЗ_Товары.Колонки.Добавить("ВидУпак");
	ДанныеДокумента.ТЗ_Товары.Колонки.Добавить("НаимЕдизм");
	
	ТЗ_СинхронизированныеТовары = ПодготовитьТаблицуНоменклатуры(СтруктураИнформации, Контрагент, ДанныеДокумента.ТЗ_Товары);
	
	НомерСтроки = 0;
	// Выводим многострочную часть документа
	//Для Каждого ВыборкаСтрок Из ДанныеДокумента.ТЗ_Товары Цикл
	Для Каждого ВыборкаСтрок Из ТЗ_СинхронизированныеТовары Цикл
		НомерСтроки = НомерСтроки + 1;
		
		Если Не ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЭД_ДокументОснованиеКСФ = "Торг12" Тогда
			//Заполняем товары
			НоваяСтрока = док1С_КорректировкаПоступления.Товары.Добавить();
			НоваяСтрока.Номенклатура = ВыборкаСтрок.Номенклатура;
			
			//Для КА и УТ
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, "Товары") Тогда
				НоваяСтрока.ЕдиницаИзмерения = ?(ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"),
				ВыборкаСтрок.ЕдиницаИзмеренияПоКлассификатору,
				ВыборкаСтрок.ЕдиницаИзмерения);
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, "Товары") Тогда
				НоваяСтрока.ЕдиницаИзмеренияМест = ВыборкаСтрок.ЕдиницаИзмеренияУпак;
				НоваяСтрока.ЕдиницаИзмеренияМест = ?(ТипЗнч(НоваяСтрока.ЕдиницаИзмеренияМест) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"),
				ВыборкаСтрок.ЕдиницаИзмеренияУпакПоКлассификатору,
				ВыборкаСтрок.ЕдиницаИзмеренияУпак);
			КонецЕсли;
			
			
			НоваяСтрока.КоличествоДоИзменения = ВыборкаСтрок.КолТовДо;
			НоваяСтрока.Количество = ВыборкаСтрок.КолТовПосле;
			
			//считаем, что НДС не включен в стоимость
			НоваяСтрока.СуммаДоИзменения = ВыборкаСтрок.СтоимДоИзм;
			НоваяСтрока.Сумма = ВыборкаСтрок.СтоимПослеИзм;
			
			НоваяСтрока.ЦенаДоИзменения = Окр(НоваяСтрока.СуммаДоИзменения / НоваяСтрока.КоличествоДоИзменения, 2);
			НоваяСтрока.Цена = ?(НоваяСтрока.Количество <> 0, Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2), 0);
			
			НоваяСтрока.СтавкаНДСДоИзменения = ПолучитьСтавкуНДСИзСтроки(ВыборкаСтрок.НалСтВелДо);
			НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСИзСтроки(ВыборкаСтрок.НалСтВелПосле);
			
			НоваяСтрока.СуммаНДСДоИзменения = ВыборкаСтрок.СумНДСДо;
			НоваяСтрока.СуммаНДС = ВыборкаСтрок.СумНДСПосле;
			
			//Только для Бух и КА (в УТ нет понятия УСН)
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, "Товары") Тогда
				Если НалоговыйУчетПрименениеУСН(Организация, док1С_КорректировкаПоступления.Дата) Тогда
					НоваяСтрока.ОтражениеВУСН = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НомерГТД", МетаданныеДокумента, "Товары") И
				ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтранаПроисхождения", МетаданныеДокумента, "Товары") Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НоваяСтрока);
			КонецЕсли;
			
			//Для Бух и КА (для УТ счетов нет)
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, "Товары") Тогда
				док1С_КорректировкаПоступления.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Истина, Истина);
			КонецЕсли;
		Иначе
			//Заполняем услуги
			НоваяСтрока = док1С_КорректировкаПоступления.Услуги.Добавить();
			
			НоваяСтрока.Номенклатура = ВыборкаСтрок.Номенклатура;
			
			НоваяСтрока.Содержание = ВыборкаСтрок.Номенклатура.Наименование;
			НоваяСтрока.СодержаниеДоИзменения = НоваяСтрока.Содержание;
			
			НоваяСтрока.КоличествоДоИзменения = ВыборкаСтрок.КолТовДо;
			НоваяСтрока.Количество = ВыборкаСтрок.КолТовПосле;
			
			//считаем, что НДС не включен в стоимость
			НоваяСтрока.СуммаДоИзменения = ВыборкаСтрок.СтоимДоИзм;
			НоваяСтрока.Сумма = ВыборкаСтрок.СтоимПослеИзм;
			
			НоваяСтрока.ЦенаДоИзменения = Окр(НоваяСтрока.СуммаДоИзменения / НоваяСтрока.КоличествоДоИзменения, 2);
			НоваяСтрока.Цена = ?(НоваяСтрока.Количество <> 0, Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2), 0);
			
			НоваяСтрока.СтавкаНДСДоИзменения = ?(НЕ ВыборкаСтрок.НалСтВелДо = "без НДС", ПолучитьСтавкуНДСИзСтроки(ВыборкаСтрок.НалСтВелДо), Перечисления.СтавкиНДС.БезНДС);
			НоваяСтрока.СтавкаНДС = ?(НЕ ВыборкаСтрок.НалСтВелПосле = "без НДС", ПолучитьСтавкуНДСИзСтроки(ВыборкаСтрок.НалСтВелПосле), Перечисления.СтавкиНДС.БезНДС);
			
			НоваяСтрока.СуммаНДСДоИзменения = ВыборкаСтрок.СумНДСДо;
			НоваяСтрока.СуммаНДС = ВыборкаСтрок.СумНДСПосле;
			
			
			//Только для Бух и КА (в УТ нет понятия УСН)
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, "Услуги") Тогда
				Если НалоговыйУчетПрименениеУСН(Организация, док1С_КорректировкаПоступления.Дата) Тогда
					НоваяСтрока.ОтражениеВУСН = Истина;
				КонецЕсли;
			КонецЕсли;
			
			//Для Бух и КА (для УТ счетов нет)
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетЗатрат", МетаданныеДокумента, "Услуги") Тогда
				док1С_КорректировкаПоступления.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги", Истина, Истина);
				
				Если ЗначениеЗаполнено(НоваяСтрока.СчетЗатрат) Тогда
					Если НоваяСтрока.СчетЗатрат.ВидыСубконто.Количество() > 0 И
						НоваяСтрока.СчетЗатрат.ВидыСубконто[0].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
						НоваяСтрока.Субконто1 = НоваяСтрока.Номенклатура.СтатьяЗатрат;
					КонецЕсли;
					Если НоваяСтрока.СчетЗатрат.ВидыСубконто.Количество() > 1 И
						НоваяСтрока.СчетЗатрат.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
						НоваяСтрока.Субконто2 = НоваяСтрока.Номенклатура.СтатьяЗатрат;
					КонецЕсли;
					Если НоваяСтрока.СчетЗатрат.ВидыСубконто.Количество() > 2 И
						НоваяСтрока.СчетЗатрат.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
						НоваяСтрока.Субконто3 = НоваяСтрока.Номенклатура.СтатьяЗатрат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		док1С_КорректировкаПоступления.Записать(РежимЗаписиДокумента.Проведение);
		
		ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С_КорректировкаПоступления);
		
	Исключение
		//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
		док1С_КорректировкаПоступления.ПолучитьФорму().ОткрытьМодально();
		Если ЗначениеЗаполнено(док1С_КорректировкаПоступления.Ссылка) Тогда
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С_КорректировкаПоступления);
			
			
		Иначе
			
			ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С_КорректировкаПоступления + " (" + ОписаниеОшибки() + ")");
			
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
	КонецПопытки;
	
	НоваяСтрока = док1С.ДокументыОснования.Добавить();
	НоваяСтрока.ДокументОснование = док1С_КорректировкаПоступления.Ссылка;
	
	МетаданныеДокумента = док1С.Метаданные();
	//Для новых релизов (для бухи начиная с 2.0.48.7)
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("УчитыватьИсправлениеИсходногоДокумента", МетаданныеДокумента, "ДокументыОснования") Тогда
		НоваяСтрока.УчитыватьИсправлениеИсходногоДокумента = ДанныеДокумента.ИсправлениеСФ;
		НоваяСтрока.НомерИсправленияИсходногоДокумента = ДанныеДокумента.ИсправлениеСФ_Номер;
		НоваяСтрока.ДатаИсправленияИсходногоДокумента = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ИсправлениеСФ_Дата);
	КонецЕсли;
	
	//Для новых релизов (для бухи начиная с 2.0.48.7)
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НомерИсходногоДокумента", МетаданныеДокумента, "ДокументыОснования") Тогда
		НоваяСтрока.НомерИсходногоДокумента = ДанныеДокумента.НомерСФ;
		НоваяСтрока.ДатаИсходногоДокумента  = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаСФ);
	КонецЕсли;
	
	//Для новых релизов (для бухи начиная с 2.0.48.7)
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаУвеличение", МетаданныеДокумента, "ДокументыОснования") Тогда
		НоваяСтрока.СуммаУвеличение = ДанныеДокумента.СуммаСНДСУвел;
		НоваяСтрока.СуммаУменьшение = ДанныеДокумента.СуммаСНДСУм;
		НоваяСтрока.СуммаНДСУвеличение = ДанныеДокумента.НДСУвел;
		НоваяСтрока.СуммаНДСУменьшение = ДанныеДокумента.НДСУм;
	КонецЕсли;
	
	док1С.ДокументОснование = док1С_КорректировкаПоступления.Ссылка;
	
	Попытка
		док1С.Записать(РежимЗаписиДокумента.Проведение);
		
		ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
		
		Возврат док1С.Ссылка;
	Исключение
		//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
		док1С.ПолучитьФорму().ОткрытьМодально();
		Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			Возврат док1С.Ссылка;
			
		Иначе
			
			ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (" + ОписаниеОшибки() + ")");
			
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
	КонецПопытки;	
КонецФункции 

//Функция создает и проводит документ с типом "Счет на оплату поставщика"
//
// Параметры:
//	ДанныеДокумента: структура с данными, полученными из XML
//
// Возвращаемое значение:
//	Документ 1С: документ типа "Счет на оплату поставщика"
//
// Примечение:
//	Недостающие реквизиты (которых нет в XML, но обязательны для 1С) подставляются из настроек пользователей
//	и различных регистров (например, РСВ "Счета учета номенклатуры")
//	В случае, если документ провести не удается (например, не все обязательные реквизиты заполнены),
//	документ открывается для ручного редактирования пользователем
//
Функция СоздатьДокумент1С_СчетНаОплату(ДанныеДокумента, СтруктураИнформации) Экспорт
	
	//Если ДанныеДокумента.флВходящийДок Тогда
		// Входящий
		док1С = Документы.СчетНаОплатуПоставщика.СоздатьДокумент();
		док1С.Дата = ТекущаяДата();
		док1С.НомерВходящегоДокумента = ДанныеДокумента.НомерДокумента;
		док1С.ДатаВходящегоДокумента  = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаДокумента);
		док1С.ВалютаДокумента = мВалютаРегламентированногоУчета;
		док1С.КратностьВзаиморасчетов = 1;
		док1С.СуммаВключаетНДС = Истина;
	//Иначе
	//	// Исходящий
	//	Возврат Неопределено;
	//КонецЕсли;
	
	МетаданныеДокумента = док1С.Метаданные();
	док1С.Организация = Организация;
	док1С.Комментарий = "[Получено через сервис Synerdocs]";
	
	Контрагент = ПолучитьКонтрагента(ДанныеДокумента);
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		//контрагент не создан, отказываем в создании
		ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Контрагент не определен в 1С)");
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	док1С.Контрагент = Контрагент;
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Код УБЫВ");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидДоговора", ?(ДанныеДокумента.флВходящийДок, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем));
	Выборка = Запрос.Выполнить().Выбрать();
	док1С.ДоговорКонтрагента = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	
	//Для Бух
	Если ЗначениеЗаполнено(ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию("ОсновнойТипЦенПокупки")) Тогда
		док1С.ТипЦен = ?(ЗначениеЗаполнено(док1С.ДоговорКонтрагента) И ЗначениеЗаполнено(док1С.ДоговорКонтрагента.ТипЦен), док1С.ДоговорКонтрагента.ТипЦен, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойТипЦенПокупки"));
	КонецЕсли;
	
	//Для Бух УПП
	Если ЕстьРеквизитДокумента("Склад", МетаданныеДокумента) Тогда
		док1С.Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойСклад");
		//Для КА и УТ
	ИначеЕсли ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) Тогда
		док1С.СкладОрдер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновнойСклад");
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("СтруктурнаяЕдиница", док1С.Метаданные()) Тогда
		//Начнем в транзакции, чтобы не запипсать лишнего
		ЕстьСчет = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", ДанныеДокумента.НомерСчетаПрод,, док1С.Контрагент);
		Если НЕ ЕстьСчет.Пустая() Тогда
			док1С.СтруктурнаяЕдиница = ЕстьСчет;
		Иначе
			Если Не ЗначениеЗаполнено(ДанныеДокумента.НомерСчетаПрод) Тогда
				Сообщить("Не достаточно данных для создания р/с контрагента");
			Иначе
				ЕстьСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				ЕстьСчет.Владелец = док1С.Контрагент;
				ЕстьСчет.ВалютаДенежныхСредств = док1С.ВалютаДокумента;
				ЕстьСчет.НомерСчета = ДанныеДокумента.НомерСчетаПрод;
				
				ЕстьБанк = Справочники.Банки.НайтиПоКоду(ДанныеДокумента.БИКПрод);
				
				Если Не ЕстьБанк.Пустая() Тогда
					ЕстьСчет.Банк = ЕстьБанк.Ссылка;
					ЕстьСчет.Наименование = "р/с " + ЕстьСчет.НомерСчета + " в " + ЕстьБанк.Наименование;
				Иначе
					
					Если НЕ ЗначениеЗаполнено(ДанныеДокумента.БИКПрод) И
						НЕ ЗначениеЗаполнено(ДанныеДокумента.НаимБанкПрод) Тогда
						Сообщить("Недостаточно данных для создания банка контрагента");
					Иначе
						ЕстьБанк = Справочники.Банки.СоздатьЭлемент();
						ЕстьБанк.Наименование = ДанныеДокумента.НаимБанкПрод;
						ЕстьБанк.Код = ДанныеДокумента.БИКПрод;
						ЕстьБанк.КоррСчет = ДанныеДокумента.КоррСчетПрод;
						
						Попытка
							ЕстьБанк.Записать();
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;
						
						ЕстьСчет.Банк = ЕстьБанк.Ссылка;
						ЕстьСчет.Наименование = "р/с " + ЕстьСчет.НомерСчета + " в " + ЕстьБанк.Наименование;
						ЕстьСчет.ПроверитьЗаполнение();
						
						Попытка
							ЕстьСчет.Записать();
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;
						
						док1С.СтруктурнаяЕдиница = ЕстьСчет.Ссылка;
						
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	док1С.Ответственный = Пользователь;
	
	док1С.УчитыватьНДС = Истина;
	док1С.СуммаВключаетНДС = Ложь;
	
	Если НалоговыйУчетПрименениеУСН(Организация, док1С.Дата) Тогда
		док1С.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(док1С.ДоговорКонтрагента) Тогда
		СпособЗаполненияЦен = ?(ДанныеДокумента.флВходящийДок, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
		СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(док1С);
		ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(док1С, док1С.ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, ?(ДанныеДокумента.флВходящийДок, "Покупка", "Продажа"), "Товары", док1С.ДоговорКонтрагента);
	КонецЕсли;
	
	//док1С.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(ДанныеДокумента.КодВалюты);	
	док1С.ВалютаДокумента = ?(ЗначениеЗаполнено(док1С.ДоговорКонтрагента), док1С.ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета);
	
	//Синхронизируем номенклатуру
	
	//Переименовываем колонки в нужные нам
	Если ДанныеДокумента.ТЗ_Товары.Количество() > 0 Тогда
		
		ТЗ_Товары = Новый ТаблицаЗначений;
		ТЗ_Товары.Колонки.Добавить("НаимТов");
		ТЗ_Товары.Колонки.Добавить("Артикул");
		ТЗ_Товары.Колонки.Добавить("ОКЕИ_Тов");
		ТЗ_Товары.Колонки.Добавить("НаимЕдИзм");
		ТЗ_Товары.Колонки.Добавить("КолТов");
		ТЗ_Товары.Колонки.Добавить("ЦенаТов");
		ТЗ_Товары.Колонки.Добавить("СтТовБезНДС");
		ТЗ_Товары.Колонки.Добавить("СтТовУчНал");
		ТЗ_Товары.Колонки.Добавить("НалСтВел");
		ТЗ_Товары.Колонки.Добавить("НалСтТип");
		ТЗ_Товары.Колонки.Добавить("СумНДС");
		ТЗ_Товары.Колонки.Добавить("ИнфПолСтр");
		
		Для Каждого ТекСтрока Из ДанныеДокумента.ТЗ_Товары Цикл
			НовСтрока = ТЗ_Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтрока);
			НовСтрока.НаимЕдИзм = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(НовСтрока.ОКЕИ_Тов);
		КонецЦикла;
		
		ТЗ_Товары.Колонки["Артикул"].Имя = "АртикулТов";
		
		//Добавляем недостающие колонки
		ТЗ_Товары.Колонки.Добавить("ХарактерТов");
		ТЗ_Товары.Колонки.Добавить("КодТов");
		ТЗ_Товары.Колонки.Добавить("ВидУпак");
		ТЗ_Товары.Колонки.Добавить("СтавкаНДС");
		
		ТЗ_СинхронизированныеТовары = ПодготовитьТаблицуНоменклатуры(СтруктураИнформации, Контрагент, ТЗ_Товары, Истина);
		
	КонецЕсли;
	
	//Если отменили синхронизацию, не создаем документ
	Если НЕ ЗначениеЗаполнено(ТЗ_СинхронизированныеТовары) Тогда
		Возврат НЕОПРЕДЕЛЕНО;		
	КонецЕсли;
	
	НомерСтроки = 0;
	//Для Каждого ВыборкаСтрок Из ДанныеДокумента.ТЗ_Работы Цикл
	Для Каждого ВыборкаСтрок Из ТЗ_СинхронизированныеТовары Цикл
		НомерСтроки = НомерСтроки + 1;
		
		//Номенклатура = ВыборкаСтрок.НаимРабот;
		Если Не ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = док1С.Товары.Добавить();
		
		НоваяСтрока.Номенклатура = ВыборкаСтрок.Номенклатура;
		
		НоваяСтрока.Количество = ВыборкаСтрок.КолТов;
		НоваяСтрока.Коэффициент = 1;
		
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрока.ЕдиницаИзмеренияМест = НоваяСтрока.Номенклатура.ЕдиницаИзмеренияМест;
		//считаем, что НДС не включен в стоимость
		//НоваяСтрока.Цена = ВыборкаСтрок.Цена;
		НоваяСтрока.Сумма = ВыборкаСтрок.СтТовБезНДС;
		НоваяСтрока.СуммаНДС = ВыборкаСтрок.СумНДС;
		
		//рассчитаем ставку НДС из суммы НДС и суммы без НДС
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСИзСтроки(?(НоваяСтрока.Сумма > 0, Строка(Окр(НоваяСтрока.СуммаНДС / НоваяСтрока.Сумма * 100, 0)), НЕОПРЕДЕЛЕНО));
		
		НоваяСтрока.Цена = ?(НоваяСтрока.Количество <> 0, Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2), 0);
		
		
		//Только для Бух и КА (в УТ нет понятия УСН)
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, "Услуги") Тогда
			Если НалоговыйУчетПрименениеУСН(Организация, док1С.Дата) Тогда
				НоваяСтрока.ОтражениеВУСН = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Для КА
	Если ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВБухгалтерскомУчете = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВНалоговомУчете = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВУправленческомУчете = Истина;
	КонецЕсли;
	
	
	Попытка
		док1С.Записать(РежимЗаписиДокумента.Запись);
		
		ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
		
		док1С.ПолучитьФорму().ОткрытьМодально();
		
		Возврат док1С.Ссылка;
		
	Исключение
		//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
		док1С.ПолучитьФорму().ОткрытьМодально();
		
		Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			Возврат док1С.Ссылка;
			
		Иначе
			
			ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (" + ОписаниеОшибки() + ")");
			
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////  СОЗДАНИЕ ДОКУМЕНТОВ В БГУ ////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////

// Создает документ "Покупка материалов"
Функция СоздатьДокумент1С_ТОРГ12БГУ(ДанныеДокумента, СтруктураИнформации) Экспорт
	//Определим, входящий документ или исходящий
	Если ДанныеДокумента.флВходящийДок Тогда
		// Входящий
		док1С = Документы.МЗ_Покупка.СоздатьДокумент();
		док1С.Дата = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаТН);
		док1С.НомерПервичногоДокумента = ДанныеДокумента.НомерТН;
		док1С.ДатаПервичногоДокумента  = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаТН);
	Иначе
		// Исходящий
		док1С = Документы.МЗ_Реализация.СоздатьДокумент();
		док1С.Дата = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаТН);
		док1С.Номер = ДанныеДокумента.НомерТН;
	КонецЕсли;
	
	
	МетаданныеДокумента 	= док1С.Метаданные();
	док1С.ВалютаДокумента 	= Константы.ВалютаРегламентированногоУчета.Получить();
	док1С.Учреждение 		= Организация;
	док1С.Комментарий 		= "[Получено через сервис Synerdocs]";
	
	Контрагент = ПолучитьКонтрагента(ДанныеДокумента);
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		//контрагент не создан, отказываем в создании
		ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Контрагент не определен в 1С)");
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		док1С.ВидОперации = Справочники.ВидыОпераций.МЗ_Покупка_ПоступлениеОтПоставщика;
	КонецЕсли;
	
	док1С.Исполнитель = Пользователь;
	
	док1С.СуммаВключаетНДС = Ложь;
	
	//определяем грузоотправителя
	Если ЗначениеЗаполнено(ДанныеДокумента.Грузоотправитель) Тогда
		//Ищем по наименованию
		Грузоотправитель = Справочники.Контрагенты.НайтиПоНаименованию(ДанныеДокумента.Грузоотправитель);
		
		Если Не ЗначениеЗаполнено(Грузоотправитель) И
			ЗначениеЗаполнено(ДанныеДокумента.Грузоотправитель_ИНН) Тогда
			//Ищем по ИНН и КПП
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН");
			Запрос.УстановитьПараметр("ИНН", ДанныеДокумента.Грузоотправитель_ИНН);
			Если ЗначениеЗаполнено(ДанныеДокумента.Грузоотправитель_КПП) Тогда
				Запрос.Текст = Запрос.Текст + " И Контрагенты.КПП = &КПП";
				Запрос.УстановитьПараметр("КПП", ДанныеДокумента.Грузоотправитель_КПП);
			КонецЕсли;
			Выборка = Запрос.Выполнить().Выбрать();
			Грузоотправитель = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Контрагенты.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	док1С.Грузоотправитель = Грузоотправитель;
	
	
	//Синхронизируем номенклатуру
	ТЗ_СинхронизированныеТовары = ПодготовитьТаблицуНоменклатуры(СтруктураИнформации, Контрагент, ДанныеДокумента.ТЗ_Товары);
	//Если пришло Null тогда отменяем создание документа
	Если НЕ ЗначениеЗаполнено(ТЗ_СинхронизированныеТовары) Тогда
		Возврат НЕОПРЕДЕЛЕНО;		
	КонецЕсли;
	
	
	НомерСтроки = 0;
	// Выводим многострочную часть документа
	//Для Каждого ВыборкаСтрок Из ДанныеДокумента.ТЗ_Товары Цикл
	Для Каждого ВыборкаСтрок Из ТЗ_СинхронизированныеТовары Цикл
		НомерСтроки = НомерСтроки + 1;
		
		
		Если Не ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = док1С.Материалы.Добавить();
		НоваяСтрока.Номенклатура = ВыборкаСтрок.Номенклатура;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, "Товары") И
			ЗначениеЗаполнено(ВыборкаСтрок.ХарактеристикаНоменклатуры) Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаСтрок.ХарактеристикаНоменклатуры;
		КонецЕсли;
		
		НоваяСтрока.ЕдиницаИзмерения = ?(ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"),
		ВыборкаСтрок.ЕдиницаИзмеренияПоКлассификатору,
		ВыборкаСтрок.ЕдиницаИзмерения);
		//Для УТ и КА
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, "Товары") Тогда
			НоваяСтрока.ЕдиницаИзмеренияМест = ВыборкаСтрок.ЕдиницаИзмеренияУпак;
			НоваяСтрока.ЕдиницаИзмеренияМест = ?(ТипЗнч(НоваяСтрока.ЕдиницаИзмеренияМест) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"),
			ВыборкаСтрок.ЕдиницаИзмеренияУпакПоКлассификатору,
			ВыборкаСтрок.ЕдиницаИзмеренияУпак);
		КонецЕсли;
		
		НоваяСтрока.КоличествоМест = ВыборкаСтрок.КолМест;
		НоваяСтрока.Коэффициент = ВыборкаСтрок.Место;
		НоваяСтрока.Количество = ВыборкаСтрок.Нетто;
		
		//считаем, что НДС не включен в стоимость
		
		НоваяСтрока.Сумма 		= ВыборкаСтрок.СумБезНДС;
		
		Если ВыборкаСтрок.СтавкаНДС = Неопределено Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			НоваяСтрока.СтавкаНДС 	= ПолучитьСтавкуНДСИзСтроки(ВыборкаСтрок.СтавкаНДС);
		КонецЕсли;
		НоваяСтрока.СуммаНДС 	= ВыборкаСтрок.СумНДС;
		НоваяСтрока.Всего 		= ВыборкаСтрок.СумУчНДС;
			
		//для Бух и КА (в УТ нет понятия УСН)
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, "Товары") Тогда
			Если НалоговыйУчетПрименениеУСН(Организация, док1С.Дата) Тогда
				НоваяСтрока.ОтражениеВУСН = Истина;
			КонецЕсли;
		КонецЕсли;
		
		//Только для Бух
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НомерГТД", МетаданныеДокумента, "Товары") И
			ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтранаПроисхождения", МетаданныеДокумента, "Товары") Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НоваяСтрока);
		КонецЕсли;
				
		//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ДокументБУОбъект, 1);
		//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ДокументБУОбъект);
		
		//Для Бух и КА (для УТ счетов нет)
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, "Товары") Тогда
			док1С.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Истина, Истина);
		КонецЕсли;
	КонецЦикла;
	
	док1С.СуммаДокумента = док1С.Материалы.Итог("Всего");
	
	//Для КА
	Если ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВБухгалтерскомУчете = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВНалоговомУчете = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВУправленческомУчете = Истина;
	КонецЕсли;
	
	//Для Бух и КА (для УТ счетов нет)
	Если ЕстьРеквизитДокумента("СчетУчетаРасчетовСКонтрагентом", МетаданныеДокумента) Тогда
		СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, док1С.Контрагент, док1С.ДоговорКонтрагента);
		Попытка
			//Бух
			док1С.ЗаполнитьСчетаУчетаРасчетов(СчетаУчета);
		Исключение
			//КА
			ЗаполнитьЗначенияСвойств(док1С, док1С.ЗаполнитьСтруктуруСчетовУчетаШапки());
		КонецПопытки;
	КонецЕсли;	
	
	Попытка
		док1С.Записать(РежимЗаписиДокумента.Проведение);
		
		ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
		
		док1С.ПолучитьФорму().Открыть();
		
		Возврат док1С.Ссылка;
	Исключение
		
		док1С.ПолучитьФорму().ОткрытьМодально();
		
		Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			Возврат док1С.Ссылка;
			
		Иначе
			
			ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (" + ОписаниеОшибки() + ")");
			
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

//Функция создает и проводит документ с типом "Акт"
// Параметры:
//	ДанныеДокумента: структура с данными, полученными из XML
// Возвращаемое значение:
//	Документ 1С: документ типа "Поступление товаров и услуг"
// Примечение:
//	Недостающие реквизиты (которых нет в XML, но обязательны для 1С) подставляются из настроек пользователей
//	и различных регистров (например, РСВ "Счета учета номенклатуры")
//	В случае, если документ провести не удается (например, не все обязательные реквизиты заполнены),
//	документ открывается для ручного редактирования пользователем
//
Функция СоздатьДокумент1С_АктБГУ(ДанныеДокумента, СтруктураИнформации) Экспорт
	
	док1С = Документы.УслугиСтороннихОрганизаций.СоздатьДокумент();
	МетаданныеДокумента = док1С.Метаданные();
	
	док1С.Дата = ТекущаяДата();
	док1С.НомерПервичногоДокумента = ДанныеДокумента.НомерАкта;
	док1С.ДатаПервичногоДокумента  = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаАкта);
	док1С.Учреждение = Организация;
	док1С.Комментарий = "[Получено через сервис Synerdocs]";
	
	Контрагент = ПолучитьКонтрагента(ДанныеДокумента);
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		//контрагент не создан, отказываем в создании
		ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Контрагент не определен в 1С)");
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	док1С.Контрагент = Контрагент;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.Договоры КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Учреждение = &Организация
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Код УБЫВ");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	//	Запрос.УстановитьПараметр("ВидДоговора", ?(ДанныеДокумента.флВходящийДок, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем));
	Выборка = Запрос.Выполнить().Выбрать();
	док1С.Договор = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Договоры.ПустаяСсылка());
	
	док1С.Исполнитель = Пользователь;
	
	Если ЕстьРеквизитДокумента("НеЗачитыватьАванс", МетаданныеДокумента) Тогда
		
		Запрос = Новый Запрос;
		ЗАпрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаУчрежденийСрезПоследних.НеЗачитыватьАвансыВыданныеАвтоматически КАК НеЗачитыватьАвансыВыданные,
		|	УчетнаяПолитикаУчрежденийСрезПоследних.НеЗачитыватьАвансыПолученныеАвтоматически КАК НеЗачитыватьАвансыПолученные
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаУчреждений.СрезПоследних(&ДатаДокумента, Учреждение = &Организация) КАК УчетнаяПолитикаУчрежденийСрезПоследних";
		Запрос.УстановитьПараметр("ДатаДокумента",док1С.Дата);
		Запрос.УстановитьПараметр("Организация",Организация);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			док1С.НеЗачитыватьАванс = Результат.НеЗачитыватьАвансыПолученные;
		Иначе
			Сообщить("Не задана учетная политика для учреждения " + Организация + ". Не возможно создать документ.");
		КонецЕсли;
		
	КонецЕсли;
	
	док1С.УчитыватьНДС = Истина;
	док1С.СуммаВключаетНДС = Истина;
	Если НалоговыйУчетПрименениеУСН(Организация, док1С.Дата) Тогда
		док1С.СуммаВключаетНДС = Истина;
	КонецЕсли;
	
	
	Если ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		док1С.ВидОперации = ?(ДанныеДокумента.флВходящийДок, Справочники.ВидыОпераций.УслугиСтороннихОрганизаций_ПриобретениеУПоставщика, Справочники.ВидыОпераций.УслугиОказанные_РеализацияУслуг);
	КонецЕсли;
	
	//док1С.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(ДанныеДокумента.КодВалюты);	
	док1С.ВалютаДокумента = мВалютаРегламентированногоУчета;
	док1С.СуммаДокумента = ДанныеДокумента.ТЗ_ОписаниеРабот.Итог("СуммаСНДС");
	
	//Синхронизируем номенклатуру
	ТЗ_СинхронизированныеУслуги = Новый ТаблицаЗначений;
	
	//Переименовываем колонки в нужные нам
	Для Каждого ТекСтрока Из ДанныеДокумента.ТЗ_ОписаниеРабот Цикл
		ТекСтрока.Работы.Колонки["НаимРабот"].Имя = "НаимТов";
		ТекСтрока.Работы.Колонки["ОКЕИ"].Имя = "ОКЕИ_Тов";
		//Добавляем недостающие колонки
		ТекСтрока.Работы.Колонки.Добавить("ХарактерТов");
		ТекСтрока.Работы.Колонки.Добавить("АртикулТов");
		ТекСтрока.Работы.Колонки.Добавить("КодТов");
		ТекСтрока.Работы.Колонки.Добавить("ВидУпак");
		ТекСтрока.Работы.Колонки.Добавить("СтавкаНДС");
	    ТЗ_ТекущиеРаботы = ПодготовитьТаблицуНоменклатуры(СтруктураИнформации, Контрагент, ТекСтрока.Работы, Истина);
		
		Если ТЗ_СинхронизированныеУслуги.Количество() = 0 Тогда
			Если ТЗ_ТекущиеРаботы = Неопределено Тогда
				Возврат Неопределено;
			Иначе
				ТЗ_СинхронизированныеУслуги = ТЗ_ТекущиеРаботы.Скопировать();
			КонецЕсли;	
		Иначе
			Для Каждого ТекСтр ИЗ ТЗ_ТекущиеРаботы Цикл
				НовСтрСинхр = ТЗ_СинхронизированныеУслуги.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрСинхр, ТекСтр);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
//	ТЗ_СинхронизированныеУслуги = ПодготовитьТаблицуНоменклатуры(Контрагент, ДанныеДокумента.ТЗ_Работы, Истина);
	
	//Если отменили синхронизацию, не создаем документ
	Если НЕ ЗначениеЗаполнено(ТЗ_СинхронизированныеУслуги) Тогда
		Возврат НЕОПРЕДЕЛЕНО;		
	КонецЕсли;
	
	НомерСтроки = 0;
	//Для Каждого ВыборкаСтрок Из ДанныеДокумента.ТЗ_Работы Цикл
	Для Каждого ВыборкаСтрок Из ТЗ_СинхронизированныеУслуги Цикл
		НомерСтроки = НомерСтроки + 1;
		
		//Номенклатура = ВыборкаСтрок.НаимРабот;
		Если Не ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = док1С.Услуги.Добавить();
		
		НоваяСтрока.Номенклатура = ВыборкаСтрок.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ВыборкаСтрок.ЕдиницаИзмеренияПоКлассификатору;
		НоваяСтрока.Количество = ВыборкаСтрок.Количество;
		
		//считаем, что НДС не включен в стоимость
		//НоваяСтрока.Цена = ВыборкаСтрок.Цена;
		НоваяСтрока.Сумма = ВыборкаСтрок.СумБезНДС;
		НоваяСтрока.СуммаНДС = ВыборкаСтрок.СумНДС;
		
		//рассчитаем ставку НДС из суммы НДС и суммы без НДС
		Если ВыборкаСтрок.БезНДС Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСИзСтроки(?(НоваяСтрока.Сумма > 0, Строка(Окр(НоваяСтрока.СуммаНДС / НоваяСтрока.Сумма * 100, 0)), НЕОПРЕДЕЛЕНО));
		КонецЕсли;
		
		НоваяСтрока.Всего = ВыборкаСтрок.СумУчНДС;
		//	НоваяСтрока.Цена = ?(НоваяСтрока.Количество <> 0, Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2), 0);
		
		
		//Только для Бух и КА (в УТ нет понятия УСН)
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, "Услуги") Тогда
			Если НалоговыйУчетПрименениеУСН(Организация, док1С.Дата) Тогда
				НоваяСтрока.ОтражениеВУСН = Истина;
			КонецЕсли;
		КонецЕсли;
		
		
		//Для Бух и КА (для УТ счетов нет)
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетЗатрат", МетаданныеДокумента, "Услуги") Тогда
			док1С.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги", Истина, Истина);
			
			Если ЗначениеЗаполнено(НоваяСтрока.СчетЗатрат) Тогда
				Если НоваяСтрока.СчетЗатрат.ВидыСубконто.Количество() > 0 И
					НоваяСтрока.СчетЗатрат.ВидыСубконто[0].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
					НоваяСтрока.Субконто1 = НоваяСтрока.Номенклатура.СтатьяЗатрат;
				КонецЕсли;
				Если НоваяСтрока.СчетЗатрат.ВидыСубконто.Количество() > 1 И
					НоваяСтрока.СчетЗатрат.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
					НоваяСтрока.Субконто2 = НоваяСтрока.Номенклатура.СтатьяЗатрат;
				КонецЕсли;
				Если НоваяСтрока.СчетЗатрат.ВидыСубконто.Количество() > 2 И
					НоваяСтрока.СчетЗатрат.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
					НоваяСтрока.Субконто3 = НоваяСтрока.Номенклатура.СтатьяЗатрат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Для КА
	Если ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВБухгалтерскомУчете = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВНалоговомУчете = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		док1С.ОтражатьВУправленческомУчете = Истина;
	КонецЕсли;
	
	//Для Бух и КА (для УТ счетов нет)
	Если ЕстьРеквизитДокумента("СчетУчетаРасчетовСКонтрагентом", МетаданныеДокумента) Тогда
		СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, док1С.Контрагент, док1С.ДоговорКонтрагента);
		Попытка
			//Бух
			док1С.ЗаполнитьСчетаУчетаРасчетов(СчетаУчета);
		Исключение
			//КА
			ЗаполнитьЗначенияСвойств(док1С, док1С.ЗаполнитьСтруктуруСчетовУчетаШапки());
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		док1С.Записать(РежимЗаписиДокумента.Проведение);
		
		ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
		
		док1С.ПолучитьФорму("ФормаДокумента").Открыть();
		
		Возврат док1С.Ссылка;
	Исключение
		//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
		док1С.ПолучитьФорму().ОткрытьМодально();
		Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			Возврат док1С.Ссылка;
			
		Иначе
			
			ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (" + ОписаниеОшибки() + ")");
			
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

//Функция создает и проводит документ с типом "Счет-фактура"
//
// Параметры:
//	ДанныеДокумента: структура с данными, полученными из XML
//
// Возвращаемое значение:
//	Документ 1С: документ типа "Поступление товаров и услуг"
//
// Примечение:
//	Недостающие реквизиты (которых нет в XML, но обязательны для 1С) подставляются из настроек пользователей
//	и различных регистров (например, РСВ "Счета учета номенклатуры")
//	В случае, если документ провести не удается (например, не все обязательные реквизиты заполнены),
//	документ открывается для ручного редактирования пользователем
//
Функция СоздатьДокумент1С_СчетФактураБГУ(ДанныеДокумента, ТЗ_СвязанныеДокументы) Экспорт
	
	Для Каждого СвязанныйДокумент Из ТЗ_СвязанныеДокументы Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НДС_СчетФактураВыданный.ДокументОснование.Ссылка
		|ИЗ
		|	Документ.НДС_СчетФактураВыданный КАК НДС_СчетФактураВыданный
		|ГДЕ
		|	НДС_СчетФактураВыданный.ДокументОснование = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДС_СчетФактураПолученныйДокументыОснования.Ссылка
		|ИЗ
		|	Документ.НДС_СчетФактураПолученный.ДокументыОснования КАК НДС_СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	НДС_СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументОснование";		
		
		Запрос.УстановитьПараметр("ДокументОснование", СвязанныйДокумент.Документ1С);
		НайденныеСчФ = Запрос.Выполнить().Выбрать();
		Если НайденныеСчФ.Следующий() Тогда
			Если Вопрос("На основании связанных документов уже введен счет-фактура. Все равно продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Неопределено;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	док1С = Документы.НДС_СчетФактураПолученный.СоздатьДокумент();
	
	МетаданныеДокумента = док1С.Метаданные();
	
	Если ДанныеДокумента.флВходящийДок Тогда
		док1С.НомерПервичногоДокумента = ДанныеДокумента.Номер;
		док1С.ДатаПервичногоДокумента  = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.Дата);
		//	док1С.КодВидаОперации = УчетНДС.КодВидаОперации(  УчетНДС.КодВидаОперации_ПоПричинеНалогообложения(Перечисления.НДС_ПричиныНалогообложения.Покупка);
		//		док1С.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
	Иначе
		док1С.КодСпособаВыставления = 2;
		док1С.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	КонецЕсли;
	
	Если ДанныеДокумента.Исправление Тогда
		док1С.Исправление = ДанныеДокумента.Исправление;
		док1С.НомерИсправления = ДанныеДокумента.ИсправлениеСФ_Номер;
		док1С.ДатаИсправления = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ИсправлениеСФ_Дата);
	КонецЕсли;
	
	док1С.Дата = ТекущаяДата();
	док1С.Учреждение = Организация;
	док1С.Комментарий = "[Получено через сервис Synerdocs]";
	
	// Определяем поставщика
	КонтрагентНаименование = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик, ДанныеДокумента.Покупатель);
	КонтрагентИНН = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик_ИНН, ДанныеДокумента.Покупатель_ИНН);
	КонтрагентКПП = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик_КПП, ДанныеДокумента.Покупатель_КПП);
	
	Если ЗначениеЗаполнено(КонтрагентИНН) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН");
		Запрос.УстановитьПараметр("ИНН", КонтрагентИНН);
		Если ЗначениеЗаполнено(КонтрагентКПП) Тогда
			Запрос.Текст = Запрос.Текст + " И Контрагенты.КПП = &КПП";
			Запрос.УстановитьПараметр("КПП", КонтрагентКПП);
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Контрагент = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	
	// Если контрагент не найден - предлагаем создать
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Ответ = Вопрос("Контрагент <" + КонтрагентНаименование + " (ИНН " + КонтрагентИНН + ", КПП " + КонтрагентКПП + ")> отсутствует в базе 1С" + Символы.ПС + "Для продолжения необходимо создать контрагента. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "ВНИМАНИЕ!!!");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Попытка
				Syn_Контрагент = ExchangeService.GetOrganizationByInnKpp(Токен, КонтрагентИНН, КонтрагентКПП);
				
				Форма_КарточкаКонтрагентаSynerdocs = ПолучитьФорму("Форма_КарточкаКонтрагентаSynerdocs");
				Форма_КарточкаКонтрагентаSynerdocs.РежимСозданияКонтрагента = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.Наименование = КонтрагентНаименование;
				Форма_КарточкаКонтрагентаSynerdocs.ИНН = КонтрагентИНН;
				Форма_КарточкаКонтрагентаSynerdocs.КПП = КонтрагентКПП;
				Форма_КарточкаКонтрагентаSynerdocs.Покупатель = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.Поставщик = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.ЮрФизЛицо = ?(Syn_Контрагент.IsJuridical, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
				Форма_КарточкаКонтрагентаSynerdocs.Syn_IDКонтрагента = Syn_Контрагент.OrganizationId;
				
				Контрагент = Форма_КарточкаКонтрагентаSynerdocs.ОткрытьМодально();
				
				Если ЗначениеЗаполнено(Контрагент) Тогда
					УстановитьЗначениеСвойства(Контрагент, "Syn_IDКонтрагента", Syn_Контрагент.OrganizationID);
				КонецЕсли;
			Исключение
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
				
				ОтправитьУведомлениеПользователю("Ошибка получения информации о контрагенте по ИНН и КПП: <" + КонтрагентИНН + "/" + КонтрагентКПП + ">." + ТекстОшибкиSynerdocs);
				
				Возврат НЕОПРЕДЕЛЕНО;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		//контрагент не создан, отказываем в создании
		ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Контрагент <" + КонтрагентНаименование + "> не определен в 1С)");
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	док1С.Контрагент = Контрагент;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		//определяем договор контрагента с организацией
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.Договоры КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Контрагент = &Контрагент
		|	И ДоговорыКонтрагентов.Учреждение = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.Код УБЫВ");
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		док1С.Договор = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Договоры.ПустаяСсылка());
		
		//Договор - обязательный реквизит, поэтому если его нет, то создаем
		Если Не ЗначениеЗаполнено(док1С.Договор) Тогда
			МетаданныеСправочникаДоговоры = Метаданные.Справочники.Договоры;
			
			Договор = Справочники.Договоры.СоздатьЭлемент();
			Договор.Учреждение = Организация;
			Договор.Контрагент = Контрагент;
			//Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			Договор.Наименование = "Договор с поставщиком б/н";

			Попытка
				Договор.Записать();
				док1С.Договор = Договор.Ссылка;
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	//док1С.Ответственный = Пользователь;
	док1С.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(ДанныеДокумента.КодВалюты);	
	док1С.СуммаДокумента = ДанныеДокумента.СуммаВсегоСНДС;
	док1С.СуммаНДС = ДанныеДокумента.ВсегоНДС;
	//	док1С.УстановитьКодВидаОперации();
	ОснованиеСФ = Неопределено;
	
	Если ТЗ_СвязанныеДокументы.Количество() > 0 Тогда
		//определяем документ-основание
		Если Не ДанныеДокумента.Исправление Тогда
			//обычная СФ
			Для Каждого Строка_СвязанныйДокумент Из ТЗ_СвязанныеДокументы Цикл
				Если ЗначениеЗаполнено(Строка_СвязанныйДокумент.Документ1С) И
					ТипЗнч(Строка_СвязанныйДокумент.Документ1С) = Тип("ДокументСсылка.МЗ_Покупка") ИЛИ
					ТипЗнч(Строка_СвязанныйДокумент.Документ1С) = Тип("ДокументСсылка.УслугиСтороннихОрганизаций") Тогда
					НоваяСтрока = док1С.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = Строка_СвязанныйДокумент.Документ1С;
					ОснованиеСФ = Строка_СвязанныйДокумент.Документ1С;
				КонецЕсли;
			КонецЦикла;
		Иначе
			//исправленная СФ
			Для Каждого Строка_СвязанныйДокумент Из ТЗ_СвязанныеДокументы Цикл
				Если ЗначениеЗаполнено(Строка_СвязанныйДокумент.Документ1С) И
					ТипЗнч(Строка_СвязанныйДокумент.Документ1С) = Тип("ДокументСсылка.НДС_СчетФактураПолученный") Тогда
					НоваяСтрока = док1С.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = Строка_СвязанныйДокумент.Документ1С.ДокументОснование;
					ОснованиеСФ = Строка_СвязанныйДокумент.Документ1С;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//	док1С.ДокументыОснования.ТекущиеДанные.ДокументОснование = ?(док1С.ДокументыОснования.Количество() > 0, док1С.ДокументыОснования[0].ДокументОснование, НЕОПРЕДЕЛЕНО);
		
	КонецЕсли;
	
	Если док1С.ДокументыОснования.Количество() = 0 Тогда
		//ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (не найден документ-основание. счет-фактура не может быть создан раньше документа-основания)");
		//ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Не найден документ-основание. Необходимо указать документ-основание вручную)");
		Предупреждение("Ошибка при создании документа 1С: " + док1С + " (Не найден документ-основание. Необходимо указать документ-основание вручную)",,"ВНИМАНИЕ!!!");
		
		//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
		док1С.ПолучитьФорму().ОткрытьМодально();
		Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			
			Возврат док1С.Ссылка;
			
		Иначе
			
			ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Заполнены не все обязательные реквизиты)");
			
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
	Иначе
		
		Попытка
			док1С.Записать(РежимЗаписиДокумента.Запись);
			
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			док1С.ЗаполнитьНаОсновании(ОснованиеСФ);
			док1С.ПроверитьЗаполнение();
			
			док1С.Записать(РежимЗаписиДокумента.Проведение);
			
			Возврат док1С.Ссылка;
		Исключение
			//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
			док1С.ПолучитьФорму().ОткрытьМодально();
			Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
				ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
				
				
				Возврат док1С.Ссылка;
				
			Иначе
				
				ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Заполнены не все обязательные реквизиты)");
				
				Возврат НЕОПРЕДЕЛЕНО;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
КонецФункции

Функция СоздатьДокумент1С_ИсправительныйСчетФактураБГУ(ДанныеДокумента, ТЗ_СвязанныеДокументы, СтруктураИнформации) Экспорт
	
	Для Каждого СвязанныйДокумент Из ТЗ_СвязанныеДокументы Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НДС_ИсправительныйСчетФактураВыданный.ДокументОснование.Ссылка
		|ИЗ
		|	Документ.НДС_ИсправительныйСчетФактураВыданный КАК НДС_ИсправительныйСчетФактураВыданный
		|ГДЕ
		|	НДС_ИсправительныйСчетФактураВыданный.ДокументОснование = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДС_ИсправительныйСчетФактураПолученный.ДокументОснование.Ссылка
		|ИЗ
		|	Документ.НДС_ИсправительныйСчетФактураПолученный КАК НДС_ИсправительныйСчетФактураПолученный
		|ГДЕ
		|	НДС_ИсправительныйСчетФактураПолученный.ДокументОснование = &ДокументОснование";		
		
		Запрос.УстановитьПараметр("ДокументОснование", СвязанныйДокумент.Документ1С);
		НайденныеСчФ = Запрос.Выполнить().Выбрать();
		Если НайденныеСчФ.Следующий() Тогда
			Если Вопрос("На основании связанных документов уже введен счет-фактура. Все равно продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Неопределено;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	док1С = Документы.НДС_ИсправительныйСчетФактураПолученный.СоздатьДокумент();
		
	МетаданныеДокумента = док1С.Метаданные();
	
	Если ДанныеДокумента.флВходящийДок Тогда
		// Для старых Релизов
		Если МажорныйРелиз() < 36 Тогда 
			док1С.КодВидаОперации = УчетНДС.КодВидаОперации_ПоПричинеНалогообложения(Перечисления.НДС_ПричиныНалогообложения.Покупка);
		Иначе
			док1С.КодВидаОперации = Перечисления.НДС_ПричиныНалогообложения.Покупка;
		КонецЕсли;
		
	Иначе
		док1С.КодСпособаВыставления = 2;
		док1С.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	КонецЕсли;
	
	Если ДанныеДокумента.Исправление Тогда
		//	док1С.Исправление = ДанныеДокумента.Исправление;
		док1С.НомерИсправления = ДанныеДокумента.ИсправлениеСФ_Номер;
		док1С.ДатаИсправления = ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ИсправлениеСФ_Дата);
	КонецЕсли;
	
	док1С.Дата = ТекущаяДата();
	док1С.Учреждение = Организация;
	док1С.Комментарий = "[Получено через сервис Synerdocs]";
	
	// Определяем поставщика
	КонтрагентНаименование = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик, ДанныеДокумента.Покупатель);
	КонтрагентИНН = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик_ИНН, ДанныеДокумента.Покупатель_ИНН);
	КонтрагентКПП = ?(ДанныеДокумента.флВходящийДок, ДанныеДокумента.Поставщик_КПП, ДанныеДокумента.Покупатель_КПП);
	
	Если ЗначениеЗаполнено(КонтрагентИНН) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН");
		Запрос.УстановитьПараметр("ИНН", КонтрагентИНН);
		Если ЗначениеЗаполнено(КонтрагентКПП) Тогда
			Запрос.Текст = Запрос.Текст + " И Контрагенты.КПП = &КПП";
			Запрос.УстановитьПараметр("КПП", КонтрагентКПП);
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Контрагент = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	
	// Если контрагент не найден - предлагаем создать
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Ответ = Вопрос("Контрагент <" + КонтрагентНаименование + " (ИНН " + КонтрагентИНН + ", КПП " + КонтрагентКПП + ")> отсутствует в базе 1С" + Символы.ПС + "Для продолжения необходимо создать контрагента. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "ВНИМАНИЕ!!!");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Попытка
				Syn_Контрагент = ExchangeService.GetOrganizationByInnKpp(Токен, КонтрагентИНН, КонтрагентКПП);
				
				Форма_КарточкаКонтрагентаSynerdocs = ПолучитьФорму("Форма_КарточкаКонтрагентаSynerdocs");
				Форма_КарточкаКонтрагентаSynerdocs.РежимСозданияКонтрагента = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.Наименование = КонтрагентНаименование;
				Форма_КарточкаКонтрагентаSynerdocs.ИНН = КонтрагентИНН;
				Форма_КарточкаКонтрагентаSynerdocs.КПП = КонтрагентКПП;
				Форма_КарточкаКонтрагентаSynerdocs.Покупатель = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.Поставщик = Истина;
				Форма_КарточкаКонтрагентаSynerdocs.ЮрФизЛицо = ?(Syn_Контрагент.IsJuridical, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
				Форма_КарточкаКонтрагентаSynerdocs.Syn_IDКонтрагента = Syn_Контрагент.OrganizationId;
				
				Контрагент = Форма_КарточкаКонтрагентаSynerdocs.ОткрытьМодально();
				
				Если ЗначениеЗаполнено(Контрагент) Тогда
					УстановитьЗначениеСвойства(Контрагент, "Syn_IDКонтрагента", Syn_Контрагент.OrganizationID);
				КонецЕсли;
			Исключение
				ОписаниеОшибкиСтрокой = ОписаниеОшибки();
				ТекстОшибкиSynerdocs = РазобратьИсключениеSynerdocs(ОписаниеОшибкиСтрокой);
				
				ОтправитьУведомлениеПользователю("Ошибка получения информации о контрагенте по ИНН и КПП: <" + КонтрагентИНН + "/" + КонтрагентКПП + ">." + ТекстОшибкиSynerdocs);
				
				Возврат НЕОПРЕДЕЛЕНО;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		//контрагент не создан, отказываем в создании
		ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Контрагент <" + КонтрагентНаименование + "> не определен в 1С)");
		
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	док1С.Контрагент = Контрагент;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		//определяем договор контрагента с организацией
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.Договоры КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Контрагент = &Контрагент
		|	И ДоговорыКонтрагентов.Учреждение = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.Код УБЫВ");
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		док1С.Договор = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Договоры.ПустаяСсылка());
		
		//Договор - обязательный реквизит, поэтому если его нет, то создаем
		Если Не ЗначениеЗаполнено(док1С.Договор) Тогда
			МетаданныеСправочникаДоговоры = Метаданные.Справочники.Договоры;
			
			Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			Договор.Учреждение = Организация;
			Договор.Контрагент = Контрагент;
			//Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			Договор.Наименование = "Договор с поставщиком б/н";
			Договор.Комментарий = "Создан автоматически при загрузке из Synerdocs пользователем <" + Пользователь + "> от " + ТекущаяДата();
			//	Договор.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
			Попытка
				Договор.Записать();
				док1С.Договор = Договор.Ссылка;
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			
		КонецЕсли;
	КонецЕсли;
	
	//док1С.Ответственный = Пользователь;
	док1С.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(ДанныеДокумента.КодВалюты);	
	док1С.СуммаСНДС = ДанныеДокумента.СуммаВсегоСНДС;
	док1С.СуммаСНДСкВычету = ДанныеДокумента.ВсегоНДС;
	//	док1С.УстановитьКодВидаОперации();
	
	Если ТЗ_СвязанныеДокументы.Количество() > 0 Тогда
		//определяем документ-основание
		//исправленная СФ
		Для Каждого Строка_СвязанныйДокумент Из ТЗ_СвязанныеДокументы Цикл
			Если ЗначениеЗаполнено(Строка_СвязанныйДокумент.Документ1С) И
				(ТипЗнч(Строка_СвязанныйДокумент.Документ1С) = Тип("ДокументСсылка.НДС_СчетФактураПолученный") ИЛИ
				ТипЗнч(Строка_СвязанныйДокумент.Документ1С) = Тип("ДокументСсылка.НДС_СчетФактураВыданный") ИЛИ
				ТипЗнч(Строка_СвязанныйДокумент.Документ1С) = Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураВыданный") ИЛИ
				ТипЗнч(Строка_СвязанныйДокумент.Документ1С) = Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураПолученный")) Тогда
				
				док1С.ИсправляемыйДокумент = Строка_СвязанныйДокумент.Документ1С;
				док1С.ДокументОснование = Строка_СвязанныйДокумент.Документ1С;
			КонецЕсли;
		КонецЦикла;
		
		
		//	док1С.ДокументОснование = ?(док1С.ДокументыОснования.Количество() > 0, док1С.ДокументыОснования[0].ДокументОснование, НЕОПРЕДЕЛЕНО);
	КонецЕсли;
	
	
	док1С.ЗаполнитьНаОсновании(Док1С.ИсправляемыйДокумент);
	док1С.ПолучитьФорму("ФормаДокумента").Открыть();
	
	////Синхронизируем номенклатуру
	ТЗ_СинхронизированныеТовары = ПодготовитьТаблицуНоменклатуры(СтруктураИнформации, Контрагент, ДанныеДокумента.ТЗ_Товары);
	//Если пришло Null тогда отменяем создание документа
	Если НЕ ЗначениеЗаполнено(ТЗ_СинхронизированныеТовары) Тогда
		Возврат НЕОПРЕДЕЛЕНО;		
	КонецЕсли;
	
	НомерСтроки = 1;
	// Выводим многострочную часть документа
	//Для Каждого ВыборкаСтрок Из ДанныеДокумента.ТЗ_Товары Цикл
	Для Каждого ВыборкаСтрок Из ТЗ_СинхронизированныеТовары Цикл
				
		Если Не ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", ВыборкаСтрок.Номенклатура);
		Отбор.Вставить("НомерСтроки", НомерСтроки);
		
		НайденныеСтроки = Док1С.СуммыНДС.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			ТекСтрокаТабЧасти = НайденныеСтроки[0];
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекСтрокаТабЧасти.Количество 		= ВыборкаСтрок.КолТов;
		ТекСтрокаТабЧасти.СуммаНДС			= ВыборкаСтрок.СумНДС;
		ТекСтрокаТабЧасти.СуммаНДСКВычету 	= ВыборкаСтрок.СумНДС;
		ТекСтрокаТабЧасти.СуммаСНДС			= ВыборкаСтрок.СтТовУчНал;
		ТекСтрокаТабЧасти.СуммаСНДСКВычету 	= ВыборкаСтрок.СтТовУчНал;
		ТекСтрокаТабЧасти.СтавкаНДС			= ПолучитьСтавкуНДСИзСтроки(ВыборкаСтрок.НалСтВел);
		
		НомерСтроки = НомерСтроки + 1;
		//НоваяСтрока = док1С.СуммыНДС.Добавить();
		//НоваяСтрока.Номенклатура = ВыборкаСтрок.Номенклатура;
		//НоваяСтрока.ЕдиницаИзмерения = ?(ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"),
		//ВыборкаСтрок.ЕдиницаИзмеренияПоКлассификатору,
		//ВыборкаСтрок.ЕдиницаИзмерения);
		//
		//НоваяСтрока.Количество = ВыборкаСтрок.КолТов;
		//НоваяСтрока.КоличествоДоИзменения = ВыборкаСтрок.КолТов;
		//
		//НоваяСтрока.СуммаНДС = ВыборкаСтрок.СумНДС;
		//НоваяСтрока.СуммаНДСДоИзменения = ВыборкаСтрок.СумНДС;
		//
		//НоваяСтрока.СуммаНДСКВычету = ВыборкаСтрок.СумНДС;
		//НоваяСтрока.СуммаНДСКВычетуДоИзменения = ВыборкаСтрок.СумНДС;
		//
		//НоваяСтрока.СуммаСНДС = ВыборкаСтрок.СтТовУчНал;
		//НоваяСтрока.СуммаСНДСДоИзменения = ВыборкаСтрок.СтТовУчНал;
		//
		//НоваяСтрока.СуммаСНДСКВычету = ВыборкаСтрок.СтТовУчНал;
		//НоваяСтрока.СуммаСНДСКВычетуДоИзменения = ВыборкаСтрок.СтТовУчНал;
		//
		//НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСИзСтроки(ВыборкаСтрок.НалСтВел);
		//НоваяСтрока.СтавкаНДСДоИзменения = ПолучитьСтавкуНДСИзСтроки(ВыборкаСтрок.НалСтВел);		
		
	КонецЦикла;		
	
	Если док1С.ДокументОснование = НЕОПРЕДЕЛЕНО Тогда
		//ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (не найден документ-основание. счет-фактура не может быть создан раньше документа-основания)");
		//ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Не найден документ-основание. Необходимо указать документ-основание вручную)");
		Предупреждение("Ошибка при создании документа 1С: " + док1С + " (Не найден документ-основание. Необходимо указать документ-основание вручную)",,"ВНИМАНИЕ!!!");
		
		
		//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
		док1С.ПолучитьФорму().ОткрытьМодально();
		Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			Возврат док1С.Ссылка;
			
		Иначе
			
			ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Заполнены не все обязательные реквизиты)");
			
			Возврат НЕОПРЕДЕЛЕНО;
		КонецЕсли;
	Иначе
		
		Попытка
			док1С.Записать(РежимЗаписиДокумента.Запись);
			
			ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
			
			док1С.ПолучитьФорму("ФормаДокумента").Открыть();
			
			Возврат док1С.Ссылка;
		Исключение
			//открываем документ для редактирования (видимо, не все обязательные реквизиты заполнены)
			док1С.ПолучитьФорму().ОткрытьМодально();
			Если ЗначениеЗаполнено(док1С.Ссылка) Тогда
				ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
				
				Возврат док1С.Ссылка;
				
			Иначе
				
				ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (Заполнены не все обязательные реквизиты)");
				
				Возврат НЕОПРЕДЕЛЕНО;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
КонецФункции

//Функция создает и проводит документы с типом "Корректировочный счет-фактура" и "Корректировка поступления"
//
// Параметры:
//	ДанныеДокумента: структура с данными, полученными из XML
//
// Возвращаемое значение:
//	Документ 1С: документ типа "Поступление товаров и услуг"
//
// Примечение:
//	Недостающие реквизиты (которых нет в XML, но обязательны для 1С) подставляются из настроек пользователей
//	и различных регистров (например, РСВ "Счета учета номенклатуры")
//	В случае, если документ провести не удается (например, не все обязательные реквизиты заполнены),
//	документ открывается для ручного редактирования пользователем
//
Функция СоздатьДокумент1С_КорректировочныйСчетФактураБГУ(ДанныеДокумента, ТЗ_СвязанныеДокументы, СтруктураИнформации) Экспорт
	
	ПервоначальнаяСФ = Неопределено;
	
	Если ТЗ_СвязанныеДокументы.Количество() > 0 Тогда
		//определяем документ-основание
		Для Каждого Строка_СвязанныйДокумент Из ТЗ_СвязанныеДокументы Цикл
			Если ЗначениеЗаполнено(Строка_СвязанныйДокумент.Документ1С) И
				ТипЗнч(Строка_СвязанныйДокумент.Документ1С) = ?(ДанныеДокумента.флВходящийДок, Тип("ДокументСсылка.НДС_СчетФактураПолученный"), Тип("ДокументСсылка.НДС_СчетФактураВыданный")) Тогда
				ПервоначальнаяСФ = Строка_СвязанныйДокумент.Документ1С;
			КонецЕсли;
		КонецЦикла;                                                                                		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПервоначальнаяСФ) Тогда
	//	ОтправитьУведомлениеПользователю("Ошибка при создании документа 1С: " + док1С + " (не найден первоначальный счет-фактура. Корректировочный счет-фактура не может быть создан раньше первоначального)");
		
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	
	док1С = Документы.НДС_КорректировочныйСчетФактураПолученный.СоздатьДокумент();
	док1С.ЗаполнитьНаОсновании(ПервоначальнаяСФ);
	док1С.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	Док1С.ПолучитьФорму("ФормаДокумента").Открыть();
	
	док1С.НомерПервичногоДокумента 	= ДанныеДокумента.НомерКСФ;
	док1С.ДатаПервичногоДокумента	= ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаКСФ);
	
	// Таб часть с НДС
	СуммыНДС = Док1С.СуммыНДС;
	
	ТЗ_Товары = ДанныеДокумента.ТЗ_Товары;
	
	// Сворачиваем по ставке НДС
	ТЗ_Товары.Свернуть("НалСтВелПосле", "ВсегоПослеИзм, СтоимПослеИзм, СтоимУвел, СтоимУм, СумНДСПосле, СумНСДУвел, СумНСДУм"); 
	
	
	Для Каждого ТекСтр Из ТЗ_Товары Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("СтавкаНДС", ПолучитьСтавкуНДСИзСтроки(ТекСтр.НалСтВелПосле));
		
		НайденныеСтроки = СуммыНДС.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекСтрНДС = НайденныеСтроки[0];
		Иначе
			Продолжить;
		КонецЕсли;
		
		НДС_Восст 	= ТекСтр.СумНСДУм;
		СНДС_Восст  = ТекСтр.СтоимУм;
		
		НДС_Выч     = ТекСтр.СумНСДУвел;
		СНДС_Выч    = ТекСтр.СтоимУвел;
		
		ТекСтрНДС.СуммаНДСКВосстановлению 	= НДС_Восст;
		ТекСтрНДС.СуммаСНДСКВосстановлению 	= СНДС_Восст;
		
		ТекСтрНДС.СуммаНДСКВычету 			= НДС_Выч;
		ТекСтрНДС.СуммаСНДСКВычету 			= СНДС_Выч;

		
	КонецЦикла;
			
	Попытка 
		док1С.Записать(РежимЗаписиДокумента.Запись);
		ОтправитьУведомлениеПользователю("Создан новый документ 1С: " + док1С);
		Возврат док1С.Ссылка;
		
	Исключение
		ОтправитьУведомлениеПользователю("Ошибка создания документа: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 

//Функция возвращает флаг применения организацией УСН
// Используется при создании документов 1С
//
// Параметры:
//  Организация: текущая организация, чью учетную политику определяем
//  Дата: дата, на которую определяем учетную политику
//
// Возвращаемое значение:
//	Флаг применения организацией УСН: Истина - организация применяет УСН, Ложь - организация не применяет УСН
//
Функция НалоговыйУчетПрименениеУСН(Организация, Дата)
	Попытка
		ПараметрыУП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
		Возврат ?(НЕ ЗначениеЗаполнено(ПараметрыУП), Ложь, (ПараметрыУП.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная));
		
	Исключение
		Попытка
			//Для УТ
			Отказ = Ложь;
			ПараметрыУП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиНалоговыйУчет(Дата, Отказ, Организация);
			Возврат ?(Отказ, Ложь, ПараметрыУП.ОрганизацияНеЯвляетсяПлательщикомНДС);
		Исключение
			Возврат Ложь;
		КонецПопытки;	
	КонецПопытки;	
КонецФункции	

//Функция проверяет на заполнение данные в XML, обязательные при создании документов 1С (например, количество)
// Проверка осуществляется перед созданием документов 1С
//
// Параметры:
//  ТипЭД: тип электронного документа
//	ДанныеДокумента: структура с данными, полученными из XML
//  ТекстОшибок: текст со списком ошибок
//
// Возвращаемое значение:
//	Флаг проверки: Истина - ошибок не обнаружено, Ложь - есть ошибки в XML (возвращается текст с ошибками)
//
Функция ПроверкаЗаполненияОбязательныхРеквизитовXMLДля1С(ТипЭД, ДанныеДокумента, ТекстОшибок) Экспорт
	//проверяем наличие такого реквизита в метаданных, потом уже заполнение его
	//проверка в зависимости от типа документа
	Если ТипЭД = "Счет-фактура" Или
		ТипЭД = "Исправленный счет-фактура" Тогда
		
		//датавходящегодокумента
		Если Не ЗначениеЗаполнено(ДанныеДокумента.Дата) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: дата счет-фактуры";
		КонецЕсли;
		//номервходящегодокумента
		Если Не ЗначениеЗаполнено(ДанныеДокумента.Номер) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: номер счет-фактуры";
		КонецЕсли;
		
		Если ДанныеДокумента.Исправление Тогда
			//ДатаИсправления
			Если Не ЗначениеЗаполнено(ДанныеДокумента.ИсправлениеСФ_Дата) Тогда
				ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: дата исправления счет-фактуры";
			КонецЕсли;
			//НомерИсправления
			Если Не ЗначениеЗаполнено(ДанныеДокумента.ИсправлениеСФ_Номер) Тогда
				ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: номер исправления счет-фактуры";
			КонецЕсли;
		КонецЕсли;	
		
		//поставщик
		Если Не ЗначениеЗаполнено(ДанныеДокумента.Поставщик) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: поставщик";
		КонецЕсли;
		
		//ИНН поставщика
		Если Не ЗначениеЗаполнено(ДанныеДокумента.Поставщик_ИНН) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: ИНН поставщика";
		КонецЕсли;
		
		
		
	ИначеЕсли ТипЭД = "Корректировочный счет-фактура" Тогда
		
		//дата КСФ
		Если Не ЗначениеЗаполнено(ДанныеДокумента.ДатаКСФ) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: дата корректировочной счет-фактуры";
		КонецЕсли;
		//номер КСФ
		Если Не ЗначениеЗаполнено(ДанныеДокумента.НомерКСФ) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: номер корректировочной счет-фактуры";
		КонецЕсли;
		
		Если ДанныеДокумента.Исправление Тогда
			//ДатаИсправления КСФ
			Если Не ЗначениеЗаполнено(ДанныеДокумента.ИсправлениеКСФ_Дата) Тогда
				ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: дата исправления корректировочной счет-фактуры";
			КонецЕсли;
			//НомерИсправления КСФ
			Если Не ЗначениеЗаполнено(ДанныеДокумента.ИсправлениеКСФ_Номер) Тогда
				ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: номер исправления корректировочной счет-фактуры";
			КонецЕсли;
		КонецЕсли;
		
		
		Если ДанныеДокумента.ИсправлениеСФ Тогда
			//ДатаИсправления СФ
			Если Не ЗначениеЗаполнено(ДанныеДокумента.ИсправлениеСФ_Дата) Тогда
				ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: дата исправления корректируемой (первоначальной) счет-фактуры";
			КонецЕсли;
			//НомерИсправления СФ
			Если Не ЗначениеЗаполнено(ДанныеДокумента.ИсправлениеСФ_Номер) Тогда
				ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: номер исправления корректируемой (первоначальной) счет-фактуры";
			КонецЕсли;
		КонецЕсли;
		
		//поставщик
		Если Не ЗначениеЗаполнено(ДанныеДокумента.Поставщик) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: поставщик";
		КонецЕсли;
		
		//ИНН поставщика
		Если Не ЗначениеЗаполнено(ДанныеДокумента.Поставщик_ИНН) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: ИНН поставщика";
		КонецЕсли;
		
		
		//РЕКВИЗИТЫ ТЧ "Товары"
		НомерСтроки = 0;
		Для Каждого ТекСтрока Из ДанныеДокумента.ТЗ_Товары Цикл
			НомерСтроки = НомерСтроки + 1;
			//реквизиты 1С (которые я ставлю по умолчению)
			//счетучета
			// Здесь услуг быть не должно.
			//УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", Документ1С.Товары, Отказ, Заголовок);
			
			//номенклатура
			Если Не ЗначениеЗаполнено(ТекСтрока.НаимТов) Тогда
				ТекстОшибок = ТекстОшибок + Символы.ПС + "Строка " + НомерСтроки + ": Не заполнено или заполнено некорректно: наименование номеклатуры";
			КонецЕсли;
			
			//Едизм
			Если Не ЗначениеЗаполнено(ТекСтрока.ОКЕИ_ТовДо) Тогда
				ТекстОшибок = ТекстОшибок + Символы.ПС + "Строка " + НомерСтроки + ": Не заполнено или заполнено некорректно: код единицы измерения до корректировки";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ОКЕИ_ТовПосле) Тогда
				ТекстОшибок = ТекстОшибок + Символы.ПС + "Строка " + НомерСтроки + ": Не заполнено или заполнено некорректно: код единицы измерения после корректировки";
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЭД = "Торг12" Тогда
		
		//Дата
		Если Не ЗначениеЗаполнено(ДанныеДокумента.ДатаТН) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: дата Торг-12";
		КонецЕсли;	
		
		//поставщик
		Если Не ЗначениеЗаполнено(ДанныеДокумента.Поставщик) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: поставщик";
		КонецЕсли;
		
		//ИНН поставщика
		Если Не ЗначениеЗаполнено(ДанныеДокумента.Поставщик_ИНН) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: ИНН поставщика";
		КонецЕсли;
		
		
		//РЕКВИЗИТЫ ТЧ "Товары"
		НомерСтроки = 0;
		Для Каждого ТекСтрока Из ДанныеДокумента.ТЗ_Товары Цикл
			НомерСтроки = НомерСтроки + 1;
			
			//номенклатура
			Если Не ЗначениеЗаполнено(ТекСтрока.НаимТов) Тогда
				ТекстОшибок = ТекстОшибок + Символы.ПС + "Строка " + НомерСтроки + ": Не заполнено или заполнено некорректно: наименование номеклатуры";
			КонецЕсли;
			
			//Едизм
			Если Не ЗначениеЗаполнено(ТекСтрока.НаимЕдИзм) И
				Не ЗначениеЗаполнено(ТекСтрока.ОКЕИ_Тов) Тогда
				ТекстОшибок = ТекстОшибок + Символы.ПС + "Строка " + НомерСтроки + ": Не заполнено или заполнено некорректно: наименование и код единицы измерения";
			КонецЕсли;
			
			//количество
			Попытка
				КоличествоЧислом = Число(ТекСтрока.Нетто);
				Если Не ЗначениеЗаполнено(КоличествоЧислом) Тогда
					ТекстОшибок = ТекстОшибок + Символы.ПС + "Строка " + НомерСтроки + ": Не заполнено или заполнено некорректно: количество";
				КонецЕсли;
			Исключение
				ТекстОшибок = ТекстОшибок + Символы.ПС + "Строка " + НомерСтроки + ": Не заполнено или заполнено некорректно: количество";
			КонецПопытки;
			
			Если НЕ ЭтоБГУ Тогда
				//СтавкаНДС
				Если ЗначениеЗаполнено(ДанныеДокумента.ДатаТН) И
					Не НалоговыйУчетПрименениеУСН(Организация, ПолучитьДатуИВремяИзСтроки(ДанныеДокумента.ДатаТН)) И
					Не ЗначениеЗаполнено(ПолучитьСтавкуНДСИзСтроки(ТекСтрока.СтавкаНДС)) Тогда
					ТекстОшибок = ТекстОшибок + Символы.ПС + "Строка " + НомерСтроки + ": Не заполнено или заполнено некорректно: ставка НДС";
				КонецЕсли;
			Иначе
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЭД = "Акт" Тогда
		
		
		//Дата
		Если Не ЗначениеЗаполнено(ДанныеДокумента.ДатаАкта) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: дата акта";
		КонецЕсли;	
		
		//Исполнитель
		Если Не ЗначениеЗаполнено(ДанныеДокумента.Исполнитель) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: исполнитель";
		КонецЕсли;
		
		//ИНН Исполнителя
		Если Не ЗначениеЗаполнено(ДанныеДокумента.Исполнитель_ИНН) Тогда
			ТекстОшибок = ТекстОшибок + "Не заполнено или заполнено некорректно: ИНН исполнителя";
		КонецЕсли;
		
		
		//РЕКВИЗИТЫ ТЧ "Услуги"
		НомерСтроки = 0;
		Для Каждого ТекСтрока Из ДанныеДокумента.ТЗ_Работы Цикл
			НомерСтроки = НомерСтроки + 1;
			
			//номенклатура
			Если Не ЗначениеЗаполнено(ТекСтрока.НаимРабот) Тогда
				ТекстОшибок = ТекстОшибок + Символы.ПС + "Строка " + НомерСтроки + ": Не заполнено или заполнено некорректно: наименование работы (услуги)";
			КонецЕсли;
			
			//Едизм
			Если Не ЗначениеЗаполнено(ТекСтрока.НаимЕдИзм) И
				Не ЗначениеЗаполнено(ТекСтрока.ОКЕИ) Тогда
				ТекстОшибок = ТекстОшибок + Символы.ПС + "Строка " + НомерСтроки + ": Не заполнено или заполнено некорректно: наименование и код единицы измерения";
			КонецЕсли;
			
			//цена
			Попытка
				ЦенаЧислом = Число(ТекСтрока.Цена);
				Если Не ЗначениеЗаполнено(ЦенаЧислом) Тогда
					ТекстОшибок = ТекстОшибок + Символы.ПС + "Строка " + НомерСтроки + ": Не заполнено или заполнено некорректно: цена";
				КонецЕсли;
			Исключение
				ТекстОшибок = ТекстОшибок + Символы.ПС + "Строка " + НомерСтроки + ": Не заполнено или заполнено некорректно: цена";
			КонецПопытки;
			
			
		КонецЦикла;
		
		
	КонецЕсли;
	
	ТекстОшибок = СокрЛП(ТекстОшибок);
	Сообщить(ТекстОшибок);
	Возврат ПустаяСтрока(ТекстОшибок);
КонецФункции

//Функция автоматически синхронизирует номенклатуру из XML и номенклатуру в справочнике "Номенклатура" в 2 этапа
// 1. Поиск в справочнике "НоменклатураПоставщиков" или РСВ "НоменклатураКонтрагентов" (в зависимости от конфы)
// 2. Поиск в справочнике "Номенклатура" по одному из реквизитов номенклатуры (согласно настройке "Вариант автоматической синхронизации")
//
// Параметры:
//  Контрагент: контрагент-отправитель, чью номенклатуру синхронизируем
//	ТЗ_Товары: таблица с товарами
//  ВариантАвтоматическойСинхронизацииНоменклатуры: вариант синхронизации из настроек модуля
//
// Возвращаемое значение:
//	ТЗ_СинхронизированныеТовары: синхронизированная таблица с товарами
//
Функция АвтоматическаяСинхронизацияНоменклатуры(Контрагент, ТЗ_Товары, ВариантАвтоматическойСинхронизацииНоменклатуры) Экспорт
	
	ТЗ_СинхронизированныеТовары = ТЗ_Товары.Скопировать();
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("Номенклатура");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("ЕдиницаИзмеренияПоКлассификатору");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("ЕдиницаИзмеренияУпак");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("ЕдиницаИзмеренияУпакПоКлассификатору");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("Коэффициент");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("Синхронизировано");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("КодСтраныПредставление");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("НаименованиеСтраныПредставление");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("НомерГТДПредставление");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("КодСтраны");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("НаименованиеСтраны");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("НомерГТД");
	ТЗ_СинхронизированныеТовары.Колонки.Добавить("ЕдИзмОстатков");
	
	ЗапросНоменклатураКонтрагента = Новый Запрос;
	Текст_Бух = "ВЫБРАТЬ
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Владелец = &Контрагент
	|	И НоменклатураПоставщиков.Наименование = &Наименование
	|	И НоменклатураПоставщиков.Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И НоменклатураПоставщиков.ПометкаУдаления = ЛОЖЬ
	|	И НоменклатураПоставщиков.Номенклатура.ПометкаУдаления = ЛОЖЬ";
	
	Текст_УПП = "ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Контрагент = &Контрагент
	|	И НоменклатураКонтрагентов.НаименованиеНоменклатурыКонтрагента ПОДОБНО &Наименование
	|	И НоменклатураКонтрагентов.Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И НоменклатураКонтрагентов.Номенклатура.ЭтоГруппа = ЛОЖЬ";;
	
	ЗапросНоменклатура = Новый Запрос;
	ЗапросНоменклатура.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	(Номенклатура.Наименование = &Наименование
	|			ИЛИ Номенклатура.НаименованиеПолное ПОДОБНО &Наименование)
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ";
	
	ЗапросХарактеристика = Новый Запрос;
	ЗапросХарактеристика.Текст = "ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец
	|	И ХарактеристикиНоменклатуры.Наименование = &Наименование
	|	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ";
	
	ЗапросНоменклатураКонтрагента.Текст = ?(Метаданные.Справочники.Найти("НоменклатураПоставщиков") = Неопределено, Текст_УПП, Текст_Бух);
	ЗапросНоменклатураКонтрагента.УстановитьПараметр("Контрагент", Контрагент);
	
	Для Каждого ТекСтрока Из ТЗ_СинхронизированныеТовары Цикл
		парамНаимТов = ?(ЗначениеЗаполнено(ТекСтрока.НаимТов), СокрЛП(ТекСтрока.НаимТов), "Наименование не указано");
		// Параметры запросов
		ЗапросНоменклатура.УстановитьПараметр("Наименование", парамНаимТов);
		ЗапросНоменклатураКонтрагента.УстановитьПараметр("Наименование", парамНаимТов);
		
		// Сперва ищем в номенклатуре контрагента
		РезультатЗапроса = ЗапросНоменклатураКонтрагента.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			ТекСтрока.Синхронизировано = Истина;
			Номенклатура = РезультатЗапроса.Номенклатура;
		Иначе
			// Соответствия нет, ищем в самой номенклатуре
			РезультатЗапроса = ЗапросНоменклатура.Выполнить().Выбрать();
			Если РезультатЗапроса.Следующий() Тогда
				ТекСтрока.Синхронизировано = Истина;
				Номенклатура = РезультатЗапроса.Номенклатура;
			Иначе
				// Номенклатуры тоже нет
				ТекСтрока.Синхронизировано = Ложь;
				Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		ТекСтрока.Номенклатура = Номенклатура;
		
		// Найдем единицу измерения по классификатору
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	КлассификаторЕдиницИзмерения.Ссылка
		                      |ИЗ
		                      |	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		                      |ГДЕ
		                      |	КлассификаторЕдиницИзмерения.Код = &Код");
		Запрос.УстановитьПараметр("Код", ТекСтрока.ОКЕИ_Тов);
		Результат = Запрос.Выполнить().Выбрать();			

		ЕдИзмПоКлассификатору = ?(Результат.Следующий(), Результат.Ссылка, Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
		
		ТекСтрока.ЕдиницаИзмеренияПоКлассификатору = ЕдИзмПоКлассификатору;

		// Для УТ, КА, УПП
		Если НЕ (Метаданные.Имя = "БухгалтерияПредприятия") И НЕ (Метаданные.Имя = "БухгалтерияПредприятияКОРП") И НЕ ЭтоБГУ Тогда
			Если НЕ Номенклатура.Пустая() Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	ЕдиницыИзмерения.Ссылка
				|ИЗ
				|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
				|ГДЕ
				|	(ВЫРАЗИТЬ(ЕдиницыИзмерения.Владелец КАК Справочник.Номенклатура)) = &Владелец
				|	И ЕдиницыИзмерения.Наименование = &Наименование");
				Запрос.УстановитьПараметр("Владелец", Номенклатура.Ссылка);
				Запрос.УстановитьПараметр("Наименование", ТекСтрока.НаимЕдИзм);
				
				Результат = Запрос.Выполнить().Выбрать();			
				
				ЕдИзмОстатков = ?(Результат.Следующий(), Результат.Ссылка, Номенклатура.ЕдиницаИзмеренияМест);
			Иначе
				ЕдИзмОстатков = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			КонецЕсли;
			ТекСтрока.ЕдИзмОстатков = ЕдИзмОстатков;
		КонецЕсли;
						
		// Найдем характеристику
		Если Метаданные.Справочники.Найти("ХарактеристикиНоменклатуры") <> Неопределено И ЗначениеЗаполнено(Номенклатура) И Номенклатура.ВестиУчетПоХарактеристикам Тогда
			ЗапросХарактеристика.УстановитьПараметр("Владелец", Номенклатура);
			ЗапросХарактеристика.УстановитьПараметр("Наименование", ТекСтрока.ХарактерТов);
			РезультатЗапроса = ЗапросХарактеристика.Выполнить().Выбрать();
			Если РезультатЗапроса.Следующий() Тогда
				ТекСтрока.ХарактеристикаНоменклатуры = РезультатЗапроса.Характеристика;
			Иначе
				ТекСтрока.Синхронизировано = Ложь;
				ТекСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		//Найдем страну происхождения и ГТД
		Попытка
			СтруктураГТД = ?(СтрДлина(ТекСтрока.ИнфПолСтр) > 0, РазобратьСтрокуГТД(ТекСтрока.ИнфПолСтр), Неопределено);
		Исключение
			СтруктураГТД = НЕОПРЕДЕЛЕНО;
		КонецПопытки;
				
		Если НЕ СтруктураГТД = Неопределено И СтруктураГТД.Свойство("КодСтр") Тогда		
						
			Отбор = Новый Структура;
			
			Если ЗначениеЗаполнено(СтруктураГТД.КодСтр) Тогда
				Отбор.Вставить("Код", СтруктураГТД.КодСтр);
				СтранаСсылка = Справочники.КлассификаторСтранМира.НайтиПоКоду(СтруктураГТД.КодСтр);
			Иначе
				// Ищем по различным сочетаниям наименовние/полное наименование
				НайденныеСтроки = ТЗ_Страны.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					Сообщить("Для номенклатуры [" + ТекСтрока.НаимТов +  "] не указан код страны происхождения. Необходимо указать вручную.");
					Продолжить;
				Иначе
					СтранаСсылка = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(НайденныеСтроки[0].КраткоеНаименование);
					
					Если НЕ ЗначениеЗаполнено(СтранаСсылка) Тогда
						СтранаСсылка = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(НайденныеСтроки[0].ПолноеНаименование);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтранаСсылка) Тогда
						СтранаСсылка = Справочники.КлассификаторСтранМира.НайтиПоРеквизиту("НаименованиеПолное", НайденныеСтроки[0].ПолноеНаименование);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтранаСсылка) Тогда
						СтранаСсылка = Справочники.КлассификаторСтранМира.НайтиПоРеквизиту("НаименованиеПолное", НайденныеСтроки[0].КраткоеНаименование);
					КонецЕсли;						
				КонецЕсли;
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(СтранаСсылка) Тогда
				НайденныеСтроки = ТЗ_Страны.НайтиСтроки(Отбор);
				ПредставлениеСтраны = ?(НЕ НайденныеСтроки = Неопределено, НайденныеСтроки[0].КраткоеНаименование, "-");
			Иначе
				ПредставлениеСтраны = СтранаСсылка.Наименование;
			КонецЕсли;
						
			ТекСтрока.КодСтраныПредставление = СтруктураГТД.КодСтр;
			ТекСтрока.НаименованиеСтраныПредставление = ПредставлениеСтраны;
			ТекСтрока.НомерГТДПредставление = ?(СтруктураГТД.Свойство("НомерТД"), СтруктураГТД.НомерТД, "-");
			
			Если Метаданные.Справочники.Найти("НомераГТД") <> НЕОПРЕДЕЛЕНО Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ
				                      |	НомераГТД.Ссылка
				                      |ИЗ
				                      |	Справочник.НомераГТД КАК НомераГТД
				                      |ГДЕ
				                      |	(ВЫРАЗИТЬ(НомераГТД.Код КАК СТРОКА(29))) = (ВЫРАЗИТЬ(&Код КАК СТРОКА(29)))");
									  Запрос.УстановитьПараметр("Код", ТекСтрока.НомерГТДПредставление);
									  Результат = Запрос.Выполнить().Выбрать();
				
				ЕстьГТД = ?(Результат.Следующий(), Результат.Ссылка, Неопределено); 
				ЕстьСтрана = Справочники.КлассификаторСтранМира.НайтиПоКоду(ТекСтрока.КодСтраныПредставление);
				
				Если НЕ ЗначениеЗаполнено(ЕстьГТД) Тогда
					ТекСтрока.НомерГТД = Справочники.НомераГТД.ПустаяСсылка();
					ТекСтрока.Синхронизировано = Ложь;
				Иначе 
					ТекСтрока.НомерГТД = ЕстьГТД;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ЕстьСтрана) Тогда
					ТекСтрока.КодСтраны = Справочники.КлассификаторСтранМира.ПустаяСсылка();
					ТекСтрока.Синхронизировано = Ложь;
				Иначе
					ТекСтрока.КодСтраны = ЕстьСтрана
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли; 	
	КонецЦикла;
	
	Возврат ТЗ_СинхронизированныеТовары;
КонецФункции

//Функция синхронизирует номенклатуру из XML и номенклатуру в справочнике "Номенклатура" в 3 этапа
// 1. Автоматическая синхронизация: вызывается функция "АвтоматическаяСинхронизацияНоменклатуры" 
// 2. Если в настройках указан вариант ручной синхронизации, то вызывается соответствующая форма
// 3. Если номенклатура не сопоставлена, то создается новая номенклатура в 1С и синхронизируется
//
// Параметры:
//  Контрагент: контрагент-отправитель, чью номенклатуру синхронизируем
//	ТЗ_Товары: таблица с товарами
//  ЭтоУслуги: флаг, определяющий какую номенклатуру синхронизируем (товары или услуги)
//
// Возвращаемое значение:
//	ТЗ_СинхронизированныеТовары: синхронизированная таблица с товарами
//
Функция ПодготовитьТаблицуНоменклатуры(СтруктураИнформации, Контрагент, ТЗ_Товары, ЭтоУслуги = Ложь) Экспорт
	
	ВариантСинхронизацииНоменклатуры = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("ВариантСинхронизацииНоменклатуры");
	ВариантАвтоматическойСинхронизацииНоменклатуры = МенеджерНастроек.ПолучитьЗначениеНастройкиМодуля("ВариантАвтоматическойСинхронизацииНоменклатуры");
	МетаданныеСправочникаНоменклатура = Метаданные.Справочники.Номенклатура;
	
	// Автоматическая синхронизация
	ТЗ_СинхронизированныеТовары = АвтоматическаяСинхронизацияНоменклатуры(Контрагент, ТЗ_Товары, ВариантАвтоматическойСинхронизацииНоменклатуры);
	ЕстьНесинхронизированнаяНоменклатура = (ТЗ_СинхронизированныеТовары.Найти(Ложь, "Синхронизировано") <> НЕОПРЕДЕЛЕНО);
	
	// Ручная синхронизация
	Если ЕстьНесинхронизированнаяНоменклатура Тогда
		Форма_СинхронизацияОбъектов = ПолучитьФорму("Форма_СинхронизацияОбъектов");
		Форма_СинхронизацияОбъектов.ТаблицаНоменклатуры = ТЗ_СинхронизированныеТовары;
		Форма_СинхронизацияОбъектов.Контрагент = Контрагент;
		Форма_СинхронизацияОбъектов.СтруктураИнформации = СтруктураИнформации;
		Форма_СинхронизацияОбъектов.ЭтоУслуги = ЭтоУслуги;
		Форма_СинхронизацияОбъектов.СинхронизироватьАвтоматически = ВариантСинхронизацииНоменклатуры = 2;

		ТЗ_СинхронизированныеВручнуюТовары = Форма_СинхронизацияОбъектов.ОткрытьМодально();
		
		// Еслм закрыли форму то дальше ничего не делаем и возвращаем Null	
		Если ТЗ_СинхронизированныеВручнуюТовары <> НЕОПРЕДЕЛЕНО Тогда
			ТЗ_СинхронизированныеТовары = ТЗ_СинхронизированныеВручнуюТовары;
		Иначе
			Возврат НЕОПРЕДЕЛЕНО; 
		КонецЕсли;		
	КонецЕсли;
			
	Возврат ТЗ_СинхронизированныеТовары;
	
КонецФункции

Функция КодОКВ(КодВалюты)
	Код = СокрЛП(КодВалюты);
	//Разница = 3 - СтрДлина(Код);
	Пока СтрДлина(Код) < 3 Цикл
		Код = "0" + Код
	КонецЦикла;
	Возврат Код
КонецФункции

Функция ПодписантСтруктура() Экспорт
	
	//: Организация = Справочники.Организации.ПустаяСсылка();
	
	Подписант = Новый Структура(
		"ИННЮЛ, ИННФЛ, СвГосРегИП, Должность, ФИО"
	);
	
	Если Сертификат <> Неопределено Тогда
		
		ТипыСубъекта = Криптография.ТипыСубъекта();
		
		Субъект = Криптография.Субъект(Сертификат.Субъект);
		
		СвидетельствоОГосРегистрации	= Неопределено;
		ИННЮЛ							= Неопределено;
		ИННФЛ							= Неопределено;
		
		Если Это837ИлиВыше() Тогда
			
			ЭтоИП = (Субъект.ТипСубъекта = ТипыСубъекта.ИП);
			
			ИНН = Субъект.ИНН;
			
		Иначе
			
			Если ЭтоБГУ Тогда
				ЭтоИП = Ложь;
			Иначе
				ЭтоИП = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
			КонецЕсли;
			
			ИНН = Организация.ИНН;
			
		КонецЕсли;
		
		Если ЭтоИП Тогда
			
			ИННФЛ = ИНН;
			
			ЕстьСвидетельство = Истина
				И ЗначениеЗаполнено(Организация.СвидетельствоСерияНомер)
				И ЗначениеЗаполнено(Организация.СвидетельствоДатаВыдачи);
				
			Если ЕстьСвидетельство Тогда
				СвидетельствоОГосРегистрации = Организация.СвидетельствоСерияНомер + " от " + Формат(Организация.СвидетельствоДатаВыдачи, "ДЛФ=Д");
			КонецЕсли;
			
		Иначе
			
			ИННЮЛ = ИНН;
			
		КонецЕсли;
		
		ФИО = Новый_ФИО(Субъект.ФИО.Фамилия, Субъект.ФИО.Имя, Субъект.ФИО.Отчество);
		
		Подписант.ИННЮЛ			= ИННЮЛ;
		Подписант.ИННФЛ			= ИННФЛ;
		Подписант.СвГосРегИП	= СвидетельствоОГосРегистрации;
		Подписант.Должность		= Субъект.Должность;
		Подписант.ФИО			= ФИО;
		
		// FIXME: Временное решение, это нужно делать при сериализации документа
		Если НЕ ЗначениеЗаполнено(Подписант.Должность) Тогда
			Подписант.Должность = "-";
		КонецЕсли;
		
	Иначе
		
		ФИО = Новый_ФИО("-", "-", "-");
		
		Подписант.ИННЮЛ			= "1234567890";
		Подписант.ИННФЛ			= "123456789012";
		Подписант.СвГосРегИП	= "-";
		Подписант.Должность		= "-";
		Подписант.ФИО			= ФИО;
		
	КонецЕсли;
	
	Подписант = Новый ФиксированнаяСтруктура(Подписант);
	
	Возврат Подписант;
	
КонецФункции

Функция ПолучитьПредставлениеСертификата() Экспорт
	Попытка
		СертификатОрганизация = Сертификат.Субъект.O;
	Исключение
		СертификатОрганизация = "";
	КонецПопытки;
	
	Попытка
		СертификатФамилия = Сертификат.Субъект.SN;
	Исключение
		СертификатФамилия = "";
	КонецПопытки;
	
	Попытка
		СертификатИО = Сертификат.Субъект.GN;
	Исключение
		СертификатИО = "";
	КонецПопытки;
	
	Попытка
		СертификатДолжность = Сертификат.Субъект.T;
	Исключение
		СертификатДолжность = "";
	КонецПопытки;
	
	Возврат СертификатОрганизация + ", " + СертификатДолжность + " " + СертификатФамилия + " " + СертификатИО;
КонецФункции

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значениями параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организации
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Если ПустаяСтрока(Список) Тогда
		
		Список = "ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
		Если Не СписокСведений.Свойство("НаименованиеДляПечатныхФорм") Тогда
			Список = "НаименованиеПолное," + Список;
		Иначе
			Список = "НаименованиеДляПечатныхФорм," + Список;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = "";
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование",			" ");
	СоответствиеПараметров.Вставить("СокращенноеНаименование",		" ");
	СоответствиеПараметров.Вставить("НаименованиеДляПечатныхФорм",	" ");
	СоответствиеПараметров.Вставить("ИНН",							" ИНН ");
	СоответствиеПараметров.Вставить("КПП",							" КПП ");
	СоответствиеПараметров.Вставить("Свидетельство",				" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",		" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",				" ");
	СоответствиеПараметров.Вставить("Телефоны",						" тел.: ");
	СоответствиеПараметров.Вставить("Факсы",						" факс: ");
	СоответствиеПараметров.Вставить("НомерСчета",					" р/с ");
	СоответствиеПараметров.Вставить("Банк",               			" в банке ");
	СоответствиеПараметров.Вставить("БИК",                			" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           			" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          			" Код по ОКПО ");
	
	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	
	Для Счетчик = 1 по ЧислоПараметров Цикл
		
		ПозЗапятой = Найти(Список, ",");
		
		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);
				
				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;
				
				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 
				
				Результат = Результат + ?(СПрефиксом = Истина, ?(ПустаяСтрока(Результат), СокрЛ(Префикс), Префикс), "") + СтрокаДополнения;
				
			Исключение
				
				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
				
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // Описан

// Позволяет получить список реквизитов документа, необходимых для дальнейшей
// передачи в обработку заполнения цен и валют.
//
// Параметры: 
//  ДокументОбъект      - объект документа, для реквизитов будет производится заполнение
//  СтруктураИсключений - структура, в которую передаются те исключения, которые или невозможно
//                        определить по метаданным, или, несмотря ни на что, нельзя включать в
//                        возвращаемую структуру.
//                        В структуре - ключ = имя реквизита, значение = истина (необходимо добавить
//                        в структуру) или ложь (нельзя добавлять в структуру)
//
// Возвращаемое значение:
//  Сформированная структура реквизитов документа.
//
Функция ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокументОбъект, СтруктураИсключений = Неопределено) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Зададим, какие реквизиты вообще нам могут быть нужны
	СтруктураВозможныхВариантовРеквизитов = Новый Структура();
	СтруктураВозможныхВариантовРеквизитов.Вставить("ТипЦен");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ВалютаДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УчитыватьНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("СуммаВключаетНДС");
	
	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Новый Структура();
	Для Каждого ТекущийЭлементСтруктуры Из СтруктураВозможныхВариантовРеквизитов Цикл
		НужныйРеквизитДокумента = ТекущийЭлементСтруктуры.Ключ;
		Если ЕстьРеквизитДокумента(НужныйРеквизитДокумента, МетаданныеДокумента) Тогда
			СтруктураРеквизитовДокумента.Вставить(НужныйРеквизитДокумента);
		КонецЕсли;
	КонецЦикла;
	
	// теперь проверим исключения
	Если СтруктураИсключений<>Неопределено Тогда
		Для Каждого ТекущийЭлементСтруктуры Из СтруктураИсключений Цикл
			Если ТекущийЭлементСтруктуры.Значение Тогда
				// надо добавить реквизит, если его еще нет
				СтруктураРеквизитовДокумента.Вставить(ТекущийЭлементСтруктуры.Ключ);
			Иначе
				// надо удалить реквизит, если он есть
				СтруктураРеквизитовДокумента.Удалить(ТекущийЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураРеквизитовДокумента;
	
КонецФункции // ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования()

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор, ВалютаРегламентированногоУчета = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Результат = Новый Структура("СчетРасчетов, 
	|СчетАвансов,
	|СчетРасчетовПокупателя, 
	|СчетАвансовПокупателя, 
	|СчетРасчетовПоПретензиям,
	|СчетРасчетовСКомитентом,
	|СчетУчетаТары,
	|СчетУчетаТарыПокупателя,
	|СчетУчетаДоходовПоТаре,
	|СчетУчетаРасходовПоТаре");
	
	ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор, ВалютаРегламентированногоУчета);
	
	СписокГруппКонтрагентов = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Контрагент);
	
	СписокГруппДоговоров = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Договор);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	Индекс = 1;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	" + Индекс + " КАК Приоритет,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТаре,
		|	СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТаре,
		|	СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТаре,
		|	СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &ПустаяОрганизация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТаре,
		|	СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.Текст = ТекстЗапроса;
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Результат.СчетРасчетов              = Выборка.СчетУчетаРасчетовСПоставщиком;
			Результат.СчетАвансов               = Выборка.СчетУчетаАвансовВыданных;
			Результат.СчетРасчетовПокупателя    = Выборка.СчетУчетаРасчетовСПокупателем;
			Результат.СчетАвансовПокупателя     = Выборка.СчетУчетаАвансовПолученных;
			Результат.СчетРасчетовПоПретензиям  = Выборка.СчетРасчетовПоПретензиям;
			Результат.СчетРасчетовСКомитентом   = Выборка.СчетУчетаРасчетовСКомитентом;
			Результат.СчетУчетаТары             = Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
			Результат.СчетУчетаТарыПокупателя   = Выборка.СчетУчетаРасчетовПоТареСПокупателем;
			
			Результат.СчетУчетаДоходовПоТаре  = Выборка.СчетУчетаДоходовПоТаре;
			Результат.СчетУчетаРасходовПоТаре = Выборка.СчетУчетаРасходовПоТаре;
			
		КонецЕсли;
		
		Возврат Результат;
	Исключение
		Возврат НЕОПРЕДЕЛЕНО;
	КонецПопытки;
	
	
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//		ВалютаРегламентированногоУчета 	- СправочникСсылка.Валюты
//
// Возвращаемое значение
//      ПеречислениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,ВалютаРегламентированногоУчета) Экспорт
	
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
		ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
		
	ИначеЕсли ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;
		
	Иначе
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
		
	Конецесли;
	
	Возврат ВидРасчетовПоДоговору;
	
КонецФункции

Функция ПолучитьТипДокумента(СтрокаПредставление) Экспорт
	
	Если СтрокаПредставление = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли СтрокаПредставление = "Исправленный счет-фактура" Тогда
		Возврат "InvoiceRevision";
	ИначеЕсли СтрокаПредставление = "Счет-фактура" Тогда
		Возврат "Invoice";
	ИначеЕсли СтрокаПредставление = "Корректировочный счет-фактура" Тогда
		Возврат "InvoiceCorrection";
	ИначеЕсли СтрокаПредставление = "Торг-12" ИЛИ СтрокаПредставление = "Товарная накладная" Тогда
		Возврат "WaybillSeller"
	ИначеЕсли СтрокаПредставление = "Акт" ИЛИ СтрокаПредставление = "Акт выполненных работ" Тогда
		Возврат "ActOfWorkSeller";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСуммуДокументаБГУ(Документ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.НДС_СчетФактураПолученный") ИЛИ
		ТипЗнч(Документ) = Тип("ДокументСсылка.УслугиСтороннихОрганизаций")ИЛИ
		ТипЗнч(Документ) = Тип("ДокументСсылка.МЗ_Покупка")ИЛИ
		ТипЗнч(Документ) = Тип("ДокументСсылка.ОС_Покупка")ИЛИ
		ТипЗнч(Документ) = Тип("ДокументСсылка.УслугиСтороннихОрганизаций") Тогда
		
		Возврат Документ.СуммаДокумента;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураПолученный") Тогда
		Возврат Документ.СуммаСНДС;		
	КонецЕсли
	
КонецФункции

// Функция формирует json-строку с кодом страны и номером ГТД
// в виде КодСтраны="код";НомерГТД="номер";
// Параметры:  
// СтруктураСерии - для формирования строки в УПП, КА, УТ (реквизит ТЧ "СерияНоменклатуры")
// КодСтраны,НомерГТД - для формирования строки в БП (реквизиты ТЧ "Страна", "НомерГТД")
Функция ЗаполнитьСтрокуГТД(СтруктураСерии, КодСтраны, НаименованиеСтраны, НомерГТД) Экспорт
	
	Структура = Новый Структура;
	
	
	Если СтруктураСерии = Неопределено Тогда
		Структура.Вставить("КодСтраны",КодСтраны);
		Структура.Вставить("НомерГТД",НомерГТД);
		Структура.Вставить("НаименованиеСтраны", НаименованиеСтраны);
	Иначе
		Структура.Вставить("КодСтраны", СтруктураСерии.СтранаПроисхождения.Код);
		Структура.Вставить("НомерГТД", СокрЛП(СтруктураСерии.НомерГТД));
		Структура.Вставить("НаименованиеСтраны", СокрЛП(СтруктураСерии.СтранаПроисхождения.Наименование));
	КонецЕсли;
	
	ТекстJSON = "{";
	
	Для Каждого Элемент Из Структура Цикл
		
		ТекстJSON = ТекстJSON + """" + Элемент.Ключ + """" + ":" + """" +  Элемент.Значение + """" + ","; 
		
	КонецЦикла;
	
	ТекстJSON = Лев(ТекстJSON,СтрДлина(ТекстJSON)-1);
	ТекстJSON = ТекстJSON + "}";
	
	Возврат ТекстJSON;
	
КонецФункции

Функция ЗаполнитьИнфПолТОРГ12(СтрокаТабличнойЧасти, ЕстьХарактеристики = Ложь, ЭтоБухгалтерия = Ложь, ФабрикаИнфПол) Экспорт
	
	ЗаполнятьИнфПол = Истина;
	СтрокаИнфПол 	= Неопределено;
	
	ЭлементДанные 	= ФабрикаИнфПол.Тип("INF", "Данные");
	Данные 			= ФабрикаИнфПол.Создать(ЭлементДанные);
	
	Реквизит =  ФабрикаИнфПол.Создать(ЭлементДанные.Свойства.Получить("Реквизит").Тип);
	Реквизит.Имя = "ИД";
	Реквизит.Значение = ?(ЕстьХарактеристики, Строка(СтрокаТабличнойЧасти.Номенклатура.УникальныйИдентификатор()) +	"##" 	
		+ Строка(?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Ссылка), СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Ссылка.УникальныйИдентификатор(), "")), 
			Строка(СтрокаТабличнойЧасти.Номенклатура.УникальныйИдентификатор()) + "##");
	
	Данные.Реквизит.Добавить(Реквизит);
	
	// Код страны
	Если ЭтоБухгалтерия Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения.Код) Тогда
			Реквизит 			= ФабрикаИнфПол.Создать(ЭлементДанные.Свойства.Получить("Реквизит").Тип);
			Реквизит.Имя 		= "КодСтр";
			Реквизит.Значение 	= СокрЛП(СтрокаТабличнойЧасти.СтранаПроисхождения.Код);
			Данные.Реквизит.Добавить(Реквизит);	
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СерияНоменклатуры.СтранаПроисхождения.Код) Тогда
			Реквизит 			= ФабрикаИнфПол.Создать(ЭлементДанные.Свойства.Получить("Реквизит").Тип);
			Реквизит.Имя 		= "КодСтр";
			Реквизит.Значение 	= СокрЛП(СтрокаТабличнойЧасти.СерияНоменклатуры.СтранаПроисхождения.Код);
			Данные.Реквизит.Добавить(Реквизит);
		КонецЕсли;
	КонецЕсли;
	
	// Номер ГТД
	Если ЭтоБухгалтерия Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
			Реквизит 			= ФабрикаИнфПол.Создать(ЭлементДанные.Свойства.Получить("Реквизит").Тип);
			Реквизит.Имя 		= "НомерТД";
			Реквизит.Значение 	= СокрЛП(СтрокаТабличнойЧасти.НомерГТД);
			Данные.Реквизит.Добавить(Реквизит);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СерияНоменклатуры.НомерГТД) Тогда
			Реквизит 			= ФабрикаИнфПол.Создать(ЭлементДанные.Свойства.Получить("Реквизит").Тип);
			Реквизит.Имя 		= "НомерТД";
			Реквизит.Значение 	= СокрЛП(СтрокаТабличнойЧасти.СерияНоменклатуры.НомерГТД);
			Данные.Реквизит.Добавить(Реквизит);
		КонецЕсли;
	КонецЕсли;
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.УстановитьСтроку();
	ФабрикаИнфПол.ЗаписатьXML(НоваяЗаписьXML, Данные);
	СтрокаИнфПол = НоваяЗаписьXML.Закрыть();
	
	// Уберем пространства имен и "мусорные" символы
	НачалоПрИмен		= Найти(СтрокаИнфПол, "<Данные") + 7;
	КонецПрИмен			= Найти(СтрокаИнфПол, ">");
	УдаляемаяСтрока 	= Сред(СтрокаИнфПол, НачалоПрИмен, КонецПрИмен - НачалоПрИмен);
	СтрокаИнфПол 		= СтрЗаменить(СтрокаИнфПол, УдаляемаяСтрока, "");	
	СтрокаИнфПол		= СтрЗаменить(СтрокаИнфПол, Символы.ПС, ""); 	
	СтрокаИнфПол		= СтрЗаменить(СтрокаИнфПол, Символы.Таб, ""); 	
	
	Возврат СтрокаИнфПол;	                        
		
КонецФункции

//Функция парсит json-строку ГТД и заполняет структуру
// в виде КодСтраны,НомерГТД
//Параметры:
//СтокаГТД = строка в виде КодСтраны="код";НомерГТД="номер" 
Функция РазобратьСтрокуГТД(ТекстJSON) Экспорт
	
	// Для старых версий ИнфПол (JSON-строка)
	Если Лев(ТекстJSON, 1) = "{" Тогда
		
		Структура = Новый Структура;
		
		СтрокаГТД = СтрЗаменить(ТекстJSON,"{","");
		СтрокаГТД = СтрЗаменить(СтрокаГТД,"}","");
		СтрокаГТД = СтрЗаменить(СтрокаГТД,"{","");
		СтрокаГТД = СтрЗаменить(СтрокаГТД,"""","");
		Строки 	  = СтрЗаменить(СтрокаГТД,",",Символы.ПС);
		
		// Не известный нам формат json-строки
		Если Строки.Количество() <> 3 Тогда
			Сообщить("Не удалось получить данные поля ""ИнфПол:"" " + Строка(ТекстJSON));
			Возврат Неопределено;
		КонецЕсли;
		
		Для Индекс = 1 По СтрЧислоСтрок(Строки) Цикл
			ТекСтр = СтрПолучитьСтроку(Строки, Индекс);
			Ключ = Лев(ТекСтр,Найти(ТекСтр,":")-1);
			Значение = Прав(ТекСтр,СтрДлина(ТекСтр)-Найти(ТекСтр,":"));
			Попытка
				Структура.Вставить(Ключ, Значение);		
			Исключение
				Сообщить("Не удалось получить данные поля ""ИнфПол:"" " + Строка(ТекстJSON));
				Возврат Неопределено;
			КонецПопытки;
		КонецЦикла;
		// Текущая версия ИнфПол (xml)	
	ИначеЕсли Лев(ТекстJSON, 1) = "<" Тогда
		Попытка
			
		ПостроительДОМ 	= Новый ПостроительDOM;
		ЧтениеXML 		= Новый ЧтениеXML;
					
		ЧтениеXML.УстановитьСтроку(ТекстJSON);
		ДокументДОМ 	= ПостроительДОМ.Прочитать(ЧтениеXML);
		
		ЧтениеXML.Закрыть();
		
		РазыменовательПИ = ДокументДОМ.СоздатьРазыменовательПИ(ДокументДОМ);	
		
		ЗапросДОМ 		= "/Данные";
		
		ХПуть 			= ДокументДОМ.СоздатьВыражениеXPath(ЗапросДОМ, РазыменовательПИ);
		Результат 		= ХПуть.Вычислить(ДокументДОМ);
		
		Если НЕ Результат =  Неопределено Тогда
			Структура = Новый Структура;
			
			КорневойУзел 	= Результат.ПолучитьСледующий();
			
			Для Каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
				Если Узел.ИмяУзла = "Реквизит" И Узел.Атрибуты.Количество() = 2 Тогда
					Структура.Вставить(Узел.Атрибуты[0].Значение, Узел.Атрибуты[1].Значение);								
				КонецЕсли		
			КонецЦикла;		
		КонецЕсли; 
		
		Исключение
			// Не известная нам стурктура xml
			Сообщить("Не удалось получить данные поля ""ИнфПол:"" " + Строка(ТекстJSON));
			Возврат Неопределено;
		КонецПопытки;
		// Не известный нам формат
	Иначе
		Сообщить("Не удалось получить данные поля ""ИнфПол:"" " + Строка(ТекстJSON));
		Возврат Неопределено;	
	КонецЕсли;
	
	Возврат Структура;
	
	
КонецФункции

//Функция возвращает представление региона из кладра
//по коду
Функция ПолучитьПредставлениеРегиона(КодРегион) Экспорт
	
	Если КодРегион = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	АдресныйКлассификатор.Наименование,
	               |	АдресныйКлассификатор.Сокращение
	               |ИЗ
	               |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	               |ГДЕ
	               |	АдресныйКлассификатор.КодРегионаВКоде = &КодРегион
	               |	И АдресныйКлассификатор.КодРайонаВКоде = 0
	               |	И АдресныйКлассификатор.КодГородаВКоде = 0
	               |	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = 0
	               |	И АдресныйКлассификатор.КодУлицыВКоде = 0";
	Запрос.УстановитьПараметр("КодРегион",Число(КодРегион));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Наименование + " " + СокрЛП(Результат.Сокращение);
	Иначе
		Возврат КодРегион;
	КонецЕсли;
	
	
КонецФункции

Функция СоздатьОбъектXDTOИзСхемы(ТекстСхемы) Экспорт
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСхемы);
	
	ПостроительDOM = Новый ПостроительDOM;
	Документ = ПостроительDOM.Прочитать(ЧтениеXML);
	ПостроительСхем = Новый ПостроительСхемXML;
	
	Схема = ПостроительСхем.СоздатьСхемуXML(Документ.ЭлементДокумента);
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(Схема);
	Фабрика = Новый ФабрикаXDTO(НаборСхем);
	
	Возврат Фабрика;
КонецФункции

Функция ПолучитьАдресИзXDTO(ОрганизацияXDTO) Экспорт
	АдресОрганизации = Новый Структура();
	ЗначенияПолей = Новый Структура();
	ЮрАдрес = ОрганизацияXDTO.LegalAddress;
	
	АдресОрганизации.Вставить("Представление", "" +
	?(ЗначениеЗаполнено(ЮрАдрес.PostalCode), ", " + ЮрАдрес.PostalCode, "") +
	?(ЗначениеЗаполнено(ЮрАдрес.RegionCode), ", " + ЮрАдрес.RegionCode, "") +
	?(ЗначениеЗаполнено(ЮрАдрес.City), ЮрАдрес.City, ЮрАдрес.Locality) +
	?(ЗначениеЗаполнено(ЮрАдрес.Street), " " + ЮрАдрес.Street, "") +
	?(ЗначениеЗаполнено(ЮрАдрес.House), ", " + ЮрАдрес.House, "") +
	?(ЗначениеЗаполнено(ЮрАдрес.Building), "/" + ЮрАдрес.Building, "") +
	?(ЗначениеЗаполнено(ЮрАдрес.Apartment), " - " + ЮрАдрес.Apartment, ""));
	АдресОрганизации.Вставить("КодСтраны", ЮрАдрес.CountryCode);
	Если Не ОрганизацияXDTO.IsForeignCompany Тогда
		АдресОрганизации.Вставить("Индекс", ЮрАдрес.PostalCode);
		АдресОрганизации.Вставить("КодРегиона", ЮрАдрес.RegionCode);
		АдресОрганизации.Вставить("Район", ЮрАдрес.District);
		АдресОрганизации.Вставить("Город", ЮрАдрес.City);
		АдресОрганизации.Вставить("НаселенныйПункт", ЮрАдрес.Locality);
		АдресОрганизации.Вставить("Улица", ЮрАдрес.Street);
		АдресОрганизации.Вставить("Дом", ЮрАдрес.House);
		АдресОрганизации.Вставить("Корпус", ЮрАдрес.Building);
		АдресОрганизации.Вставить("Квартира", ЮрАдрес.Apartment);
	КонецЕсли;
	Возврат АдресОрганизации;
КонецФункции

Функция ПолучитьФИОИзXDTO(ОрганизацияXDTO) Экспорт
	Если Не ОрганизацияXDTO.IsJuridical Тогда
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия", ОрганизацияXDTO.LastName);
		ФИО.Вставить("Имя", ОрганизацияXDTO.FirstName);
		ФИО.Вставить("Отчество", ОрганизацияXDTO.MiddleName);
	Иначе
		ФИО = Неопределено;
	КонецЕсли;
	Возврат ФИО;
КонецФункции

Функция ПолучитьКорректировкуПоступления(Родитель) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаПоступления.Ссылка
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.ДокументПоступления = &ДокументПоступления
	|	И КорректировкаПоступления.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("ДокументПоступления",Родитель);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Результат.Следующий(),Результат.Ссылка,Неопределено);
	
КонецФункции

//Функция формирует строку ВерсПрог
// Возвращаемое значение - Версия обработки, версия платформы, версия конфигурации
//
Функция СформироватьСтрокуВерсПрог() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ВерсияОбработки = ЭтотОбъект.Метаданные().Комментарий;
		
	ВерсПрог = "Synerdocs-1C " + ВерсияОбработки;
	
	Возврат ВерсПрог;
	
КонецФункции

Функция ПолучитьЗначениеПоляСубъекта(Субъект, ИмяПоля)
	Попытка
		ЗначениеПоля = Субъект[ИмяПоля];
	Исключение
		ЗначениеПоля = "";
	КонецПопытки;
	Возврат ЗначениеПоля;
КонецФункции

Функция ДатаВремяUTC(ИсходнаяДата) Экспорт 
	
	// TODO: Для получения смещения есть СмещениеСтандартногоВремени()
	ЧасовойПояс = (МестноеВремя(ИсходнаяДата) - ИсходнаяДата)/3600;
	// TODO: Не учитывается, что есть 30 минутные пояса
	СтрокаДатаВремяUTC = Формат(МестноеВремя(ИсходнаяДата), "ДЛФ=DT") + " UTC" + ?(ЧасовойПояс = 0, "", ?(ЧасовойПояс > 0, "+", "-") + ЧасовойПояс);
	
	Возврат СтрокаДатаВремяUTC;
КонецФункции

Функция ПолучитьНаименованиеРегиона(КодРегиона) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Сокращение
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор.КодРегионаВКоде = &КодРегиона
	|	И АдресныйКлассификатор.ТипАдресногоЭлемента = 1";
	Запрос.УстановитьПараметр("КодРегиона", Число(КодРегиона));
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат СокрЛП(Результат.Наименование + " " + Результат.Сокращение);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПервоначальныйСФ(ИсправляемыйСФ) Экспорт
	
	Если НЕ  ИсправляемыйСФ.ИсправляемыйСчетФактура.Пустая() Тогда
		Возврат ПолучитьПервоначальныйСФ(ИсправляемыйСФ.ИсправляемыйСчетФактура);	
	Иначе	
		Возврат ИсправляемыйСФ;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПервоначальныйКСФ(ИсправляемыйКСФ) Экспорт
	
	Если НЕ ИсправляемыйКСФ.ИсправляемыйСчетФактура.Пустая() И 
		ИсправляемыйКСФ.ИсправляемыйСчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Возврат ПолучитьПервоначальныйКСФ(ИсправляемыйКСФ.ИсправляемыйСчетФактура);	
	Иначе	
		Возврат ИсправляемыйКСФ;
	КонецЕсли;
	
КонецФункции

// Функция возвращает массив связей договоров контрагентов и факторов
//
// Возвращаемое значение - Таблица значений
//
Функция ЗаполнитьТаблицуДоговоровФакторинг() Экспорт
	
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Syn_Факторинг");
	
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Сообщить("Необходимо создать свойство <Syn_Факторинг>");
		Возврат Неопределено;
	КонецЕсли;
	 	
	Если ЗначениеЗаполнено(Организация) Тогда
		//Поиск объекта и свойства в регистре "ЗСВ"
		Запрос 			= Новый Запрос;
		Запрос.Текст 	=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
		|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Контрагенты) КАК Фактор,
		|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.ДоговорыКонтрагентов).Владелец КАК Контрагент
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &Свойство
		|	И ЗначенияСвойствОбъектов.Объект.Организация = &ТекущаяОрганизация";
		
		Запрос.УстановитьПараметр("Свойство", Свойство);
		Запрос.УстановитьПараметр("ТекущаяОрганизация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			ТЗ_Связи = Новый ТаблицаЗначений;
			
			ТЗ_Связи.Колонки.Добавить("Контрагент");
			ТЗ_Связи.Колонки.Добавить("Договор");
			ТЗ_Связи.Колонки.Добавить("Фактор");
			
			Пока Выборка.Следующий() Цикл
				НовСтр = ТЗ_Связи.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Выборка);			
			КонецЦикла;
			
			Возврат ТЗ_Связи;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
 	
КонецФункции

Функция ПолучитьДоговорДокумента(ДокументСсылка) Экспорт
	
	Если НЕ ЭтоБГУ Тогда
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ
			ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Договор = ДокументСсылка.ДоговорКонтрагента;
			Возврат Договор;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе // Для БГУ не заполняем
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает адрес организации в виде строки.
//
// Параметры: СтруктураАдреса - представленеие адреса в XDTO; ИностраннаяОрганизация - признак ино орг., булево
//
// Возвращаемое значение: АдресСтрокой - строка.
//
Функция ПредставлениеАдреса(СтруктураАдреса, ИностраннаяОрганизация) Экспорт
	
	Если ИностраннаяОрганизация Тогда
		Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(СтруктураАдреса.CountryCode);
		АдресСтрокой = ?(ЗначениеЗаполнено(Страна), Страна.Наименование, СтруктураАдреса.CountryCode) + ", " + СтруктураАдреса.ForeignStreetAddress;
		Возврат АдресСтрокой;
	Иначе
		АдресСтрокой = "" + 
		?(ЗначениеЗаполнено(СтруктураАдреса.PostalCode), СтруктураАдреса.PostalCode, "") +
		?(ЗначениеЗаполнено(СтруктураАдреса.RegionCode), ", " + ПолучитьНаименованиеРегиона(СтруктураАдреса.RegionCode), "") +	
		?(ЗначениеЗаполнено(СтруктураАдреса.District), ", " + СтруктураАдреса.District, "") +
		?(ЗначениеЗаполнено(СтруктураАдреса.City), ", " + СтруктураАдреса.City, "") +
		?(ЗначениеЗаполнено(СтруктураАдреса.Locality), ", " + СтруктураАдреса.Locality, "") +
		?(ЗначениеЗаполнено(СтруктураАдреса.Street), ", " + СтруктураАдреса.Street, "") +
		?(ЗначениеЗаполнено(СтруктураАдреса.House), ", " + СтруктураАдреса.House, "") +
		?(ЗначениеЗаполнено(СтруктураАдреса.Building), ", " + СтруктураАдреса.Building, "") +
		?(ЗначениеЗаполнено(СтруктураАдреса.Apartment), ", " + СтруктураАдреса.Apartment, "");
		Возврат АдресСтрокой;
	КонецЕсли;

КонецФункции

// Возвращает структуру с недопустимыми символами в значенит
// 
// Параметры: МаскаВвода - разрешенные символы, строка. Значение - проверяемое значение, строка
//
//Возвращаемое значение: СтруктураОтвета, структура
Функция ПроверитьЗначениеНаНедопустимыеСимволы(МаскаВвода, ЗначениеДляПроверки) Экспорт
	
	ЕстьОшибки 		= Ложь;
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("КорректноеЗначение", Истина);
	СтруктураОтвета.Вставить("НекорректныеСимволы", Неопределено);
	
	ИсходнаяСтрока 		= ЗначениеДляПроверки; 
	НекорректныеСимволы = "";
		
	Если СтрДлина(ИсходнаяСтрока)> 0 Тогда 
		Для Сч = 1 по СтрДлина(ИсходнаяСтрока) Цикл 
			Символ = Сред(ИсходнаяСтрока, Сч, 1); 
			Если НЕ Найти(МаскаВвода, Символ) Тогда 
				НекорректныеСимволы = ?(ЗначениеЗаполнено(НекорректныеСимволы), НекорректныеСимволы + ", '" + Символ + "'", "'" + Символ + "'");
				ЕстьОшибки = Истина;
			КонецЕсли; 
		КонецЦикла;
	Иначе
		ЕстьОшибки 			= Истина;
		НекорректныеСимволы = "Значение не заполнено";
	КонецЕсли; 
	
	Если НЕ ЕстьОшибки Тогда 
		Возврат СтруктураОтвета;
	Иначе
		СтруктураОтвета.Вставить("КорректноеЗначение", Ложь);
		СтруктураОтвета.Вставить("НекорректныеСимволы", НекорректныеСимволы);
		Возврат СтруктураОтвета;
	КонецЕсли;
		
КонецФункции

// Возвращает структуру с описанием исключения (ошибки заполнения xml)
//
// Параметры: 
// ТекущееЗначение - значение в 1С/сервисе, произвольное
// ЭталонноеЗначение - значение, соответствующее типу элемента xsd-схемы, строка
// ОписаниеОшибки - текстовое описание ошибки/предупреждения, строка
// ЭтоОшибка - признак ошибки/предупреждения, булево (Истина - ошибка, Ложь - предупреждение) 
//
// Возвращаемое значение: Структура;
//
Функция ЗаполнитьСтруктуруИсключения(ТекущееЗначение, ЭталонноеЗначение, ОписаниеОшибкиСтрокой, ЭтоОшибка = Ложь) Экспорт
	
	СтруктураИсключения = Новый Структура;
	СтруктураИсключения.Вставить("ТекущееЗначение", ТекущееЗначение);
	СтруктураИсключения.Вставить("ЭталонноеЗначение", ЭталонноеЗначение);
	СтруктураИсключения.Вставить("ОписаниеОшибки", ОписаниеОшибкиСтрокой);
	СтруктураИсключения.Вставить("ЭтоОшибка", ЭтоОшибка);
	
	Возврат СтруктураИсключения;
	
КонецФункции

Функция ПолучитьШтрихКод(СтрокаТабличнойЧасти) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Штрихкоды.Штрихкод,
	|	Штрихкоды.ХарактеристикаНоменклатуры,
	|	Штрихкоды.СерияНоменклатуры,
	|	Штрихкоды.ЕдиницаИзмерения,
	|	Штрихкоды.Качество
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец = &Владелец
	|	И Штрихкоды.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	И Штрихкоды.СерияНоменклатуры = &СерияНоменклатуры
	|	И Штрихкоды.ЕдиницаИзмерения = &ЕдИзм
	|	И Штрихкоды.Качество = &Качество";
	Запрос.УстановитьПараметр("Владелец", СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СтрокаТабличнойЧасти.СерияНоменклатуры);
	Запрос.УстановитьПараметр("ЕдИзм", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Качество", СтрокаТабличнойЧасти.Качество);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Штрихкод;
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Штрихкоды.Штрихкод,
		|	Штрихкоды.ХарактеристикаНоменклатуры,
		|	Штрихкоды.СерияНоменклатуры,
		|	Штрихкоды.ЕдиницаИзмерения,
		|	Штрихкоды.Качество
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Владелец
		|	И Штрихкоды.ЕдиницаИзмерения = &ЕдИзм
		|	И Штрихкоды.Качество = &Качество
		|	И Штрихкоды.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			Возврат Результат.Штрихкод;
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Штрихкоды.Штрихкод,
			|	Штрихкоды.ХарактеристикаНоменклатуры,
			|	Штрихкоды.СерияНоменклатуры,
			|	Штрихкоды.ЕдиницаИзмерения,
			|	Штрихкоды.Качество
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Владелец = &Владелец
			|	И Штрихкоды.ЕдиницаИзмерения = &ЕдИзм
			|	И Штрихкоды.Качество = &Качество
			|	И Штрихкоды.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				Возврат Результат.Штрихкод;
			Иначе
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Штрихкоды.Штрихкод,
				|	Штрихкоды.ХарактеристикаНоменклатуры,
				|	Штрихкоды.СерияНоменклатуры,
				|	Штрихкоды.ЕдиницаИзмерения,
				|	Штрихкоды.Качество
				|ИЗ
				|	РегистрСведений.Штрихкоды КАК Штрихкоды
				|ГДЕ
				|	Штрихкоды.Владелец = &Владелец
				|	И Штрихкоды.ЕдиницаИзмерения = &ЕдИзм
				|	И Штрихкоды.Качество = &Качество";
				
				Результат = Запрос.Выполнить().Выбрать();
				
				Если Результат.Следующий() Тогда
					Возврат Результат.Штрихкод;
				Иначе
					Возврат  Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция по полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт
	
	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();
	АдресноеСокращение = "";

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
КонецФункции

Функция ОткрытьФормуПредпростраДокумента(Документ, БезАвторизации, СтруктураУступочнойНадписи, ТипДокумента) Экспорт
	
	
	ФормаОбработки = ПолучитьФорму("ОсновнаяФорма", , КлючУникальности_ОсновнаяФорма);
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Документ " + Строка(Документ) + " содержит ошибки! Открыть форму предпросмотра документа?";
	
	Ответ = Вопрос(Текст, Режим, 0);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат Неопределено;
	Иначе
		ФормаПредпросмотра = ПолучитьФорму("Форма_ПредпросмотраДокумента", ФормаОбработки, Документ.УникальныйИдентификатор());
		СтруктураПараметров = Новый Структура; 
		СтруктураПараметров.Вставить("ТипДокумента", ТипДокумента);
		СтруктураПараметров.Вставить("ДокументСсылка", Документ);
		СтруктураПараметров.Вставить("СтруктураУступочнойНадписи", СтруктураУступочнойНадписи);
		
		ФормаПредпросмотра.СтруктураПараметров = СтруктураПараметров;
		
		// Открываем модально чтоб не потерять окно среди кучи других
		ФормаПредпросмотра.ОткрытьМодально();
	КонецЕсли;
	
КонецФункции

Функция СформироватьИзМакетаТаблицуЗначений(Макет) Экспорт
	
	// Первая строка макета считается заголовком, соотв. имена столбцов не должны содержать пробелов
	
	Перем ТЗ;
	
	ТЗ = Новый ТаблицаЗначений();
		
	//Считываем столбцы
	Для Стр = 1 По Макет.ВысотаТаблицы Цикл
		Если Стр > 1 Тогда
			ТекСтр = ТЗ.Добавить();
		КонецЕсли;
		ПустаяСтрока = Истина;
		
		Для НомерСтолбца = 1 По Макет.ШиринаТаблицы Цикл
			
			Яч = Макет.Область(Стр, НомерСтолбца);
			
			Если Яч.СодержитЗначение Тогда
				Зн = Яч.Значение;
			Иначе
				Зн = Яч.Текст;
			КонецЕсли;
			
			Если ТипЗнч(Зн) = Тип("Строка") И ПустаяСтрока(Зн) Тогда
				Зн = Неопределено;
			КонецЕсли;
			
			//Добавляем столбец
			Если Стр = 1 Тогда
				ТЗ.Колонки.Добавить(Зн, Новый ОписаниеТипов("Строка"));
			Иначе
				ТекСтр[НомерСтолбца - 1] = Зн;                                        
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция ОкруглитьВБольшуюСторону(ОкрЧисло)
  
  Остаток = ОкрЧисло - Цел(ОкрЧисло);
  Возврат ?(Остаток = 0, ОкрЧисло, Цел(ОкрЧисло) + 1);
  
КонецФункции

Функция СоздатьЗаписьВКлассификаторе(ТекСтрокаТЗ, ИмяОбъектаМетаданных, ПоискПоКоду = Истина, Родитель = Неопределено, ЕдиницаПоКлассификатору = Неопределено, СтрокаДанных = Неопределено) Экспорт
	
	Если ИмяОбъектаМетаданных = "КлассификаторЕдиницИзмерения" Тогда
		
		ЕдИзм 							= Справочники[ИмяОбъектаМетаданных].СоздатьЭлемент();
		ЕдИзм.Код   					= ТекСтрокаТЗ.Код;
		ЕдИзм.Наименование 				= ТекСтрокаТЗ.УсловноеОбозначениеНациональное;
		ЕдИзм.НаименованиеПолное		= ТекСтрокаТЗ.НаименованиеЕдиницыИзмерения;
		
		Попытка
			ЕдИзм.Записать();
			Возврат ЕдИзм.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	ИначеЕсли ИмяОбъектаМетаданных = "ЕдиницыИзмерения" Тогда
		
		ЕдИзм 							= Справочники[ИмяОбъектаМетаданных].СоздатьЭлемент();
		ЕдИзм.ЕдиницаПоКлассификатору	= ЕдиницаПоКлассификатору;
		ЕдИзм.Наименование 				= ЕдиницаПоКлассификатору.Наименование;
		ЕдИзм.Владелец					= Родитель.Ссылка;
		ЕдИзм.Коэффициент				= 1;
		
		// вес, коэффициент (если это единица измерения мест) 
		Если НЕ СтрокаДанных = Неопределено Тогда
			ЕдИзм.Вес					= ?(СтрокаДанных.КолМест <> 0, СтрокаДанных.Брутто / СтрокаДанных.КолМест, 0);
			ЕдИзм.Коэффициент			= СтрокаДанных.Нетто / ?(СтрокаДанных.КолМест  <> 0, СтрокаДанных.КолМест, 1);
		КонецЕсли;
				
		Попытка
			ЕдИзм.Записать();
			Возврат ЕдИзм.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	ИначеЕсли ИмяОбъектаМетаданных = "КлассификаторСтранМира" Тогда
		НоваяСтрана 					= Справочники[ИмяОбъектаМетаданных].СоздатьЭлемент();
		НоваяСтрана.Код 				= ТекСтрокаТЗ.Код;
		НоваяСтрана.Наименование 		= ТекСтрокаТЗ.КраткоеНаименование;
		НоваяСтрана.НаименованиеПолное 	= ТекСтрокаТЗ.ПолноеНаименование;
		НоваяСтрана.КодАльфа2			= ТекСтрокаТЗ.КодАльфа2;
		
		Попытка
			НоваяСтрана.Записать();
			Возврат НоваяСтрана.Ссылка;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
 	КонецЕсли;
 
КонецФункции

// TODO: Разделить функцию на несколько логических блоков, чтобы было понятно где и что функция возвращает.
Функция СоздатьОрганизацию(Ящик) Экспорт
	
	Попытка
		ОргИнфо = ExchangeService.GetOrganizationByInnKpp(Токен, Ящик.Inn, Ящик.Kpp);
	Исключение
		Предупреждение("Не удалось получить информацию об организации");
		Результат = Ложь;
		Возврат Результат;
	КонецПопытки;
	
	НовОрг = Справочники.Организации.СоздатьЭлемент();
	МетаданныеОрг = НовОрг.Метаданные();
	
	НовОрг.Наименование = ОргИнфо.Name;
	
	Если ЕстьРеквизитСправочника("НаименованиеСокращенное", МетаданныеОрг) Тогда
		НовОрг.НаименованиеСокращенное = ОргИнфо.Name;
	КонецЕсли;
	НовОрг.НаименованиеПолное = ОргИнфо.LegalName;
	Если ЕстьРеквизитСправочника("ИностраннаяОрганизация", МетаданныеОрг) Тогда
		НовОрг.ИностраннаяОрганизация = ОргИнфо.IsForeignCompany;
	КонецЕсли;
	НовОрг.ЮрФизЛицо = ?(ОргИнфо.IsJuridical, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
	Если ОргИнфо.IsJuridical Тогда
		// Если юрлицо
		НовОрг.ИНН = ОргИнфо.Inn;
		НовОрг.КПП = ОргИнфо.Kpp;
		НовОрг.ОГРН = ОргИнфо.Ogrn;
	Иначе
		// Если ИП
		// Сперва создадим физлицо
		Попытка
			НовФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			МетаданныеФЛ = НовФизЛицо.Метаданные();
			НовФизЛицо.Наименование = ОргИнфо.LastName + " " + ОргИнфо.FirstName + " " + ОргИнфо.MiddleName;
			
			Если ЕстьРеквизитСправочника("ИНН", МетаданныеФЛ) Тогда
				НовФизЛицо.ИНН = ОргИнфо.Inn;
			КонецЕсли;
			НовФизЛицо.Записать();
			
			НовЗапись = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
			НовЗапись.Фамилия = ОргИнфо.LastName;
			НовЗапись.Имя = ОргИнфо.FirstName;
			НовЗапись.Отчество = ОргИнфо.MiddleName;
			НовЗапись.ФизЛицо = НовФизЛицо.Ссылка;
			НовЗапись.Период = НачалоГода(ТекущаяДата());
			НовЗапись.Записать(Истина);
			
			
			НовОрг.ОГРН = ОргИнфо.Ogrn;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Сообщить("Ошибка при создании физ.лица: " + ОписаниеОшибки);
			Результат = Ложь;
			Возврат Результат;
		КонецПопытки;
		
		// Заполним карточку организации			
		Если ЕстьРеквизитСправочника("ИндивидуальныйПредприниматель", МетаданныеОрг) Тогда
			НовОрг.ИндивидуальныйПредприниматель = НовФизЛицо.Ссылка;
		КонецЕсли;
		НовОрг.ИНН = ОргИнфо.Inn;
	КонецЕсли;
	
	Попытка
		НовОрг.ПроверитьЗаполнение();
		НовОрг.Записать();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить("Ошибка при создании организации: " + ОписаниеОшибки);
		Результат = Ложь;
		Возврат Результат;
	КонецПопытки;
	Организация = НовОрг.Ссылка;
		
	// Создание контактной информации
	НаборЗаписейКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();                                                             
	НаборЗаписейКИ.Отбор.Объект.Установить(?(ОргИнфо.IsJuridical, Организация, НовФизЛицо.Ссылка));
	НаборЗаписейКИ.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	НаборЗаписейКИ.Отбор.Вид.Установить(?(ОргИнфо.IsJuridical, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица));
	НаборЗаписейКИ.Прочитать();
	
	// Запись адреса
	ЗаписьКИ = НаборЗаписейКИ.Добавить(); 
	ЗаписьКИ.Объект = ?(ОргИнфо.IsJuridical, Организация, НовФизЛицо.Ссылка);
	ЗаписьКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ЗаписьКИ.Вид = ?(ОргИнфо.IsJuridical, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
	
	Если Не ОргИнфо.IsForeignCompany Тогда
		Syn_Адрес = ОргИнфо.LegalAddress;
		Syn_Представление = ?(Syn_Адрес.IsForeign, ОргИнфо.LegalAddress.ForeignStreetAddress, "");
		
		// Проверяем наличие региона по коду в РСВ "Адресный классификатор"
		Попытка
			КодРегионаЧислом = Число(Syn_Адрес.RegionCode);
		Исключение
			ОтправитьУведомлениеПользователю("Некорректный код региона");
		КонецПопытки;
		
		//Ищем регион в РСВ "Адресный классификатор по коду"
		Регион = "";
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Сокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1
		|	И АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде");
		Запрос.УстановитьПараметр("КодРегионаВКоде", КодРегионаЧислом);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Регион = Выборка.Наименование;
		Иначе
			ОтправитьУведомлениеПользователю("По коду региона " + Syn_Адрес.RegionCode + " не найден регион в РСВ <Адресный классификатор>." + Символы.ПС + "Проверьте код региона, либо загрузите адресный классификатор");
		КонецЕсли;
		
		ЗаписьКИ.Поле1 = Syn_Адрес.PostalCode;
		ЗаписьКИ.Поле2 = Регион;
		ЗаписьКИ.Поле3 = Syn_Адрес.District;
		ЗаписьКИ.Поле4 = Syn_Адрес.City;
		ЗаписьКИ.Поле5 = Syn_Адрес.locality;
		ЗаписьКИ.Поле6 = Syn_Адрес.Street;
		ЗаписьКИ.Поле7 = Syn_Адрес.House;
		ЗаписьКИ.Поле8 = Syn_Адрес.Building;
		ЗаписьКИ.Поле9 = Syn_Адрес.Apartment;
		ЗаписьКИ.Представление = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(ЗаписьКИ);
	Иначе
		Страна					= Справочники.КлассификаторСтранМира.НайтиПоКоду(ОргИнфо.LegalAddress.CountryCode).Наименование;
		ЗаписьКИ.Поле1			= ?(ЗначениеЗаполнено(Страна), Страна, ОргИнфо.LegalAddress.CountryCode);
		ЗаписьКИ.Представление 	= ОргИнфо.LegalAddress.ForeignStreetAddress;
	КонецЕсли;
	
	Попытка
		НаборЗаписейКИ.Записать();
		Результат = Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
		Результат = Ложь
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция МажорныйРелиз()
	
	СтрокаВерсии 	= Метаданные.Версия;
	МассивЭлементов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаВерсии, ".");
	
	Если МассивЭлементов.Количество() > 1 Тогда
		НомерРелиза = МассивЭлементов[МассивЭлементов.Количество() - 2];
	Иначе
		НомерРелиза = МассивЭлементов[0];
	КонецЕсли;
		
	Возврат Число(НомерРелиза);	
	
КонецФункции

// TODO: Избавиться от ком-компонент.
Функция ПолучитьКаталогИР() Экспорт
	
	Попытка
		Shell = Новый COMОбъект("WScript.Shell");
		APPDATA = Shell.ExpandEnvironmentStrings("%APPDATA%");
		КаталогИР = APPDATA + "\Synerdocs";
	Исключение
		ОписаниеОшибкиСтрокой = ОписаниеОшибки();
		Сообщить(ОписаниеОшибкиСтрокой);
		КаталогИР = КаталогВременныхФайлов() + "Synerdocs";
	КонецПопытки;
	
	Возврат КаталогИР;

КонецФункции


Функция КА_ЗапроситьПароль(userID) Экспорт
	
	Попытка
		KalugaAstralService.GetPassword(userID);
		Возврат Истина;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция КА_ПолучитьТокен(userID, password) Экспорт
	
	Попытка
		Результат = KalugaAstralService.GetSessionKeyBySms(userID, password);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция КА_Расшифровать(sessionKey, encryptedData) Экспорт
	
	Попытка
		Результат = KalugaAstralService.Decrypt(encryptedData, sessionKey);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция КА_Подписать(sessionKey, data) Экспорт
	
	Попытка
		Результат = KalugaAstralService.Sign(data, sessionKey);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция КА_ПодписатьХэш(sessionKey, hash) Экспорт
	
	ВызватьИсключение "Метод [КА_ПодписатьХэш] еще не реализован";
	
КонецФункции


Функция ПроверитьДоступностьОперации(ДоступныеОперации, Операция) Экспорт
	
	Если ДоступныеОперации = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Операция = "ПометитьПрочитан" Тогда
		КодОперации = 1;
	ИначеЕсли Операция = "ПометитьНеПрочитан" Тогда
		КодОперации = 2;
	ИначеЕсли Операция = "Подписать" Тогда
		КодОперации = 4;
	ИначеЕсли Операция = "Отказать" Тогда
		КодОперации = 8;
	ИначеЕсли Операция = "ОтправитьИсправление" Тогда
		КодОперации = 16;
	ИначеЕсли Операция = "ОтправитьКорректировку" Тогда
		КодОперации = 32;
	ИначеЕсли Операция = "Удалить" Тогда
		КодОперации = 64;
	ИначеЕсли Операция = "Ответить" Тогда
		КодОперации = 128;
	ИначеЕсли Операция = "Распечатать" Тогда
		КодОперации = 256;
	ИначеЕсли Операция = "Скачать" Тогда
		КодОперации = 512;
	ИначеЕсли Операция = "ПросмотретьРегламентныеДокументы" Тогда
		КодОперации = 1024;
	ИначеЕсли Операция = "ПодтвердитьПолучение" Тогда
		КодОперации = 2048;
	ИначеЕсли Операция = "Переместить" Тогда
		КодОперации = 4096;
	ИначеЕсли Операция = "Согласовать" Тогда
		КодОперации = 8192;
	ИначеЕсли Операция = "ОтказатьВСогласовании" Тогда
		КодОперации = 16384;
	ИначеЕсли Операция = "НастроитьПраваДоступа" Тогда
		КодОперации = 32768;
	ИначеЕсли Операция = "Переслать" Тогда
		КодОперации = 65536;
	ИначеЕсли Операция = "Аннулировать" Тогда
		КодОперации = 131072;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат КодОперации = БитИ(ДоступныеОперации, КодОперации);
	
КонецФункции

Функция БитИ(Число1, Число2) Экспорт
	
	Бит1 = Число_10_2(Число1);
	Бит2 = Число_10_2(Число2);
	Рез = "";
	
	Для Символ = 1 По СтрДлина(Бит1) Цикл
		Рез = Рез + Формат((Сред(Бит1, Символ, 1) + Сред(Бит2, Символ, 1) = "11"), "БЛ=0; БИ=1");
	КонецЦикла;
	
	Возврат Число_2_10(Рез);
	
КонецФункции

Функция Число_10_2(Знач Десятичное, Разрядность = 32) Экспорт

	Рез="";
	Пока Десятичное > 0 Цикл
		Рез = Строка(Десятичное%2) + Рез;
		Десятичное = Цел(Десятичное / 2);
	КонецЦикла;
	
	Для Сч = 1 По Разрядность - СтрДлина(Рез) Цикл
		Рез = "0" + Рез;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Функция Число_2_10(Знач Двоичное) Экспорт
	
	Рез = 0;
	Длина = СтрДлина(Двоичное);
	Для Символ = 0 По Длина - 1 Цикл
		Рез = Рез + Pow(2, Символ) * Число(Сред(Двоичное, Длина - Символ, 1));
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции


Функция Это837ИлиВыше()
	
	ВерсияПлатформы = ИнформацияОКонфигурации().ВерсияПлатформы;
	
	Разность = РазностьВерсий(ВерсияПлатформы, "8.3.7.0");
	
	Результат = (Разность >= 0);
	
	Возврат Результат;
	
КонецФункции

Функция РазностьВерсий(СтрокаВерсия1, СтрокаВерсия2)
	
	Версия1 = СтрРазделить2(СтрокаВерсия1, ".");
	Версия2 = СтрРазделить2(СтрокаВерсия2, ".");
	
	Разность = 0;
	Для Разряд = 0 По 3 Цикл
		
		Разность = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Разность <> 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Разность;
	
КонецФункции


Функция АннулироватьДокумент(ИДДокумента, ЭтоВходящий, ПричинаАннулирования) Экспорт
	
	КонтентПОА = СоздатьЭД_ПОА(ИДДокумента, ПричинаАннулирования);
	Если КонтентПОА = Неопределено Тогда
		Сообщить("Ошибка при формировании документа ""Предложение об аннулировании""");
		Возврат Ложь;
	КонецЕсли;
	
	ПодписьПОА = СформироватьЭЦПДокумента(Неопределено, КонтентПОА.Контент);
	Если ПодписьПОА = Неопределено Тогда
		Сообщить("Ошибка при подписании документа ""Предложение об аннулировании""");
		Возврат Ложь;
	КонецЕсли;
	
	ФабрикаСервиса = ExchangeService.ФабрикаXDTO;
	FullDocumentInfo = ExchangeService.GetFullDocumentInfo(Токен, Syn_ЯщикОрганизации, ИДДокумента, );
	ЯщикОтправителя = ?(ЭтоВходящий, FullDocumentInfo.From, FullDocumentInfo.To);
	
	// Объект Document
	Тип_Document = ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "Document");
	Document = ФабрикаСервиса.Создать(Тип_Document);
	Document.Comment = ПричинаАннулирования;
	Document.Content = КонтентПОА.Контент;
	Document.DocumentType = "RevocationOffer";
	Document.FileName = КонтентПОА.ИмяФайла + ".xml";
	Document.Id = Строка(Новый УникальныйИдентификатор());
	Document.Name = КонтентПОА.ИмяФайла;
	Document.NeedSign = Истина;
	Document.ParentDocumentId = ИДДокумента;
	
	// Объект ArrayOfDocument
	Тип_ArrayOfDocument = ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfDocument");
	ArrayOfDocument = ФабрикаСервиса.Создать(Тип_ArrayOfDocument);
	ArrayOfDocument.Document.Добавить(Document);
	
	// Объект Sign
	Sign = СоздатьОбъект_Sign(Document.Id, ПодписьПОА);
	
	// Объект ArrayOfSign
	Тип_ArrayOfSign = ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "ArrayOfSign");
	ArrayOfSign = ФабрикаСервиса.Создать(Тип_ArrayOfSign);
	ArrayOfSign.Sign.Добавить(Sign);
	
	// Объект Message
	Тип_Message = ФабрикаСервиса.Тип("http://schemas.datacontract.org/2004/07/Midway.ObjectModel", "Message");
	Message = ФабрикаСервиса.Создать(Тип_Message);
	Message.Documents = ArrayOfDocument;
	Message.From = Syn_ЯщикОрганизации;
	Message.Signs = ArrayOfSign;
	Message.To = ЯщикОтправителя;
	Message.Id = Строка(Новый УникальныйИдентификатор());
	
	Попытка
		Рез = ОтправитьСообщениеВСервисОбмена(Message);
		Возврат Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции


// Округляет в большую сторону, до целого
//
// Параметры:
//  Число	 - Число	 - Округляемое число
// 
// Возвращаемое значение:
//  Число - Целое число
//
Функция ОкрБол(Число) Экспорт
	
	ЦелаяЧасть = Цел(Число);
	
	Результат = ?(ЦелаяЧасть = Число, ЦелаяЧасть, ЦелаяЧасть + 1);
	
	Возврат Результат;
	
КонецФункции


// FIXME: Временное решение проблемы установки нужного неймспейса
Процедура УстановитьПространствоИмен(ПутьКФайлу, ПространствоИмен)
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ПутьКФайлу);
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	
	Найдено = Ложь;
	ЧтоЗаменить = "";
	
	Пока Чтение.Прочитать() Цикл
		
		Запись.ЗаписатьТекущий(Чтение);
		
		Если Чтение.Имя = "Файл" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ДобавитьСвое = Ложь;
			Если НЕ ЗначениеЗаполнено(Чтение.URIПространстваИмен) Тогда
				
				ДобавитьСвое = Истина;
				
			ИначеЕсли Чтение.URIПространстваИмен <> ПространствоИмен Тогда
				
				ДобавитьСвое = Истина;
				
				Найдено = Истина;
				ЧтоЗаменить = Чтение.URIПространстваИмен;
				
			КонецЕсли;
			
			Если ДобавитьСвое Тогда
				Запись.ЗаписатьСоответствиеПространстваИмен("", ПространствоИмен);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	Результат = Запись.Закрыть();
	
	Если Найдено Тогда
		
		Шаблон = "xmlns=""%1""";
		Паттерн = СтрШаблон2(Шаблон, ЧтоЗаменить);
		
		Результат = СтрЗаменить(Результат, Паттерн, "");
		
	КонецЕсли;
	
	Запись = Новый ЗаписьТекста;
	Запись.Открыть(ПутьКФайлу);
	
	Запись.ЗаписатьСтроку(Результат);
	
	Запись.Закрыть();
	
КонецПроцедуры


Функция ExchangeService() Экспорт
	
	// FIXME: Сделать правильно
	Если ExchangeService = Неопределено Тогда
		ПодключитьсяКВебСервисуSynerdocs();
	КонецЕсли;
	
	Возврат ExchangeService;
	
КонецФункции


Процедура ДобавитьВКеш(ИмяХранилища, Ключ, Значение) Экспорт
	
	Если _Кеш = Неопределено Тогда
		_Кеш = Новый Соответствие;
	КонецЕсли;
	
	Хранилище = _Кеш[ИмяХранилища];
	Если Хранилище = Неопределено Тогда
		Хранилище = Новый Соответствие;
		_Кеш.Вставить(ИмяХранилища, Хранилище);
	КонецЕсли;
	
	Хранилище.Вставить(Ключ, Значение);
	
КонецПроцедуры

Функция ПолучитьИзКеша(ИмяХранилища, Ключ) Экспорт
	
	Хранилище = Неопределено;
	Значение = Неопределено;
	
	Если _Кеш <> Неопределено Тогда
		Хранилище = _Кеш[ИмяХранилища];
	КонецЕсли;
	
	Если Хранилище <> Неопределено Тогда
		Значение = Хранилище[Ключ];
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции


// Возвращает форму множественного числа предмета исчисления
//
// Параметры:
// Количество - Число - Количество предмета исчисления
// Форма1 - Строка - Для чисел, заканчивающихся на 1, за исключением 11.
// Форма2 - Строка - Для чисел, заканчивающизся на 2-4, за исключением 12-14.
// Форма5 - Строка - Для всех остальных чисел.
// 
// Возвращаемое значение:
// Строка - Количество и предмет исчисления в нужной форме
//
Функция ФормаМнЧисла(Количество, Форма1, Форма2, Форма5) Экспорт
	
	Формы = Новый Массив();
	Формы.Добавить(Форма1);
	Формы.Добавить(Форма2);
	Формы.Добавить(Форма5);

	К = ?(Количество >= 0, Количество, -Количество);
	
	//Plural rule #7 (3 forms) https://developer.mozilla.org/en-US/docs/Mozilla/Localization/Localization_and_Plurals#Plural_rule_.237_.283_forms.29
	//Families: Slavic (Belarusian, Bosnian, Croatian, Serbian, Russian, Ukrainian)
	//ends in 1, excluding 11: 1, 21, 31, 41, 51, 61, 71, 81, 91, 101, 121, ...
	//ends in 2-4, excluding 12-14: 2, 3, 4, 22, 23, 24, 32, 33, 34, 42, 43, 44, 52, ...
	//everything else: 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, ...
	
	ИндексФормы = ?(К%10 = 1 И К%100 <> 11, 0, ?(К%10 >= 2 И К%10 <= 4 И (К%100 < 10 ИЛИ К%100 >= 20), 1, 2));

	Результат = Формат(Количество, "ЧДЦ=; ЧГ=") + " " + Формы[ИндексФормы];
	Возврат Результат;
	
КонецФункции


Функция ФиксированныеДанные(Данные) Экспорт
	
	ТипДанных = ТипЗнч(Данные);
	
	ЭтоСтруктура	= ТипДанных = Тип("Структура");
	ЭтоСоответствие	= ТипДанных = Тип("Соответствие");
	ЭтоМассив		= ТипДанных = Тип("Массив");
	
	Если ЭтоСтруктура ИЛИ ЭтоСоответствие Тогда
	
		Если ЭтоСтруктура Тогда
			Коллекция = Новый Структура;
		ИначеЕсли ЭтоСоответствие Тогда
			Коллекция = Новый Соответствие;
		КонецЕсли;
	
		Для Каждого Элемент Из Данные Цикл //: Данные = Новый Структура;
			Значение = ФиксированныеДанные(Элемент.Значение);
			Коллекция.Вставить(Элемент.Ключ, Значение);
		КонецЦикла;
		
		Если ЭтоСтруктура Тогда
			Результат = Новый ФиксированнаяСтруктура(Коллекция);
		ИначеЕсли ЭтоСоответствие Тогда
			Результат = Новый ФиксированноеСоответствие(Коллекция);
		КонецЕсли;
	
	ИначеЕсли ЭтоМассив Тогда
	
		Массив = Новый Массив;
	
		Для Каждого Элемент Из Данные Цикл
			Значение = ФиксированныеДанные(Элемент);
			Массив.Добавить(Значение);
		КонецЦикла;
	
		Результат = Новый ФиксированныйМассив(Массив);
	
	Иначе
	
		Результат = Данные;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НеФиксированныеДанные(Данные) Экспорт
	
	ТипДанных = ТипЗнч(Данные);
	
	ЭтоСтруктура	= ТипДанных = Тип("ФиксированнаяСтруктура");
	ЭтоСоответствие	= ТипДанных = Тип("ФиксированноеСоответствие");
	ЭтоМассив		= ТипДанных = Тип("ФиксированныйМассив");
	
	Если ЭтоСтруктура ИЛИ ЭтоСоответствие Тогда
		
		Если ЭтоСтруктура Тогда
			Коллекция = Новый Структура;
		ИначеЕсли ЭтоСоответствие Тогда
			Коллекция = Новый Соответствие;
		КонецЕсли;
		
		Для Каждого Элемент Из Данные Цикл //: Данные = Новый ФиксированнаяСтруктура;
			Значение = НеФиксированныеДанные(Элемент.Значение);
			Коллекция.Вставить(Элемент.Ключ, Значение);
		КонецЦикла;
		
		Результат = Коллекция;
		
	ИначеЕсли ЭтоМассив Тогда
		
		Массив = Новый Массив;
		
		Для Каждого Элемент Из Данные Цикл
			Значение = НеФиксированныеДанные(Элемент);
			Массив.Добавить(Значение);
		КонецЦикла;
		
		Результат = Массив;
		
	Иначе
		
		Результат = Данные;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьСоответствие(Приемник, Источник) Экспорт
	
	//: Приемник = Новый Соответствие; Источник = Новый Соответствие;
	
	Для Каждого Элемент Из Источник Цикл
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктуру(Приемник, Источник) Экспорт
	
	Для Каждого Элемент Из Источник Цикл
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьМассив(Приемник, Источник) Экспорт
	
	//: Источник = Новый Массив; Приемник = Источник;
	Для Каждого Элемент Из Источник Цикл
		Приемник.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

Функция СкопироватьМассив(Источник) Экспорт
	
	Копия = Новый Массив;
	ДополнитьМассив(Копия, Источник);
	
	Возврат Копия;
	
КонецФункции

Процедура ДополнитьТаблицу(Приемник, Источник, СписокКолонок = Неопределено, ИсключаяКолонки = Неопределено) Экспорт
	
	//: Приемник = Новый ТаблицаЗначений;
	Для Каждого СтрокаТЗ Из Источник Цикл
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), СтрокаТЗ, СписокКолонок, ИсключаяКолонки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицу(Приемник, Источник, СписокКолонок = Неопределено, ИсключаяКолонки = Неопределено) Экспорт
	
	//: Приемник = Новый ТаблицаЗначений;
	
	Приемник.Очистить();
	ДополнитьТаблицу(Приемник, Источник, СписокКолонок, ИсключаяКолонки);
	
КонецПроцедуры

Процедура УдалитьСтрокиТаблицы(Таблица, МассивСтрокИлиОтбор) Экспорт
	
	//: Таблица = Новый ТаблицаЗначений;
	
	Если ТипЗнч(МассивСтрокИлиОтбор) = Тип("Массив") Тогда
		МассивСтрок = МассивСтрокИлиОтбор;
	Иначе
		Отбор = МассивСтрокИлиОтбор;
		МассивСтрок = Таблица.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		Таблица.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеВМассиве(Значение) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Значение);
	
	Возврат Массив;
	
КонецФункции

Функция ЗначенияВМассиве(
		Значение0,
		Значение1 = Неопределено,
		Значение2 = Неопределено,
		Значение3 = Неопределено,
		Значение4 = Неопределено,
		Значение5 = Неопределено,
		Значение6 = Неопределено,
		Значение7 = Неопределено,
		Значение8 = Неопределено,
		Значение9 = Неопределено,
		Значение10 = Неопределено,
		Значение11 = Неопределено,
		Значение12 = Неопределено) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Значение0);
	Массив.Добавить(Значение1);
	Массив.Добавить(Значение2);
	Массив.Добавить(Значение3);
	Массив.Добавить(Значение4);
	Массив.Добавить(Значение5);
	Массив.Добавить(Значение6);
	Массив.Добавить(Значение7);
	Массив.Добавить(Значение8);
	Массив.Добавить(Значение9);
	Массив.Добавить(Значение10);
	Массив.Добавить(Значение11);
	Массив.Добавить(Значение12);
	
	Сч = Массив.Количество();
	Пока Сч > 0 Цикл
	
		Сч = Сч - 1;
		
		Элемент = Массив[Сч];
		Если Элемент = Неопределено Тогда
			Массив.Удалить(Сч);
		КонецЕсли;
		
	КонецЦикла;
			
	Возврат Массив;
			
КонецФункции

//========================================================================
// МОДУЛИ И КЛАССЫ
//========================================================================

Функция ТребуютсяМодули(ИменаМодулей) Экспорт
			
	Модули = Новый Структура;

	СписокМодулей = СтрРазделить2(ИменаМодулей, ",", Ложь, Истина);
	Для Каждого ИмяМодуля Из СписокМодулей Цикл
		Модуль = Модуль(ИмяМодуля);
		Модули.Вставить(ИмяМодуля, Модуль);
	КонецЦикла;
		
	Модули = Новый ФиксированнаяСтруктура(Модули);

	Возврат Модули;

КонецФункции

// Получает модуль ИР по имени.
//
// Параметры:
//  ИмяМодуля	 - Строка - имя модуля, модули являются формами ИР и начинаются с префикса "Модуль_".
// 
// Возвращаемое значение:
//  Форма - модуль ИР.
//
Функция Модуль(ИмяМодуля) Экспорт
	
	ХранилищеМодулей = "Модули";
	
	Модуль = ПолучитьИзКеша(ХранилищеМодулей, ИмяМодуля);
	Если Модуль <> Неопределено Тогда
		Возврат Модуль;
	КонецЕсли;
	
	Модуль = ПолучитьФорму(ИмяМодуля);
		
	Если Модуль = Неопределено Тогда
		ТекстИсключения = СтрШаблон2("Модуль не найден: %1", ИмяМодуля);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Модуль.Инициализировать();
		
	ДобавитьВКеш(ХранилищеМодулей, ИмяМодуля, Модуль);
	
	Возврат Модуль;
	
КонецФункции

// Семантическая конструкция для реализации наследования.
//
// Параметры:
//  Объект		 - Структура, ТаблицаЗначений - объект, от которого происходит наследование.
//  Расширение	 - Структура, ТаблицаЗначений - добавляемые в объект свойства.
//
Процедура РасширитьОбъект(Объект, Расширение) Экспорт
		
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("Структура") Тогда
	
		ДополнитьСтруктуру(Объект, Расширение);
	
	ИначеЕсли ТипОбъекта = Тип("ТаблицаЗначений") Тогда
	
		//: Объект = Новый ТаблицаЗначений; Расширение = Объект;
	
		Для Каждого Колонка Из Расширение.Колонки Цикл
			Объект.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
	
	Иначе
	
		ТекстИсключения = СтрШаблон2("Не реализовано для '%1'", ТипОбъекта);
		ВызватьИсключение ТекстИсключения;
	
	КонецЕсли;
	
КонецПроцедуры


// Создает перечисление
//
// Параметры:
//  Значения		 - Структура - ключи и значения перечисления.
//  Представление	 - Соответствие - представление значений перечисления.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - перечисление.
//
Функция Новый_Перечисление(Значения, Представление = Неопределено) Экспорт
	
	Перечисление = Новый Структура(
		"_Представление"
	);
	
	РасширитьОбъект(Перечисление, Значения);
	
	Если Представление <> Неопределено Тогда
		Перечисление._Представление = Новый ФиксированноеСоответствие(Представление);
	КонецЕсли;
	
	Перечисление = Новый ФиксированнаяСтруктура(Перечисление);
	Возврат Перечисление;
	
КонецФункции

Функция ЭтоСлужебныйКлючПеречисления(Ключ)
	
	Результат = Ложь
		ИЛИ Ключ = "_Представление";
	
	Возврат Результат;
	
КонецФункции

// Получает все значений перечисления.
//
// Параметры:
//  Перечисление - ФиксированнаяСтруктура - перечисление, значения которого надо получить.
// 
// Возвращаемое значение:
//  Массив - значения перечисления.
//
Функция ВсеЗначенияПеречисления(Перечисление) Экспорт
	
	Значения = Новый Массив;
	
	Для Каждого Элемент Из Перечисление Цикл
		
		Если ЭтоСлужебныйКлючПеречисления(Элемент.Ключ) Тогда
			Продолжить;
		КонецЕсли;
			
		Значения.Добавить(Элемент.Значение);
			
	КонецЦикла;
			
	Возврат Значения;
			
КонецФункции

// Получает представление значения перечисления.
//
// Параметры:
//  Перечисление		 - ФиксированнаяСтруктура - перечисление.
//  ЗначениеПеречисления - Произвольный - значение перечисления, представление которого надо получить.
// 
// Возвращаемое значение:
//  Строка - представление значения перечисления.
//
Функция ПредставлениеПеречисления(Перечисление, ЗначениеПеречисления) Экспорт
		
	Если Перечисление._Представление = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Представление = Перечисление._Представление.Получить(ЗначениеПеречисления);
	
	Возврат Представление;
	
КонецФункции

// Формирует список значений, значение элемента которого это значение перечисления,
// а представления - представления значения перечисления.
//
// Параметры:
//  Перечисление				 - ФиксированнаяСтруктура - перечисление.
//  МассивЗначенийПеречисления	 - Массив - фильтр, ограничивающий значения перечисления,
// 									попадающие в формируемый список.
// 
// Возвращаемое значение:
//  СписокЗначений - сформированный список значений.
//
Функция СписокЗначенийИзПеречисления(Перечисление, Знач МассивЗначенийПеречисления = Неопределено) Экспорт
	
	Список = Новый СписокЗначений;
	
	Если МассивЗначенийПеречисления = Неопределено Тогда
		МассивЗначенийПеречисления = ВсеЗначенияПеречисления(Перечисление);
	КонецЕсли;
	
	Для Каждого Значение Из МассивЗначенийПеречисления Цикл
		Список.Добавить(
			Значение,
			ПредставлениеПеречисления(Перечисление, Значение)
			);
		КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Определяет является ли значение одним из значений указанного перечисления.
//
// Параметры:
//  Значение	 - Произвольный - значение.
//  Перечисление - ФиксированнаяСтруктура - перечисление.
// 
// Возвращаемое значение:
//  Булево - значение является частью перечисления.
//
Функция ЗначениеПринадлежитПеречислению(Значение, Перечисление) Экспорт
	
	Результат = Ложь;
	
	Для Каждого Элемент Из Перечисление Цикл
		
		Если ЭтоСлужебныйКлючПеречисления(Элемент.Ключ) Тогда
			Продолжить;
		КонецЕсли;
	
		Если Значение = Элемент.Значение Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Получает первое значение из списка значений или Неопределено, если список пустой.
//
// Параметры:
//  Список	 - СписокЗначений - список значений.
// 
// Возвращаемое значение:
//  Произвольный - значение первого элемента списка.
//
Функция ПервоеЗначениеИзСписка(Список) Экспорт
	
	Если Список.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПервыйЭлемент = Список[0];
	Значение = ПервыйЭлемент.Значение;
	
	Возврат Значение;
	
КонецФункции

// Проверяет, что значение есть в списке значений.
// TODO: Универсальный метод для проверки вхождения в какую-то коллекцию
//
// Параметры:
//  Список	 - СписокЗначений - список значений.
//  Значение - Произвольный - значение, которое возможно находится в списке.
// 
// Возвращаемое значение:
//  Булево - значение есть в списке.
//
Функция ЗначениеЕстьВСписке(Список, Значение) Экспорт
	
	//: Список = Новый СписокЗначений;
	
	ЭлементСписка = Список.НайтиПоЗначению(Значение);
	Результат = (ЭлементСписка <> Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Проверяет, что значение есть в массиве.
//
// Параметры:
//  Массив	 - Массив - массив.
//  Значение - Произвольный - значение, которое возможно находится в списке.
// 
// Возвращаемое значение:
//  Булево - значение есть в массиве.
//
Функция ЗначениеЕстьВМассиве(Массив, Значение) Экспорт
	
	//: Массив = Новый Массив;
	
	ИндексЭлемента = Массив.Найти(Значение);
	Результат = (ИндексЭлемента <> Неопределено);
	
	Возврат Результат;
	
КонецФункции


// Возвращает пустую не заполненную дату, начало времен по календарю 1С.
// 
// Возвращаемое значение:
//  Дата - Дата(1, 1, 1).
//
Функция ПустаяДата() Экспорт
	
	Возврат Дата(1, 1, 1);
	
КонецФункции


// Приводит число к указанному интервалу, чтобы оно было не больше и не меньше указанных границ.
//
// Параметры:
//  Число	 - Число - число.
//  Минимум	 - Число - нижняя граница интервала.
//  Максимум - Число - верхняя граница интервала.
// 
// Возвращаемое значение:
//  Число - приведенное число.
//
Функция ПривестиКИнтервалу(Число, Минимум, Максимум) Экспорт
	
	Результат = Макс(Минимум, Мин(Максимум, Число));
	
	Возврат Результат;
	
КонецФункции

// Проверет переданные значения на заполненность и возвращает заполненное.
//
// Параметры:
//  Значение1	 - Произвольный - значение 1.
//  Значение2	 - Произвольный - значение 2.
// 
// Возвращаемое значение:
//  Произвольный - заполненное значение.
//
Функция ЗаполненноеЗначение(Значение1, Значение2) Экспорт
	
	Результат = ?(ЗначениеЗаполнено(Значение1), Значение1, Значение2);
	
	Возврат Результат;
	
КонецФункции

// Возвращает Неопределено, если переданное значение не заполнено (пустая строка, например, или 0)
// или само значение, если оно заполнено.
//
// Параметры:
//  Значение - Произвольный - значение.
// 
// Возвращаемое значение:
//  Произвольный - Неопределено или исходное значение.
//
Функция НеопределеноЕслиНеЗаполнено(Значение) Экспорт
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Результат = Значение;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ВерсияИР() Экспорт
	
	Возврат ЭтотОбъект.Метаданные().Комментарий;
	
КонецФункции

Функция ИнформацияОКонфигурации() Экспорт
	
	Информация = Новый Структура(
		"Имя, Версия,
		|ВерсияПлатформы,
		|ИдентификаторПользователя"
	);
	
	СИ = Новый СистемнаяИнформация;
	Информация.ВерсияПлатформы = СИ.ВерсияПриложения;
	
	Информация.Имя		= Метаданные.Имя;
	Информация.Версия	= Метаданные.Версия;
	
	Информация.ИдентификаторПользователя = Пользователи.ТекущийПользователь().УникальныйИдентификатор();
	
	Информация = ФиксированныеДанные(Информация);
	
	Возврат Информация;
	
КонецФункции


// Получает имя открытой формы.
// Если форма закрыта или еще не открывалась, получить её имя невозможно.
// Формы обработки, имена которых начинаются с "Модуль_" не являются формами
// и поэтому их имя получить тоже невозможно.
//
// Параметры:
//  Форма	 - Форма - открытая форма, имя которой надо получить.
// 
// Возвращаемое значение:
//  Строка, Неопределено - имя формы.
//
Функция ПолучитьИмяФормы(Форма) Экспорт
	
	//: Форма = ПолучитьФорму();
	
	Если НЕ Форма.Открыта() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Найдена		= Ложь;
	ВсеФормыИР	= ЭтотОбъект.Метаданные().Формы;
	Для Каждого МетаФормаИР Из ВсеФормыИР Цикл
		
		ИмяФормы = МетаФормаИР.Имя;
		
		Если СтрНачинаетсяС2(ИмяФормы, "Модуль_") Тогда
			Продолжить;
		КонецЕсли;
		
		ФормаИР = ЭтотОбъект.ПолучитьФорму(ИмяФормы, Форма.ВладелецФормы, Форма.КлючУникальности);
		Если ФормаИР = Форма Тогда
			Найдена = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Найдена Тогда
		ИмяФормы = "";
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции


// Строковое представление даты по умолчанию.
//
// Параметры:
//  Дата - Дата	 - дата.
// 
// Возвращаемое значение:
//  Строка - представление даты в нужном формате.
//
Функция ПредставлениеДаты(Дата) Экспорт
	
	ФорматДаты = "ДФ=дд.ММ.гггг";
	Представление = Формат(Дата, ФорматДаты);
	
	Возврат Представление;
	
КонецФункции

// Строковое представление документ в виде "Наименование № Номер от Дата", не заполненные части пропускаются.
//
// Параметры:
//  Наименование - Строка	 - имя/наименование документа.
//  Номер		 - Строка	 - номер документа.
//  Дата		 - Дата		 - дата документа.
// 
// Возвращаемое значение:
//  Строка - сформированное представление документа.
//
Функция ПредставлениеДокумента(Наименование = Неопределено, Номер = Неопределено, Дата = Неопределено, НомерИДатаОбязательны = Ложь) Экспорт
	
	Разделитель = " ";
	
	Представление = Неопределено;
	
	СформироватьПредставление = Истина;
	Если НомерИДатаОбязательны Тогда
		СформироватьПредставление = ЗначениеЗаполнено(Номер) И ЗначениеЗаполнено(Дата);
	КонецЕсли;
	
	Если СформироватьПредставление Тогда
		Представление = СтрПредставление(Разделитель, 
			Наименование,,
			Номер, "№ %1",
			ПредставлениеДаты(Дата), "от %1"
		);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции


// Формирует представление переданных значений в виде списка с разделителем, пустые значения пропускаются.
//
// Параметры:
//  Разделитель	 - Строка		 - разделитель списка.
//  Значение1	 - Произвольное	 - значение списка.
//  Шаблон1		 - Строка		 - шаблон в формате СтрШаблон(), на место %1 будет подставлено соответствующее значение.
//  Значение2	 - Произвольное	 - значение списка.
//  Шаблон2		 - Строка		 - шаблон в формате СтрШаблон(), на место %1 будет подставлено соответствующее значение.
//  Значение3	 - Произвольное	 - значение списка.
//  Шаблон3		 - Строка		 - шаблон в формате СтрШаблон(), на место %1 будет подставлено соответствующее значение.
//  Значение4	 - Произвольное	 - значение списка.
//  Шаблон4		 - Строка		 - шаблон в формате СтрШаблон(), на место %1 будет подставлено соответствующее значение.
//  Значение5	 - Произвольное	 - значение списка.
//  Шаблон5		 - Строка		 - шаблон в формате СтрШаблон(), на место %1 будет подставлено соответствующее значение.
//  Значение6	 - Произвольное	 - значение списка.
//  Шаблон6		 - Строка		 - шаблон в формате СтрШаблон(), на место %1 будет подставлено соответствующее значение.
//  Значение7	 - Произвольное	 - значение списка.
//  Шаблон7		 - Строка		 - шаблон в формате СтрШаблон(), на место %1 будет подставлено соответствующее значение.
//  Значение8	 - Произвольное	 - значение списка.
//  Шаблон8		 - Строка		 - шаблон в формате СтрШаблон(), на место %1 будет подставлено соответствующее значение.
//  Значение9	 - Произвольное	 - значение списка.
//  Шаблон9		 - Строка		 - шаблон в формате СтрШаблон(), на место %1 будет подставлено соответствующее значение.
// 
// Возвращаемое значение:
//  Строка - сформированное строковое представление.
//
Функция СтрПредставление(
	Разделитель, 
	Значение1, Шаблон1 = Неопределено, 
	Значение2 = Неопределено, Шаблон2 = Неопределено, 
	Значение3 = Неопределено, Шаблон3 = Неопределено, 
	Значение4 = Неопределено, Шаблон4 = Неопределено, 
	Значение5 = Неопределено, Шаблон5 = Неопределено, 
	Значение6 = Неопределено, Шаблон6 = Неопределено, 
	Значение7 = Неопределено, Шаблон7 = Неопределено, 
	Значение8 = Неопределено, Шаблон8 = Неопределено, 
	Значение9 = Неопределено, Шаблон9 = Неопределено) Экспорт
	
	КоличествоПар = 9;
	
	Значения = Новый Массив;
	Шаблоны = Новый Массив;
	
	Значения.Добавить(Значение1);
	Значения.Добавить(Значение2);
	Значения.Добавить(Значение3);
	Значения.Добавить(Значение4);
	Значения.Добавить(Значение5);
	Значения.Добавить(Значение6);
	Значения.Добавить(Значение7);
	Значения.Добавить(Значение8);
	Значения.Добавить(Значение9);
	
	Шаблоны.Добавить(Шаблон1);
	Шаблоны.Добавить(Шаблон2);
	Шаблоны.Добавить(Шаблон3);
	Шаблоны.Добавить(Шаблон4);
	Шаблоны.Добавить(Шаблон5);
	Шаблоны.Добавить(Шаблон6);
	Шаблоны.Добавить(Шаблон7);
	Шаблоны.Добавить(Шаблон8);
	Шаблоны.Добавить(Шаблон9);
	
	Представление = Новый Массив;
	Для Сч = 0 По КоличествоПар - 1 Цикл
		
		Значение	= Значения[Сч];
		Шаблон		= Шаблоны[Сч];
		
		ЧастьПредставления = Строка(Значение);
		Если ПустаяСтрока(ЧастьПредставления) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Шаблон <> Неопределено Тогда
			ЧастьПредставления = СтрШаблон2(Шаблон, ЧастьПредставления);
		КонецЕсли;
		
		Представление.Добавить(ЧастьПредставления);
		
	КонецЦикла;
	
	Результат = СтрСоединить2(Представление, Разделитель, Ложь);
	
	Возврат Результат;
	
КонецФункции


// TODO: Костылик для того чтобы избавиться от глобальной переменной Сертификат.
//			Нужно избавится от обращения к сертификату без надобности и перенести его получение в модуль криптографии.
Функция ТекущийСертификат() Экспорт
	
	Возврат Сертификат;
	
КонецФункции

Функция УстановитьТекущийСертфикат(НовыйСертификат) Экспорт
	
	Сертификат = НовыйСертификат;
	
КонецФункции


// Меняет местами ключ и значение в соответствии.
//
// Параметры:
//  Соответствие - Соответствие - исходное соответствие.
// 
// Возвращаемое значение:
//  Соответствие - инвертированное соответствие.
//
Функция ИнвертироватьСоответствие(Соответствие) Экспорт
	
	//: Соответствие = Новый Соответствие;
	
	Результат = Новый Соответствие;
	Для Каждого Элемент Из Соответствие Цикл
		Результат.Вставить(Элемент.Значение, Элемент.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Вспомогательная функция для заполнения полей ТЧ корректировки
//
// Параметры:
//  ИменаПолей	 - Строка	 - список имен полей, через запятую.
//  Суффиксы	 - Строка	 - список суффиков, через запятую.
//  ПростыеСуффиксы - Булево - если истина, то суффиксы могут быть ключами структуры,
// 								и возвращаемое значение буде структурой,
// 								иначе будет соответствием.
// 
// Возвращаемое значение:
//  Структура, Соответствие - вспомогательный объект, содержит имена полей с суффиксами
//
// Пример:
//  Результат = ПоляССуффиксами("СуммаНДС, СуммаБезНДС", "До, После");
//  Результат.До.СуммаНДС		== "СуммаНДСДо"
//  Результат.До.СуммаБезНДС	== "СуммаБезНДСДо"
//  Результат.После.СуммаНДС	== "СуммаНДСПосле"
//  Результат.После.СуммаБезНДС	== "СуммаБезНДСПосле"
//
Функция ПоляССуффиксами(ИменаПолей, Суффиксы, ПростыеСуффиксы = Истина) Экспорт
	
	Если ПростыеСуффиксы Тогда
		Результат = Новый Структура(Суффиксы);
	Иначе
		Результат = Новый Соответствие;
	КонецЕсли;
	
	Поля = СтрРазделить2(ИменаПолей, ",", Истина, Истина);
	СписокСуффиксов = СтрРазделить2(Суффиксы, ",", Истина, Истина);
	
	Для Каждого Суффикс Из СписокСуффиксов Цикл
		
		ПоляССуффиксом = Новый Структура(ИменаПолей);
		Для Каждого Поле Из Поля Цикл
			ПоляССуффиксом[Поле] = Поле + Суффикс;
		КонецЦикла;
		
		Результат[Суффикс] = ПоляССуффиксом;
		
	КонецЦикла;
	
	Результат = ФиксированныеДанные(Результат);
	Возврат Результат;
		
КонецФункции

// Устанавливает значение отбора построителя запроса.
//
// Параметры:
//  Построитель	 - ПостроительЗапроса - построитель.
//  Отбор		 - Структура - имена и значения устанавливаемых элементов отбора,
// 						значением элемента может быть массив, тогда вид отбора будет ВСписке.
//
Процедура УстановитьОтборПостроителя(Построитель, Отбор) Экспорт
	
	//: Построитель = Новый ПостроительЗапроса;
	//: Отбор = Новый Структура;
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		
		Если ЭлементОтбора.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив") Тогда
			Значение = Новый СписокЗначений;
			Значение.ЗагрузитьЗначения(ЭлементОтбора.Значение);
		Иначе
			Значение = ЭлементОтбора.Значение;
		КонецЕсли;
		
		НовыйОтбор = Построитель.Отбор.Добавить(ЭлементОтбора.Ключ);
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			НовыйОтбор.Использование	= Истина;
			НовыйОтбор.ВидСравнения		= ВидСравнения.ВСписке;
			НовыйОтбор.Значение			= Значение;
		Иначе
			НовыйОтбор.Установить(Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет элемент отбора построителя и возвращает созданный элемент отбора.
//
// Параметры:
//  Построитель	 - ПостроительЗапроса - построитель.
//  ПутьКДанным	 - Строка - путь к данным, по которым будет установлен отбор.
//  Значение	 - Произвольный - значение отбора.
//  Сравнение	 - ВидСравнения - вид сравнения элемента отбора.
// 
// Возвращаемое значение:
//  ЭлементОтбора - добавленный элемент отбора.
//
Функция ДобавитьОтборПостроителя(Построитель, ПутьКДанным, Значение, Знач Сравнение = Неопределено) Экспорт
	
	//: Построитель = Новый ПостроительЗапроса;
	
	Если Сравнение = Неопределено Тогда
		Сравнение = ВидСравнения.Равно;
	КонецЕсли;
	
	НовыйОтбор = Построитель.Отбор.Добавить(ПутьКДанным);
	НовыйОтбор.Использование	= Истина;
	НовыйОтбор.ВидСравнения		= Сравнение;
	НовыйОтбор.Значение			= Значение;
	
	Возврат НовыйОтбор;
	
КонецФункции


// Проверка заполненности реквизитов формы.
// Стандартная проверка заполнения не работает так, как надо, поэтому для проверки заполненности
// полей формы нужно использовать эту функцию.
//
// Параметры:
//  Форма	 - Форма - форма, для которой производится проверка заполнения.
// 						У формы должна быть экспортная функция ПроверяемыеРеквизиты(), возвращающая список значений,
// 						значение которого указывает на проверяемое поле, а представление - представление, выводимое пользователю.
// 						Так же у формы должен быть назначен стандартный обработчик проверки заполнения, он должен быть экспортным.
// 
// Возвращаемое значение:
//  Булево - проверяемые реквизиты заполнены.
// 
// Пример:
//		Функция ПроверяемыеРеквизиты() Экспорт
//			
//			Поля = Новый СписокЗначений;
//			
//			Поля.Добавить("СодержаниеОперации", "Содержание операции");
//			
//			// Формат полей табличных частей
//			// Значение = "ИмяТабЧасти.ИмяКолонки"
//			// Представление = Представление табличной части#Представление колонки"
//			ПредставлениеТЧ = НСтр("ru = 'Дополнительная информация'");
//			Поля.Добавить("ДопИнфо.Поле",     ПредставлениеТЧ + НСтр("ru = '#Поле'"));
//			Поля.Добавить("ДопИнфо.Значение", ПредставлениеТЧ + НСтр("ru = '#Значение'"));
//			
//			Возврат Поля;
//			
//		КонецФункции
//
//		Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты) Экспорт
//			
//			НепроверяемыеРеквизиты = Новый Массив;
//			
//			Если НеПроверятьСодержание Тогда
//				НепроверяемыеРеквизиты.Добавить("СодержаниеОперации");
//			КонецЕсли;
//			
//			УдалитьНепроверяемыеРеквизиты(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
//			
//		КонецПроцедуры
//
//		Если НЕ ПроверитьЗаполнениеФормы(ЭтаФорма) Тогда
// 			...
//		КонецЕсли;
//
Функция ПроверитьЗаполнениеФормы(Форма) Экспорт 
	
	РазделительИмени			= ".";
	РазделительПредставления	= "#";
	
	ШаблонПолеНеЗаполнено		= НСтр("ru = 'Поле ""%1"" не заполнено'");
	ШаблонКолонкаНеЗаполнена	= НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
	
	ПроверяемыеПоля = Форма.ПроверяемыеРеквизиты(); //: ПроверяемыеПоля = Новый СписокЗначений;
	
	Отказ = Ложь;
	ПроверяемыеРеквизиты = ПроверяемыеПоля.ВыгрузитьЗначения();
	
	Форма.ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты);
	
	СписокТЧ = Новый Соответствие;
	
	Сч = ПроверяемыеПоля.Количество();
	Пока Сч > 0 Цикл
		
		Сч = Сч - 1;
		Поле = ПроверяемыеПоля[Сч];
		
		Если НЕ ЗначениеЕстьВМассиве(ПроверяемыеРеквизиты, Поле.Значение) Тогда
			ПроверяемыеПоля.Удалить(Поле);
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяПоля = СтрРазделить2(Поле.Значение, РазделительИмени); //: ИмяПоля = Новый Массив;
		
		ЭтоПолеТЧ = (ПолноеИмяПоля.Количество() > 1);
		Если ЭтоПолеТЧ Тогда
			
			ИмяТЧ	= ПолноеИмяПоля[0];
			ИмяПоля	= ПолноеИмяПоля[1];
			
			ПоляТЧ = СписокТЧ[ИмяТЧ];
			Если ПоляТЧ = Неопределено Тогда
				ПоляТЧ = Новый СписокЗначений;
				СписокТЧ[ИмяТЧ] = ПоляТЧ;
			КонецЕсли;
			
			ПоляТЧ.Добавить(ИмяПоля, Поле.Представление);
			
			ПроверяемыеПоля.Удалить(Поле);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоляЗаполнены = Истина;
	
	Для Каждого Поле Из ПроверяемыеПоля Цикл
		
		Значение = Форма[Поле.Значение];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			
			ПоляЗаполнены = Ложь;
			
			ТекстСообщения = СтрШаблон2(ШаблонПолеНеЗаполнено, Поле.Представление);
			Сообщить(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТЧ Из СписокТЧ Цикл
		
		ИмяТЧ = ТЧ.Ключ;
		ПоляТЧ = ТЧ.Значение; //: ПоляТЧ = Новый СписокЗначений;
		
		Таблица = Форма[ИмяТЧ]; //: Таблица = Новый ТаблицаЗначений;
		Для Каждого СтрокаТЧ Из Таблица Цикл
			
			НомерСтроки = Таблица.Индекс(СтрокаТЧ) + 1;
			Для Каждого Поле Из ПоляТЧ Цикл
				
				Значение = СтрокаТЧ[Поле.Значение];
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					
					ПоляЗаполнены = Ложь;
					
					Представление = СтрРазделить2(Поле.Представление, РазделительПредставления);
					ТекстСообщения = СтрШаблон2(ШаблонКолонкаНеЗаполнена, Представление[1], НомерСтроки, Представление[0]);
					Сообщить(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ФормаЗаполнена = НЕ Отказ И ПоляЗаполнены;
	
	Возврат ФормаЗаполнена;
	
КонецФункции

// Удаляет из ПроверяемыеРеквизиты элементы соответствующие именам реквизитов из НепроверяемыеРеквизиты.
// Для использовани в обработчиках события ОбработкаПроверкиЗаполнения.
//
// Параметры:
//  ПроверяемыеРеквизиты	 - Массив - проверяемые реквизиты.
//  НепроверяемыеРеквизиты	 - Массив - массив строк с именами реквизитов, не требующих проверки.
//
Процедура УдалитьНепроверяемыеРеквизиты(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты) Экспорт
	
	//: ПроверяемыеРеквизиты = Новый Массив;
	//: НепроверяемыеРеквизиты = Новый Массив;
	
	Для Каждого Поле Из НепроверяемыеРеквизиты Цикл
		НенужноеПоле = ПроверяемыеРеквизиты.Найти(Поле);
		ПроверяемыеРеквизиты.Удалить(НенужноеПоле);
	КонецЦикла;
	
КонецПроцедуры


// Получает имя файла с расширением из полного или относительного пути к файлу.
//
// Параметры:
//  ПутьКФайлу	 - Строка - путь к файлу, из которого нужно извлеч имя файла.
// 
// Возвращаемое значение:
//  Строка - имя файла с расширением.
//
Функция ИмяФайла(ПутьКФайлу) Экспорт
	
	Файл = Новый Файл(ПутьКФайлу);
	
	Возврат Файл.Имя;
	
КонецФункции


// Создает объект для оповещения о завершении "асинхронной" процедуры.
// Является аналогом callback в других языках.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя экспортной процедуры, которая будет вызвана при вызове оповещения,
// 							она должна принимать на вход два параметра - результат и дополнительные параметры.
//  Модуль		 - Форма - модуль, в котором находится экспортная процедура.
//  Параметры	 - Произвольный - дополнительные параметры, которые будут переданы экспортной процедуре.
// 
// Возвращаемое значение:
//  Произвольный - объект оповещения о завершении.
//
Функция Новый_ОповещениеОЗавершении(ИмяПроцедуры, Модуль, Параметры = Неопределено) Экспорт
	
	Оповещение = Новый Структура(
		"ИмяПроцедуры,
		|Модуль,
		|ДополнительныеПараметры"
	);
	
	Оповещение.ИмяПроцедуры				= ИмяПроцедуры;
	Оповещение.Модуль					= Модуль;
	Оповещение.ДополнительныеПараметры	= Параметры;
	
	Оповещение = Новый ФиксированнаяСтруктура(Оповещение);
	Возврат Оповещение;
	
КонецФункции

// Оповещает о завершении работы "асинхронной" процедуры и возвращает значение в callback.
//
// Параметры:
//  Оповещение	 - Произвольный - созданное ранее оповещение о завершении (см. Новый_ОповещениеОЗавершении()).
//  Результат	 - Произвольный - возвращаемое в callback значение.
//
Процедура ВернутьРезультат(Оповещение, Результат = Неопределено) Экспорт
	
	Перем Модуль, Параметры;
	
	Модуль		= Оповещение.Модуль;
	Параметры	= Оповещение.ДополнительныеПараметры;
	Выполнить("Модуль." + Оповещение.ИмяПроцедуры + "(Результат, Параметры)");
	
КонецПроцедуры

//ИнициализироватьОбщийМодуль();

